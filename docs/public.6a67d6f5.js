let e,t,r,n,a,i,s,o,l,u,h;var p,d,c,f,m,g,y,b,x,v,w,k,S,I,C=globalThis;function N(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0})}function T(e,t){return Object.keys(t).forEach(function(r){"default"===r||"__esModule"===r||Object.prototype.hasOwnProperty.call(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[r]}})}),e}var $={},E={},R=C.parcelRequire3191;null==R&&((R=function(e){if(e in $)return $[e].exports;if(e in E){var t=E[e];delete E[e];var r={id:e,exports:{}};return $[e]=r,t.call(r.exports,r,r.exports),r.exports}var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}).register=function(e,t){E[e]=t},C.parcelRequire3191=R);var A=R.register;A("kjyEk",function(e,t){}),A("cmoHh",function(e,t){!function(e,t,r){function n(e){var t,r=this,n=(t=0xefc8249d,function(e){e=String(e);for(var r=0;r<e.length;r++){var n=.02519603282416938*(t+=e.charCodeAt(r));t=n>>>0,n-=t,n*=t,t=n>>>0,n-=t,t+=0x100000000*n}return(t>>>0)*23283064365386963e-26});r.next=function(){var e=2091639*r.s0+23283064365386963e-26*r.c;return r.s0=r.s1,r.s1=r.s2,r.s2=e-(r.c=0|e)},r.c=1,r.s0=n(" "),r.s1=n(" "),r.s2=n(" "),r.s0-=n(e),r.s0<0&&(r.s0+=1),r.s1-=n(e),r.s1<0&&(r.s1+=1),r.s2-=n(e),r.s2<0&&(r.s2+=1)}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function i(e,t){var r=new n(e),i=t&&t.state,s=r.next;return s.int32=function(){return 0x100000000*r.next()|0},s.double=function(){return s()+(2097152*s()|0)*11102230246251565e-32},s.quick=s,i&&("object"==typeof i&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.alea=i}(0,e,"function"==typeof define&&define)}),A("euRi5",function(e,t){!function(e,t,r){function n(e){var t=this,r="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:r+=e;for(var n=0;n<r.length+64;n++)t.x^=r.charCodeAt(n),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function i(e,t){var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&("object"==typeof i&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xor128=i}(0,e,"function"==typeof define&&define)}),A("hDsEw",function(e,t){!function(e,t,r){function n(e){var t=this,r="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^(e^e<<1))|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:r+=e;for(var n=0;n<r.length+64;n++)t.x^=r.charCodeAt(n),n==r.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function i(e,t){var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&("object"==typeof i&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xorwow=i}(0,e,"function"==typeof define&&define)}),A("3J2Zm",function(e,t){!function(e,t,r){function n(e){var t=this;t.next=function(){var e,r,n=t.x,a=t.i;return e=n[a],e^=e>>>7,r=e^e<<24^((e=n[a+1&7])^e>>>10)^((e=n[a+3&7])^e>>>3)^((e=n[a+4&7])^e<<7),e=n[a+7&7],e^=e<<13,r^=e^e<<9,n[a]=r,t.i=a+1&7,r};var r,n=e,a=[];if(n===(0|n))a[0]=n;else for(r=0,n=""+n;r<n.length;++r)a[7&r]=a[7&r]<<15^n.charCodeAt(r)+a[r+1&7]<<13;for(;a.length<8;)a.push(0);for(r=0;r<8&&0===a[r];++r);for(8==r?a[7]=-1:a[r],t.x=a,t.i=0,r=256;r>0;--r)t.next()}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function i(e,t){null==e&&(e=+new Date);var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&(i.x&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xorshift7=i}(0,e,"function"==typeof define&&define)}),A("6Px8M",function(e,t){!function(e,t,r){function n(e){var t=this;t.next=function(){var e,r,n=t.w,a=t.X,i=t.i;return t.w=n=n+0x61c88647|0,r=a[i+34&127],e=a[i=i+1&127],r^=r<<13,e^=e<<17,r^=r>>>15,e^=e>>>12,r=a[i]=r^e,t.i=i,r+(n^n>>>16)|0},!function(e,t){var r,n,a,i,s,o=[],l=128;for(t===(0|t)?(n=t,t=null):(t+="\0",n=0,l=Math.max(l,t.length)),a=0,i=-32;i<l;++i)t&&(n^=t.charCodeAt((i+32)%t.length)),0===i&&(s=n),n^=n<<10,n^=n>>>15,n^=n<<4,n^=n>>>13,i>=0&&(s=s+0x61c88647|0,a=0==(r=o[127&i]^=n+s)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,i=512;i>0;--i)n=o[a+34&127],r=o[a=a+1&127],n^=n<<13,r^=r<<17,n^=n>>>15,r^=r>>>12,o[a]=n^r;e.w=s,e.X=o,e.i=a}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function i(e,t){null==e&&(e=+new Date);var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&(i.X&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.xor4096=i}(0,e,"function"==typeof define&&define)}),A("lDm0S",function(e,t){!function(e,t,r){function n(e){var t=this,r="";t.next=function(){var e=t.b,r=t.c,n=t.d,a=t.a;return e=e<<25^e>>>7^r,r=r-n|0,n=n<<24^n>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^r,t.c=r=r-n|0,t.d=n<<16^r>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-0x61c88647,t.d=0x517cc1b7,e===Math.floor(e)?(t.a=e/0x100000000|0,t.b=0|e):r+=e;for(var n=0;n<r.length+20;n++)t.b^=r.charCodeAt(n),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function i(e,t){var r=new n(e),i=t&&t.state,s=function(){return(r.next()>>>0)/0x100000000};return s.double=function(){do var e=r.next()>>>11,t=(r.next()>>>0)/0x100000000,n=(e+t)/2097152;while(0===n)return n},s.int32=r.next,s.quick=s,i&&("object"==typeof i&&a(i,r),s.state=function(){return a(r,{})}),s}t&&t.exports?t.exports=i:r&&r.amd?r(function(){return i}):this.tychei=i}(0,e,"function"==typeof define&&define)});var F={};(function(){function e(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}var t,r="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,r){return e==Array.prototype||e==Object.prototype||(e[t]=r.value),e},n=function(e){e=["object"==typeof globalThis&&globalThis,e,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof C&&C];for(var t=0;t<e.length;++t){var r=e[t];if(r&&r.Math==Math)return r}throw Error("Cannot find global object")}(this);function a(e,t){if(t)e:{var a=n;e=e.split(".");for(var i=0;i<e.length-1;i++){var s=e[i];if(!(s in a))break e;a=a[s]}(t=t(i=a[e=e[e.length-1]]))!=i&&null!=t&&r(a,e,{configurable:!0,writable:!0,value:t})}}function i(t){var r="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return r?r.call(t):{next:e(t)}}function s(e){if(!(e instanceof Array)){e=i(e);for(var t,r=[];!(t=e.next()).done;)r.push(t.value);e=r}return e}a("Symbol",function(e){function t(e,t){this.h=e,r(this,"description",{configurable:!0,writable:!0,value:t})}if(e)return e;t.prototype.toString=function(){return this.h};var n="jscomp_symbol_"+(1e9*Math.random()>>>0)+"_",a=0;return function e(r){if(this instanceof e)throw TypeError("Symbol is not a constructor");return new t(n+(r||"")+"_"+a++,r)}}),a("Symbol.iterator",function(t){if(t)return t;t=Symbol("Symbol.iterator");for(var a="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),i=0;i<a.length;i++){var s=n[a[i]];"function"==typeof s&&"function"!=typeof s.prototype[t]&&r(s.prototype,t,{configurable:!0,writable:!0,value:function(){var t;return(t={next:t=e(this)})[Symbol.iterator]=function(){return this},t}})}return t});var o="function"==typeof Object.assign?Object.assign:function(e,t){for(var r=1;r<arguments.length;r++){var n=arguments[r];if(n)for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};a("Object.assign",function(e){return e||o});var l,u,h="function"==typeof Object.create?Object.create:function(e){function t(){}return t.prototype=e,new t};if("function"==typeof Object.setPrototypeOf)u=Object.setPrototypeOf;else{e:{var p={};try{p.__proto__={a:!0},J=p.a;break e}catch(e){}J=!1}u=J?function(e,t){if(e.__proto__=t,e.__proto__!==t)throw TypeError(e+" is not extensible");return e}:null}var d=u;function c(e,t){if(e.prototype=h(t.prototype),e.prototype.constructor=e,d)d(e,t);else for(var r in t)if("prototype"!=r)if(Object.defineProperties){var n=Object.getOwnPropertyDescriptor(t,r);n&&Object.defineProperty(e,r,n)}else e[r]=t[r];e.za=t.prototype}function f(){this.m=!1,this.j=null,this.i=void 0,this.h=1,this.v=this.s=0,this.l=null}function m(e){if(e.m)throw TypeError("Generator is already running");e.m=!0}function g(e,t){e.l={ma:t,na:!0},e.h=e.s||e.v}function y(e,t,r){return e.h=r,{value:t}}function b(e){this.h=new f,this.i=e}function x(e,t,r,n){try{var a=t.call(e.h.j,r);if(!(a instanceof Object))throw TypeError("Iterator result "+a+" is not an object");if(!a.done)return e.h.m=!1,a;var i=a.value}catch(t){return e.h.j=null,g(e.h,t),v(e)}return e.h.j=null,n.call(e.h,i),v(e)}function v(e){for(;e.h.h;)try{var t=e.i(e.h);if(t)return e.h.m=!1,{value:t.value,done:!1}}catch(t){e.h.i=void 0,g(e.h,t)}if(e.h.m=!1,e.h.l){if(t=e.h.l,e.h.l=null,t.na)throw t.ma;return{value:t.return,done:!0}}return{value:void 0,done:!0}}function w(e){this.next=function(t){return m(e.h),e.h.j?t=x(e,e.h.j.next,t,e.h.u):(e.h.u(t),t=v(e)),t},this.throw=function(t){return m(e.h),e.h.j?t=x(e,e.h.j.throw,t,e.h.u):(g(e.h,t),t=v(e)),t},this.return=function(t){var r;return m(e.h),(r=e.h.j)?x(e,"return"in r?r.return:function(e){return{value:e,done:!0}},t,e.h.return):(e.h.return(t),v(e))},this[Symbol.iterator]=function(){return this}}function k(e){var t=new w(new b(e));function r(e){return t.next(e)}function n(e){return t.throw(e)}return new Promise(function(e,a){!function t(i){i.done?e(i.value):Promise.resolve(i.value).then(r,n).then(t,a)}(t.next())})}function S(e){return e||Array.prototype.fill}f.prototype.u=function(e){this.i=e},f.prototype.return=function(e){this.l={return:e},this.h=this.v},a("Promise",function(e){function t(e){this.i=0,this.j=void 0,this.h=[],this.u=!1;var t=this.l();try{e(t.resolve,t.reject)}catch(e){t.reject(e)}}function r(){this.h=null}function a(e){return e instanceof t?e:new t(function(t){t(e)})}if(e)return e;r.prototype.i=function(e){if(null==this.h){this.h=[];var t=this;this.j(function(){t.m()})}this.h.push(e)};var s=n.setTimeout;r.prototype.j=function(e){s(e,0)},r.prototype.m=function(){for(;this.h&&this.h.length;){var e=this.h;this.h=[];for(var t=0;t<e.length;++t){var r=e[t];e[t]=null;try{r()}catch(e){this.l(e)}}}this.h=null},r.prototype.l=function(e){this.j(function(){throw e})},t.prototype.l=function(){function e(e){return function(n){r||(r=!0,e.call(t,n))}}var t=this,r=!1;return{resolve:e(this.I),reject:e(this.m)}},t.prototype.I=function(e){if(e===this)this.m(TypeError("A Promise cannot resolve to itself"));else if(e instanceof t)this.L(e);else{switch(typeof e){case"object":var r=null!=e;break;case"function":r=!0;break;default:r=!1}r?this.F(e):this.s(e)}},t.prototype.F=function(e){var t=void 0;try{t=e.then}catch(e){this.m(e);return}"function"==typeof t?this.M(t,e):this.s(e)},t.prototype.m=function(e){this.v(2,e)},t.prototype.s=function(e){this.v(1,e)},t.prototype.v=function(e,t){if(0!=this.i)throw Error("Cannot settle("+e+", "+t+"): Promise already settled in state"+this.i);this.i=e,this.j=t,2===this.i&&this.K(),this.H()},t.prototype.K=function(){var e=this;s(function(){if(e.D()){var t=n.console;void 0!==t&&t.error(e.j)}},1)},t.prototype.D=function(){if(this.u)return!1;var e=n.CustomEvent,t=n.Event,r=n.dispatchEvent;return void 0===r||("function"==typeof e?e=new e("unhandledrejection",{cancelable:!0}):"function"==typeof t?e=new t("unhandledrejection",{cancelable:!0}):(e=n.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection",!1,!0,e),e.promise=this,e.reason=this.j,r(e))},t.prototype.H=function(){if(null!=this.h){for(var e=0;e<this.h.length;++e)o.i(this.h[e]);this.h=null}};var o=new r;return t.prototype.L=function(e){var t=this.l();e.T(t.resolve,t.reject)},t.prototype.M=function(e,t){var r=this.l();try{e.call(t,r.resolve,r.reject)}catch(e){r.reject(e)}},t.prototype.then=function(e,r){function n(e,t){return"function"==typeof e?function(t){try{a(e(t))}catch(e){i(e)}}:t}var a,i,s=new t(function(e,t){a=e,i=t});return this.T(n(e,a),n(r,i)),s},t.prototype.catch=function(e){return this.then(void 0,e)},t.prototype.T=function(e,t){function r(){switch(n.i){case 1:e(n.j);break;case 2:t(n.j);break;default:throw Error("Unexpected state: "+n.i)}}var n=this;null==this.h?o.i(r):this.h.push(r),this.u=!0},t.resolve=a,t.reject=function(e){return new t(function(t,r){r(e)})},t.race=function(e){return new t(function(t,r){for(var n=i(e),s=n.next();!s.done;s=n.next())a(s.value).T(t,r)})},t.all=function(e){var r=i(e),n=r.next();return n.done?a([]):new t(function(e,t){var i=[],s=0;do i.push(void 0),s++,a(n.value).T(function(t){return function(r){i[t]=r,0==--s&&e(i)}}(i.length-1),t),n=r.next();while(!n.done)})},t}),a("Array.prototype.keys",function(e){return e||function(){var e,t,r,n,a;return e=this,t=function(e){return e},e instanceof String&&(e+=""),r=0,n=!1,(a={next:function(){if(!n&&r<e.length){var a=r++;return{value:t(a,e[a]),done:!1}}return n=!0,{done:!0,value:void 0}}})[Symbol.iterator]=function(){return a},a}}),a("Array.prototype.fill",function(e){return e||function(e,t,r){var n=this.length||0;for(0>t&&(t=Math.max(0,n+t)),(null==r||r>n)&&(r=n),0>(r=Number(r))&&(r=Math.max(0,n+r)),t=Number(t||0);t<r;t++)this[t]=e;return this}}),a("Int8Array.prototype.fill",S),a("Uint8Array.prototype.fill",S),a("Uint8ClampedArray.prototype.fill",S),a("Int16Array.prototype.fill",S),a("Uint16Array.prototype.fill",S),a("Int32Array.prototype.fill",S),a("Uint32Array.prototype.fill",S),a("Float32Array.prototype.fill",S),a("Float64Array.prototype.fill",S),a("Object.is",function(e){return e||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}}),a("Array.prototype.includes",function(e){return e||function(e,t){var r=this;r instanceof String&&(r=String(r));var n=r.length;for(0>(t=t||0)&&(t=Math.max(t+n,0));t<n;t++){var a=r[t];if(a===e||Object.is(a,e))return!0}return!1}}),a("String.prototype.includes",function(e){return e||function(e,t){if(null==this)throw TypeError("The 'this' value for String.prototype.includes must not be null or undefined");if(e instanceof RegExp)throw TypeError("First argument to String.prototype.includes must not be a regular expression");return -1!==this.indexOf(e,t||0)}});var I=this||self;function N(e,t){e=e.split(".");var r,n=I;for((e[0]in n)||void 0===n.execScript||n.execScript("var "+e[0]);e.length&&(r=e.shift());)e.length||void 0===t?n=n[r]&&n[r]!==Object.prototype[r]?n[r]:n[r]={}:n[r]=t}function T(e){var t;return(t=I.navigator)&&(t=t.userAgent)||(t=""),-1!=t.indexOf(e)}var $=Array.prototype.map?function(e,t){return Array.prototype.map.call(e,t,void 0)}:function(e,t){for(var r=e.length,n=Array(r),a="string"==typeof e?e.split(""):e,i=0;i<r;i++)i in a&&(n[i]=t.call(void 0,a[i],i,e));return n},E={},R=null;function A(){if(!R){R={};for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),t=["+/=","+/","-_=","-_.","-_"],r=0;5>r;r++){var n=e.concat(t[r].split(""));E[r]=n;for(var a=0;a<n.length;a++){var i=n[a];void 0===R[i]&&(R[i]=a)}}}}var F="undefined"!=typeof Uint8Array,_=!(T("Trident")||T("MSIE"))&&"function"==typeof I.btoa;function D(e){if(!_){var t;void 0===t&&(t=0),A(),t=E[t];for(var r=Array(Math.floor(e.length/3)),n=t[64]||"",a=0,i=0;a<e.length-2;a+=3){var s=e[a],o=e[a+1],l=e[a+2],u=t[s>>2];s=t[(3&s)<<4|o>>4],o=t[(15&o)<<2|l>>6],l=t[63&l],r[i++]=u+s+o+l}switch(u=0,l=n,e.length-a){case 2:l=t[(15&(u=e[a+1]))<<2]||n;case 1:e=e[a],r[i]=t[e>>2]+t[(3&e)<<4|u>>4]+l+n}return r.join("")}for(t="";10240<e.length;)t+=String.fromCharCode.apply(null,e.subarray(0,10240)),e=e.subarray(10240);return btoa(t+=String.fromCharCode.apply(null,e))}var O=RegExp("[-_.]","g");function M(e){switch(e){case"-":return"+";case"_":return"/";case".":return"=";default:return""}}function z(e){if(!_){var t,r,n,a,i;return(n=3*(r=(t=e).length)/4)%3?n=Math.floor(n):-1!="=.".indexOf(t[r-1])&&(n=-1!="=.".indexOf(t[r-2])?n-2:n-1),a=new Uint8Array(n),i=0,function(e,t){function r(t){for(;n<e.length;){var r=e.charAt(n++),a=R[r];if(null!=a)return a;if(!/^[\s\xa0]*$/.test(r))throw Error("Unknown base64 encoding at char: "+r)}return t}A();for(var n=0;;){var a=r(-1),i=r(0),s=r(64),o=r(64);if(64===o&&-1===a)break;t(a<<2|i>>4),64!=s&&(t(i<<4&240|s>>2),64!=o&&t(s<<6&192|o))}}(t,function(e){a[i++]=e}),i!==n?a.subarray(0,i):a}O.test(e)&&(e=e.replace(O,M)),e=atob(e);for(var s=new Uint8Array(e.length),o=0;o<e.length;o++)s[o]=e.charCodeAt(o);return s}function P(){return ee||(ee=new Uint8Array(0))}var L={},B="function"==typeof Uint8Array.prototype.slice,W=0,U=0;function V(e){var t=0>e,r=(e=Math.abs(e))>>>0;e=Math.floor((e-r)/0x100000000),t&&(t=(r=i(H(r,e))).next().value,e=r.next().value,r=t),W=r>>>0,U=e>>>0}var G="function"==typeof BigInt;function H(e,t){return t=~t,e?e=~e+1:t+=1,[e,t]}function j(e,t){this.i=e>>>0,this.h=t>>>0}function K(e){if(!e)return et||(et=new j(0,0));if(!/^-?\d+$/.test(e))return null;if(16>e.length)V(Number(e));else if(G)W=Number((e=BigInt(e))&BigInt(0xffffffff))>>>0,U=Number(e>>BigInt(32)&BigInt(0xffffffff));else{var t=+("-"===e[0]);U=W=0;for(var r=e.length,n=t,a=(r-t)%6+t;a<=r;n=a,a+=6)n=Number(e.slice(n,a)),U*=1e6,0x100000000<=(W=1e6*W+n)&&(U+=W/0x100000000|0,W%=0x100000000);t&&(e=(t=i(H(W,U))).next().value,t=t.next().value,W=e,U=t)}return new j(W,U)}function q(e,t){return Error("Invalid wire type: "+e+" (at position "+t+")")}function X(){return Error("Failed to read varint, encoding is invalid.")}function Y(e,t){return Error("Tried to read past the end of the data "+t+" > "+e)}function Z(){throw Error("Invalid UTF8")}function Q(e,t){return t=String.fromCharCode.apply(null,t),null==e?t:e+t}var J,ee,et,er,en,ea=void 0,ei="undefined"!=typeof TextDecoder,es="undefined"!=typeof TextEncoder;function eo(e){if(e!==L)throw Error("illegal external caller")}function el(e,t){if(eo(t),this.V=e,null!=e&&0===e.length)throw Error("ByteString should be constructed with non-empty values")}function eu(){return eD||(eD=new el(null,L))}function eh(e){eo(L);var t=e.V;return null==(t=null==t||F&&null!=t&&t instanceof Uint8Array?t:"string"==typeof t?z(t):null)?t:e.V=t}function ep(e,t){this.i=null,this.m=!1,this.h=this.j=this.l=0,ed(this,e,t)}function ed(e,t,r){e.S=void 0!==(r=void 0===r?{}:r).S&&r.S,t&&(e.i=(t=function(e){if("string"==typeof e)return{buffer:z(e),C:!1};if(Array.isArray(e))return{buffer:new Uint8Array(e),C:!1};if(e.constructor===Uint8Array)return{buffer:e,C:!1};if(e.constructor===ArrayBuffer)return{buffer:new Uint8Array(e),C:!1};if(e.constructor===el)return{buffer:eh(e)||P(),C:!0};if(e instanceof Uint8Array)return{buffer:new Uint8Array(e.buffer,e.byteOffset,e.byteLength),C:!1};throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, a ByteString or an Array of numbers")}(t)).buffer,e.m=t.C,e.l=0,e.j=e.i.length,e.h=e.l)}function ec(e,t){if(e.h=t,t>e.j)throw Y(e.j,t)}function ef(e){var t=e.i,r=e.h,n=t[r++],a=127&n;if(128&n&&(a|=(127&(n=t[r++]))<<7,128&n&&(a|=(127&(n=t[r++]))<<14,128&n&&(a|=(127&(n=t[r++]))<<21,128&n&&(a|=(n=t[r++])<<28,128&n&&128&t[r++]&&128&t[r++]&&128&t[r++]&&128&t[r++]&&128&t[r++])))))throw X();return ec(e,r),a}function em(e,t){if(0>t)throw Error("Tried to read a negative byte length: "+t);var r=e.h,n=r+t;if(n>e.j)throw Y(t,e.j-r);return e.h=n,r}ep.prototype.reset=function(){this.h=this.l};var eg=[];function ey(){this.h=[]}function eb(e,t,r){for(;0<r||127<t;)e.h.push(127&t|128),t=(t>>>7|r<<25)>>>0,r>>>=7;e.h.push(t)}function ex(e,t){for(;127<t;)e.h.push(127&t|128),t>>>=7;e.h.push(t)}function ev(e,t){if(eg.length){var r=eg.pop();ed(r,e,t),e=r}else e=new ep(e,t);this.h=e,this.j=this.h.h,this.i=this.l=-1,this.setOptions(t)}function ew(e){var t=e.h;if(t.h==t.j)return!1;e.j=e.h.h;var r=ef(e.h)>>>0;if(t=r>>>3,!(0<=(r&=7)&&5>=r))throw q(r,e.j);if(1>t)throw Error("Invalid field number: "+t+" (at position "+e.j+")");return e.l=t,e.i=r,!0}ey.prototype.length=function(){return this.h.length},ey.prototype.end=function(){var e=this.h;return this.h=[],e},ev.prototype.setOptions=function(e){e=void 0===e?{}:e,this.ca=void 0!==e.ca&&e.ca},ev.prototype.reset=function(){this.h.reset(),this.j=this.h.h,this.i=this.l=-1};var ek=[];function eS(){this.j=[],this.i=0,this.h=new ey}function eI(e,t){0!==t.length&&(e.j.push(t),e.i+=t.length)}var eC="function"==typeof Symbol&&"symbol"==typeof Symbol()?Symbol():void 0;function eN(e,t){return eC?e[eC]|=t:void 0!==e.A?e.A|=t:(Object.defineProperties(e,{A:{value:t,configurable:!0,writable:!0,enumerable:!1}}),t)}function eT(e,t){eC?e[eC]&&(e[eC]&=~t):void 0!==e.A&&(e.A&=~t)}function e$(e){var t;return null==(t=eC?e[eC]:e.A)?0:t}function eE(e,t){eC?e[eC]=t:void 0!==e.A?e.A=t:Object.defineProperties(e,{A:{value:t,configurable:!0,writable:!0,enumerable:!1}})}function eR(e,t){eE(t,(0|e)&-51)}function eA(e,t){eE(t,(18|e)&-41)}var eF={};function e_(e){return null!==e&&"object"==typeof e&&!Array.isArray(e)&&e.constructor===Object}var eD,eO,eM=[];function ez(e){if(2&e$(e.o))throw Error("Cannot mutate an immutable Message")}function eP(e){var t=e.length;(t=t?e[t-1]:void 0)&&e_(t)?t.g=1:(t={},e.push((t.g=1,t)))}function eL(e){var t=e.i+e.G;return e.B||(e.B=e.o[t]={})}function eB(e,t){return -1===t?null:t>=e.i?e.B?e.B[t]:void 0:e.o[t+e.G]}function eW(e,t,r,n){ez(e),eU(e,t,r,n)}function eU(e,t,r,n){e.j&&(e.j=void 0),t>=e.i||n?eL(e)[t]=r:(e.o[t+e.G]=r,(e=e.B)&&t in e&&delete e[t])}function eV(e,t,r,n){var a=eB(e,t);Array.isArray(a)||(a=eO);var i=e$(a);if(1&i||eN(a,1),n)2&i||eN(a,2),1&r||Object.freeze(a);else{n=!(2&r);var s,o=2&i;1&r||!o?n&&16&i&&!o&&eT(a,16):(eN(s=Array.prototype.slice.call(a),1),eU(e,t,a=s))}return a}function eG(e,t){var r=eB(e,t),n=null==r?r:"number"==typeof r||"NaN"===r||"Infinity"===r||"-Infinity"===r?Number(r):void 0;return null!=n&&n!==r&&eU(e,t,n),n}function eH(e,t,r,n,a){e.h||(e.h={});var i=e.h[r],s=eV(e,r,3,a);if(!i){var o=s;i=[];var l=!!(16&e$(e.o));s=!!(2&e$(o));var u=o;!a&&s&&(o=Array.prototype.slice.call(o));for(var h=s,p=0;p<o.length;p++){var d=o[p],c=t,f=!1;if(void 0!==(d=Array.isArray(d)?new c(d):f?new c:void 0)){var m=f=e$(c=d.o);s&&(m|=2),l&&(m|=16),m!=f&&eE(c,m),c=m,h=h||!!(2&c),i.push(d)}}return e.h[r]=i,t=33|(l=e$(o)),l!=(t=h?-9&t:8|t)&&(Object.isFrozen(h=o)&&(h=Array.prototype.slice.call(h)),eE(h,t),o=h),u!==o&&eU(e,r,o),(a||n&&s)&&eN(i,2),n&&Object.freeze(i),i}return a||(a=Object.isFrozen(i),n&&!a?Object.freeze(i):!n&&a&&(i=Array.prototype.slice.call(i),e.h[r]=i)),i}function ej(e,t,r){var n=!!(2&e$(e.o));if(t=eH(e,t,r,n,n),e=eV(e,r,3,n),!(n||8&e$(e))){for(n=0;n<t.length;n++){if(2&e$((r=t[n]).o)){var a=e2(r,!1);a.j=r}else a=r;r!==a&&(t[n]=a,e[n]=a.o)}eN(e,8)}return t}function eK(e,t,r){if(null!=r&&"number"!=typeof r)throw Error("Value of float/double field must be a number|null|undefined, found "+typeof r+": "+r);eW(e,t,r)}function eq(e,t,r,n,a){ez(e);var i=eH(e,r,t,!1,!1);return r=null!=n?n:new r,e=eV(e,t,2,!1),void 0!=a?(i.splice(a,0,r),e.splice(a,0,r.o)):(i.push(r),e.push(r.o)),r.C()&&eT(e,8),r}function eX(e,t){return null==e?t:e}function eY(e,t,r){return r=void 0===r?0:r,eX(eG(e,t),r)}function eZ(e,t,r,n){var a=e$(e);n=n?!!(16&a):void 0,e=Array.prototype.slice.call(e);for(var i=0;i<e.length;i++)e[i]=function e(t,r,n,a){if(null!=t){if(Array.isArray(t))t=eZ(t,r,n,void 0!==a);else if(e_(t)){var i,s={};for(i in t)s[i]=e(t[i],r,n,a);t=s}else t=r(t,a);return t}}(e[i],t,r,n);return r(a,e),e}function eQ(e){return e.ja===eF?e.toJSON():function(e){switch(typeof e){case"number":return isFinite(e)?e:String(e);case"object":if(e)if(Array.isArray(e)){if(0!=(128&e$(e)))return eP(e=Array.prototype.slice.call(e)),e}else{if(F&&null!=e&&e instanceof Uint8Array)return D(e);if(e instanceof el){var t=e.V;return null==t?"":"string"==typeof t?t:e.V=D(t)}}}return e}(e)}function eJ(e,t){128&e&&eP(t)}function e0(e,t,r,n,a,i,s){if(e=e.h&&e.h[r]){var o;if(2&(n=e$(e))?n=e:(eA(n,i=$(e,e1)),Object.freeze(i),n=i),ez(t),s=null==n?eO:(eN(o=[],1),o),null!=n){for(e=0,i=!!n.length;e<n.length;e++){var l=n[e];i=i&&!(2&e$(l.o)),s[e]=l.o}i=8*!!i|1,((e=e$(s))&i)!==i&&(Object.isFrozen(s)&&(s=Array.prototype.slice.call(s)),eE(s,e|i)),t.h||(t.h={}),t.h[r]=n}else t.h&&(t.h[r]=void 0);eU(t,r,s,a)}else eW(t,r,function e(t,r,n){if(n=void 0===n?eA:n,null!=t){if(F&&t instanceof Uint8Array)return t.length?new el(new Uint8Array(t),L):eu();if(Array.isArray(t)){var a=e$(t);return 2&a||(r&&!(32&a)&&(16&a||0===a)?eE(t,2|a):4&(r=e$(t=eZ(t,e,4&a?eA:n,!0)))&&2&r&&Object.freeze(t)),t}return t.ja===eF?e1(t):t}}(n,i,s),a)}function e1(e){return 2&e$(e.o)||eN((e=e2(e,!0)).o,2),e}function e2(e,r){var n=e.o,a=[];eN(a,16);var i=e.constructor.h;if(i&&a.push(i),i=e.B){a.length=n.length,a.fill(void 0,a.length,n.length);var s={};a[a.length-1]=s}0!=(128&e$(n))&&eP(a),r=r||e.C()?eA:eR,s=e.constructor,t=a,a=new s(a),t=void 0,e.R&&(a.R=e.R.slice()),s=!!(16&e$(n));for(var o=i?n.length-1:n.length,l=0;l<o;l++)e0(e,a,l-e.G,n[l],!1,s,r);if(i)for(var u in i)e0(e,a,+u,i[u],!0,s,r);return a}function e3(e,r,n){null==e&&(e=t),t=void 0;var a,i=this.constructor.i||0,s=0<i,o=this.constructor.h,l=!1;if(null==e){var u=48,h=!0;s&&(i=0,u|=128),eE(e=o?[o]:[],u)}else{if(!Array.isArray(e)||o&&o!==e[0])throw Error();var p=u=eN(e,0);if((h=0!=(16&p))&&((l=0!=(32&p))||(p|=32)),s){if(128&p)i=0;else if(0<e.length){var d=e[e.length-1];if(e_(d)&&"g"in d){i=0,p|=128,delete d.g;var c,f=!0;for(c in d){f=!1;break}f&&e.pop()}}}else if(128&p)throw Error();u!==p&&eE(e,p)}this.G=(o?0:-1)-i,this.h=void 0,this.o=e;e:{if(i=(o=this.o.length)-1,o&&e_(o=this.o[i])){this.B=o,this.i=i-this.G;break e}void 0!==r&&-1<r?(this.i=Math.max(r,i+1-this.G),this.B=void 0):this.i=Number.MAX_VALUE}if(!s&&this.B&&"g"in this.B)throw Error('Unexpected "g" flag in sparse object of message that is not a group type.');if(n)for(r=h&&!l&&!0,s=this.i,h=0;h<n.length;h++)(l=n[h])<s?(l+=this.G,(i=e[l])?e4(i,r):e[l]=eO):(a||(a=eL(this)),(i=a[l])?e4(i,r):a[l]=eO)}function e4(e,t){if(Array.isArray(e)){var r=e$(e),n=1;!t||2&r||(n|=16),(r&n)!==n&&eE(e,r|n)}}function e6(e,t,r){if(r){var n,a={};for(n in r){var i=r[n],s=i.ra;s||(a.J=i.xa||i.oa.W,i.ia?(a.aa=tr(i.ia),s=function(e){return function(t,r,n){return e.J(t,r,n,e.aa)}}(a)):i.ka?(a.Z=tn(i.da.P,i.ka),s=function(e){return function(t,r,n){return e.J(t,r,n,e.Z)}}(a)):s=a.J,i.ra=s),s(t,e,i.da),a={J:a.J,aa:a.aa,Z:a.Z}}}var o=e;if(o=o.R){eI(t,t.h.end());for(var l=0;l<o.length;l++)eI(t,eh(o[l])||P())}}eE(eM,23),eO=Object.freeze(eM),e3.prototype.toJSON=function(){return eZ(this.o,eQ,eJ)},e3.prototype.C=function(){return!!(2&e$(this.o))},e3.prototype.ja=eF,e3.prototype.toString=function(){return this.o.toString()};var e5=Symbol();function e8(e,t,r){return e[e5]||(e[e5]=function(e,n){return t(e,n,r)})}function e7(e){var t=e[e5];if(!t){var r=tm(e);t=function(e,t){return tg(e,t,r)},e[e5]=t}return t}function e9(e,t){var r=e[t];return"function"==typeof r&&0===r.length&&(r=r(),e[t]=r),Array.isArray(r)&&(th in r||ta in r||0<r.length&&"function"==typeof r[0])?r:void 0}function te(e,t,r,n,a,i){t.P=e[0];var s=1;if(e.length>s&&"number"!=typeof e[s]){var o=e[s++];r(t,o)}for(;s<e.length;){r=e[s++];for(var l=s+1;l<e.length&&"number"!=typeof e[l];)l++;switch(o=e[s++],l-=s){case 0:n(t,r,o);break;case 1:(l=e9(e,s))?(s++,a(t,r,o,l)):n(t,r,o,e[s++]);break;case 2:a(t,r,o,l=e9(e,l=s++),e[s++]);break;case 3:i(t,r,o,e[s++],e[s++],e[s++]);break;case 4:i(t,r,o,e[s++],e[s++],e[s++],e[s++]);break;default:throw Error("unexpected number of binary field arguments: "+l)}}return t}var tt=Symbol();function tr(e){var t=e[tt];if(!t){var r=tu(e);t=function(e,t){return ty(e,t,r)},e[tt]=t}return t}function tn(e,t){var r=e[tt];return r||(r=function(e,r){return e6(e,r,t)},e[tt]=r),r}var ta=Symbol();function ti(e,t){e.push(t)}function ts(e,t,r){e.push(t,r.W)}function to(e,t,r,n){var a=tr(n),i=tu(n).P,s=r.W;e.push(t,function(e,t,r){return s(e,t,r,i,a)})}function tl(e,t,r,n,a,i){var s=tn(n,i),o=r.W;e.push(t,function(e,t,r){return o(e,t,r,n,s)})}function tu(e){var t=e[ta];return t||(t=te(e,e[ta]=[],ti,ts,to,tl),th in e&&ta in e&&(e.length=0)),t}var th=Symbol();function tp(e,t){e[0]=t}function td(e,t,r,n){var a=r.U;e[t]=n?function(e,t,r){return a(e,t,r,n)}:a}function tc(e,t,r,n,a){var i=r.U,s=e7(n),o=tm(n).P;e[t]=function(e,t,r){return i(e,t,r,o,s,a)}}function tf(e,t,r,n,a,i,s){var o=r.U,l=e8(n,a,i);e[t]=function(e,t,r){return o(e,t,r,n,l,s)}}function tm(e){var t=e[th];return t||(t=te(e,e[th]={},tp,td,tc,tf),th in e&&ta in e&&(e.length=0)),t}function tg(e,t,r){for(;ew(t)&&4!=t.i;){var n=t.l,a=r[n];if(!a){var i=r[0];i&&(i=i[n])&&(a=r[n]=function(e){var t,r=(t=e.ia)?e7(t):(t=e.wa)?e8(e.da.P,t,e.ka):void 0,n=e.da,a=e.oa.U;return r?function(e,t){return a(e,t,n,r)}:function(e,t){return a(e,t,n)}}(i))}if(!a||!a(t,e,n)){a=t,n=e,i=a.j,function e(t){switch(t.i){case 0:if(0!=t.i)e(t);else e:{t=t.h;for(var r=t.h,n=r+10,a=t.i;r<n;)if(0==(128&a[r++])){ec(t,r);break e}throw X()}break;case 1:ec(t=t.h,t.h+8);break;case 2:2!=t.i?e(t):(r=ef(t.h)>>>0,ec(t=t.h,t.h+r));break;case 5:ec(t=t.h,t.h+4);break;case 3:for(r=t.l;;){if(!ew(t))throw Error("Unmatched start-group tag: stream EOF");if(4==t.i){if(t.l!=r)throw Error("Unmatched end-group tag");break}e(t)}break;default:throw q(t.i,t.j)}}(a);var s=a;if(!s.ca){if(a=s.h.h-i,s.h.h=i,s=s.h,0==a)a=eu();else{if(i=em(s,a),s.S&&s.m)a=s.i.subarray(i,i+a);else{s=s.i;var o=i;a=o===(a=i+a)?P():B?s.slice(o,a):new Uint8Array(s.subarray(o,a))}a=0==a.length?eu():new el(a,L)}(i=n.R)?i.push(a):n.R=[a]}}}return e}function ty(e,t,r){for(var n=r.length,a=1==n%2,i=+!!a;i<n;i+=2)(0,r[i+1])(t,e,r[i]);e6(e,t,a?r[0]:void 0)}function tb(e,t){return{U:e,W:t}}var tx=tb(function(e,t,r){if(5!==e.i)return!1;var n=(e=e.h).i,a=e.h,i=n[a],s=n[a+1],o=n[a+2];return n=n[a+3],ec(e,e.h+4),e=2*((s=(0|i|s<<8|o<<16|n<<24)>>>0)>>31)+1,i=s>>>23&255,s&=8388607,eW(t,r,255==i?s?NaN:1/0*e:0==i?1401298464324817e-60*e*s:e*Math.pow(2,i-150)*(s+8388608)),!0},function(e,t,r){if(null!=(t=eG(t,r))){ex(e.h,8*r+5),e=e.h;var n=+t;0===n?0<1/n?W=U=0:(U=0,W=0x80000000):isNaN(n)?(U=0,W=0x7fffffff):34028234663852886e22<(n=(r=0>n?-0x80000000:0)?-n:n)?(U=0,W=(0x7f800000|r)>>>0):11754943508222875e-54>n?(U=0,W=(r|(n=Math.round(n/1401298464324817e-60)))>>>0):(t=Math.floor(Math.log(n)/Math.LN2),n*=Math.pow(2,-t),0x1000000<=(n=Math.round(8388608*n))&&++t,U=0,W=(r|t+127<<23|8388607&n)>>>0),r=W,e.h.push(r>>>0&255),e.h.push(r>>>8&255),e.h.push(r>>>16&255),e.h.push(r>>>24&255)}}),tv=tb(function(e,t,r){if(0!==e.i)return!1;var n=e.h,a=0,i=e=0,s=n.i,o=n.h;do{var l=s[o++];a|=(127&l)<<i,i+=7}while(32>i&&128&l)for(32<i&&(e|=(127&l)>>4),i=3;32>i&&128&l;i+=7)e|=(127&(l=s[o++]))<<i;if(ec(n,o),128>l)n=a>>>0,(e=0x80000000&(l=e>>>0))&&(l=~l>>>0,0==(n=~n+1>>>0)&&(l=l+1>>>0)),n=0x100000000*l+(n>>>0);else throw X();return eW(t,r,e?-n:n),!0},function(e,t,r){null!=(t=eB(t,r))&&("string"==typeof t&&K(t),null!=t&&(ex(e.h,8*r),"number"==typeof t?(e=e.h,V(t),eb(e,W,U)):(r=K(t),eb(e.h,r.i,r.h))))}),tw=tb(function(e,t,r){return 0===e.i&&(eW(t,r,ef(e.h)),!0)},function(e,t,r){if(null!=(t=eB(t,r))&&null!=t)if(ex(e.h,8*r),e=e.h,0<=(r=t))ex(e,r);else{for(t=0;9>t;t++)e.h.push(127&r|128),r>>=7;e.h.push(1)}}),tk=tb(function(e,t,r){if(2!==e.i)return!1;var n=ef(e.h)>>>0,a=em(e=e.h,n);if(e=e.i,ei){var i,s=e;(i=er)||(i=er=new TextDecoder("utf-8",{fatal:!0})),e=a+n,s=0===a&&e===s.length?s:s.subarray(a,e);try{var o=i.decode(s)}catch(e){if(void 0===ea){try{i.decode(new Uint8Array([128]))}catch(e){}try{i.decode(new Uint8Array([97])),ea=!0}catch(e){ea=!1}}throw ea||(er=void 0),e}}else{n=(o=a)+n,a=[];for(var l,u,h=null;o<n;)128>(l=e[o++])?a.push(l):224>l?o>=n?Z():(u=e[o++],194>l||128!=(192&u)?(o--,Z()):a.push((31&l)<<6|63&u)):240>l?o>=n-1?Z():128!=(192&(u=e[o++]))||224===l&&160>u||237===l&&160<=u||128!=(192&(s=e[o++]))?(o--,Z()):a.push((15&l)<<12|(63&u)<<6|63&s):244>=l?o>=n-2?Z():128!=(192&(u=e[o++]))||0!=(l<<28)+(u-144)>>30||128!=(192&(s=e[o++]))||128!=(192&(i=e[o++]))?(o--,Z()):(l=((7&l)<<18|(63&u)<<12|(63&s)<<6|63&i)-65536,a.push((l>>10&1023)+55296,(1023&l)+56320)):Z(),8192<=a.length&&(h=Q(h,a),a.length=0);o=Q(h,a)}return eW(t,r,o),!0},function(e,t,r){if(null!=(t=eB(t,r))){if(es){0;t=(en||(en=new TextEncoder)).encode(t)}else{for(var n=0,a=new Uint8Array(3*t.length),i=0;i<t.length;i++){var s=t.charCodeAt(i);if(128>s)a[n++]=s;else{if(2048>s)a[n++]=s>>6|192;else{if(55296<=s&&57343>=s){if(56319>=s&&i<t.length){var o=t.charCodeAt(++i);if(56320<=o&&57343>=o){s=1024*(s-55296)+o-56320+65536,a[n++]=s>>18|240,a[n++]=s>>12&63|128,a[n++]=s>>6&63|128,a[n++]=63&s|128;continue}i--}0;s=65533}a[n++]=s>>12|224,a[n++]=s>>6&63|128}a[n++]=63&s|128}}t=n===a.length?a:a.subarray(0,n)}ex(e.h,8*r+2),ex(e.h,t.length),eI(e,e.h.end()),eI(e,t)}}),tS=tb(function(e,t,r,n,a){if(2!==e.i)return!1;t=eq(t,r,n),r=e.h.j,n=ef(e.h)>>>0;var i=e.h.h+n,s=i-r;if(0>=s&&(e.h.j=i,a(t,e,void 0,void 0,void 0),s=i-e.h.h),s)throw Error("Message parsing ended unexpectedly. Expected to read "+(n+" bytes, instead read ")+(n-s)+" bytes, either the data ended unexpectedly or the message misreported its own length");return e.h.h=i,e.h.j=r,!0},function(e,t,r,n,a){if(null!=(t=ej(t,n,r)))for(n=0;n<t.length;n++){var i=e;ex(i.h,8*r+2);var s=i.h.end();eI(i,s),s.push(i.i),i=s,a(t[n],e),s=e;var o=i.pop();for(o=s.i+s.h.length()-o;127<o;)i.push(127&o|128),o>>>=7,s.i++;i.push(o),s.i++}});function tI(e){return function(t,r){e:{if(ek.length){var n=ek.pop();n.setOptions(r),ed(n.h,t,r),t=n}else t=new ev(t,r);try{var a=tm(e),i=tg(new a.P,t,a);break e}finally{(a=t.h).i=null,a.m=!1,a.l=0,a.j=0,a.h=0,a.S=!1,t.l=-1,t.i=-1,100>ek.length&&ek.push(t)}}return i}}function tC(e){return function(){var t=new eS;ty(this,t,tu(e)),eI(t,t.h.end());for(var r=new Uint8Array(t.i),n=t.j,a=n.length,i=0,s=0;s<a;s++){var o=n[s];r.set(o,i),i+=o.length}return t.j=[r],r}}function tN(e){e3.call(this,e)}c(tN,e3);var tT=[tN,1,tw,2,tx,3,tk,4,tk];function t$(e){e3.call(this,e,-1,tE)}tN.prototype.l=tC(tT),c(t$,e3),t$.prototype.addClassification=function(e,t){return eq(this,1,tN,e,t),this};var tE=[1],tR=tI([t$,1,tS,tT]);function tA(e){e3.call(this,e)}c(tA,e3);var tF=[tA,1,tx,2,tx,3,tx,4,tx,5,tx];function t_(e){e3.call(this,e,-1,tD)}tA.prototype.l=tC(tF),c(t_,e3);var tD=[1],tO=tI([t_,1,tS,tF]);function tM(e){e3.call(this,e)}c(tM,e3);var tz=[tM,1,tx,2,tx,3,tx,4,tx,5,tx,6,tv],tP=tI(tz);function tL(e,t,r){if(r=e.createShader(0===r?e.VERTEX_SHADER:e.FRAGMENT_SHADER),e.shaderSource(r,t),e.compileShader(r),!e.getShaderParameter(r,e.COMPILE_STATUS))throw Error("Could not compile WebGL shader.\n\n"+e.getShaderInfoLog(r));return r}function tB(e){return{x:eY(e,1),y:eY(e,2),z:eY(e,3),visibility:null!=eG(e,4)?eY(e,4):void 0}}function tW(e){return ej(tO(e),tA,1).map(tB)}function tU(e,t){this.i=e,this.h=t,this.m=0}function tV(e,t,r){return(function(e,t){var r=e.h;if(void 0===e.s){var n=tL(r,"\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }",0),a=tL(r,"\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }",1),i=r.createProgram();if(r.attachShader(i,n),r.attachShader(i,a),r.linkProgram(i),!r.getProgramParameter(i,r.LINK_STATUS))throw Error("Could not compile WebGL program.\n\n"+r.getProgramInfoLog(i));n=e.s=i,r.useProgram(n),a=r.getUniformLocation(n,"sampler0"),e.l={O:r.getAttribLocation(n,"aVertex"),N:r.getAttribLocation(n,"aTex"),ya:a},e.v=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,e.v),r.enableVertexAttribArray(e.l.O),r.vertexAttribPointer(e.l.O,2,r.FLOAT,!1,0,0),r.bufferData(r.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),r.STATIC_DRAW),r.bindBuffer(r.ARRAY_BUFFER,null),e.u=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,e.u),r.enableVertexAttribArray(e.l.N),r.vertexAttribPointer(e.l.N,2,r.FLOAT,!1,0,0),r.bufferData(r.ARRAY_BUFFER,new Float32Array([0,1,0,0,1,0,1,1]),r.STATIC_DRAW),r.bindBuffer(r.ARRAY_BUFFER,null),r.uniform1i(a,0)}n=e.l,r.useProgram(e.s),r.canvas.width=t.width,r.canvas.height=t.height,r.viewport(0,0,t.width,t.height),r.activeTexture(r.TEXTURE0),e.i.bindTexture2d(t.glName),r.enableVertexAttribArray(n.O),r.bindBuffer(r.ARRAY_BUFFER,e.v),r.vertexAttribPointer(n.O,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(n.N),r.bindBuffer(r.ARRAY_BUFFER,e.u),r.vertexAttribPointer(n.N,2,r.FLOAT,!1,0,0),r.bindFramebuffer(r.DRAW_FRAMEBUFFER?r.DRAW_FRAMEBUFFER:r.FRAMEBUFFER,null),r.clearColor(0,0,0,0),r.clear(r.COLOR_BUFFER_BIT),r.colorMask(!0,!0,!0,!0),r.drawArrays(r.TRIANGLE_FAN,0,4),r.disableVertexAttribArray(n.O),r.disableVertexAttribArray(n.N),r.bindBuffer(r.ARRAY_BUFFER,null),e.i.bindTexture2d(0)}(e,t),"function"==typeof e.h.canvas.transferToImageBitmap)?Promise.resolve(e.h.canvas.transferToImageBitmap()):r?Promise.resolve(e.h.canvas):"function"==typeof createImageBitmap?createImageBitmap(e.h.canvas):(void 0===e.j&&(e.j=document.createElement("canvas")),new Promise(function(t){e.j.height=e.h.canvas.height,e.j.width=e.h.canvas.width,e.j.getContext("2d",{}).drawImage(e.h.canvas,0,0,e.h.canvas.width,e.h.canvas.height),t(e.j)}))}function tG(e){this.h=e}tM.prototype.l=tC(tz);var tH=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]);function tj(e,t){return t+e}function tK(e){if(this.h=e,this.listeners={},this.l={},this.L={},this.s={},this.v={},this.M=this.u=this.ga=!0,this.I=Promise.resolve(),this.fa="",this.D={},this.locateFile=e&&e.locateFile||tj,"object"==typeof window)var t=window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/";else if("undefined"!=typeof location)t=location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/";else throw Error("solutions can only be loaded on a web page or in a web worker");if(this.ha=t,e.options){t=i(Object.keys(e.options));for(var r=t.next();!r.done;r=t.next()){r=r.value;var n=e.options[r].default;void 0!==n&&(this.l[r]="function"==typeof n?n():n)}}}function tq(e,t){var r;return k(function(n){return t in e.L?n.return(e.L[t]):(r=fetch(e.locateFile(t,"")).then(function(e){return e.arrayBuffer()}),e.L[t]=r,n.return(r))})}function tX(e){switch(void 0===e&&(e=0),e){case 1:return"pose_landmark_full.tflite";case 2:return"pose_landmark_heavy.tflite";default:return"pose_landmark_lite.tflite"}}function tY(e){var t=this;e=e||{},this.h=new tK({locateFile:e.locateFile,files:function(e){return[{url:"pose_solution_packed_assets_loader.js"},{simd:!1,url:"pose_solution_wasm_bin.js"},{simd:!0,url:"pose_solution_simd_wasm_bin.js"},{data:!0,url:tX(e.modelComplexity)}]},graph:{url:"pose_web.binarypb"},listeners:[{wants:["pose_landmarks","world_landmarks","segmentation_mask","image_transformed"],outs:{image:{type:"texture",stream:"image_transformed"},poseLandmarks:{type:"proto",stream:"pose_landmarks",transform:tW},poseWorldLandmarks:{type:"proto",stream:"world_landmarks",transform:tW},segmentationMask:{type:"texture",stream:"segmentation_mask"}}}],inputs:{image:{type:"video",stream:"input_frames_gpu"}},options:{useCpuInference:{type:0,graphOptionXref:{calculatorType:"InferenceCalculator",fieldName:"use_cpu_inference"},default:"object"==typeof window&&void 0!==window.navigator&&("iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document)},selfieMode:{type:0,graphOptionXref:{calculatorType:"GlScalerCalculator",calculatorIndex:1,fieldName:"flip_horizontal"}},modelComplexity:{type:1,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorModelComplexity",fieldName:"int_value"},onChange:function(e){var r,n,a;return k(function(i){return 1==i.h?(n="third_party/mediapipe/modules/pose_landmark/"+(r=tX(e)),y(i,tq(t.h,r),2)):(a=i.i,t.h.overrideFile(n,a),i.return(!0))})}},smoothLandmarks:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothLandmarks",fieldName:"bool_value"}},enableSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorEnableSegmentation",fieldName:"bool_value"}},smoothSegmentation:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorSmoothSegmentation",fieldName:"bool_value"}},minDetectionConfidence:{type:1,graphOptionXref:{calculatorType:"TensorsToDetectionsCalculator",calculatorName:"poselandmarkgpu__posedetectiongpu__TensorsToDetectionsCalculator",fieldName:"min_score_thresh"}},minTrackingConfidence:{type:1,graphOptionXref:{calculatorType:"ThresholdingCalculator",calculatorName:"poselandmarkgpu__poselandmarkbyroigpu__tensorstoposelandmarksandsegmentation__ThresholdingCalculator",fieldName:"threshold"}}}})}(l=tK.prototype).close=function(){return this.j&&this.j.delete(),Promise.resolve()},l.reset=function(){var e=this;return k(function(t){e.j&&(e.j.reset(),e.s={},e.v={}),t.h=0})},l.setOptions=function(e,t){var r=this;if(t=t||this.h.options){for(var n=[],a=[],s={},o=i(Object.keys(e)),l=o.next();!l.done;s={X:s.X,Y:s.Y},l=o.next())if(!((l=l.value)in this.l&&this.l[l]===e[l])){this.l[l]=e[l];var u=t[l];void 0!==u&&(u.onChange&&(s.X=u.onChange,s.Y=e[l],n.push(function(e){return function(){return k(function(t){if(1==t.h)return y(t,e.X(e.Y),2);!0===t.i&&(r.u=!0),t.h=0})}}(s))),u.graphOptionXref&&(l=Object.assign({},{calculatorName:"",calculatorIndex:0},u.graphOptionXref,{valueNumber:1===u.type?e[l]:0,valueBoolean:0===u.type&&e[l],valueString:2===u.type?e[l]:""}),a.push(l)))}(0!==n.length||0!==a.length)&&(this.u=!0,this.H=(void 0===this.H?[]:this.H).concat(a),this.F=(void 0===this.F?[]:this.F).concat(n))}},l.initialize=function(){var e=this;return k(function(t){var r,n,a,o,l,u,h,p,d,c,f,m,g,b,x,v,w,S,I,C,N,T,$,E;return 1==t.h?y(t,k(function(t){switch(t.h){case 1:if(!e.ga)return t.return();return r=void 0===e.h.files?[]:"function"==typeof e.h.files?e.h.files(e.l):e.h.files,y(t,k(function(e){switch(e.h){case 1:return e.s=2,y(e,WebAssembly.instantiate(tH),4);case 4:e.h=3,e.s=0;break;case 2:return e.s=0,e.l=null,e.return(!1);case 3:return e.return(!0)}}),2);case 2:if(n=t.i,"object"==typeof window){var i,m;return i={locateFile:e.locateFile},window.createMediapipeSolutionsWasm=i,m={locateFile:e.locateFile},window.createMediapipeSolutionsPackedAssets=m,u=r.filter(function(e){return void 0!==e.data}),h=r.filter(function(e){return void 0===e.data}),p=Promise.all(u.map(function(t){var r=tq(e,t.url);if(void 0!==t.path){var n=t.path;r=r.then(function(t){return e.overrideFile(n,t),Promise.resolve(t)})}return r})),d=Promise.all(h.map(function(t){var r,a;return void 0===t.simd||t.simd&&n||!t.simd&&!n?(r=e.locateFile(t.url,e.ha),(a=document.createElement("script")).setAttribute("src",r),a.setAttribute("crossorigin","anonymous"),new Promise(function(e){a.addEventListener("load",function(){e()},!1),a.addEventListener("error",function(){e()},!1),document.body.appendChild(a)})):Promise.resolve()})).then(function(){var t,r,n;return k(function(a){if(1==a.h)return t=window.createMediapipeSolutionsWasm,r=window.createMediapipeSolutionsPackedAssets,n=e,y(a,t(r),2);n.i=a.i,a.h=0})}),c=k(function(t){return e.h.graph&&e.h.graph.url?t=y(t,tq(e,e.h.graph.url),0):(t.h=0,t=void 0),t}),y(t,Promise.all([d,p,c]),7)}if("function"!=typeof importScripts)throw Error("solutions can only be loaded on a web page or in a web worker");return a=r.filter(function(e){return void 0===e.simd||e.simd&&n||!e.simd&&!n}).map(function(t){return e.locateFile(t.url,e.ha)}),importScripts.apply(null,s(a)),o=e,y(t,createMediapipeSolutionsWasm(Module),6);case 6:o.i=t.i,e.m=new OffscreenCanvas(1,1),e.i.canvas=e.m,l=e.i.GL.createContext(e.m,{antialias:!1,alpha:!1,va:"undefined"!=typeof WebGL2RenderingContext?2:1}),e.i.GL.makeContextCurrent(l),t.h=4;break;case 7:if(e.m=document.createElement("canvas"),!(f=e.m.getContext("webgl2",{}))&&!(f=e.m.getContext("webgl",{})))return alert("Failed to create WebGL canvas context when passing video frame."),t.return();e.K=f,e.i.canvas=e.m,e.i.createContext(e.m,!0,!0,{});case 4:e.j=new e.i.SolutionWasm,e.ga=!1,t.h=0}}),2):3!=t.h?y(t,k(function(t){if(1==t.h){if(e.h.graph&&e.h.graph.url&&e.fa===e.h.graph.url)return t.return();if(e.u=!0,!e.h.graph||!e.h.graph.url){t.h=2;return}return e.fa=e.h.graph.url,y(t,tq(e,e.h.graph.url),3)}for(2!=t.h&&(m=t.i,e.j.loadGraph(m)),b=(g=i(Object.keys(e.D))).next();!b.done;b=g.next())x=b.value,e.j.overrideFile(x,e.D[x]);if(e.D={},e.h.listeners)for(w=(v=i(e.h.listeners)).next();!w.done;w=v.next())!function(e,t){for(var r=t.name||"$",n=[].concat(s(t.wants)),a=new e.i.StringList,o=i(t.wants),l=o.next();!l.done;l=o.next())a.push_back(l.value);o=e.i.PacketListener.implement({onResults:function(a){for(var s,o,l,u,h,p,d,c,f,m,g,b,x,v,w={},S=0;S<t.wants.length;++S)w[n[S]]=a.get(S);var I=e.listeners[r];I&&(e.I=(s=t.outs,k(function(t){switch(t.h){case 1:if(!s)return t.return(w);for(o={},l=0,h=(u=i(Object.keys(s))).next();!h.done;h=u.next())"string"!=typeof(p=s[h.value])&&"texture"===p.type&&void 0!==w[p.stream]&&++l;1<l&&(e.M=!1),h=(d=i(Object.keys(s))).next();case 2:if(h.done){t.h=4;break}if("string"==typeof(f=s[c=h.value]))return x=o,v=c,y(t,function(e,t,r){var n;return k(function(a){return"number"==typeof r||r instanceof Uint8Array||r instanceof e.i.Uint8BlobList?a.return(r):r instanceof e.i.Texture2dDataOut?((n=e.v[t])||(n=new tU(e.i,e.K),e.v[t]=n),a.return(tV(n,r,e.M))):a.return(void 0)})}(e,c,w[f]),14);if(m=w[f.stream],"detection_list"===f.type){if(m){for(var r=m.getRectList(),n=m.getLandmarksList(),a=m.getClassificationsList(),S=[],I=0;I<r.size();++I){var C=tP(r.get(I)),N=eY(C,1),T=eY(C,2),$=eY(C,3),E=eY(C,4),R=eY(C,5,0),A=void 0;A=void 0===A?0:A,C={la:{sa:N,ta:T,height:$,width:E,rotation:R,pa:eX(eB(C,6),A)},ea:tW(n.get(I)),ba:ej(tR(a.get(I)),tN,1).map(function(e){var t=eB(e,1);return{index:null==t?0:t,qa:eY(e,2),label:null!=eB(e,3)?eX(eB(e,3),""):void 0,displayName:null!=eB(e,4)?eX(eB(e,4),""):void 0}})},S.push(C)}r=S}else r=[];o[c]=r,t.h=7;break}if("proto_list"===f.type){if(m){for(n=0,r=Array(m.size());n<m.size();n++)r[n]=m.get(n);m.delete()}else r=[];o[c]=r,t.h=7;break}if(void 0===m){t.h=3;break}if("float_list"===f.type||"proto"===f.type){o[c]=m,t.h=7;break}if("texture"!==f.type)throw Error("Unknown output config type: '"+f.type+"'");return(g=e.v[c])||(g=new tU(e.i,e.K),e.v[c]=g),y(t,tV(g,m,e.M),13);case 13:b=t.i,o[c]=b;case 7:f.transform&&o[c]&&(o[c]=f.transform(o[c])),t.h=3;break;case 14:x[v]=t.i;case 3:h=d.next(),t.h=2;break;case 4:return t.return(o)}})).then(function(r){r=I(r);for(var a=0;a<t.wants.length;++a){var i=w[n[a]];"object"==typeof i&&i.hasOwnProperty&&i.hasOwnProperty("delete")&&i.delete()}r&&(e.I=r)}))}}),e.j.attachMultiListener(a,o),a.delete()}(e,w.value);S=e.l,e.l={},e.setOptions(S),t.h=0}),3):y(t,k(function(t){switch(t.h){case 1:if(!e.u)return t.return();if(!e.F){t.h=2;break}C=(I=i(e.F)).next();case 3:if(C.done){t.h=5;break}return y(t,(0,C.value)(),4);case 4:C=I.next(),t.h=3;break;case 5:e.F=void 0;case 2:if(e.H){for(N=new e.i.GraphOptionChangeRequestList,$=(T=i(e.H)).next();!$.done;$=T.next())E=$.value,N.push_back(E);e.j.changeOptions(N),N.delete(),e.H=void 0}e.u=!1,t.h=0}}),0)})},l.overrideFile=function(e,t){this.j?this.j.overrideFile(e,t):this.D[e]=t},l.clearOverriddenFiles=function(){this.D={},this.j&&this.j.clearOverriddenFiles()},l.send=function(e,t){var r,n,a,s,o,l,u,h,p,d=this;return k(function(c){switch(c.h){case 1:if(!d.h.inputs)return c.return();return r=1e3*(null==t?performance.now():t),y(c,d.I,2);case 2:return y(c,d.initialize(),3);case 3:for(n=new d.i.PacketDataList,s=(a=i(Object.keys(e))).next();!s.done;s=a.next())if(o=s.value,l=d.h.inputs[o]){e:{var f=e[o];switch(l.type){case"video":var m=d.s[l.stream];if(m||(m=new tU(d.i,d.K),d.s[l.stream]=m),0===m.m&&(m.m=m.i.createTexture()),"undefined"!=typeof HTMLVideoElement&&f instanceof HTMLVideoElement)var g=f.videoWidth,b=f.videoHeight;else"undefined"!=typeof HTMLImageElement&&f instanceof HTMLImageElement?(g=f.naturalWidth,b=f.naturalHeight):(g=f.width,b=f.height);b={glName:m.m,width:g,height:b},(g=m.h).canvas.width=b.width,g.canvas.height=b.height,g.activeTexture(g.TEXTURE0),m.i.bindTexture2d(m.m),g.texImage2D(g.TEXTURE_2D,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,f),m.i.bindTexture2d(0),m=b;break e;case"detections":for((m=d.s[l.stream])||(m=new tG(d.i),d.s[l.stream]=m),m.data||(m.data=new m.h.DetectionListData),m.data.reset(f.length),b=0;b<f.length;++b){g=f[b];var x=m.data,v=x.setBoundingBox,w=b,k=g.la,S=new tM;if(eK(S,1,k.sa),eK(S,2,k.ta),eK(S,3,k.height),eK(S,4,k.width),eK(S,5,k.rotation),eW(S,6,k.pa),k=S.l(),v.call(x,w,k),g.ea)for(x=0;x<g.ea.length;++x){S=g.ea[x],w=(v=m.data).addNormalizedLandmark,k=b,S=Object.assign({},S,{visibility:S.visibility?S.visibility:0});var I=new tA;eK(I,1,S.x),eK(I,2,S.y),eK(I,3,S.z),S.visibility&&eK(I,4,S.visibility),S=I.l(),w.call(v,k,S)}if(g.ba)for(x=0;x<g.ba.length;++x)w=(v=m.data).addClassification,k=b,S=g.ba[x],eK(I=new tN,2,S.qa),S.index&&eW(I,1,S.index),S.label&&eW(I,3,S.label),S.displayName&&eW(I,4,S.displayName),S=I.l(),w.call(v,k,S)}m=m.data;break e;default:m={}}}switch(u=m,h=l.stream,l.type){case"video":n.pushTexture2d(Object.assign({},u,{stream:h,timestamp:r}));break;case"detections":(p=u).stream=h,p.timestamp=r,n.pushDetectionList(p);break;default:throw Error("Unknown input config type: '"+l.type+"'")}}return d.j.send(n),y(c,d.I,4);case 4:n.delete(),c.h=0}})},l.onResults=function(e,t){this.listeners[t||"$"]=e},N("Solution",tK),N("OptionType",{BOOL:0,NUMBER:1,ua:2,0:"BOOL",1:"NUMBER",2:"STRING"}),(l=tY.prototype).reset=function(){this.h.reset()},l.close=function(){return this.h.close(),Promise.resolve()},l.onResults=function(e){this.h.onResults(e)},l.initialize=function(){var e=this;return k(function(t){return y(t,e.h.initialize(),0)})},l.send=function(e,t){var r=this;return k(function(n){return y(n,r.h.send(e,t),0)})},l.setOptions=function(e){this.h.setOptions(e)},N("Pose",tY),N("POSE_CONNECTIONS",[[0,1],[1,2],[2,3],[3,7],[0,4],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[13,15],[15,17],[15,19],[15,21],[17,19],[12,14],[14,16],[16,18],[16,20],[16,22],[18,20],[11,23],[12,24],[23,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[27,31],[28,32]]),N("POSE_LANDMARKS",{NOSE:0,LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,LEFT_EAR:7,RIGHT_EAR:8,LEFT_RIGHT:9,RIGHT_LEFT:10,LEFT_SHOULDER:11,RIGHT_SHOULDER:12,LEFT_ELBOW:13,RIGHT_ELBOW:14,LEFT_WRIST:15,RIGHT_WRIST:16,LEFT_PINKY:17,RIGHT_PINKY:18,LEFT_INDEX:19,RIGHT_INDEX:20,LEFT_THUMB:21,RIGHT_THUMB:22,LEFT_HIP:23,RIGHT_HIP:24,LEFT_KNEE:25,RIGHT_KNEE:26,LEFT_ANKLE:27,RIGHT_ANKLE:28,LEFT_HEEL:29,RIGHT_HEEL:30,LEFT_FOOT_INDEX:31,RIGHT_FOOT_INDEX:32}),N("POSE_LANDMARKS_LEFT",{LEFT_EYE_INNER:1,LEFT_EYE:2,LEFT_EYE_OUTER:3,LEFT_EAR:7,LEFT_RIGHT:9,LEFT_SHOULDER:11,LEFT_ELBOW:13,LEFT_WRIST:15,LEFT_PINKY:17,LEFT_INDEX:19,LEFT_THUMB:21,LEFT_HIP:23,LEFT_KNEE:25,LEFT_ANKLE:27,LEFT_HEEL:29,LEFT_FOOT_INDEX:31}),N("POSE_LANDMARKS_RIGHT",{RIGHT_EYE_INNER:4,RIGHT_EYE:5,RIGHT_EYE_OUTER:6,RIGHT_EAR:8,RIGHT_LEFT:10,RIGHT_SHOULDER:12,RIGHT_ELBOW:14,RIGHT_WRIST:16,RIGHT_PINKY:18,RIGHT_INDEX:20,RIGHT_THUMB:22,RIGHT_HIP:24,RIGHT_KNEE:26,RIGHT_ANKLE:28,RIGHT_HEEL:30,RIGHT_FOOT_INDEX:32}),N("POSE_LANDMARKS_NEUTRAL",{NOSE:0}),N("VERSION","0.5.1675469404")}).call(F);class _{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class D{refCount(e){return O("refCount")}incRef(e){return O("incRef")}timerAvailable(){return!0}time(e){return O("time")}read(e){return O("read")}readSync(e){return O("readSync")}readToGPU(e,t){return O("readToGPU")}numDataIds(){return O("numDataIds")}disposeData(e,t){return O("disposeData")}write(e,t,r){return O("write")}move(e,t,r,n,a){return O("move")}createTensorFromGPUData(e,t,r){return O("createTensorFromGPUData")}memory(){return O("memory")}floatPrecision(){return O("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return O("dispose")}}function O(e){throw Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var M={};function z(e){let t=e.length,r=0;for(;t>0;)r=Math.random()*t|0,W(e,--t,r)}function P(e,t){if(e.length!==t.length)throw Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let r=e.length,n=0;for(;r>0;)n=Math.random()*r|0,W(e,--r,n),W(t,r,n)}function L(e,t,r){return Math.max(e,Math.min(t,r))}function B(e){return e%2==0?e:e+1}function W(e,t,r){let n=e[t];e[t]=e[r],e[r]=n}function U(e){let t=0;for(let r=0;r<e.length;r++)t+=e[r];return t}function V(e,t){let r=Math.random();return t*r+(1-r)*e}function G(e,t){let r=0;for(let n=0;n<e.length;n++){let a=Number(e[n])-Number(t[n]);r+=a*a}return r}function H(e,t){if(!e)throw Error("string"==typeof t?t:t())}function j(e,t,r=""){H(Z(e,t),()=>r+` Shapes ${e} and ${t} must match`)}function K(e){H(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function q(e){if(0===e.length)return 1;let t=e[0];for(let r=1;r<e.length;r++)t*=e[r];return t}function X(e){return 0===e.length}function Y(e,t){if(e===t)return!0;if(null==e||null==t||e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(null!==e[r]&&null!==t[r]&&e[r]!==t[r])return!1;return!0}function Z(e,t){if(e===t)return!0;if(null==e||null==t||e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0}function Q(e){return e%1==0}function J(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;{if(e===-1/0)return -1;let t=Math.exp(2*e);return(t-1)/(t+1)}}function ee(e){let t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function et(e){let t=new Uint32Array(e);for(let r=0;r<e;++r)t[r]=r;return z(t),t}function er(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function en(e,t=e=>0,r,n){return new Promise((a,i)=>{let s=0,o=()=>{if(e())return void a();let l=t(++s);if(null!=r&&s>=r)return void i();null!=n?n(o,l):setTimeout(o,l)};o()})}function ea(e,t){let r=1,n=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)r*=e[t];else if(-1===e[t]){if(-1!==n)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${n} and dim ${t}`);n=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===n){if(t>0&&t!==r)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===r)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%r!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${r}`);let a=e.slice();return a[n]=t/r,a}function ei(e,t){let r=t.length;return H((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-r&&e<r),()=>`All values in axis param must be in range [-${r}, ${r}) but got axis ${e}`),H(e.every(e=>Q(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?r+e:e)}function es(e,t){let r=[],n=[],a=null!=t&&Array.isArray(t)&&0===t.length,i=null==t||a?null:ei(t,e).sort(),s=0;for(let t=0;t<e.length;++t){if(null!=i){if(i[s]===t&&1!==e[t])throw Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==i[s]||i[s]>t)&&1===e[t]&&(r.push(e[t]),n.push(t)),i[s]<=t&&s++}1!==e[t]&&(r.push(e[t]),n.push(t))}return{newShape:r,keptDims:n}}function eo(e,t){return el(e,t)}function el(e,t){let r=null;if(null==e||"float32"===e)r=new Float32Array(t);else if("int32"===e)r=new Int32Array(t);else if("bool"===e)r=new Uint8Array(t);else if("string"===e)r=Array(t);else throw Error(`Unknown data type ${e}`);return r}function eu(e,t){for(let r=0;r<e.length;r++){let n=e[r];if(isNaN(n)||!isFinite(n))throw Error(`A tensor of type ${t} being uploaded contains ${n}.`)}}function eh(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function ep(e,t){return"complex64"!==t&&("float32"!==t||"complex64"===e)&&("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)}function ed(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw Error(`Unknown dtype ${e}`)}function ec(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function ef(e){return"string"==typeof e||e instanceof String}function em(e){return"boolean"==typeof e}function eg(e){return"number"==typeof e}function ey(e){if(Array.isArray(e))return ey(e[0]);if(e instanceof Float32Array);else if(e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray)return"int32";else if(eg(e));else if(ef(e))return"string";else if(em(e))return"bool";return"float32"}function eb(e){return!!(e&&e.constructor&&e.call&&e.apply)}function ex(e,t){for(let r=t;r<e;++r)if(e%r==0)return r;return e}function ev(e){let t=e.length;if(t<2)return[];let r=Array(t-1);r[t-2]=e[t-1];for(let n=t-3;n>=0;--n)r[n]=r[n+1]*e[n+1];return r}function ew(e,t,r=!1){if(0===e.length)return t[0];let n=e.reduce((e,t)=>e*t)*(r?2:1);if(0===n)return[];if(n!==t.length)throw Error(`[${e}] does not match the input size ${t.length}${r?" for a complex tensor":""}.`);return function e(t,r,n,a=!1){let i=[];if(1===r.length){let e=r[0]*(a?2:1);for(let r=0;r<e;r++)i[r]=n[t+r]}else{let s=r[0],o=r.slice(1),l=o.reduce((e,t)=>e*t)*(a?2:1);for(let r=0;r<s;r++)i[r]=e(t+r*l,o,n,a)}return i}(0,e,t,r)}function ek(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw Error(`Unknown dtype ${t}`)}function eS(e,t){let r=eI(e,t);for(let e=0;e<r.length;e++)r[e]=1;return r}function eI(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw Error(`Unknown data type ${t}`)}function eC(e,t){let r=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return ew(e,new Float32Array(r));if("int32"===t)return ew(e,new Int32Array(r));if("bool"===t)return ew(e,new Uint8Array(r));throw Error(`Unknown data type ${t}`)}function eN(e){e.forEach(t=>{H(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function eT(e,t,r){if(0===t)return 0;if(1===t)return e[0];let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=r[t]*e[t];return n}function e$(e,t,r){if(0===t)return[];if(1===t)return[e];let n=Array(t);for(let t=0;t<n.length-1;++t)n[t]=Math.floor(e/r[t]),e-=n[t]*r[t];return n[n.length-1]=e,n}function eE(e){return e&&e.then&&"function"==typeof e.then}N(M,"shuffle",()=>z),N(M,"swap",()=>W),N(M,"shuffleCombo",()=>P),N(M,"clamp",()=>L),N(M,"nearestLargerEven",()=>B),N(M,"sum",()=>U),N(M,"randUniform",()=>V),N(M,"distSquared",()=>G),N(M,"assert",()=>H),N(M,"assertShapesMatch",()=>j),N(M,"arraysEqual",()=>Z),N(M,"assertNonNull",()=>K),N(M,"sizeFromShape",()=>q),N(M,"isScalarShape",()=>X),N(M,"arraysEqualWithNull",()=>Y),N(M,"isInt",()=>Q),N(M,"tanh",()=>J),N(M,"sizeToSquarishShape",()=>ee),N(M,"createShuffledIndices",()=>et),N(M,"rightPad",()=>er),N(M,"repeatedTry",()=>en),N(M,"inferFromImplicitShape",()=>ea),N(M,"parseAxisParam",()=>ei),N(M,"squeezeShape",()=>es),N(M,"getTypedArrayFromDType",()=>eo),N(M,"getArrayFromDType",()=>el),N(M,"checkConversionForErrors",()=>eu),N(M,"isValidDtype",()=>eh),N(M,"hasEncodingLoss",()=>ep),N(M,"bytesPerElement",()=>ed),N(M,"bytesFromStringArray",()=>ec),N(M,"isString",()=>ef),N(M,"isBoolean",()=>em),N(M,"isNumber",()=>eg),N(M,"inferDtype",()=>ey),N(M,"isFunction",()=>eb),N(M,"nearestDivisor",()=>ex),N(M,"computeStrides",()=>ev),N(M,"toNestedArray",()=>ew),N(M,"convertBackendValuesAndArrayBuffer",()=>ek),N(M,"makeOnesTypedArray",()=>eS),N(M,"makeZerosTypedArray",()=>eI),N(M,"makeZerosNestedTypedArray",()=>eC),N(M,"assertNonNegativeIntegerDimensions",()=>eN),N(M,"locToIndex",()=>eT),N(M,"indexToLoc",()=>e$),N(M,"isPromise",()=>eE);const eR="tfjsflags";class eA{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=eF,this.populateURLFlags()}setPlatform(e,t){null==this.platform||e_.getBool("IS_TEST")||e_.getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=e,this.platform=t}registerFlag(e,t,r){if(this.flagRegistry[e]={evaluationFn:t,setHook:r},null!=this.urlFlags[e]){let t=this.urlFlags[e];e_.getBool("IS_TEST")||e_.getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];let t=this.evaluateFlag(e);if(eE(t))throw Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;let e=this.getQueryParams(this.global.location.search);eR in e&&e[eR].split(",").forEach(e=>{let[t,r]=e.split(":");this.urlFlags[t]=function(e,t){let r=t.toLowerCase();return"true"===r||"false"===r?"true"===r:`${+r}`===r?+r:t}(0,r)})}}function eF(e){let t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...r)=>{var n,a,i;return n=t,a=r[0],i=r[1],n[decodeURIComponent(a)]=decodeURIComponent(i||""),r.join("=")}),t}let e_=null;var eD={},eO=eD={};function eM(){throw Error("setTimeout has not been defined")}function ez(){throw Error("clearTimeout has not been defined")}try{w9="function"==typeof setTimeout?setTimeout:eM}catch(e){w9=eM}try{ke="function"==typeof clearTimeout?clearTimeout:ez}catch(e){ke=ez}function eP(e){if(w9===setTimeout)return setTimeout(e,0);if((w9===eM||!w9)&&setTimeout)return w9=setTimeout,setTimeout(e,0);try{return w9(e,0)}catch(t){try{return w9.call(null,e,0)}catch(t){return w9.call(this,e,0)}}}var eL=[],eB=!1,eW=-1;function eU(){eB&&kt&&(eB=!1,kt.length?eL=kt.concat(eL):eW=-1,eL.length&&eV())}function eV(){if(!eB){var e=eP(eU);eB=!0;for(var t=eL.length;t;){for(kt=eL,eL=[];++eW<t;)kt&&kt[eW].run();eW=-1,t=eL.length}kt=null,eB=!1,function(e){if(ke===clearTimeout)return clearTimeout(e);if((ke===ez||!ke)&&clearTimeout)return ke=clearTimeout,clearTimeout(e);try{ke(e)}catch(t){try{return ke.call(null,e)}catch(t){return ke.call(this,e)}}}(e)}}function eG(e,t){this.fun=e,this.array=t}function eH(){}function ej(){if(null==e){let t;if("undefined"!=typeof window)t=window;else if(void 0!==C)t=C;else if(void 0!==eD)t=eD;else if("undefined"!=typeof self)t=self;else throw Error("Could not find a global object");e=t}return e}function eK(e,t){let r=function(){let e=ej();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(r.has(e))return r.get(e);{let n=t();return r.set(e,n),r.get(e)}}eO.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];eL.push(new eG(e,t)),1!==eL.length||eB||eP(eV)},eG.prototype.run=function(){this.fun.apply(null,this.array)},eO.title="browser",eO.browser=!0,eO.env={},eO.argv=[],eO.version="",eO.versions={},eO.on=eH,eO.addListener=eH,eO.once=eH,eO.off=eH,eO.removeListener=eH,eO.removeAllListeners=eH,eO.emit=eH,eO.prependListener=eH,eO.prependOnceListener=eH,eO.listeners=function(e){return[]},eO.binding=function(e){throw Error("process.binding is not supported")},eO.cwd=function(){return"/"},eO.chdir=function(e){throw Error("process.chdir is not supported")},eO.umask=function(){return 0};const eq="Acos",eX="Acosh",eY="AddN",eZ="ArgMax",eQ="ArgMin",eJ="Asin",e0="Asinh",e1="Atan",e2="Atanh",e3="Atan2",e4="AvgPool",e6="AvgPoolGrad",e5="AvgPool3D",e8="AvgPool3DGrad",e7="BatchMatMul",e9="BatchToSpaceND",te="Bincount",tt="BitwiseAnd",tr="BroadcastArgs",tn="Cast",ta="Ceil",ti="ClipByValue",ts="Complex",to="ComplexAbs",tl="Concat",tu="Conv2D",th="Conv2DBackpropFilter",tp="Conv2DBackpropInput",td="Conv3D",tc="Conv3DBackpropFilterV2",tf="Conv3DBackpropInputV2",tm="Cosh",tg="Cumprod",ty="Cumsum",tb="CropAndResize",tx="DenseBincount",tv="DepthToSpace",tw="DepthwiseConv2dNative",tk="DepthwiseConv2dNativeBackpropFilter",tS="DepthwiseConv2dNativeBackpropInput",tI="Diag",tC="Dilation2D",tN="Dilation2DBackpropInput",tT="Dilation2DBackpropFilter",t$="Draw",tE="RealDiv",tR="Einsum",tA="EluGrad",tF="Equal",t_="ExpandDims",tD="Expm1",tO="Fill",tM="FlipLeftRight",tz="Floor",tP="FloorDiv",tL="FusedBatchNorm",tB="GatherV2",tW="GatherNd",tU="Greater",tV="GreaterEqual",tG="Identity",tH="IFFT",tj="Imag",tK="IsFinite",tq="IsInf",tX="IsNan",tY="LeakyRelu",tZ="Less",tQ="LessEqual",tJ="LinSpace",t0="Log1p",t1="LogicalAnd",t2="LogicalNot",t3="LogicalOr",t4="LRNGrad",t6="Maximum",t5="MaxPool",t8="MaxPoolGrad",t7="MaxPool3D",t9="MaxPool3DGrad",re="MaxPoolWithArgmax",rt="Mean",rr="Minimum",rn="MirrorPad",ra="Multinomial",ri="Multiply",rs="NotEqual",ro="NonMaxSuppressionV3",rl="NonMaxSuppressionV4",ru="NonMaxSuppressionV5",rh="OnesLike",rp="OneHot",rd="Pack",rc="PadV2",rf="Prelu",rm="Prod",rg="RaggedGather",ry="RaggedRange",rb="RaggedTensorToTensor",rx="Range",rv="Real",rw="Reciprocal",rk="Relu",rS="Reshape",rI="ResizeNearestNeighbor",rC="ResizeNearestNeighborGrad",rN="ResizeBilinear",rT="ResizeBilinearGrad",r$="Relu6",rE="Reverse",rR="Round",rA="Rsqrt",rF="ScatterNd",r_="TensorScatterUpdate",rD="SearchSorted",rO="Select",rM="Selu",rz="Slice",rP="Sinh",rL="Sign",rB="Sigmoid",rW="Softplus",rU="Sqrt",rV="SpaceToBatchND",rG="SplitV",rH="Softmax",rj="SparseFillEmptyRows",rK="SparseReshape",rq="SparseSegmentMean",rX="SparseSegmentSum",rY="SparseToDense",rZ="SquaredDifference",rQ="Square",rJ="StaticRegexReplace",r0="StridedSlice",r1="StringNGrams",r2="StringSplit",r3="StringToHashBucketFast",r4="Tanh",r6="Tile",r5="TopK",r8="Transform",r7="Transpose",r9="Unique",ne="Unpack",nt="UnsortedSegmentSum",nr="ZerosLike",nn="Step",na="FromPixels",ni="RotateWithOffset",ns="_FusedMatMul",no="FusedConv2D",nl="FusedDepthwiseConv2D";var nu={};function nh(...e){e_.getBool("IS_TEST")||e_.getBool("PROD")||console.warn(...e)}function np(...e){e_.getBool("IS_TEST")||e_.getBool("PROD")||console.log(...e)}N(nu,"warn",()=>nh),N(nu,"log",()=>np);const nd=eK("kernelRegistry",()=>new Map),nc=eK("gradRegistry",()=>new Map);function nf(e,t){var r,n;let a=(r=e,n=t,`${n}_${r}`);return nd.get(a)}function nm(e){let t=nd.entries(),r=[];for(;;){let{done:n,value:a}=t.next();if(n)break;let[i,s]=a,[o]=i.split("_");o===e&&r.push(s)}return r}function ng(e){var t,r;let{kernelName:n,backendName:a}=e,i=(t=n,r=a,`${r}_${t}`);nd.has(i)&&nh(`The kernel '${n}' for backend '${a}' is already registered`),nd.set(i,e)}var ny={};function nb(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}N(ny,"createScalarValue",()=>n3),N(ny,"encodeString",()=>n8),N(ny,"toTypedArray",()=>n4),N(ny,"flatten",()=>ae),N(ny,"now",()=>n6),N(ny,"fetch",()=>n5),N(ny,"decodeString",()=>n7),N(ny,"isTypedArray",()=>n9);var nx={};N(nx,"hexToLong",()=>nj),N(nx,"fingerPrint64",()=>n2);var nv={};nv=nk;var nw=null;try{nw=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function nk(e,t,r){this.low=0|e,this.high=0|t,this.unsigned=!!r}function nS(e){return!0===(e&&e.__isLong__)}nk.prototype.__isLong__,Object.defineProperty(nk.prototype,"__isLong__",{value:!0}),nk.isLong=nS;var nI={},nC={};function nN(e,t){var r,n,a;if(t)return(e>>>=0,(a=0<=e&&e<256)&&(n=nC[e]))?n:(r=n$(e,(0|e)<0?-1:0,!0),a&&(nC[e]=r),r);return(e|=0,(a=-128<=e&&e<128)&&(n=nI[e]))?n:(r=n$(e,e<0?-1:0,!1),a&&(nI[e]=r),r)}function nT(e,t){if(isNaN(e))return t?nz:nM;if(t){if(e<0)return nz;if(e>=n_)return nU}else{if(e<=-nD)return nV;if(e+1>=nD)return nW}return e<0?nT(-e,t).neg():n$(e%nF|0,e/nF|0,t)}function n$(e,t,r){return new nk(e,t,r)}nk.fromInt=nN,nk.fromNumber=nT,nk.fromBits=n$;var nE=Math.pow;function nR(e,t,r){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return nM;if("number"==typeof t?(r=t,t=!1):t=!!t,(r=r||10)<2||36<r)throw RangeError("radix");if((n=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===n)return nR(e.substring(1),t,r).neg();for(var n,a=nT(nE(r,8)),i=nM,s=0;s<e.length;s+=8){var o=Math.min(8,e.length-s),l=parseInt(e.substring(s,s+o),r);if(o<8){var u=nT(nE(r,o));i=i.mul(u).add(nT(l))}else i=(i=i.mul(a)).add(nT(l))}return i.unsigned=t,i}function nA(e,t){return"number"==typeof e?nT(e,t):"string"==typeof e?nR(e,t):n$(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}nk.fromString=nR,nk.fromValue=nA;var nF=0x100000000,n_=0xffffffffffffffff,nD=0x8000000000000000,nO=nN(0x1000000),nM=nN(0);nk.ZERO=nM;var nz=nN(0,!0);nk.UZERO=nz;var nP=nN(1);nk.ONE=nP;var nL=nN(1,!0);nk.UONE=nL;var nB=nN(-1);nk.NEG_ONE=nB;var nW=n$(-1,0x7fffffff,!1);nk.MAX_VALUE=nW;var nU=n$(-1,-1,!0);nk.MAX_UNSIGNED_VALUE=nU;var nV=n$(0,-0x80000000,!1);nk.MIN_VALUE=nV;var nG=nk.prototype;nG.toInt=function(){return this.unsigned?this.low>>>0:this.low},nG.toNumber=function(){return this.unsigned?(this.high>>>0)*nF+(this.low>>>0):this.high*nF+(this.low>>>0)},nG.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(!this.eq(nV))return"-"+this.neg().toString(e);else{var t=nT(e),r=this.div(t),n=r.mul(t).sub(this);return r.toString(e)+n.toInt().toString(e)}for(var a=nT(nE(e,6),this.unsigned),i=this,s="";;){var o=i.div(a),l=(i.sub(o.mul(a)).toInt()>>>0).toString(e);if((i=o).isZero())return l+s;for(;l.length<6;)l="0"+l;s=""+l+s}},nG.getHighBits=function(){return this.high},nG.getHighBitsUnsigned=function(){return this.high>>>0},nG.getLowBits=function(){return this.low},nG.getLowBitsUnsigned=function(){return this.low>>>0},nG.getNumBitsAbs=function(){if(this.isNegative())return this.eq(nV)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&(e&1<<t)==0;t--);return 0!=this.high?t+33:t+1},nG.isZero=function(){return 0===this.high&&0===this.low},nG.eqz=nG.isZero,nG.isNegative=function(){return!this.unsigned&&this.high<0},nG.isPositive=function(){return this.unsigned||this.high>=0},nG.isOdd=function(){return(1&this.low)==1},nG.isEven=function(){return(1&this.low)==0},nG.equals=function(e){return nS(e)||(e=nA(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},nG.eq=nG.equals,nG.notEquals=function(e){return!this.eq(e)},nG.neq=nG.notEquals,nG.ne=nG.notEquals,nG.lessThan=function(e){return 0>this.comp(e)},nG.lt=nG.lessThan,nG.lessThanOrEqual=function(e){return 0>=this.comp(e)},nG.lte=nG.lessThanOrEqual,nG.le=nG.lessThanOrEqual,nG.greaterThan=function(e){return this.comp(e)>0},nG.gt=nG.greaterThan,nG.greaterThanOrEqual=function(e){return this.comp(e)>=0},nG.gte=nG.greaterThanOrEqual,nG.ge=nG.greaterThanOrEqual,nG.compare=function(e){if(nS(e)||(e=nA(e)),this.eq(e))return 0;var t=this.isNegative(),r=e.isNegative();return t&&!r?-1:!t&&r?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},nG.comp=nG.compare,nG.negate=function(){return!this.unsigned&&this.eq(nV)?nV:this.not().add(nP)},nG.neg=nG.negate,nG.add=function(e){nS(e)||(e=nA(e));var t,r,n=this.high>>>16,a=65535&this.high,i=this.low>>>16,s=65535&this.low,o=e.high>>>16,l=65535&e.high,u=e.low>>>16,h=65535&e.low,p=0,d=0;return t=0+((r=0+(s+h))>>>16),r&=65535,t+=i+u,d+=t>>>16,t&=65535,d+=a+l,p+=d>>>16,d&=65535,p+=n+o,n$(t<<16|r,(p&=65535)<<16|d,this.unsigned)},nG.subtract=function(e){return nS(e)||(e=nA(e)),this.add(e.neg())},nG.sub=nG.subtract,nG.multiply=function(e){if(this.isZero())return nM;if(nS(e)||(e=nA(e)),nw)return n$(nw.mul(this.low,this.high,e.low,e.high),nw.get_high(),this.unsigned);if(e.isZero())return nM;if(this.eq(nV))return e.isOdd()?nV:nM;if(e.eq(nV))return this.isOdd()?nV:nM;if(this.isNegative())if(e.isNegative())return this.neg().mul(e.neg());else return this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(nO)&&e.lt(nO))return nT(this.toNumber()*e.toNumber(),this.unsigned);var t,r,n=this.high>>>16,a=65535&this.high,i=this.low>>>16,s=65535&this.low,o=e.high>>>16,l=65535&e.high,u=e.low>>>16,h=65535&e.low,p=0,d=0;return t=0+((r=0+s*h)>>>16),r&=65535,t+=i*h,d+=t>>>16,t&=65535,t+=s*u,d+=t>>>16,t&=65535,d+=a*h,p+=d>>>16,d&=65535,d+=i*u,p+=d>>>16,d&=65535,d+=s*l,p+=d>>>16,d&=65535,p+=n*h+a*u+i*l+s*o,n$(t<<16|r,(p&=65535)<<16|d,this.unsigned)},nG.mul=nG.multiply,nG.divide=function(e){if(nS(e)||(e=nA(e)),e.isZero())throw Error("division by zero");if(nw){var t,r,n;return this.unsigned||-0x80000000!==this.high||-1!==e.low||-1!==e.high?n$((this.unsigned?nw.div_u:nw.div_s)(this.low,this.high,e.low,e.high),nw.get_high(),this.unsigned):this}if(this.isZero())return this.unsigned?nz:nM;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return nz;if(e.gt(this.shru(1)))return nL;n=nz}else{if(this.eq(nV))if(e.eq(nP)||e.eq(nB))return nV;else return e.eq(nV)?nP:(t=this.shr(1).div(e).shl(1)).eq(nM)?e.isNegative()?nP:nB:(r=this.sub(e.mul(t)),n=t.add(r.div(e)));if(e.eq(nV))return this.unsigned?nz:nM;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();n=nM}for(r=this;r.gte(e);){for(var a=Math.ceil(Math.log(t=Math.max(1,Math.floor(r.toNumber()/e.toNumber())))/Math.LN2),i=a<=48?1:nE(2,a-48),s=nT(t),o=s.mul(e);o.isNegative()||o.gt(r);)t-=i,o=(s=nT(t,this.unsigned)).mul(e);s.isZero()&&(s=nP),n=n.add(s),r=r.sub(o)}return n},nG.div=nG.divide,nG.modulo=function(e){return(nS(e)||(e=nA(e)),nw)?n$((this.unsigned?nw.rem_u:nw.rem_s)(this.low,this.high,e.low,e.high),nw.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},nG.mod=nG.modulo,nG.rem=nG.modulo,nG.not=function(){return n$(~this.low,~this.high,this.unsigned)},nG.and=function(e){return nS(e)||(e=nA(e)),n$(this.low&e.low,this.high&e.high,this.unsigned)},nG.or=function(e){return nS(e)||(e=nA(e)),n$(this.low|e.low,this.high|e.high,this.unsigned)},nG.xor=function(e){return nS(e)||(e=nA(e)),n$(this.low^e.low,this.high^e.high,this.unsigned)},nG.shiftLeft=function(e){return(nS(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?n$(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):n$(0,this.low<<e-32,this.unsigned)},nG.shl=nG.shiftLeft,nG.shiftRight=function(e){return(nS(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?n$(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):n$(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},nG.shr=nG.shiftRight,nG.shiftRightUnsigned=function(e){if(nS(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?n$(this.low>>>e|t<<32-e,t>>>e,this.unsigned):32===e?n$(t,0,this.unsigned):n$(t>>>e-32,0,this.unsigned)},nG.shru=nG.shiftRightUnsigned,nG.shr_u=nG.shiftRightUnsigned,nG.toSigned=function(){return this.unsigned?n$(this.low,this.high,!1):this},nG.toUnsigned=function(){return this.unsigned?this:n$(this.low,this.high,!0)},nG.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},nG.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},nG.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},nk.fromBytes=function(e,t,r){return r?nk.fromBytesLE(e,t):nk.fromBytesBE(e,t)},nk.fromBytesLE=function(e,t){return new nk(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},nk.fromBytesBE=function(e,t){return new nk(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const nH=nv.default||nv;function nj(e){return nH.fromString(e,!0,16)}const nK=nj("c3a5c85c97cb3127"),nq=nj("b492b66fbe98f273"),nX=nj("9ae16a3b2f90404f");function nY(e){return e.xor(e.shru(47))}function nZ(e,t,r){let n=e.slice(t,t+r);return nH.fromBytes(Array.from(n),!0,!0)}function nQ(e,t){return nZ(e,t,8)}function nJ(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function n0(e,t,r=nj("9ddfea08eb382d69")){let n=e.xor(t).mul(r);n=n.xor(n.shru(47));let a=t.xor(n).mul(r);return(a=a.xor(a.shru(47))).mul(r)}function n1(e,t,r,n){return function(e,t,r,n,a,i){a=a.add(e),i=nJ(i.add(a).add(n),21);let s=a;return a=(a=a.add(t)).add(r),i=i.add(nJ(a,44)),[a.add(n),i.add(s)]}(nQ(e,t),nQ(e,t+8),nQ(e,t+16),nQ(e,t+24),r,n)}function n2(e,t=e.length){let r=nH.fromNumber(81,!0);if(t<=32)if(t<=16)return function(e,t=e.length){if(t>=8){let r=nX.add(2*t),n=nQ(e,0).add(nX),a=nQ(e,t-8);return n0(nJ(a,37).mul(r).add(n),nJ(n,25).add(a).mul(r),r)}if(t>=4){let r=nX.add(2*t);return n0(nZ(e,0,4).shl(3).add(t),nZ(e,t-4,4),r)}if(t>0){let r=e[0],n=e[t>>1],a=e[t-1];return nY(nX.mul(r+(n<<8)).xor(nK.mul(t+(a<<2)))).mul(nX)}return nX}(e,t);else return function(e,t=e.length){let r=nX.add(2*t),n=nQ(e,0).mul(nq),a=nQ(e,8),i=nQ(e,t-8).mul(r),s=nQ(e,t-16).mul(nX);return n0(nJ(n.add(a),43).add(nJ(i,30)).add(s),n.add(nJ(a.add(nX),18)).add(i),r)}(e,t);if(t<=64)return function(e,t=e.length){let r=nX.add(2*t),n=nQ(e,0).mul(nX),a=nQ(e,8),i=nQ(e,t-8).mul(r),s=nQ(e,t-16).mul(nX),o=nJ(n.add(a),43).add(nJ(i,30)).add(s),l=n0(o,n.add(nJ(a.add(nX),18)).add(i),r),u=nQ(e,16).mul(r),h=nQ(e,24),p=o.add(nQ(e,t-32)).mul(r),d=l.add(nQ(e,t-24)).mul(r);return n0(nJ(u.add(h),43).add(nJ(p,30)).add(d),u.add(nJ(h.add(n),18)).add(p),r)}(e,t);let n=r,a=r.mul(nq).add(113),i=nY(a.mul(nX).add(113)).mul(nX),s=[nH.UZERO,nH.UZERO],o=[nH.UZERO,nH.UZERO];n=n.mul(nX).add(nQ(e,0));let l=0,u=(t-1>>6)*64,h=u+(t-1&63)-63;do n=nJ(n.add(a).add(s[0]).add(nQ(e,l+8)),37).mul(nq),a=nJ(a.add(s[1]).add(nQ(e,l+48)),42).mul(nq),n=n.xor(o[1]),a=a.add(s[0]).add(nQ(e,l+40)),i=nJ(i.add(o[0]),33).mul(nq),s=n1(e,l,s[1].mul(nq),n.add(o[0])),o=n1(e,l+32,i.add(o[1]),a.add(nQ(e,l+16))),[i,n]=[n,i],l+=64;while(l!==u)let p=nq.add(i.and(255).shl(1));return l=h,o[0]=o[0].add(t-1&63),s[0]=s[0].add(o[0]),o[0]=o[0].add(s[0]),n=nJ(n.add(a).add(s[0]).add(nQ(e,l+8)),37).mul(p),a=nJ(a.add(s[1]).add(nQ(e,l+48)),42).mul(p),n=n.xor(o[1].mul(9)),a=a.add(s[0].mul(9).add(nQ(e,l+40))),i=nJ(i.add(o[0]),33).mul(p),s=n1(e,l,s[1].mul(p),n.add(o[0])),o=n1(e,l+32,i.add(o[1]),a.add(nQ(e,l+16))),[i,n]=[n,i],n0(n0(s[0],o[0],p).add(nY(a).mul(nK)).add(i),n0(s[1],o[1],p).add(n),p)}function n3(e,t){return"string"===t?n8(e):n4([e],t)}function n4(e,t){var r;if("string"===t)throw Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=ae(e)),e_.getBool("DEBUG")&&eu(e,t),(r=e)instanceof Float32Array&&"float32"===t||r instanceof Int32Array&&"int32"===t||r instanceof Uint8Array&&"bool"===t)return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){let t=new Uint8Array(e.length);for(let r=0;r<t.length;++r)0!==Math.round(e[r])&&(t[r]=1);return t}throw Error(`Unknown data type ${t}`)}function n6(){return e_.platform.now()}function n5(e,t){return e_.platform.fetch(e,t)}function n8(e,t="utf-8"){return t=t||"utf-8",e_.platform.encode(e,t)}function n7(e,t="utf-8"){return t=t||"utf-8",e_.platform.decode(e,t)}function n9(e){return null!=e_.platform.isTypedArray?e_.platform.isTypedArray(e):nb(e)}function ae(e,t=[],r=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||eE(e)||null==e||n9(e)&&r)t.push(e);else if(Array.isArray(e)||n9(e))for(let n=0;n<e.length;++n)ae(e[n],t,r);else{let n=-1;for(let t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(n=Math.max(n,Number(t)));for(let a=0;a<=n;a++)ae(e[a],t,r)}return t}T(ny,M),T(ny,nx);class at{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new ar)}profileKernel(e,t,r){let n,a,i=()=>{n=r()},s=n6();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(i);else{for(let e of(i(),n))e.dataSync();a=Promise.resolve({kernelMs:n6()-s})}if(e_.getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<n.length;t++){let r=n[t];r.data().then(t=>{!function(e,t,r){if("float32"===t)for(let t=0;t<e.length;t++){let n=e[t];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${r}'`),!0}}(t,r.dtype,e)})}return{kernelName:e,outputs:n,inputs:t,timeMs:a.then(e=>e.kernelMs),extraInfo:a.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){let{kernelName:t,outputs:r,timeMs:n,inputs:a,extraInfo:i}=e;r.forEach(e=>{Promise.all([e.data(),n,i]).then(r=>{this.logger.logKernelProfile(t,e,r[0],r[1],a,r[2])})})}}class ar{logKernelProfile(e,t,r,n,a,i){let s="number"==typeof n?er(`${n}ms`,9):n.error,o=er(e,25),l=t.rank,u=t.size,h=er(t.shape.toString(),14),p="";for(let e in a){let r=a[e];if(null!=r){let n=r.shape||t.shape,a=n.length;p+=`${e}: ${a}D ${a>0?n:""} `}}console.log(`%c${o}	%c${s}	%c${l}D ${h}	%c${u}	%c${p}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function an(e,t,r){return er(Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:ef(e)?`'${e}'`:"bool"===r?aa(e):parseFloat(e.toFixed(7)).toString(),t)}function aa(e){return 0===e?"false":"true"}function ai(e){let t=[];for(let r=0;r<e.length;r+=2)t.push([e[r],e[r+1]]);return t}class as{constructor(e,t,r){if(this.dtype=t,this.shape=e.slice(),this.size=q(e),null!=r){let e=r.length;H(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=r||el(t,this.size),this.strides=ev(e)}set(e,...t){0===t.length&&(t=[0]),H(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);let r=this.locToIndex(t);this.values[r]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(let r of e){if(r<0||r>=this.shape[t])throw Error(`Requested out of range element at ${e}.   Buffer shape=${this.shape}`);t++}let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=this.strides[t]*e[t];return this.values[r]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let r=0;r<e.length-1;++r)t+=this.strides[r]*e[r];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];let t=Array(this.shape.length);for(let r=0;r<t.length-1;++r)t[r]=Math.floor(e/this.strides[r]),e-=t[r]*this.strides[r];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return ao().makeTensor(this.values,this.shape,this.dtype)}}let ao=null,al=null;class au{constructor(e,t,r,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=q(e),this.strides=ev(e),this.dataId=r,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let e=await this.data();return al.buffer(this.shape,this.dtype,e)}bufferSync(){return al.buffer(this.shape,this.dtype,this.dataSync())}async array(){let e=await this.data();return ew(this.shape,e,"complex64"===this.dtype)}arraySync(){return ew(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();let e=ao().read(this.dataId);if("string"===this.dtype){let t=await e;try{return t.map(e=>n7(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),ao().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();let e=ao().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>n7(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();let e=await ao().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),ao().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw Error("Tensor is disposed.")}print(e=!1){return al.print(this,e)}clone(){return this.throwIfDisposed(),al.clone(this)}toString(e=!1){return function(e,t,r,n){let a=ev(t),i=function(e,t,r,n){let a=q(t),i=n[n.length-1],s=Array(i).fill(0),o=t.length,l="complex64"===r?ai(e):e;if(o>1)for(let e=0;e<a/i;e++){let t=e*i;for(let e=0;e<i;e++)s[e]=Math.max(s[e],an(l[t+e],0,r).length)}return s}(e,t,r,a),s=t.length,o=function e(t,r,n,a,i,s=!0){let o="complex64"===n?2:1,l=r[0],u=r.length;if(0===u)return"complex64"===n?[an(ai(t)[0],0,n)]:"bool"===n?[aa(t[0])]:[t[0].toString()];if(1===u){if(l>20){let e=Array.from(t.slice(0,3*o)),r=Array.from(t.slice((l-3)*o,l*o));return"complex64"===n&&(e=ai(e),r=ai(r)),["["+e.map((e,t)=>an(e,i[t],n)).join(", ")+", ..., "+r.map((e,t)=>an(e,i[l-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?ai(t):Array.from(t)).map((e,t)=>an(e,i[t],n)).join(", ")+"]"]}let h=r.slice(1),p=a.slice(1),d=a[0]*o,c=[];if(l>20){for(let r=0;r<3;r++){let a=r*d,s=a+d;c.push(...e(t.slice(a,s),h,n,p,i,!1))}c.push("...");for(let r=l-3;r<l;r++){let a=r*d,s=a+d;c.push(...e(t.slice(a,s),h,n,p,i,r===l-1))}}else for(let r=0;r<l;r++){let a=r*d,s=a+d;c.push(...e(t.slice(a,s),h,n,p,i,r===l-1))}let f=2===u?",":"";c[0]="["+(l>0?c[0]+f:"");for(let e=1;e<c.length-1;e++)c[e]=" "+c[e]+f;let m=",\n";for(let e=2;e<u;e++)m+="\n";return c[c.length-1]=" "+c[c.length-1]+"]"+(s?"":m),c}(e,t,r,a,i),l=["Tensor"];return n&&(l.push(`  dtype: ${r}`),l.push(`  rank: ${s}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map(e=>"    "+e).join("\n")),l.join("\n")}(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),al.cast(this,e)}variable(e=!0,t,r){return this.throwIfDisposed(),ao().makeVariable(this,e,t,r)}}function ah(){return eK("Tensor",()=>au)}Object.defineProperty(au,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ah();class ap extends au{constructor(e,t,r,n){super(e.shape,e.dtype,e.dataId,n),this.trainable=t,this.name=r}assign(e){if(e.dtype!==this.dtype)throw Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!Z(e.shape,this.shape))throw Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);ao().disposeTensor(this),this.dataId=e.dataId,ao().incRef(this,null)}dispose(){ao().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(ap,Symbol.hasInstance,{value:e=>e instanceof au&&null!=e.assign&&e.assign instanceof Function});var ad={};N(ad,"makeTypesMatch",()=>ab),N(ad,"assertTypesMatch",()=>ax),N(ad,"isTensorInList",()=>av),N(ad,"getTensorsInContainer",()=>aw),(wq=kr||(kr={})).R0="R0",wq.R1="R1",wq.R2="R2",wq.R3="R3",wq.R4="R4",wq.R5="R5",wq.R6="R6",(wX=kn||(kn={})).float32="float32",wX.int32="int32",wX.bool="int32",wX.complex64="complex64",(wY=ka||(ka={})).float32="float32",wY.int32="int32",wY.bool="bool",wY.complex64="complex64",(wZ=ki||(ki={})).float32="float32",wZ.int32="float32",wZ.bool="float32",wZ.complex64="complex64",(wQ=ks||(ks={})).float32="complex64",wQ.int32="complex64",wQ.bool="complex64",wQ.complex64="complex64";const ac={float32:ki,int32:kn,bool:ka,complex64:ks};function af(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw Error(`Can not upcast ${e} with ${t}`)}return ac[e][t]}function am(e){return af(e,"int32")}function ag(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function ay(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function ab(e,t){if(e.dtype===t.dtype)return[e,t];let r=af(e.dtype,t.dtype);return[e.cast(r),t.cast(r)]}function ax(e,t){H(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function av(e,t){return t.some(t=>t.id===e.id)}function aw(e){let t=[];return function e(t,r,n){var a;if(null!=t){if(t instanceof au)return void r.push(t);if(Array.isArray(a=t)||"object"==typeof a)for(let a in t){let i=t[a];n.has(i)||(n.add(i),e(i,r,n))}}}(e,t,new Set),t}function ak(e){return null!=e.kernelName}class aS{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(let e in this.registeredVariables)this.registeredVariables[e].dispose()}}class aI{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new aS}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let r=e[t];if(await this.initializeBackend(r).success)return void await this.setBackend(r)}throw Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){let{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry))if(!(e in this.registryFactory))return null;else{let{asyncInit:t}=this.initializeBackend(e);if(t)return null}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,r=1){return e in this.registryFactory?(nh(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:r},!0)}async setBackend(e){if(null==this.registryFactory[e])throw Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;let{success:t,asyncInit:r}=this.initializeBackend(e);if(!(r?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new at(this.backendInstance),!0}setupRegisteredKernels(){nm(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){nm(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){let t=this.registryFactory[e];if(null==t)throw Error(`Cannot initialize backend ${e}, no registration found.`);try{let r=t.factory();if(!r||r instanceof D||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{let t=++this.pendingBackendInitId,n=r.then(r=>!(t<this.pendingBackendInitId)&&(this.registry[e]=r,this.pendingBackendInit=null,!0)).catch(r=>!(t<this.pendingBackendInitId)&&(this.pendingBackendInit=null,nh(`Initialization of backend ${e} failed`),nh(r.stack||r.message),!1));return this.pendingBackendInit=n,{success:n,asyncInit:!0}}}catch(t){return nh(`Initialization of backend ${e} failed`),nh(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let r=e[t],{success:n,asyncInit:a}=this.initializeBackend(r);if(a||n)return{name:r,asyncInit:a}}throw Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){let r=this.state.tensorInfo.get(t),n=r.backend,a=this.readSync(t),i=n.refCount(t);n.disposeData(t,!0),r.backend=e,e.move(t,a,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let r,n=null;if(null==t){if("function"!=typeof e)throw Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw Error("When calling with two arguments, the 2nd argument to tidy() must be a function");n=e}return this.scopedRun(()=>this.startScope(n),()=>this.endScope(r),()=>((r=t())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),r))}scopedRun(e,t,r){e();try{let e=r();return t(),e}catch(e){throw t(),e}}nextTensorId(){return aI.nextTensorId++}nextVariableId(){return aI.nextVariableId++}clone(e){let t=aN.runKernel(tG,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>aN.runKernel(tn,{x:e},{dtype:"float32"})}),[],{}),t}runKernel(e,t,r){if(null==this.backendName&&this.backend,null==nf(e,this.backendName))throw Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,r){let n=this.backend.numDataIds(),a=0;r.forEach(e=>{a+="complex64"===e.dtype?3:1});let i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],s=n-t-a-i;if(s>0)throw Error(`Backend '${this.backendName}' has an internal memory leak (${s} data ids) after running '${e}'`)}runKernelFunc(e){let t,r,n,a,i=[],s=this.isTapeOn(),o=this.state.numBytes,l=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;let u=ak(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(ak(e)){let{kernelName:t,inputs:a,attrs:o}=e;null==this.backendName&&this.backend;let l=nf(t,this.backendName);H(null!=l,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),r=()=>{let e=this.backend.numDataIds(),r=Array.isArray(n=l.kernelFunc({inputs:a,attrs:o,backend:this.backend}))?n:[n];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,r);let u=r.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(s){let e=this.getTensorsForGradient(t,a,u);i=this.saveTensorsForBackwardMode(e)}return u}}else{let{forwardFunc:t}=e,a=e=>{s&&(i=e.map(e=>this.keep(this.clone(e))))};r=()=>{let e=this.backend.numDataIds(),r=Array.isArray(n=this.tidy(()=>t(this.backend,a)))?n:[n];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,r),r}}let{inputs:h,attrs:p}=e,d=ak(e)?null:e.backwardsFunc;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(a=this.profiler.profileKernel(u,h,()=>r()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(a),t=a.outputs):t=r()}),s&&this.addTapeNode(u,h,t,d,i,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-o,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-l,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(e=>null!=h[e]?h[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:a.timeMs,extraInfo:a.extraInfo}),Array.isArray(n)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,r){let n=nc.get(e);if(null!=n){let e,a=n.inputsToSave||[],i=n.outputsToSave||[];n.saveAllInputs?(H(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),e=Object.keys(t).map(e=>t[e])):e=a.map(e=>t[e]);let s=r.filter((e,t)=>i[t]);return e.concat(s)}return[]}makeTensor(e,t,r,n){if(null==e)throw Error("Values passed to engine.makeTensor() are null");r=r||"float32",n=n||this.backend;let a=e;"string"===r&&ef(e[0])&&(a=e.map(e=>n8(e)));let i=n.write(a,t,r),s=new au(t,r,i,this.nextTensorId());if(this.trackTensor(s,n),"string"===r){let e=this.state.tensorInfo.get(i),t=ec(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return s}makeTensorFromDataId(e,t,r,n){let a={dataId:e,shape:t,dtype:r=r||"float32"};return this.makeTensorFromTensorInfo(a,n)}makeTensorFromTensorInfo(e,t){let{dataId:r,shape:n,dtype:a}=e,i=new au(n,a,r,this.nextTensorId());return this.trackTensor(i,t),i}makeVariable(e,t=!0,r,n){r=r||this.nextVariableId().toString(),null!=n&&n!==e.dtype&&(e=e.cast(n));let a=new ap(e,t,r,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*ed(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof ap||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;let t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){let t=e.size*ed(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(let e in this.state.registeredVariables){let t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){let e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;let t=this.state.numBytes,r=this.state.numTensors;for(let n of(this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-r,this.state.activeProfile.kernels))n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,r,n,a,i){let s={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:r,saved:a},o=nc.get(e);null!=o&&(n=o.gradFunc),null!=n&&(s.gradient=e=>(e=e.map((e,t)=>{if(null==e){let e=r[t],n=eI(e.size,e.dtype);return this.makeTensor(n,e.shape,e.dtype)}return e}),n(e.length>1?e:e[0],a,i))),this.state.activeTape.push(s)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){let t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){let t=aw(e),r=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){let t=this.state.activeScope.track[e];t.kept||r.has(t.id)||t.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==n.id||this.track(e)})}gradients(e,t,r,n=!1){if(H(t.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);let a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));H(a instanceof au,()=>"The result y returned by f() must be a tensor.");let i=function(e,t,r){let n={},a={};for(let e=0;e<t.length;e++)n[t[e].id]=!0;for(let r=0;r<e.length;r++){let i=e[r],s=i.inputs;for(let e in s){let r=s[e],o=!1;for(let e=0;e<t.length;e++)if(n[r.id]){i.outputs.forEach(e=>n[e.id]=!0),o=!0,a[i.id]=!0;break}if(o)break}}let i={};i[r.id]=!0;let s={};for(let t=e.length-1;t>=0;t--){let r=e[t],n=r.inputs;for(let e=0;e<r.outputs.length;e++)if(i[r.outputs[e].id]){for(let e in n)i[n[e].id]=!0,s[r.id]=!0;break}}let o=[];for(let t=0;t<e.length;t++){let r=e[t];if(a[r.id]&&s[r.id]){let e={};for(let t in r.inputs){let a=r.inputs[t];n[a.id]&&(e[t]=a)}let t=Object.assign({},r);t.inputs=e,t.outputs=r.outputs,o.push(t)}}return o}(this.state.activeTape,t,a);if(!n&&0===i.length&&t.length>0)throw Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let e={};e[a.id]=null==r?function(e){let t=eS(q(e),"float32");return aN.makeTensor(t,e,"float32")}(a.shape):r,function(e,t,r,n){for(let a=t.length-1;a>=0;a--){let i=t[a],s=[];if(i.outputs.forEach(t=>{let r=e[t.id];null!=r?s.push(r):s.push(null)}),null==i.gradient)throw Error(`Cannot compute gradient: gradient function not found for ${i.kernelName}.`);let o=i.gradient(s);for(let t in i.inputs){if(!(t in o))throw Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);let a=r(()=>o[t]());if("float32"!==a.dtype)throw Error(`Error in gradient for op ${i.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);let s=i.inputs[t];if(!Z(a.shape,s.shape))throw Error(`Error in gradient for op ${i.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${s.shape}'`);if(null==e[s.id])e[s.id]=a;else{let t=e[s.id];e[s.id]=n(t,a),t.dispose()}}}}(e,i,e=>this.tidy(e),aT);let n=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(let t of e.saved)t.dispose()}),this.state.activeTape=null),{value:a,grads:n}})}customGrad(e){return H(eb(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let r;H(t.every(e=>e instanceof au),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let n={};return t.forEach((e,t)=>{n[t]=e}),this.runKernelFunc({forwardFunc:(n,a)=>(H((r=e(...t,a)).value instanceof au,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),H(eb(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(e,n)=>{let a=r.gradFunc(e,n),i=Array.isArray(a)?a:[a];H(i.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),H(i.every(e=>e instanceof au),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let s={};return i.forEach((e,t)=>{s[t]=()=>e}),s},inputs:n})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){let t=n6(),r=await this.backend.time(e);return r.wallMs=n6()-t,r}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){for(let e in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new aS,this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function aC(){let e=ej();if(null==e._tfengine){let t=new eA(e);e._tfengine=new aI(t)}return e_=e._tfengine.ENV,ao=()=>e._tfengine,e._tfengine}aI.nextTensorId=0,aI.nextVariableId=0;const aN=aC();function aT(e,t){return aN.runKernel("Add",{a:e,b:t})}var a$={};function aE(e){t=e}function aR(e){if(void 0!==t)return t;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;let t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){let t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function aA(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}N(a$,"mockIsMobile",()=>aE),N(a$,"isMobile",()=>aR),N(a$,"isBrowser",()=>aA);const aF=e_;function a_(e,t){let r=e;if(n9(e))return"string"===t?[]:[e.length];if(ag(e)){let t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(ay(e))return[e.buffer.size/(null==t?4:ed(t))];if(!Array.isArray(e))return[];let n=[];for(;Array.isArray(r)||n9(r)&&"string"!==t;)n.push(r.length),r=r[0];return Array.isArray(e)&&e_.getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,r,n){if(n=n||[],!Array.isArray(t)&&!n9(t))return void H(0===r.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${r[0]} elements`);H(r.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`),H(t.length===r[0],()=>`Element arr[${n.join("][")}] should have ${r[0]} elements, but has ${t.length} elements`);let a=r.slice(1);for(let r=0;r<t.length;++r)e(t[r],a,n.concat(r))}(e,n,[]),n}function aD(e,t,r,n){if("string_or_numeric"!==e){if(null==e)throw Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw Error(`Argument '${r}' passed to '${n}' must be ${e} tensor, but got ${t} tensor`)}}function aO(e,t,r,n="numeric"){if(e instanceof ah())return aD(n,e.dtype,t,r),e;let a=ey(e);if("string"!==a&&["bool","int32","float32"].indexOf(n)>=0&&(a=n),aD(n,a,t,r),null==e||!n9(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){let n=null==e?"null":e.constructor.name;throw Error(`Argument '${t}' passed to '${r}' must be a Tensor or TensorLike, but got '${n}'`)}let i=a_(e,a);n9(e)||Array.isArray(e)||(e=[e]);let s="string"!==a?n4(e,a):ae(e,[],!0);return aN.makeTensor(s,i,a)}function aM(e,t,r,n="numeric"){if(!Array.isArray(e))throw Error(`Argument ${t} passed to ${r} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,a)=>aO(e,`${t}[${a}]`,r,n))}aF.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),aF.registerFlag("IS_BROWSER",()=>aA()),aF.registerFlag("IS_NODE",()=>!1),aF.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),aF.registerFlag("IS_SAFARI",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),aF.registerFlag("PROD",()=>!1),aF.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>aF.getBool("DEBUG")),aF.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),aF.registerFlag("IS_TEST",()=>!1),aF.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>aF.getBool("DEBUG")),aF.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),aF.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),aF.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const az="__op";function aP(e){let t=Object.keys(e);if(1!==t.length)throw Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let r=t[0],n=e[r];r.endsWith("_")&&(r=r.substring(0,r.length-1));let a=(...e)=>{aN.startScope(r);try{let t=n(...e);return eE(t)&&console.error("Cannot return a Promise inside of tidy."),aN.endScope(t),t}catch(e){throw aN.endScope(null),e}};return Object.defineProperty(a,"name",{value:r+=az,configurable:!0}),a}const aL=aP({complex_:function(e,t){let r=aO(e,"real","complex"),n=aO(t,"imag","complex");return j(r.shape,n.shape,`real and imag shapes, ${r.shape} and ${n.shape}, must match in call to tf.complex().`),aN.runKernel(ts,{real:r,imag:n})}});function aB(e,t,r,n){if(null==n)n=ey(e);else if("complex64"===n)throw Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(ay(e)||ag(e)){if("float32"!==n&&"int32"!==n)throw Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${n}.`);return aN.backend.createTensorFromGPUData(e,t||r,n)}if(!n9(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){eN(t);let e=q(t),n=q(r);H(e===n,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${n}`);for(let e=0;e<r.length;++e){let n=r[e],a=e!==r.length-1||n!==q(t.slice(e));H(r[e]===t[e]||!a,()=>`Error creating a new Tensor. Inferred shape (${r}) does not match the provided shape (${t}). `)}}return n9(e)||Array.isArray(e)||(e=[e]),t=t||r,e="string"!==n?n4(e,n):ae(e,[],!0),aN.makeTensor(e,t,n)}function aW(e,t,r){let n=a_(e,r);return aB(e,t,n,r)}const aU={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class aV{static join(e){return new aV(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e||(e instanceof Array||(e=[e]),0===(e=e.map(e=>n9(e)?e.buffer:e)).length))return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let r=0;r<e.length;r++){let n=e[r];r!==e.length-1&&n.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);let a=t+n.byteLength;this.shards.push({buffer:n,start:t,end:a}),t=a}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length||(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e))return new ArrayBuffer(0);let r=this.findShardForByte(e);if(-1===r)throw Error(`Could not find start shard for byte ${e}`);let n=new ArrayBuffer(t-e),a=new Uint8Array(n),i=0;for(let n=r;n<this.shards.length;n++){let r=this.shards[n],s=e+i-r.start,o=i,l=Math.min(t,r.end)-r.start,u=new Uint8Array(r.buffer,s,l-s);if(a.set(u,o),i+=u.length,t<r.end)break}return n}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return -1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:+(e>=t.end)}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;let r=function(e,t){let r=0,n=e.length;for(;r<=n;){let a=Math.floor((n-r)/2)+r,i=t(e[a]);if(0===i)return a;i<0?n=a:r=a+1}return -1}(this.shards,t);return -1===r?-1:(this.previousShardIndex=r,this.previousShardIndex)}}function aG(){return aN.memory()}function aH(e,t){return aN.tidy(e,t)}function aj(e){aw(e).forEach(e=>e.dispose())}function aK(e){return aN.keep(e)}function aq(){return aN.backendName}function aX(e,t,r=1){return aN.registerBackend(e,t,r)}function aY(){return aN.backend}ko=function(e){for(var t,r=e.length,n=r%3,a=[],i=0,s=r-n;i<s;i+=16383)a.push(function(e,t,r){for(var n,a=[],i=t;i<r;i+=3)n=(e[i]<<16&0xff0000)+(e[i+1]<<8&65280)+(255&e[i+2]),a.push(aZ[n>>18&63]+aZ[n>>12&63]+aZ[n>>6&63]+aZ[63&n]);return a.join("")}(e,i,i+16383>s?s:i+16383));return 1===n?a.push(aZ[(t=e[r-1])>>2]+aZ[t<<4&63]+"=="):2===n&&a.push(aZ[(t=(e[r-2]<<8)+e[r-1])>>10]+aZ[t>>4&63]+aZ[t<<2&63]+"="),a.join("")};for(var aZ=[],aQ=[],aJ="undefined"!=typeof Uint8Array?Uint8Array:Array,a0="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a1=0,a2=a0.length;a1<a2;++a1)aZ[a1]=a0[a1],aQ[a0.charCodeAt(a1)]=a1;aQ[45]=62,aQ[95]=63,kl=function(e,t,r,n,a){var i,s,o=8*a-n-1,l=(1<<o)-1,u=l>>1,h=-7,p=r?a-1:0,d=r?-1:1,c=e[t+p];for(p+=d,i=c&(1<<-h)-1,c>>=-h,h+=o;h>0;i=256*i+e[t+p],p+=d,h-=8);for(s=i&(1<<-h)-1,i>>=-h,h+=n;h>0;s=256*s+e[t+p],p+=d,h-=8);if(0===i)i=1-u;else{if(i===l)return s?NaN:1/0*(c?-1:1);s+=Math.pow(2,n),i-=u}return(c?-1:1)*s*Math.pow(2,i-n)},ku=function(e,t,r,n,a,i){var s,o,l,u=8*i-a-1,h=(1<<u)-1,p=h>>1,d=5960464477539062e-23*(23===a),c=n?0:i-1,f=n?1:-1,m=+(t<0||0===t&&1/t<0);for(isNaN(t=Math.abs(t))||t===1/0?(o=+!!isNaN(t),s=h):(s=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-s))<1&&(s--,l*=2),s+p>=1?t+=d/l:t+=d*Math.pow(2,1-p),t*l>=2&&(s++,l/=2),s+p>=h?(o=0,s=h):s+p>=1?(o=(t*l-1)*Math.pow(2,a),s+=p):(o=t*Math.pow(2,p-1)*Math.pow(2,a),s=0));a>=8;e[r+c]=255&o,c+=f,o/=256,a-=8);for(s=s<<a|o,u+=a;u>0;e[r+c]=255&s,c+=f,s/=256,u-=8);e[r+c-f]|=128*m};const a3="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;function a4(e){if(e>0x7fffffff)throw RangeError('The value "'+e+'" is invalid for option "size"');let t=new Uint8Array(e);return Object.setPrototypeOf(t,a6.prototype),t}function a6(e,t,r){if("number"==typeof e){if("string"==typeof t)throw TypeError('The "string" argument must be of type string. Received type number');return a7(e)}return a5(e,t,r)}function a5(e,t,r){if("string"==typeof e){var n=e,a=t;if(("string"!=typeof a||""===a)&&(a="utf8"),!a6.isEncoding(a))throw TypeError("Unknown encoding: "+a);let r=0|ir(n,a),i=a4(r),s=i.write(n,a);return s!==r&&(i=i.slice(0,s)),i}if(ArrayBuffer.isView(e)){var i=e;if(iT(i,Uint8Array)){let e=new Uint8Array(i);return ie(e.buffer,e.byteOffset,e.byteLength)}return a9(i)}if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(iT(e,ArrayBuffer)||e&&iT(e.buffer,ArrayBuffer)||"undefined"!=typeof SharedArrayBuffer&&(iT(e,SharedArrayBuffer)||e&&iT(e.buffer,SharedArrayBuffer)))return ie(e,t,r);if("number"==typeof e)throw TypeError('The "value" argument must not be of type number. Received type number');let s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return a6.from(s,t,r);let o=function(e){if(a6.isBuffer(e)){let t=0|it(e.length),r=a4(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||function(e){return e!=e}(e.length)?a4(0):a9(e):"Buffer"===e.type&&Array.isArray(e.data)?a9(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return a6.from(e[Symbol.toPrimitive]("string"),t,r);throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function a8(e){if("number"!=typeof e)throw TypeError('"size" argument must be of type number');if(e<0)throw RangeError('The value "'+e+'" is invalid for option "size"')}function a7(e){return a8(e),a4(e<0?0:0|it(e))}function a9(e){let t=e.length<0?0:0|it(e.length),r=a4(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function ie(e,t,r){let n;if(t<0||e.byteLength<t)throw RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw RangeError('"length" is outside of buffer bounds');return Object.setPrototypeOf(n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),a6.prototype),n}function it(e){if(e>=0x7fffffff)throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes");return 0|e}function ir(e,t){if(a6.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||iT(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let a=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return iI(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return iC(e).length;default:if(a)return n?-1:iI(e).length;t=(""+t).toLowerCase(),a=!0}}function ia(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length||((void 0===r||r>this.length)&&(r=this.length),r<=0||(r>>>=0)<=(t>>>=0)))return"";for(e||(e="utf8");;)switch(e){case"hex":return function(e,t,r){let n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let a="";for(let n=t;n<r;++n)a+=i$[e[n]];return a}(this,t,r);case"utf8":case"utf-8":return il(this,t,r);case"ascii":return function(e,t,r){let n="";r=Math.min(e.length,r);for(let a=t;a<r;++a)n+=String.fromCharCode(127&e[a]);return n}(this,t,r);case"latin1":case"binary":return function(e,t,r){let n="";r=Math.min(e.length,r);for(let a=t;a<r;++a)n+=String.fromCharCode(e[a]);return n}(this,t,r);case"base64":var a,i,s;return a=this,i=t,s=r,0===i&&s===a.length?ko(a):ko(a.slice(i,s));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return function(e,t,r){let n=e.slice(t,r),a="";for(let e=0;e<n.length-1;e+=2)a+=String.fromCharCode(n[e]+256*n[e+1]);return a}(this,t,r);default:if(n)throw TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function ii(e,t,r){let n=e[t];e[t]=e[r],e[r]=n}function is(e,t,r,n,a){var i;if(0===e.length)return -1;if("string"==typeof r?(n=r,r=0):r>0x7fffffff?r=0x7fffffff:r<-0x80000000&&(r=-0x80000000),(i=r*=1)!=i&&(r=a?0:e.length-1),r<0&&(r=e.length+r),r>=e.length)if(a)return -1;else r=e.length-1;else if(r<0)if(!a)return -1;else r=0;if("string"==typeof t&&(t=a6.from(t,n)),a6.isBuffer(t))return 0===t.length?-1:io(e,t,r,n,a);if("number"==typeof t){if(t&=255,"function"==typeof Uint8Array.prototype.indexOf)if(a)return Uint8Array.prototype.indexOf.call(e,t,r);else return Uint8Array.prototype.lastIndexOf.call(e,t,r);return io(e,[t],r,n,a)}throw TypeError("val must be string, number or Buffer")}function io(e,t,r,n,a){let i,s=1,o=e.length,l=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return -1;s=2,o/=2,l/=2,r/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(a){let n=-1;for(i=r;i<o;i++)if(u(e,i)===u(t,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===l)return n*s}else -1!==n&&(i-=i-n),n=-1}else for(r+l>o&&(r=o-l),i=r;i>=0;i--){let r=!0;for(let n=0;n<l;n++)if(u(e,i+n)!==u(t,n)){r=!1;break}if(r)return i}return -1}function il(e,t,r){r=Math.min(e.length,r);let n=[],a=t;for(;a<r;){let t=e[a],i=null,s=t>239?4:t>223?3:t>191?2:1;if(a+s<=r){let r,n,o,l;switch(s){case 1:t<128&&(i=t);break;case 2:(192&(r=e[a+1]))==128&&(l=(31&t)<<6|63&r)>127&&(i=l);break;case 3:r=e[a+1],n=e[a+2],(192&r)==128&&(192&n)==128&&(l=(15&t)<<12|(63&r)<<6|63&n)>2047&&(l<55296||l>57343)&&(i=l);break;case 4:r=e[a+1],n=e[a+2],o=e[a+3],(192&r)==128&&(192&n)==128&&(192&o)==128&&(l=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&o)>65535&&l<1114112&&(i=l)}}null===i?(i=65533,s=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),a+=s}var i=n;let s=i.length;if(s<=4096)return String.fromCharCode.apply(String,i);let o="",l=0;for(;l<s;)o+=String.fromCharCode.apply(String,i.slice(l,l+=4096));return o}function iu(e,t,r){if(e%1!=0||e<0)throw RangeError("offset is not uint");if(e+t>r)throw RangeError("Trying to access beyond buffer length")}function ih(e,t,r,n,a,i){if(!a6.isBuffer(e))throw TypeError('"buffer" argument must be a Buffer instance');if(t>a||t<i)throw RangeError('"value" argument is out of bounds');if(r+n>e.length)throw RangeError("Index out of range")}function ip(e,t,r,n,a){iv(t,n,a,e,r,7);let i=Number(t&BigInt(0xffffffff));e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i;let s=Number(t>>BigInt(32)&BigInt(0xffffffff));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function id(e,t,r,n,a){iv(t,n,a,e,r,7);let i=Number(t&BigInt(0xffffffff));e[r+7]=i,i>>=8,e[r+6]=i,i>>=8,e[r+5]=i,i>>=8,e[r+4]=i;let s=Number(t>>BigInt(32)&BigInt(0xffffffff));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function ic(e,t,r,n,a,i){if(r+n>e.length||r<0)throw RangeError("Index out of range")}function im(e,t,r,n,a){return t*=1,r>>>=0,a||ic(e,t,r,4,34028234663852886e22,-34028234663852886e22),ku(e,t,r,n,23,4),r+4}function ig(e,t,r,n,a){return t*=1,r>>>=0,a||ic(e,t,r,8,17976931348623157e292,-17976931348623157e292),ku(e,t,r,n,52,8),r+8}a6.TYPED_ARRAY_SUPPORT=function(){try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),a6.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(a6.prototype,"parent",{enumerable:!0,get:function(){if(a6.isBuffer(this))return this.buffer}}),Object.defineProperty(a6.prototype,"offset",{enumerable:!0,get:function(){if(a6.isBuffer(this))return this.byteOffset}}),a6.poolSize=8192,a6.from=function(e,t,r){return a5(e,t,r)},Object.setPrototypeOf(a6.prototype,Uint8Array.prototype),Object.setPrototypeOf(a6,Uint8Array),a6.alloc=function(e,t,r){return(a8(e),e<=0)?a4(e):void 0!==t?"string"==typeof r?a4(e).fill(t,r):a4(e).fill(t):a4(e)},a6.allocUnsafe=function(e){return a7(e)},a6.allocUnsafeSlow=function(e){return a7(e)},a6.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==a6.prototype},a6.compare=function(e,t){if(iT(e,Uint8Array)&&(e=a6.from(e,e.offset,e.byteLength)),iT(t,Uint8Array)&&(t=a6.from(t,t.offset,t.byteLength)),!a6.isBuffer(e)||!a6.isBuffer(t))throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let a=0,i=Math.min(r,n);a<i;++a)if(e[a]!==t[a]){r=e[a],n=t[a];break}return r<n?-1:+(n<r)},a6.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a6.concat=function(e,t){let r;if(!Array.isArray(e))throw TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return a6.alloc(0);if(void 0===t)for(r=0,t=0;r<e.length;++r)t+=e[r].length;let n=a6.allocUnsafe(t),a=0;for(r=0;r<e.length;++r){let t=e[r];if(iT(t,Uint8Array))a+t.length>n.length?(a6.isBuffer(t)||(t=a6.from(t)),t.copy(n,a)):Uint8Array.prototype.set.call(n,t,a);else if(a6.isBuffer(t))t.copy(n,a);else throw TypeError('"list" argument must be an Array of Buffers');a+=t.length}return n},a6.byteLength=ir,a6.prototype._isBuffer=!0,a6.prototype.swap16=function(){let e=this.length;if(e%2!=0)throw RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)ii(this,t,t+1);return this},a6.prototype.swap32=function(){let e=this.length;if(e%4!=0)throw RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)ii(this,t,t+3),ii(this,t+1,t+2);return this},a6.prototype.swap64=function(){let e=this.length;if(e%8!=0)throw RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)ii(this,t,t+7),ii(this,t+1,t+6),ii(this,t+2,t+5),ii(this,t+3,t+4);return this},a6.prototype.toString=function(){let e=this.length;return 0===e?"":0==arguments.length?il(this,0,e):ia.apply(this,arguments)},a6.prototype.toLocaleString=a6.prototype.toString,a6.prototype.equals=function(e){if(!a6.isBuffer(e))throw TypeError("Argument must be a Buffer");return this===e||0===a6.compare(this,e)},a6.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},a3&&(a6.prototype[a3]=a6.prototype.inspect),a6.prototype.compare=function(e,t,r,n,a){if(iT(e,Uint8Array)&&(e=a6.from(e,e.offset,e.byteLength)),!a6.isBuffer(e))throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===a&&(a=this.length),t<0||r>e.length||n<0||a>this.length)throw RangeError("out of range index");if(n>=a&&t>=r)return 0;if(n>=a)return -1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,a>>>=0,this===e)return 0;let i=a-n,s=r-t,o=Math.min(i,s),l=this.slice(n,a),u=e.slice(t,r);for(let e=0;e<o;++e)if(l[e]!==u[e]){i=l[e],s=u[e];break}return i<s?-1:+(s<i)},a6.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},a6.prototype.indexOf=function(e,t,r){return is(this,e,t,r,!0)},a6.prototype.lastIndexOf=function(e,t,r){return is(this,e,t,r,!1)},a6.prototype.write=function(e,t,r,n){var a,i,s,o,l,u,h,p;if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else if(isFinite(t))t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0);else throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let d=this.length-t;if((void 0===r||r>d)&&(r=d),e.length>0&&(r<0||t<0)||t>this.length)throw RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let c=!1;for(;;)switch(n){case"hex":return function(e,t,r,n){let a;r=Number(r)||0;let i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;let s=t.length;for(n>s/2&&(n=s/2),a=0;a<n;++a){var o;let n=parseInt(t.substr(2*a,2),16);if((o=n)!=o)break;e[r+a]=n}return a}(this,e,t,r);case"utf8":case"utf-8":return a=t,i=r,iN(iI(e,this.length-a),this,a,i);case"ascii":case"latin1":case"binary":return s=t,o=r,iN(function(e){let t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(e),this,s,o);case"base64":return l=t,u=r,iN(iC(e),this,l,u);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return h=t,p=r,iN(function(e,t){let r,n,a=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)n=(r=e.charCodeAt(i))>>8,a.push(r%256),a.push(n);return a}(e,this.length-h),this,h,p);default:if(c)throw TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),c=!0}},a6.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},a6.prototype.slice=function(e,t){let r=this.length;e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);let n=this.subarray(e,t);return Object.setPrototypeOf(n,a6.prototype),n},a6.prototype.readUintLE=a6.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||iu(e,t,this.length);let n=this[e],a=1,i=0;for(;++i<t&&(a*=256);)n+=this[e+i]*a;return n},a6.prototype.readUintBE=a6.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||iu(e,t,this.length);let n=this[e+--t],a=1;for(;t>0&&(a*=256);)n+=this[e+--t]*a;return n},a6.prototype.readUint8=a6.prototype.readUInt8=function(e,t){return e>>>=0,t||iu(e,1,this.length),this[e]},a6.prototype.readUint16LE=a6.prototype.readUInt16LE=function(e,t){return e>>>=0,t||iu(e,2,this.length),this[e]|this[e+1]<<8},a6.prototype.readUint16BE=a6.prototype.readUInt16BE=function(e,t){return e>>>=0,t||iu(e,2,this.length),this[e]<<8|this[e+1]},a6.prototype.readUint32LE=a6.prototype.readUInt32LE=function(e,t){return e>>>=0,t||iu(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+0x1000000*this[e+3]},a6.prototype.readUint32BE=a6.prototype.readUInt32BE=function(e,t){return e>>>=0,t||iu(e,4,this.length),0x1000000*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},a6.prototype.readBigUInt64LE=iE(function(e){iw(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&ik(e,this.length-8);let n=t+256*this[++e]+65536*this[++e]+0x1000000*this[++e],a=this[++e]+256*this[++e]+65536*this[++e]+0x1000000*r;return BigInt(n)+(BigInt(a)<<BigInt(32))}),a6.prototype.readBigUInt64BE=iE(function(e){iw(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&ik(e,this.length-8);let n=0x1000000*t+65536*this[++e]+256*this[++e]+this[++e],a=0x1000000*this[++e]+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(a)}),a6.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||iu(e,t,this.length);let n=this[e],a=1,i=0;for(;++i<t&&(a*=256);)n+=this[e+i]*a;return n>=(a*=128)&&(n-=Math.pow(2,8*t)),n},a6.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||iu(e,t,this.length);let n=t,a=1,i=this[e+--n];for(;n>0&&(a*=256);)i+=this[e+--n]*a;return i>=(a*=128)&&(i-=Math.pow(2,8*t)),i},a6.prototype.readInt8=function(e,t){return(e>>>=0,t||iu(e,1,this.length),128&this[e])?-((255-this[e]+1)*1):this[e]},a6.prototype.readInt16LE=function(e,t){e>>>=0,t||iu(e,2,this.length);let r=this[e]|this[e+1]<<8;return 32768&r?0xffff0000|r:r},a6.prototype.readInt16BE=function(e,t){e>>>=0,t||iu(e,2,this.length);let r=this[e+1]|this[e]<<8;return 32768&r?0xffff0000|r:r},a6.prototype.readInt32LE=function(e,t){return e>>>=0,t||iu(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},a6.prototype.readInt32BE=function(e,t){return e>>>=0,t||iu(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},a6.prototype.readBigInt64LE=iE(function(e){iw(e>>>=0,"offset");let t=this[e],r=this[e+7];return(void 0===t||void 0===r)&&ik(e,this.length-8),(BigInt(this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24))<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+0x1000000*this[++e])}),a6.prototype.readBigInt64BE=iE(function(e){iw(e>>>=0,"offset");let t=this[e],r=this[e+7];return(void 0===t||void 0===r)&&ik(e,this.length-8),(BigInt((t<<24)+65536*this[++e]+256*this[++e]+this[++e])<<BigInt(32))+BigInt(0x1000000*this[++e]+65536*this[++e]+256*this[++e]+r)}),a6.prototype.readFloatLE=function(e,t){return e>>>=0,t||iu(e,4,this.length),kl(this,e,!0,23,4)},a6.prototype.readFloatBE=function(e,t){return e>>>=0,t||iu(e,4,this.length),kl(this,e,!1,23,4)},a6.prototype.readDoubleLE=function(e,t){return e>>>=0,t||iu(e,8,this.length),kl(this,e,!0,52,8)},a6.prototype.readDoubleBE=function(e,t){return e>>>=0,t||iu(e,8,this.length),kl(this,e,!1,52,8)},a6.prototype.writeUintLE=a6.prototype.writeUIntLE=function(e,t,r,n){if(e*=1,t>>>=0,r>>>=0,!n){let n=Math.pow(2,8*r)-1;ih(this,e,t,r,n,0)}let a=1,i=0;for(this[t]=255&e;++i<r&&(a*=256);)this[t+i]=e/a&255;return t+r},a6.prototype.writeUintBE=a6.prototype.writeUIntBE=function(e,t,r,n){if(e*=1,t>>>=0,r>>>=0,!n){let n=Math.pow(2,8*r)-1;ih(this,e,t,r,n,0)}let a=r-1,i=1;for(this[t+a]=255&e;--a>=0&&(i*=256);)this[t+a]=e/i&255;return t+r},a6.prototype.writeUint8=a6.prototype.writeUInt8=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,1,255,0),this[t]=255&e,t+1},a6.prototype.writeUint16LE=a6.prototype.writeUInt16LE=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},a6.prototype.writeUint16BE=a6.prototype.writeUInt16BE=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},a6.prototype.writeUint32LE=a6.prototype.writeUInt32LE=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,4,0xffffffff,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},a6.prototype.writeUint32BE=a6.prototype.writeUInt32BE=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,4,0xffffffff,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},a6.prototype.writeBigUInt64LE=iE(function(e,t=0){return ip(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),a6.prototype.writeBigUInt64BE=iE(function(e,t=0){return id(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),a6.prototype.writeIntLE=function(e,t,r,n){if(e*=1,t>>>=0,!n){let n=Math.pow(2,8*r-1);ih(this,e,t,r,n-1,-n)}let a=0,i=1,s=0;for(this[t]=255&e;++a<r&&(i*=256);)e<0&&0===s&&0!==this[t+a-1]&&(s=1),this[t+a]=(e/i|0)-s&255;return t+r},a6.prototype.writeIntBE=function(e,t,r,n){if(e*=1,t>>>=0,!n){let n=Math.pow(2,8*r-1);ih(this,e,t,r,n-1,-n)}let a=r-1,i=1,s=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===s&&0!==this[t+a+1]&&(s=1),this[t+a]=(e/i|0)-s&255;return t+r},a6.prototype.writeInt8=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},a6.prototype.writeInt16LE=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},a6.prototype.writeInt16BE=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},a6.prototype.writeInt32LE=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,4,0x7fffffff,-0x80000000),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},a6.prototype.writeInt32BE=function(e,t,r){return e*=1,t>>>=0,r||ih(this,e,t,4,0x7fffffff,-0x80000000),e<0&&(e=0xffffffff+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},a6.prototype.writeBigInt64LE=iE(function(e,t=0){return ip(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),a6.prototype.writeBigInt64BE=iE(function(e,t=0){return id(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),a6.prototype.writeFloatLE=function(e,t,r){return im(this,e,t,!0,r)},a6.prototype.writeFloatBE=function(e,t,r){return im(this,e,t,!1,r)},a6.prototype.writeDoubleLE=function(e,t,r){return ig(this,e,t,!0,r)},a6.prototype.writeDoubleBE=function(e,t,r){return ig(this,e,t,!1,r)},a6.prototype.copy=function(e,t,r,n){if(!a6.isBuffer(e))throw TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r||0===e.length||0===this.length)return 0;if(t<0)throw RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw RangeError("Index out of range");if(n<0)throw RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);let a=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),a},a6.prototype.fill=function(e,t,r,n){let a;if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw TypeError("encoding must be a string");if("string"==typeof n&&!a6.isEncoding(n))throw TypeError("Unknown encoding: "+n);if(1===e.length){let t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw RangeError("Out of range index");if(r<=t)return this;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{let i=a6.isBuffer(e)?e:a6.from(e,n),s=i.length;if(0===s)throw TypeError('The value "'+e+'" is invalid for argument "value"');for(a=0;a<r-t;++a)this[a+t]=i[a%s]}return this};const iy={};function ib(e,t,r){iy[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function ix(e){let t="",r=e.length,n=+("-"===e[0]);for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function iv(e,t,r,n,a,i){if(e>r||e<t){let n,a="bigint"==typeof t?"n":"";throw n=i>3?0===t||t===BigInt(0)?`>= 0${a} and < 2${a} ** ${(i+1)*8}${a}`:`>= -(2${a} ** ${(i+1)*8-1}${a}) and < 2 ** ${(i+1)*8-1}${a}`:`>= ${t}${a} and <= ${r}${a}`,new iy.ERR_OUT_OF_RANGE("value",n,e)}iw(a,"offset"),(void 0===n[a]||void 0===n[a+i])&&ik(a,n.length-(i+1))}function iw(e,t){if("number"!=typeof e)throw new iy.ERR_INVALID_ARG_TYPE(t,"number",e)}function ik(e,t,r){if(Math.floor(e)!==e)throw iw(e,r),new iy.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new iy.ERR_BUFFER_OUT_OF_BOUNDS;throw new iy.ERR_OUT_OF_RANGE(r||"offset",`>= ${+!!r} and <= ${t}`,e)}ib("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),ib("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError),ib("ERR_OUT_OF_RANGE",function(e,t,r){let n=`The value of "${e}" is out of range.`,a=r;return Number.isInteger(r)&&Math.abs(r)>0x100000000?a=ix(String(r)):"bigint"==typeof r&&(a=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(a=ix(a)),a+="n"),n+=` It must be ${t}. Received ${a}`},RangeError);const iS=/[^+/0-9A-Za-z-_]/g;function iI(e,t){let r;t=t||1/0;let n=e.length,a=null,i=[];for(let s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!a){if(r>56319||s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}a=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),a=r;continue}r=(a-55296<<10|r-56320)+65536}else a&&(t-=3)>-1&&i.push(239,191,189);if(a=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else if(r<1114112){if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}else throw Error("Invalid code point")}return i}function iC(e){return function(e){var t,r,n=function(e){var t=e.length;if(t%4>0)throw Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");-1===r&&(r=t);var n=r===t?0:4-r%4;return[r,n]}(e),a=n[0],i=n[1],s=new aJ((a+i)*3/4-i),o=0,l=i>0?a-4:a;for(r=0;r<l;r+=4)t=aQ[e.charCodeAt(r)]<<18|aQ[e.charCodeAt(r+1)]<<12|aQ[e.charCodeAt(r+2)]<<6|aQ[e.charCodeAt(r+3)],s[o++]=t>>16&255,s[o++]=t>>8&255,s[o++]=255&t;return 2===i&&(t=aQ[e.charCodeAt(r)]<<2|aQ[e.charCodeAt(r+1)]>>4,s[o++]=255&t),1===i&&(t=aQ[e.charCodeAt(r)]<<10|aQ[e.charCodeAt(r+1)]<<4|aQ[e.charCodeAt(r+2)]>>2,s[o++]=t>>8&255,s[o++]=255&t),s}(function(e){if((e=(e=e.split("=")[0]).trim().replace(iS,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function iN(e,t,r,n){let a;for(a=0;a<n&&!(a+r>=t.length)&&!(a>=e.length);++a)t[a+r]=e[a];return a}function iT(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}const i$=function(){let e="0123456789abcdef",t=Array(256);for(let r=0;r<16;++r){let n=16*r;for(let a=0;a<16;++a)t[n+a]=e[r]+e[a]}return t}();function iE(e){return"undefined"==typeof BigInt?iR:e}function iR(){throw Error("BigInt not supported")}async function iA(e,t){let r=[],n=[],a=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let i=0;i<a.length;++i){let s=a[i],o=Array.isArray(e)?e[i].tensor:e[s];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw Error(`Unsupported dtype in weight '${s}': ${o.dtype}`);let l={name:s,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){let e=new Promise(async e=>{let t=await o.bytes(),r=new Uint8Array(t.reduce((e,t)=>e+t.length,0)+4*t.length),n=0;for(let e=0;e<t.length;e++){let a=t[e],i=new Uint8Array(new Uint32Array([a.length]).buffer);r.set(i,n),n+=4,r.set(a,n),n+=a.length}e(r)});n.push(e)}else n.push(o.data());null!=t&&(l.group=t),r.push(l)}return{data:function(e){if(null===e)throw Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0,r=[];e.forEach(e=>{if(t+=e.byteLength,r.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});let n=new Uint8Array(t),a=0;return r.forEach(e=>{n.set(new Uint8Array(e.buffer),a),a+=e.byteLength}),n.buffer}(await Promise.all(n)),specs:r}}function iF(e,t){let r=new aV(e),n={},a=0;for(let e of t){let t=function(e,t){let r,n=q(e.shape);if("quantization"in e)r=aU[e.quantization.dtype];else if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=4+new Uint32Array(t(e,e+4))[0];return e}else r=aU[e.dtype];return n*r}(e,(e,t)=>r.slice(a+e,a+t));n[e.name]=iD(e,r.slice(a,a+t)),a+=t}return n}async function i_(e,t){let r,n=q(e.shape);if("quantization"in e)r=aU[e.quantization.dtype];else if("string"===e.dtype){let e=0;for(let r=0;r<n;r++)e+=4+new Uint32Array(await t(e,e+4))[0];return e}else r=aU[e.dtype];return n*r}function iD(e,t){let r,n=e.name,a=e.dtype,i=e.shape,s=q(i),o=0;if("quantization"in e){let i=e.quantization;if("uint8"===i.dtype||"uint16"===i.dtype){if(!("min"in i&&"scale"in i))throw Error(`Weight ${e.name} with quantization ${i.dtype} doesn't have corresponding metadata min and scale.`)}else if("float16"===i.dtype){if("float32"!==a)throw Error(`Weight ${e.name} is quantized with ${i.dtype} which only supports weights of type float32 not ${a}.`)}else throw Error(`Weight ${e.name} has unknown quantization dtype ${i.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let l=aU[i.dtype],u="uint8"===i.dtype?new Uint8Array(t):new Uint16Array(t);if("float32"===a)if("uint8"===i.dtype||"uint16"===i.dtype){r=new Float32Array(u.length);for(let e=0;e<u.length;e++){let t=u[e];r[e]=t*i.scale+i.min}}else if("float16"===i.dtype)r=(function(){let e=function(){let e=e=>{let t=e<<13,r=0;for(;(8388608&t)==0;)r-=8388608,t<<=1;return(t&=-8388609)|(r+=0x38800000)},t=new Uint32Array(2048);t[0]=0;for(let r=1;r<1024;r++)t[r]=e(r);for(let e=1024;e<2048;e++)t[e]=0x38000000+(e-1024<<13);return t}(),t=function(){let e=new Uint32Array(64);e[0]=0,e[31]=0x47800000,e[32]=0x80000000,e[63]=0xc7800000;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=0x80000000+(t-32<<23);return e}(),r=function(){let e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return n=>{let a=new ArrayBuffer(4*n.length),i=new Uint32Array(a);for(let a=0;a<n.length;a++){let s=n[a],o=e[r[s>>10]+(1023&s)]+t[s>>10];i[a]=o}return new Float32Array(a)}})()(u);else throw Error(`Unsupported quantization type ${i.dtype} for weight type float32.`);else if("int32"===a){if("uint8"!==i.dtype&&"uint16"!==i.dtype)throw Error(`Unsupported quantization type ${i.dtype} for weight type int32.`);r=new Int32Array(u.length);for(let e=0;e<u.length;e++){let t=u[e];r[e]=Math.round(t*i.scale+i.min)}}else throw Error(`Unsupported dtype in weight '${n}': ${a}`);o+=s*l}else if("string"===a){let n=q(e.shape);r=[];for(let e=0;e<n;e++){let e=new Uint32Array(t.slice(o,o+4))[0];o+=4;let n=new Uint8Array(t.slice(o,o+e));r.push(n),o+=e}}else{let e=aU[a];if("float32"===a)r=new Float32Array(t);else if("int32"===a)r=new Int32Array(t);else if("bool"===a)r=new Uint8Array(t);else if("complex64"===a){r=new Float32Array(t);let e=new Float32Array(r.length/2),n=new Float32Array(r.length/2);for(let t=0;t<e.length;t++)e[t]=r[2*t],n[t]=r[2*t+1];let a=aW(e,i,"float32"),s=aW(n,i,"float32"),o=aL(a,s);return a.dispose(),s.dispose(),o}else throw Error(`Unsupported dtype in weight '${n}': ${a}`);o+=s*e}return aW(r,i,a)}async function iO(e,t,r){let n=new Uint8Array(t);for(;n.byteLength<r;){let{done:t,value:a}=await e.read();if(t&&null==a){let e=r-n.byteLength;throw Error(`Reader is done but ${e} bytes are still expected`)}let i=new Uint8Array(n.length+a.byteLength);i.set(n,0),i.set(new Uint8Array(a),n.length),n=i}return n.buffer}async function iM(e,t){let r={},n=e.getReader(),a=new ArrayBuffer(0);for(let e of t){let t=await i_(e,async(e,t)=>(a=await iO(n,a,t)).slice(e,t)),i=(a=await iO(n,a,t)).slice(0,t);a=a.slice(t);let s=iD(e,i);if(r[e.name]=s,"webgpu"===aq()){let e=aY();"uploadToGPU"in e&&q(s.shape)>=e_.get("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD")&&e.uploadToGPU(s.dataId)}}return r}const iz="undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa;function iP(e){return iz?a6.byteLength(e,"utf8"):new Blob([e]).size}function iL(e){return aV.join(e)}function iB(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);let t=e.split("/");return t[t.length-1]}function iW(e,t){let r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),r}function iU(e,t,r){let n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw Error("modelJSON has weightsManifest but weightSpecs is null");if(!r)throw Error("modelJSON has weightsManifest but weightData is null");n.weightSpecs=t,n.weightData=r}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),n}async function iV(e,t){let r,n;return null!=e.weightsManifest&&([r,n]=await t(e.weightsManifest)),iU(e,r,n)}function iG(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:iP(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:iP(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new aV(e.weightData).byteLength}}function iH(e){let t=[];for(let r of e)t.push(...r.weights);return t}class ij{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ij.instance&&(ij.instance=new ij),ij.instance}static registerSaveRouter(e){ij.getInstance().saveRouters.push(e)}static registerLoadRouter(e){ij.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return ij.getHandlers(e,"save")}static getLoadHandlers(e,t){return ij.getHandlers(e,"load",t)}static getHandlers(e,t,r){let n=[];return("load"===t?ij.getInstance().loadRouters:ij.getInstance().saveRouters).forEach(t=>{let a=t(e,r);null!==a&&n.push(a)}),n}}const iK=e=>ij.registerSaveRouter(e),iq=e=>ij.registerLoadRouter(e),iX=e=>ij.getSaveHandlers(e),iY=(e,t)=>ij.getLoadHandlers(e,t),iZ="tensorflowjs",iQ="models_store",iJ="model_info_store";function i0(){if(!e_.getBool("IS_BROWSER"))throw Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw Error("The current browser does not appear to support IndexedDB.");return t}function i1(e){let t=e.result;t.createObjectStore(iQ,{keyPath:"modelPath"}),t.createObjectStore(iJ,{keyPath:"modelPath"})}class i2{constructor(e){if(this.indexedDB=i0(),null==e||!e)throw Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,r)=>{let n=this.indexedDB.open(iZ,1);n.onupgradeneeded=()=>i1(n),n.onsuccess=()=>{let a=n.result;if(null==t){let t=a.transaction(iQ,"readonly"),n=t.objectStore(iQ).get(this.modelPath);n.onsuccess=()=>{if(null==n.result)return a.close(),r(Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(n.result.modelArtifacts)},n.onerror=e=>(a.close(),r(n.error)),t.oncomplete=()=>a.close()}else{let n,i;t.weightData=aV.join(t.weightData);let s=iG(t),o=a.transaction(iJ,"readwrite"),l=o.objectStore(iJ);try{n=l.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(e){return r(e)}n.onsuccess=()=>{let n,u=(i=a.transaction(iQ,"readwrite")).objectStore(iQ);try{n=u.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(e){return r(e)}n.onsuccess=()=>e({modelArtifactsInfo:s}),n.onerror=e=>{let t=(l=o.objectStore(iJ)).delete(this.modelPath);t.onsuccess=()=>(a.close(),r(n.error)),t.onerror=e=>(a.close(),r(n.error))}},n.onerror=e=>(a.close(),r(n.error)),o.oncomplete=()=>{null==i?a.close():i.oncomplete=()=>a.close()}}},n.onerror=e=>r(n.error)})}}i2.URL_SCHEME="indexeddb://";const i3=e=>{var t;return e_.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(i2.URL_SCHEME)?(t=e.slice(i2.URL_SCHEME.length),new i2(t)):null};ij.registerSaveRouter(i3),ij.registerLoadRouter(i3);const i4="tensorflowjs_models",i6="info";function i5(e){return{info:[i4,e,i6].join("/"),topology:[i4,e,"model_topology"].join("/"),weightSpecs:[i4,e,"weight_specs"].join("/"),weightData:[i4,e,"weight_data"].join("/"),modelMetadata:[i4,e,"model_metadata"].join("/")}}function i8(e){for(let t of Object.values(e))window.localStorage.removeItem(t)}class i7{constructor(e){if(!e_.getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=i5(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let t=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),n=iG(e),a=aV.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,function(e){if(iz)return a6.from(e).toString("base64");let t=new Uint8Array(e),r="";for(let e=0,n=t.length;e<n;e++)r+=String.fromCharCode(t[e]);return btoa(r)}(a));let i={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(i)),{modelArtifactsInfo:n}}catch(e){throw i8(this.keys),Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let t={},r=JSON.parse(this.LS.getItem(this.keys.topology));if(null==r)throw Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=r;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==n)throw Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=n;let a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){let e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}let i=this.LS.getItem(this.keys.weightData);if(null==i)throw Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(iz){let t=a6.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}let t=atob(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;++e)r.set([t.charCodeAt(e)],e);return r.buffer}(i),t}}i7.URL_SCHEME="localstorage://";const i9=e=>{var t;return e_.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(i7.URL_SCHEME)?(t=e.slice(i7.URL_SCHEME.length),new i7(t)):null};ij.registerSaveRouter(i9),ij.registerLoadRouter(i9);class se{constructor(){this.managers={}}static getInstance(){return null==se.instance&&(se.instance=new se),se.instance}static registerManager(e,t){H(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),H(e.length>0,()=>"scheme must not be an empty string.");let r=se.getInstance();H(null==r.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),r.managers[e]=t}static getManager(e){let t=se.getInstance().managers[e];if(null==t)throw Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(se.getInstance().managers)}}function st(e){if(-1===e.indexOf("://"))throw Error(`The url string provided does not contain a scheme. Supported schemes are: ${se.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function sr(e,t,r=!1){H(e!==t,()=>`Old path and new path are the same: '${e}'`);let n=ij.getLoadHandlers(e);H(n.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),H(n.length<2,()=>`Copying failed because more than one (${n.length}) load handlers for source URL ${e}.`);let a=n[0],i=ij.getSaveHandlers(t);H(i.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),H(i.length<2,()=>`Copying failed because more than one (${n.length}) save handlers for destination URL ${t}.`);let s=i[0],o=st(e).scheme,l=st(e).path,u=o===st(e).scheme,h=await a.load();r&&u&&await se.getManager(o).removeModel(l);let p=await s.save(h);return r&&!u&&await se.getManager(o).removeModel(l),p.modelArtifactsInfo}async function sn(){let e=se.getSchemes(),t={};for(let r of e){let e=await se.getManager(r).listModels();for(let n in e)t[r+"://"+n]=e[n]}return t}async function sa(e){let t=st(e);return se.getManager(t.scheme).removeModel(t.path)}async function si(e,t){return sr(e,t,!1)}async function ss(e,t){return sr(e,t,!0)}if(e_.get("IS_BROWSER")){e_.setPlatform("browser",new class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){if("undefined"==typeof window||!e_.getBool("USE_SETTIMEOUTCUSTOM"))return void setTimeout(e,t);this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))}isTypedArray(e){return nb(e)}});try{se.registerManager(i7.URL_SCHEME,new class{constructor(){H(e_.getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),H("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let e={},t=i4+"/",r="/"+i6;for(let n=0;n<this.LS.length;++n){let a=this.LS.key(n);a.startsWith(t)&&a.endsWith(r)&&(e[function(e){let t=e.split("/");if(t.length<3)throw Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;let r=i5(e=(t=e).startsWith(i7.URL_SCHEME)?t.slice(i7.URL_SCHEME.length):t);if(null==this.LS.getItem(r.info))throw Error(`Cannot find model at path '${e}'`);let n=JSON.parse(this.LS.getItem(r.info));return i8(r),n}})}catch(e){}try{se.registerManager(i2.URL_SCHEME,new class{constructor(){this.indexedDB=i0()}async listModels(){return new Promise((e,t)=>{let r=this.indexedDB.open(iZ,1);r.onupgradeneeded=()=>i1(r),r.onsuccess=()=>{let n=r.result,a=n.transaction(iJ,"readonly"),i=a.objectStore(iJ).getAll();i.onsuccess=()=>{let t={};for(let e of i.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},i.onerror=e=>(n.close(),t(i.error)),a.oncomplete=()=>n.close()},r.onerror=e=>t(r.error)})}async removeModel(e){var t;return e=(t=e).startsWith(i2.URL_SCHEME)?t.slice(i2.URL_SCHEME.length):t,new Promise((t,r)=>{let n=this.indexedDB.open(iZ,1);n.onupgradeneeded=()=>i1(n),n.onsuccess=()=>{let a,i=n.result,s=i.transaction(iJ,"readwrite"),o=s.objectStore(iJ),l=o.get(e);l.onsuccess=()=>{if(null==l.result)return i.close(),r(Error(`Cannot find model with path '${e}' in IndexedDB.`));{let n=o.delete(e),s=()=>{let n=(a=i.transaction(iQ,"readwrite")).objectStore(iQ).delete(e);n.onsuccess=()=>t(l.result.modelArtifactsInfo),n.onerror=e=>r(l.error)};n.onsuccess=s,n.onerror=e=>(s(),i.close(),r(l.error))}},l.onerror=e=>(i.close(),r(l.error)),s.oncomplete=()=>{null==a?i.close():a.oncomplete=()=>i.close()}},n.onerror=e=>r(n.error)})}})}catch(e){}}function so(e,t="float32",r){return t=t||"float32",eN(e),new as(e,t,r)}e_.get("IS_NODE")&&!e_.get("IS_BROWSER")&&e_.setPlatform("node",new class{constructor(){this.util=R("kjyEk"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=e_.global.fetch?e_.global.fetch(e,t):(null==r&&(r=R("kjyEk")),r(e,t))}now(){let e=eD.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const sl=aP({cast_:function(e,t){let r=aO(e,"x","cast");if(!eh(t))throw Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==r.dtype||"string"!==t&&"string"===r.dtype)throw Error("Only strings can be casted to strings");return aN.runKernel(tn,{x:r},{dtype:t})}}),su=aP({clone_:function(e){let t=aO(e,"x","clone","string_or_numeric");return aN.runKernel(tG,{x:t})}});function sh(e,t=!1){console.log(e.toString(t))}aC(),al={buffer:so,cast:sl,clone:su,print:sh};const sp=aP({add_:function(e,t){let r=aO(e,"a","add"),n=aO(t,"b","add");[r,n]=ab(r,n);let a={a:r,b:n};return aN.runKernel("Add",a)}}),sd=aP({floorDiv_:function(e,t){let r=aO(e,"a","floorDiv"),n=aO(t,"b","floorDiv");[r,n]=ab(r,n);let a={a:r,b:n};return aN.runKernel(tP,a)}}),sc=aP({div_:function(e,t){let r=aO(e,"a","div"),n=aO(t,"b","div");if([r,n]=ab(r,n),"int32"===r.dtype&&"int32"===n.dtype)return sd(r,n);let a={a:r,b:n};return aN.runKernel(tE,a,{})}}),sf=aP({mul_:function(e,t){let r=aO(e,"a","mul"),n=aO(t,"b","mul");[r,n]=ab(r,n);let a={a:r,b:n};return aN.runKernel(ri,a)}}),sm=aP({sqrt_:function(e){let t=aO(e,"x","sqrt","float32");return aN.runKernel(rU,{x:t})}}),sg=aP({square_:function(e){let t=aO(e,"x","square");return aN.runKernel("Square",{x:t},{})}}),sy=aP({zerosLike_:function(e){let t=aO(e,"x","zerosLike");return aN.runKernel(nr,{x:t})}});function sb(e){return aN.customGrad(e)}function sx(e,t){if((n9(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&n9(e)&&!(e instanceof Uint8Array))throw Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return aB(e,[],[],t)}var sv={};N(sv,"Serializable",()=>sS),N(sv,"SerializationMap",()=>sI),N(sv,"registerClass",()=>sC),N(sv,"getRegisteredName",()=>sN);const sw=new Map,sk=new Map;class sS{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class sI{constructor(){this.classNameMap={}}static getMap(){return null==sI.instance&&(sI.instance=new sI),sI.instance}static register(e){sI.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function sC(e,t,r){H(null!=e.className,()=>"Class being registered does not have the static className property defined."),H("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),H(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),void 0===t&&(t="Custom"),void 0===r&&(r=e.className);let n=t+">"+r;return sI.register(e),sw.set(n,e),sk.set(e,n),e}function sN(e){return sk.has(e)?sk.get(e):e.className}class sT extends sS{minimize(e,t=!1,r){let{value:n,grads:a}=this.computeGradients(e,r);if(null!=r){let e=r.map(e=>({name:e.name,tensor:a[e.name]}));this.applyGradients(e)}else this.applyGradients(a);return(aj(a),t)?n:(n.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){H(eb(e),()=>"The f passed in variableGrads(f) must be a function"),H(null==t||Array.isArray(t)&&t.every(e=>e instanceof ap),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let r=null!=t;if(!r)for(let e in t=[],aN.registeredVariables)t.push(aN.registeredVariables[e]);let n=r?t.filter(e=>!e.trainable):null,a=t.length;H((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`);let{value:i,grads:s}=aN.gradients(e,t,null,!0);H(s.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),H(0===i.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);let o={};return t.forEach((e,t)=>{null!=s[t]&&(o[e.name]=s[t])}),null!=n&&n.forEach(e=>o[e.name]=null),{value:i,grads:o}}(e,t)}dispose(){null!=this.iterations_&&aj(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:sx(this.iterations_,"int32")}}async getWeights(){throw Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(sT,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class s$ extends sT{static get className(){return"Adadelta"}constructor(e,t,r=null){super(),this.learningRate=e,this.rho=t,this.epsilon=r,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==r&&(this.epsilon=aN.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=aN.registeredVariables[t];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${t}/accum_grad`,variable:aH(()=>sy(n).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${t}/accum_var`,variable:aH(()=>sy(n).variable(!1))});let a=Array.isArray(e)?e[r].tensor:e[t];if(null==a)return;let i=this.accumulatedGrads[r].variable,s=this.accumulatedUpdates[r].variable;aH(()=>{let e=sp(sf(i,this.rho),sf(sg(a),1-this.rho)),t=sf(sc(sm(sp(s,this.epsilon)),sm(sp(i,this.epsilon))),a),r=sp(sf(s,this.rho),sf(sg(t),1-this.rho));i.assign(e),s.assign(r);let o=sp(sf(t,-this.learningRate),n);n.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(aj(this.accumulatedGrads.map(e=>e.variable)),aj(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){let e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){let t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function sE(e,t,r){eN(e),r=r||ey(t);let n={shape:e,value:t,dtype:r};return aN.runKernel(tO,{},n)}class sR extends sT{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=aN.registeredVariables[t];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${t}/accumulator`,variable:aH(()=>sE(n.shape,this.initialAccumulatorValue).variable(!1))});let a=Array.isArray(e)?e[r].tensor:e[t];if(null==a)return;let i=this.accumulatedGrads[r].variable;aH(()=>{let e=sp(i,sg(a));i.assign(e);let t=sp(sf(sc(a,sm(sp(e,aN.backend.epsilon()))),-this.learningRate),n);n.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&aj(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}const sA=aP({pow_:function(e,t){let r=aO(e,"base","pow"),n=aO(t,"exp","pow");[r,n]=ab(r,n);let a={a:r,b:n};return aN.runKernel("Pow",a)}}),sF=aP({sub_:function(e,t){let r=aO(e,"a","sub"),n=aO(t,"b","sub");[r,n]=ab(r,n);let a={a:r,b:n};return aN.runKernel("Sub",a)}});class s_ extends sT{static get className(){return"Adam"}constructor(e,t,r,n=null){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],aH(()=>{this.accBeta1=sx(t).variable(),this.accBeta2=sx(r).variable()}),null==n&&(this.epsilon=aN.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);aH(()=>{let r=sF(1,this.accBeta1),n=sF(1,this.accBeta2);t.forEach((t,a)=>{let i=aN.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:aH(()=>sy(i).variable(!1))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:aH(()=>sy(i).variable(!1))});let s=Array.isArray(e)?e[a].tensor:e[t];if(null==s)return;let o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=sp(sf(o,this.beta1),sf(s,1-this.beta1)),h=sp(sf(l,this.beta2),sf(sg(s),1-this.beta2)),p=sc(u,r),d=sc(h,n);o.assign(u),l.assign(h);let c=sp(sf(sc(p,sp(sm(d),this.epsilon)),-this.learningRate),i);i.assign(c)}),this.accBeta1.assign(sf(this.accBeta1,this.beta1)),this.accBeta2.assign(sf(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&aj(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&aj(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),aH(()=>{this.accBeta1.assign(sA(this.beta1,this.iterations_+1)),this.accBeta2.assign(sA(this.beta2,this.iterations_+1))});let t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}const sD=aP({abs_:function(e){let t=aO(e,"x","abs");return"complex64"===t.dtype?aN.runKernel(to,{x:t}):aN.runKernel("Abs",{x:t})}});var sO={};function sM(e,t){let r=e.length,n=[];for(let a=0;a<r;a++){let i=r-1-a,s=e[i]||1;(t[t.length-1-a]||1)>1&&1===s&&n.unshift(i)}return n}function sz(e,t){let r=[];for(let n=0;n<t.length;n++){let a=e[e.length-n-1],i=t.length-n-1,s=t[i];(null==a||1===a&&s>1)&&r.unshift(i)}return r}function sP(e,t){let r=Math.max(e.length,t.length),n=Array(r);for(let a=0;a<r;a++){let i=e[e.length-a-1];null==i&&(i=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===i)n[r-a-1]=s;else if(1===s)n[r-a-1]=i;else if(i!==s)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);else n[r-a-1]=i}return n}N(sO,"getBroadcastDims",()=>sM),N(sO,"getReductionAxes",()=>sz),N(sO,"assertAndGetBroadcastShape",()=>sP);const sL=aP({maximum_:function(e,t){let r=aO(e,"a","maximum"),n=aO(t,"b","maximum");[r,n]=ab(r,n),"bool"===r.dtype&&(r=sl(r,"int32"),n=sl(n,"int32")),sP(r.shape,n.shape);let a={a:r,b:n};return aN.runKernel(t6,a)}});class sB extends sT{static get className(){return"Adamax"}constructor(e,t,r,n=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=r,this.epsilon=n,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],aH(()=>{this.iteration=sx(0).variable(),this.accBeta1=sx(t).variable()}),null==n&&(this.epsilon=aN.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);aH(()=>{let r=sF(1,this.accBeta1),n=sc(-this.learningRate,sp(sf(this.iteration,this.decay),1));t.forEach((t,a)=>{let i=aN.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:sy(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:sy(i).variable(!1)});let s=Array.isArray(e)?e[a].tensor:e[t];if(null==s)return;let o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=sp(sf(o,this.beta1),sf(s,1-this.beta1)),h=sL(sf(l,this.beta2),sD(s));o.assign(u),l.assign(h);let p=sp(sf(sc(n,r),sc(u,sp(h,this.epsilon))),i);i.assign(p)}),this.iteration.assign(sp(this.iteration,1)),this.accBeta1.assign(sf(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&aj(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&aj(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class sW extends sT{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=Array.isArray(e)?e[r].tensor:e[t];if(null==n)return;let a=aN.registeredVariables[t];aH(()=>{let e=sp(sf(this.c,n),a);a.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=aK(sx(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class sU extends sW{static get className(){return"Momentum"}constructor(e,t,r=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=r,this.accumulations=[],this.m=sx(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=aN.registeredVariables[t];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${t}/momentum`,variable:aH(()=>sy(n).variable(!1))});let a=this.accumulations[r].variable,i=Array.isArray(e)?e[r].tensor:e[t];null!=i&&aH(()=>{let e,t=sp(sf(this.m,a),i);e=this.useNesterov?sp(sf(this.c,sp(i,sf(t,this.m))),n):sp(sf(this.c,t),n),a.assign(t),n.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&aj(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class sV extends sT{static get className(){return"RMSProp"}constructor(e,t=.9,r=0,n=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=r,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==n&&(this.epsilon=aN.backend.epsilon()),null==e)throw Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,r)=>{let n=aN.registeredVariables[t];null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${t}/rms`,variable:aH(()=>sy(n).variable(!1))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${t}/momentum`,variable:aH(()=>sy(n).variable(!1))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${t}/mg`,variable:aH(()=>sy(n).variable(!1))});let a=Array.isArray(e)?e[r].tensor:e[t];if(null==a)return;let i=this.accumulatedMeanSquares[r].variable,s=this.accumulatedMoments[r].variable;aH(()=>{let e=sp(sf(i,this.decay),sf(sg(a),1-this.decay));if(this.centered){let t=this.accumulatedMeanGrads[r].variable,o=sp(sf(t,this.decay),sf(a,1-this.decay)),l=sc(sf(a,this.learningRate),sm(sF(e,sp(sg(o),this.epsilon)))),u=sp(sf(s,this.momentum),l);i.assign(e),t.assign(o),s.assign(u);let h=sF(n,u);n.assign(h)}else{let e=sp(sf(i,this.decay),sf(sg(a),1-this.decay)),t=sp(sf(s,this.momentum),sc(sf(a,this.learningRate),sm(sp(e,this.epsilon))));i.assign(e),s.assign(t);let r=sF(n,t);n.assign(r)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&aj(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&aj(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&aj(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const sG=aP({all_:function(e,t=null,r=!1){let n=aO(e,"x","all","bool");return aN.runKernel("All",{x:n},{axis:t,keepDims:r})}}),sH=aP({any_:function(e,t=null,r=!1){let n=aO(e,"x","any","bool");return aN.runKernel("Any",{x:n},{axis:t,keepDims:r})}}),sj=aP({argMax_:function(e,t=0){let r=aO(e,"x","argMax");return aN.runKernel(eZ,{x:r},{axis:t})}});var sK={};function sq(e,t,r,n,a="NHWC",i){let s=[...t,e[3]];return sZ(e,s,r,i,n,null,null,s8(a))}function sX(e,t,r,n,a,i,s="channelsLast"){let o,[l,u]=s0(t);if("channelsLast"===s)o=[l,u,e[3],e[3]];else if("channelsFirst"===s)o=[l,u,e[1],e[1]];else throw Error(`Unknown dataFormat ${s}`);return sZ(e,o,r,n,a,i,!1,s)}function sY(e,t,r,n,a,i,s="NDHWC"){let o,l,[u,h,p]=s1(t);if("NDHWC"===s)l="channelsLast",o=[u,h,p,e[4],e[4]];else if("NCDHW"===s)l="channelsFirst",o=[u,h,p,e[1],e[1]];else throw Error(`Unknown dataFormat ${s}`);return sQ(e,o,r,n,a,!1,l,i)}function sZ(e,t,r,n,a,i,s=!1,o="channelsLast"){let l,[u,h,p,d]=[-1,-1,-1,-1];if("channelsLast"===o)[u,h,p,d]=e;else if("channelsFirst"===o)[u,d,h,p]=e;else throw Error(`Unknown dataFormat ${o}`);let[c,f,,m]=t,[g,y]=s0(r),[b,x]=s0(n),v=s2(c,b),w=s2(f,x),{padInfo:k,outHeight:S,outWidth:I}=function(e,t,r,n,a,i,s,o,l){let u,h,p;if("number"==typeof e){let a=0===e?"VALID":"NUMBER";u={top:e,bottom:e,left:e,right:e,type:a};let s=function(e,t,r,n,a){null==n&&(n=sJ(e,t,r));let i=e[0],s=e[1];return[s3((i-t+2*n)/r+1,a),s3((s-t+2*n)/r+1,a)]}([t,r],i,n,e,o);h=s[0],p=s[1]}else if("same"===e){let e=Math.max(0,((h=Math.ceil(t/n))-1)*n+i-t),o=Math.max(0,((p=Math.ceil(r/a))-1)*a+s-r),l=Math.floor(e/2),d=Math.floor(o/2);u={top:l,bottom:e-l,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},h=Math.ceil((t-i+1)/n),p=Math.ceil((r-s+1)/a);else if("object"==typeof e){let d="channelsLast"===l?e[1][0]:e[2][0],c="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:d,bottom:c,left:f,right:m,type:0===d&&0===c&&0===f&&0===m?"VALID":"EXPLICIT"},h=s3((t-i+d+c)/n+1,o),p=s3((r-s+f+m)/a+1,o)}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:u,outHeight:h,outWidth:p}}(a,h,p,g,y,v,w,i,o),C=s?m*d:m;return"channelsFirst"===o?l=[u,C,S,I]:"channelsLast"===o&&(l=[u,S,I,C]),{batchSize:u,dataFormat:o,inHeight:h,inWidth:p,inChannels:d,outHeight:S,outWidth:I,outChannels:C,padInfo:k,strideHeight:g,strideWidth:y,filterHeight:c,filterWidth:f,effectiveFilterHeight:v,effectiveFilterWidth:w,dilationHeight:b,dilationWidth:x,inShape:e,outShape:l,filterShape:t}}function sQ(e,t,r,n,a,i=!1,s="channelsLast",o){let l,[u,h,p,d,c]=[-1,-1,-1,-1,-1];if("channelsLast"===s)[u,h,p,d,c]=e;else if("channelsFirst"===s)[u,c,h,p,d]=e;else throw Error(`Unknown dataFormat ${s}`);let[f,m,g,,y]=t,[b,x,v]=s1(r),[w,k,S]=s1(n),I=s2(f,w),C=s2(m,k),N=s2(g,S),{padInfo:T,outDepth:$,outHeight:E,outWidth:R}=function(e,t,r,n,a,i,s,o,l,u,h){let p,d,c,f;if("valid"===e&&(e=0),"number"==typeof e){let m=0===e?"VALID":"NUMBER";p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:m};let g=function(e,t,r,n,a,i){null==a&&(a=sJ(e,t[0],n[0]));let s=[0,0,0,1];for(let r=0;r<3;r++)e[r]+2*a>=t[r]&&(s[r]=s3((e[r]-t[r]+2*a)/n[r]+1,i));return s}([t,r,n,1],[o,l,u],0,[a,i,s],e,h);d=g[0],c=g[1],f=g[2]}else if("same"===e){let e=((d=Math.ceil(t/a))-1)*a+o-t,h=((c=Math.ceil(r/i))-1)*i+l-r,m=((f=Math.ceil(n/s))-1)*s+u-n,g=Math.floor(e/2),y=Math.floor(h/2),b=Math.floor(m/2);p={top:y,bottom:h-y,left:b,right:m-b,front:g,back:e-g,type:"SAME"}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:p,outDepth:d,outHeight:c,outWidth:f}}(a,h,p,d,b,x,v,I,C,N,o),A=i?y*c:y;return"channelsFirst"===s?l=[u,A,$,E,R]:"channelsLast"===s&&(l=[u,$,E,R,A]),{batchSize:u,dataFormat:s,inDepth:h,inHeight:p,inWidth:d,inChannels:c,outDepth:$,outHeight:E,outWidth:R,outChannels:A,padInfo:T,strideDepth:b,strideHeight:x,strideWidth:v,filterDepth:f,filterHeight:m,filterWidth:g,effectiveFilterDepth:I,effectiveFilterHeight:C,effectiveFilterWidth:N,dilationDepth:w,dilationHeight:k,dilationWidth:S,inShape:e,outShape:l,filterShape:t}}function sJ(e,t,r,n=1){let a=s2(t,n);return Math.floor((e[0]*(r-1)-r+a)/2)}function s0(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function s1(e){return"number"==typeof e?[e,e,e]:e}function s2(e,t){return t<=1?e:e+(e-1)*(t-1)}function s3(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw Error(`Unknown roundingMode ${t}`)}}function s4(e){let[t,r,n]=s0(e);return 1===t&&1===r&&1===n}function s6(e,t){return s4(e)||s4(t)}function s5(e){return s0(e).every(e=>e>0)}function s8(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw Error(`Unknown dataFormat ${e}`)}function s7(e,t,r){if(null!=r)if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${r} but got pad ${t}.`);else if("number"==typeof t)H(Q(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${r} but got pad ${t}.`);else if("object"==typeof t)t.forEach(t=>{t.forEach(t=>{H(Q(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${r} but got pad ${t}.`)})});else throw Error(`Error in ${e}: Unknown padding parameter: ${t}`)}N(sK,"computeDilation2DInfo",()=>sq),N(sK,"convertConv2DDataFormat",()=>s8),N(sK,"computeConv2DInfo",()=>sZ),N(sK,"computePool2DInfo",()=>sX),N(sK,"computePool3DInfo",()=>sY),N(sK,"computeConv3DInfo",()=>sQ),N(sK,"computeDefaultPad",()=>sJ),N(sK,"tupleValuesAreOne",()=>s4),N(sK,"eitherStridesOrDilationsAreOne",()=>s6),N(sK,"stridesOrDilationsArePositive",()=>s5),N(sK,"checkPadOnDimRoundingMode",()=>s7);const s9=aP({reshape_:function(e,t){let r=aO(e,"x","reshape","string_or_numeric");return aN.runKernel(rS,{x:r},{shape:t})}}),oe=aP({avgPool_:function(e,t,r,n,a){let i=aO(e,"x","avgPool","float32");H(s6(r,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${r} and dilations '1'`);let s=i,o=!1;3===i.rank&&(o=!0,s=s9(i,[1,i.shape[0],i.shape[1],i.shape[2]])),H(4===s.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${s.rank}.`),s7("avgPool",n,a);let l={x:s},u=aN.runKernel(e4,l,{filterSize:t,strides:r,pad:n,dimRoundingMode:a});return(u=sl(u,i.dtype),o)?s9(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),ot=aP({avgPool3d_:function(e,t,r,n,a,i="NDHWC"){let s=aO(e,"x","avgPool3d","float32"),o=s,l=!1;4===s.rank&&(l=!0,o=s9(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),H(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),H("NDHWC"===i,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`),H("number"==typeof r&&r>0||Array.isArray(r)&&r[0]>0&&r[1]>0&&r[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${r}'`),s7("avgPool3d",n,a);let u={x:o},h=aN.runKernel(e5,u,{filterSize:t,strides:r,pad:n,dimRoundingMode:a,dataFormat:i});return(h=sl(h,o.dtype),l)?s9(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});var or={};N(or,"fromUint8ToStringArray",()=>lY),N(or,"fromStringArrayToUint8",()=>lZ),N(or,"slice_util",()=>oM),N(or,"upcastType",()=>af),N(or,"segment_util",()=>lj);var on={};function oa(e,t){for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0}function oi(e,t,r){let n=e.length+t.length,a=[],i=0,s=0;for(let o=0;o<n;o++)-1===r.indexOf(o)?a.push(e[i++]):a.push(t[s++]);return a}function os(e,t){let r=[],n=e.length;for(let a=0;a<n;a++)-1===t.indexOf(a)&&r.push(e[a]);return[r,t.map(t=>e[t])]}function oo(e,t){return oi(e,t.map(e=>1),t)}function ol(e,t,r){H(oa(t,r),()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${r} input.`)}function ou(e,t){if(oa(e,t))return null;let r=[];for(let n=0;n<t;++n)-1===e.indexOf(n)&&r.push(n);return e.forEach(e=>r.push(e)),r}function oh(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function op(e,t){let r=[];for(let n=t-e;n<t;++n)r.push(n);return r}N(on,"axesAreInnerMostDims",()=>oa),N(on,"combineLocations",()=>oi),N(on,"computeOutAndReduceShapes",()=>os),N(on,"expandShapeToKeepDim",()=>oo),N(on,"assertAxesAreInnerMostDims",()=>ol),N(on,"getAxesPermutation",()=>ou),N(on,"getUndoAxesPermutation",()=>oh),N(on,"getInnerMostAxes",()=>op);var od={};function oc(e,t){let r=e[0].length;e.forEach((e,t)=>{H(e.length===r,()=>`Error in concat${r}D: rank of tensors[${t}] must be the same as the rank of the rest (${r})`)}),H(t>=0&&t<r,()=>`Error in concat${r}D: axis must be between 0 and ${r-1}.`);let n=e[0];e.forEach((e,a)=>{for(let i=0;i<r;i++)H(i===t||e[i]===n[i],()=>`Error in concat${r}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${n}) along the non-concatenated axis ${a}.`)})}function of(e,t){let r=e[0].slice();for(let n=1;n<e.length;n++)r[t]+=e[n][t];return r}N(od,"assertParamsConsistent",()=>oc),N(od,"computeOutShape",()=>of);var om={};N(om,"getFusedDyActivation",()=>oI),N(om,"getFusedBiasGradient",()=>oC),N(om,"applyActivation",()=>oN),N(om,"shouldFuse",()=>oT);const og=aP({elu_:function(e){let t=aO(e,"x","elu","float32");return aN.runKernel("Elu",{x:t})}}),oy=aP({leakyRelu_:function(e,t=.2){let r=aO(e,"x","leakyRelu");return aN.runKernel(tY,{x:r},{alpha:t})}}),ob=aP({prelu_:function(e,t){let r=aO(e,"x","prelu"),n=aO(t,"alpha","prelu");return aN.runKernel(rf,{x:r,alpha:n})}}),ox=aP({relu_:function(e){let t=aO(e,"x","relu");return aN.runKernel(rk,{x:t})}}),ov=aP({relu6_:function(e){let t=aO(e,"x","relu6");return aN.runKernel(r$,{x:t})}}),ow=aP({sigmoid_:function(e){let t=aO(e,"x","sigmoid","float32");return aN.runKernel(rB,{x:t})}}),ok=aP({step_:function(e,t=0){let r=aO(e,"x","step");return aN.runKernel(nn,{x:r},{alpha:t})}}),oS=aP({sum_:function(e,t=null,r=!1){let n=aO(e,"x","sum");"bool"===n.dtype&&(n=sl(n,"int32"));let a={x:n};return aN.runKernel("Sum",a,{axis:t,keepDims:r})}});function oI(e,t,r){if(null==r||"linear"===r)return e;if("relu"===r)return sf(e,ok(t));throw Error(`Cannot compute gradient for fused activation ${r}.`)}function oC(e,t){let r=t,n=sz(e.shape,t.shape);return n.length>0&&(r=oS(r,n)),s9(r,e.shape)}function oN(e,t,r,n){if("linear"===t)return e;if("relu"===t)return ox(e);if("elu"===t)return og(e);if("relu6"===t)return ov(e);if("prelu"===t)return ob(e,r);else if("leakyrelu"===t)return oy(e,n);else if("sigmoid"===t)return ow(e);throw Error(`Unknown fused activation ${t}.`)}const oT=(e,t)=>!(e>0)||"linear"===t;var o$={};function oE(e,t,r){let n=[];if(null==r&&null==t)return n;if(null==t)for(;n.length<e+r.length;)n.push(-1);else n=t.slice();if(null==r)return n;if(e+r.length!==n.length)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+r.length}, but shape.rank = ${n.length}`);for(let a=1;a<r.length;++a){let i=r[a],s=n[n.length-r.length+a],o=n[s];if(i>=0)if(o>=0){if(o!==i)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${i} but shape[${a+e}] = ${o}`)}else n[s]=i}return n}function oR(e){let t={FIRST_DIM_SIZE:kh.FIRST_DIM_SIZE,VALUE_ROWIDS:kh.VALUE_ROWIDS,ROW_LENGTHS:kh.ROW_LENGTHS,ROW_SPLITS:kh.ROW_SPLITS,ROW_LIMITS:kh.ROW_LIMITS,ROW_STARTS:kh.ROW_STARTS},r=[];for(let n of e)if(n in t)r.push(t[n]);else break;return r}function oA(e){return 0===e.length?0:e[0]===kh.FIRST_DIM_SIZE?e.length-1:e.length}function oF(e,t){if(null==e||null==t)return;let r=e.length,n=t.length;if(r>=n)throw Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${r} must be less than ragged tensor input flatValues.rank = ${n})`);for(let a=0;a<Math.min(r,n-1);++a){let r=e[a],n=t[a+1];if(r>=0&&n>=0&&1!==r&&r!==n)throw Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${r} but ragged tensor input.flatValues.shape[${a-e.length}] = ${n}`)}}N(o$,"RowPartitionType",()=>kh),N(o$,"combineRaggedTensorToTensorShapes",()=>oE),N(o$,"getRowPartitionTypesHelper",()=>oR),N(o$,"getRaggedRank",()=>oA),N(o$,"validateDefaultValueShape",()=>oF),(wJ=kh||(kh={}))[wJ.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",wJ[wJ.VALUE_ROWIDS=1]="VALUE_ROWIDS",wJ[wJ.ROW_LENGTHS=2]="ROW_LENGTHS",wJ[wJ.ROW_SPLITS=3]="ROW_SPLITS",wJ[wJ.ROW_LIMITS=4]="ROW_LIMITS",wJ[wJ.ROW_STARTS=5]="ROW_STARTS";var o_={};N(o_,"PARALLELIZE_THRESHOLD",()=>oD),N(o_,"computeOptimalWindowSize",()=>oO);const oD=30;function oO(e){return e<=oD?e:ex(e,Math.floor(Math.sqrt(e)))}var oM={};function oz(e,t,r){let n=e.shape.length;H(n===t.length,()=>`Error in slice${n}D: Length of begin ${t} must match the rank of the array (${n}).`),H(n===r.length,()=>`Error in slice${n}D: Length of size ${r} must match the rank of the array (${n}).`);for(let a=0;a<n;++a)H(t[a]+r[a]<=e.shape[a],()=>`Error in slice${n}D: begin[${a}] + size[${a}] (${t[a]+r[a]}) would overflow input.shape[${a}] (${e.shape[a]})`)}function oP(e){let t=[],r=0;for(;e>0;)1&e&&t.push(r),e/=2,r++;return t}function oL(e,t,r){let n=[];for(let a=0;a<e.length;a++)n[a]=Math.ceil((t[a]-e[a])/r[a]);return n}function oB(e,t,r,n){let a=[...e];for(let e=a.length;e<n.length;e++)a.push(1);for(let e=0;e<r;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function oW(e,t){let r=[];for(let n=0;n<e;n++)r.push(t+n);return r}function oU(e,t,r,n,a,i,s,o,l){let u=e.length,h=Array(u),p=Array(u),d=Array(u);if(t.length&&r>0){let l=t[0],u=r+1;h=oV(s,l,u,n,e),p=oG(o,l,u,a,e),d=oB(i,l,u,e)}else for(let t=0;t<u;t++)h[t]=oj(s,n,i,e,t,l),p[t]=oK(o,a,i,e,t,l),d[t]=oH(i,t,l);return{begin:h,end:p,strides:d}}function oV(e,t,r,n,a){let i=[...a],s=oW(r,t);for(let a=0;a<i.length;a++)if(s.indexOf(a)>-1)i[a]=0;else{var o,l,u;let s=(o=t,l=r,(u=a)<=o?u:u-(l-1)),h=n[s];e&1<<s&&(h=0),i[a]=h}return i}function oG(e,t,r,n,a){let i=[...a],s=oW(r,t);for(let a=0;a<i.length;a++)if(s.indexOf(a)>-1)i[a]=Number.MAX_SAFE_INTEGER;else{var o,l,u;let s=(o=t,l=r,(u=a)<=o?u:u-(l-1)),h=n[s];e&1<<s&&(h=Number.MAX_SAFE_INTEGER),i[a]=h}for(let e=0;e<i.length;e++){let t=a[e];i[e]<0&&(i[e]+=t),i[e]=L(0,i[e],a[e])}return i}function oH(e,t,r){let n=e[t];return(r&1<<t||null==n)&&(n=1),n}function oj(e,t,r,n,a,i){let s=t[a],o=r[a]||1;(e&1<<a||i&1<<a||null==s)&&(s=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);let l=n[a];return s<0&&(s+=l),s=L(0,s,l-1)}function oK(e,t,r,n,a,i){let s=t[a],o=r[a]||1;(e&1<<a||i&1<<a||null==s)&&(s=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);let l=n[a];return s<0&&(s+=l),s=o>0?L(0,s,l):L(-1,s,l-1)}function oq(e,t,r){let n=r.length;for(let e=0;e<r.length;e++)if(r[e]>1){n=e;break}for(let a=n+1;a<r.length;a++)if(t[a]>0||r[a]!==e[a])return!1;return!0}function oX(e,t){let r=e.length>0?e[e.length-1]:1;for(let n=0;n<e.length-1;n++)r+=e[n]*t[n];return r}function oY(e,t,r){let n,a,i=e.shape.length;return(n="number"==typeof t?[t,...Array(i-1).fill(0)]:t.length<i?t.concat(Array(i-t.length).fill(0)):t.slice()).forEach(e=>{H(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=(a=null==r?Array(i).fill(-1):"number"==typeof r?[r,...Array(i-1).fill(-1)]:r.length<i?r.concat(Array(i-r.length).fill(-1)):r).map((t,r)=>t>=0?t:(H(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${r}.`),e.shape[r]-n[r])),[n,a]}function oZ(e,t,r,n,a,i,s,o,l){let u;if(null==n?(u=Array(t.length)).fill(1):u=n,null!=s&&(s&s-1)!=0)throw Error("Multiple ellipses in slice is not allowed.");let h=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:r.slice(),strides:u.slice(),beginMask:a,endMask:i,ellipsisMask:s,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<p.dims;e++)h&&(1<<e&o)!=0&&p.numAddAxisAfterEllipsis++,1<<e&s&&(h=!0);!h&&(p.ellipsisMask|=1<<p.dims,p.dims++);let d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};var c=p,f=d;f.beginMask=0,f.endMask=0,f.shrinkAxisMask=0;let m=0;f.beginValid=null!=c.begin,f.endValid=null!=c.end,f.begin=Array(f.dims),f.end=Array(f.dims),f.strides=Array(f.dims),f.finalShapeGatherIndices=[],f.finalShapeGatherIndicesSparse=[],f.inputShapeGatherIndicesSparse=Array(f.dims);for(let e=0;e<c.dims;e++)if(1<<e&c.ellipsisMask){let t=Math.min(f.dims-(c.dims-e)+1+c.numAddAxisAfterEllipsis,f.dims);for(;m<t;m++)f.begin[m]=0,f.end[m]=0,f.strides[m]=1,f.beginMask|=1<<m,f.endMask|=1<<m,f.finalShapeGatherIndices.push(m),f.finalShapeGatherIndicesSparse.push(-1),f.inputShapeGatherIndicesSparse[m]=e}else if(1<<e&c.newAxisMask)f.finalShapeGatherIndices.push(-2),f.finalShapeGatherIndicesSparse.push(-1);else{if(m===f.begin.length)throw Error(`Index out of range using input dim ${m}; input has only ${f.dims} dims, ${f.begin.length}.`);null!=c.begin&&(f.begin[m]=c.begin[e]),null!=c.end&&(f.end[m]=c.end[e]),f.strides[m]=c.strides[e],c.beginMask&1<<e&&(f.beginMask|=1<<m),c.endMask&1<<e&&(f.endMask|=1<<m),c.shrinkAxisMask&1<<e?(f.finalShapeGatherIndices.push(-1),f.finalShapeGatherIndicesSparse.push(-1),f.shrinkAxisMask|=1<<m):(f.finalShapeGatherIndices.push(m),f.finalShapeGatherIndicesSparse.push(e)),f.inputShapeGatherIndicesSparse[m]=e,m++}let g=!0,y=!0,b=!0,x=[],v=[];for(let t=0;t<e.length;++t){let r;if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);let n=!!(d.shrinkAxisMask&1<<t),a=e[t];if(-1===a){x.push(n?1:-1);continue}let i=[d.beginMask&1<<t,d.endMask&1<<t],s=[d.strides[t]>0?0:-1,d.strides[t]>0?a:a-1];if(n&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");b=b&&1===d.strides[t];let o=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(n){let e=d.begin[t]<0?a+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=a)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=oQ(d.begin[t],0,d.strides[t],a,i,s),d.end[t]=oQ(d.end[t],1,d.strides[t],a,i,s);let e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===a;g=g&&e,y=y&&(0===t&&1===d.strides[t]||e)}else g=g&&1===d.strides[t]&&o,y=y&&(0===t&&1===d.strides[t]||o);let l=!1;if(d.beginValid&&d.endValid?(r=d.end[t]-d.begin[t],l=!0):n?(r=1,l=!0):o&&a>=0&&(r=d.strides[t]<0?-a:a,l=!0),l){let e;e=0===r||r<0!=d.strides[t]<0?0:Math.trunc(r/d.strides[t])+ +(r%d.strides[t]!=0),x.push(e)}else x.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){let t=d.finalShapeGatherIndices[e];t>=0?v.push(x[t]):-2===t&&v.push(1)}return{finalShapeSparse:v.filter((e,t)=>-2!==d.finalShapeGatherIndices[t]),finalShape:v,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:d.begin,end:d.end,strides:d.strides}}function oQ(e,t,r,n,a,i){if(a[t])return r>0?i[t]:i[t+1&1];{let t=e<0?n+e:e;return t<i[0]?i[0]:t>i[1]?i[1]:t}}N(oM,"assertParamsValid",()=>oz),N(oM,"maskToAxes",()=>oP),N(oM,"computeOutShape",()=>oL),N(oM,"stridesWithElidedDims",()=>oB),N(oM,"getNormalizedAxes",()=>oU),N(oM,"startIndicesWithElidedDims",()=>oV),N(oM,"stopIndicesWithElidedDims",()=>oG),N(oM,"startForAxis",()=>oj),N(oM,"stopForAxis",()=>oK),N(oM,"stridesForAxis",()=>oH),N(oM,"isSliceContinous",()=>oq),N(oM,"computeFlatOffset",()=>oX),N(oM,"parseSliceParams",()=>oY),N(oM,"sliceInfo",()=>oZ);var oJ={};function o0(e,t,r){return[r*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}N(oJ,"getImageCenter",()=>o0);var o1={};function o2(e,t,r,n=!0){let a=[];if(n)(a=a.concat(t.slice(0))).push(e[0]/r),a=a.concat(e.slice(1));else{a=a.concat(e[0]);let r=t.length;for(let n=0;n<r;++n)a=a.concat([e[n+1]/t[n],t[n]]);a=a.concat(e.slice(r+1))}return a}function o3(e,t,r=!0){let n=[];if(r){n.push(t);for(let r=t+1;r<e;++r)r<=2*t?(n.push(r),n.push(r-(t+1))):n.push(r)}else{let r=[],a=[];for(let n=1;n<e;++n)n>=2*t+1||n%2==1?a.push(n):r.push(n);n.push(...r),n.push(0),n.push(...a)}return n}function o4(e,t,r,n=!0){let a=[];n?a.push(e[0]/r):a.push(e[0]*r);for(let r=1;r<e.length;++r)r<=t.length?n?a.push(t[r-1]*e[r]):a.push(e[r]/t[r-1]):a.push(e[r]);return a}function o6(e,t){let r=[0];for(let n=0;n<t;++n)r.push(e[n][0]);return r}function o5(e,t,r){let n=e.slice(0,1);for(let a=0;a<r;++a)n.push(e[a+1]-t[a][0]-t[a][1]);return n}N(o1,"getReshaped",()=>o2),N(o1,"getPermuted",()=>o3),N(o1,"getReshapedPermuted",()=>o4),N(o1,"getSliceBeginCoords",()=>o6),N(o1,"getSliceSize",()=>o5);var o8={};function o7(e,t){let r=e.shape.length,n=t.shape.length;if(r<1)throw Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${r}.`);if(n<1)throw Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${n}.`);if("int32"!==t.dtype)throw Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[n-1]>r)throw Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[n-1]} vs. ${r}`);if(0===q(e.shape))throw Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);let a=t.shape,i=a[a.length-1],s=1;for(let e=0;e<a.length-1;++e)s*=a[e];let o=e.shape,l=a.slice();l.pop();let u=1;for(let e=i;e<r;++e)u*=o[e],l.push(o[e]);let h=[...ev(e.shape).map(e=>e/u),1].slice(0,i);return[l,s,u,h]}N(o8,"prepareAndValidate",()=>o7);var o9={};function le(e,t,r){let n=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,i=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${r.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${n}, and batchDim: ${a}.`;if(r.rank<a)throw Error(i+` update.rank < ${a}. `);if(e.length<n+(r.rank-a))throw Error(i+` Output shape length < ${n+(r.rank-a)}`);if(r.rank!==a+e.length-n)throw Error(i+` update.rank != ${a+e.length-n}`);for(let e=0;e<a;++e)if(r.shape[e]!==t.shape[e])throw Error(i+` updates.shape[${e}] (${r.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<r.rank-a;++t)if(r.shape[t+a]!==e[t+n])throw Error(i+` updates.shape[${t+a}] (${r.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function lt(e,t,r){if(t.rank<1)throw Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(r.length<1)throw Error(`Output rank must be greater or equal to 1, but got shape: ${r}`);if(0===r.length){if(0===t.size)throw Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw Error(`Updates specified for empty output. updates shape: ${e.shape}`)}le(r,t,e)}function lr(e,t,r){let n=t.shape.length,a=n>1?t.shape[n-1]:1,i=r.length,s=1;for(let e=a;e<i;++e)s*=r[e];let o=a<1?1:a,l=q(t.shape)/o,u=[...ev(r.slice(0,a)),1];return{sliceRank:a,numUpdates:l,sliceSize:s,strides:u,outputSize:q(r)}}N(o9,"validateUpdateShape",()=>le),N(o9,"validateInput",()=>lt),N(o9,"calculateShapes",()=>lr);var ln={};N(ln,"SELU_SCALEALPHA",()=>la),N(ln,"SELU_SCALE",()=>li);const la=1.7580993408473768,li=1.0507009873554805;var ls={};N(ls,"ERF_P",()=>lo),N(ls,"ERF_A1",()=>ll),N(ls,"ERF_A2",()=>lu),N(ls,"ERF_A3",()=>lh),N(ls,"ERF_A4",()=>lp),N(ls,"ERF_A5",()=>ld);const lo=.3275911,ll=.254829592,lu=-.284496736,lh=1.421413741,lp=-1.453152027,ld=1.061405429;var lc={};function lf(e,t){if(e.length!==t.length)throw Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);let r=new Float32Array(2*e.length);for(let n=0;n<r.length;n+=2)r[n]=e[n/2],r[n+1]=t[n/2];return r}function lm(e){let t=new Float32Array(e.length/2),r=new Float32Array(e.length/2);for(let n=0;n<e.length;n+=2)t[n/2]=e[n],r[n/2]=e[n+1];return{real:t,imag:r}}function lg(e){let t=Math.ceil(e.length/4),r=new Float32Array(t),n=new Float32Array(t);for(let t=0;t<e.length;t+=4)r[Math.floor(t/4)]=e[t],n[Math.floor(t/4)]=e[t+1];return{real:r,imag:n}}function ly(e){let t=Math.floor(e.length/4),r=new Float32Array(t),n=new Float32Array(t);for(let t=2;t<e.length;t+=4)r[Math.floor(t/4)]=e[t],n[Math.floor(t/4)]=e[t+1];return{real:r,imag:n}}function lb(e,t){return{real:e[2*t],imag:e[2*t+1]}}function lx(e,t,r,n){e[2*n]=t,e[2*n+1]=r}function lv(e,t){let r=new Float32Array(e/2),n=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){let i=(t?2:-2)*Math.PI*(a/e);r[a]=Math.cos(i),n[a]=Math.sin(i)}return{real:r,imag:n}}function lw(e,t,r){let n=(r?2:-2)*Math.PI*(e/t);return{real:Math.cos(n),imag:Math.sin(n)}}N(lc,"mergeRealAndImagArrays",()=>lf),N(lc,"splitRealAndImagArrays",()=>lm),N(lc,"complexWithEvenIndex",()=>lg),N(lc,"complexWithOddIndex",()=>ly),N(lc,"getComplexWithIndex",()=>lb),N(lc,"assignToTypedArray",()=>lx),N(lc,"exponents",()=>lv),N(lc,"exponent",()=>lw);var lk={};N(lk,"decodeEinsumEquation",()=>lI),N(lk,"getEinsumPermutation",()=>lC),N(lk,"checkEinsumDimSizes",()=>lN),N(lk,"getEinsumComputePath",()=>lT),N(lk,"isIdentityPermutation",()=>l$);const lS=/->/g;function lI(e,t){let r=((e=e.replace(/\s/g,"")).length-e.replace(lS,"").length)/2;if(r<1)throw Error("Equations without an arrow are not supported.");if(r>1)throw Error('Equation must contain exactly one arrow ("->").');let[n,a]=e.split("->");H(-1===n.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');let i=n.split(","),s=i.length;if(t!==s)throw Error(`Expected ${s} input tensors, received ${t}`);if(s>2)throw Error("Support for more than 2 input tensors is not implemented yet.");let o=[];for(let e=0;e<a.length;++e){let t=a[e];if(!i.some(e=>-1!==e.indexOf(t)))throw Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<n.length;++e){let t=n[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}let l=Array(i.length);for(let e=0;e<s;++e){if(new Set(i[e].split("")).size!==i[e].length)throw Error(`Found duplicate axes in input component ${i[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<i[e].length;++t)l[e].push(o.indexOf(i[e][t]))}let u=o.length,h=a.length,p=[];for(let e=h;e<u;++e)p.push(e);return{allDims:o,summedDims:p,idDims:l}}function lC(e,t){let r=Array(e);r.fill(-1);for(let e=0;e<t.length;++e)r[t[e]]=e;let n=[];for(let t=0;t<e;++t)-1===r[t]&&n.push(t);return{permutationIndices:r=r.filter(e=>-1!==e),expandDims:n}}function lN(e,t,r){let n=Array(e);for(let e=0;e<r.length;++e){let a=r[e].shape;for(let r=0;r<t[e].length;++r)void 0===n[t[e][r]]?n[t[e][r]]=a[r]:H(n[t[e][r]]===a[r],()=>`Expected dimension ${n[t[e][r]]} at axis ${r} of input shaped ${JSON.stringify(a)}, but got dimension ${a[r]}`)}}function lT(e,t){let r=[],n=0;0===e.length&&e.push(-1),n=e.length+1;for(let e=0;e<n;++e)r.push([]);let a=[];for(let n=0;n<e.length;++n)for(let i of function(e,t){let r=[];for(let n=0;n<e.length;++n)(0===e[n].length||-1!==e[n].indexOf(t)||-1===t)&&r.push(n);return r}(t,e[n]))-1===a.indexOf(i)&&(r[n].push(i),a.push(i));return{path:e,steps:r}}function l$(e){return e.every((e,t)=>e===t)}var lE={};function lR(e,t,r=0){let n=[];if("number"==typeof t)H(e.shape[r]%t==0,()=>"Number of splits must evenly divide the axis."),n=Array(t).fill(e.shape[r]/t);else{H(1>=t.reduce((e,t)=>(-1===t&&(e+=1),e),0),()=>"There should be only one negative value in split array.");let a=t.indexOf(-1);if(-1!==a){let n=t.reduce((e,t)=>t>0?e+t:e);t[a]=e.shape[r]-n}H(e.shape[r]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),n=t}return n}N(lE,"prepareSplitSize",()=>lR);var lA={};function lF(e){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${e}`}function l_(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function lD(e,t,r){return`indices(${e}, 0) is invalid: ${t} >= ${r}`}N(lA,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",()=>lF),N(lA,"getSparseFillEmptyRowsNegativeIndexErrorMessage",()=>l_),N(lA,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",()=>lD);var lO={};function lM(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function lz(e,t){return`size ${e} must be non-negative, not ${t}`}function lP(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function lL(e,t){let r=q(e),n=q(t);return`Input to reshape is a SparseTensor with ${r}
  dense values, but the requested shape requires a multiple of ${n}. inputShape=${e} outputShape= ${t}`}function lB(e,t){let r=q(e),n=q(t);return`Input to reshape is a tensor with ${r} dense values, but the requested shape has ${n}. inputShape=${e} outputShape=${t}`}N(lO,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",()=>lM),N(lO,"getSparseReshapeNegativeOutputDimErrorMessage",()=>lz),N(lO,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",()=>lP),N(lO,"getSparseReshapeInputOutputMultipleErrorMessage",()=>lL),N(lO,"getSparseReshapeInputOutputMismatchErrorMessage",()=>lB);var lW={};function lU(){return"segment ids must be >= 0"}function lV(){return"segment ids are not increasing"}function lG(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function lH(e,t,r){return`Bad: indices[${e}] == ${t} out of range [0, ${r})`}N(lW,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",()=>lU),N(lW,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",()=>lV),N(lW,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",()=>lG),N(lW,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",()=>lH);var lj={};function lK(e,t){let r,n=!1;for(e<=oD?(r=e,n=!0):r=ex(e,Math.floor(Math.sqrt(e)));!n;)r>t||r===e?n=!0:r=ex(e,r+1);return r}function lq(e,t,r){let n=[],a=e.length;for(let i=0;i<a;i++)i!==t?n.push(e[i]):n.push(r);return n}function lX(e,t,r,n){let a=t.shape.length,i=e.shape.length;if(0!==n&&(n<-a||n>a))throw Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${n}`);if(n<0&&(n+=a),n>i)throw Error(`batchDims (${n}) must be less than rank(x) (
    ${i}).`);if(r<n)throw Error(`batchDims (${n}) must be less than or equal to axis (${r}).`);for(let r=0;r<n;++r)if(e.shape[r]!==t.shape[r])throw Error(`x.shape[${r}]: ${e.shape[r]} should be equal to indices.shape[${r}]: ${t.shape[r]}.`);let s=e.shape[r],o=[],l=1,u=1,h=1;for(let t=0;t<n;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=n;t<r;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=n;e<a;e++)o.push(t.shape[e]);for(let t=r+1;t<i;t++)o.push(e.shape[t]),h*=e.shape[t];return{batchSize:l,sliceSize:h,outerSize:u,dimSize:s,outputShape:o}}function lY(e){try{return e.map(e=>n7(e))}catch(e){throw Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function lZ(e){return e.map(e=>n8(e))}N(lj,"segOpComputeOptimalWindowSize",()=>lK),N(lj,"computeOutShape",()=>lq),N(lj,"collectGatherOpShapeInfo",()=>lX),T(or,on),T(or,sO),T(or,od),T(or,sK),T(or,om),T(or,{}),T(or,o$),T(or,o_),T(or,oJ),T(or,o1),T(or,o8),T(or,o9),T(or,ln),T(or,ls),T(or,nu),T(or,lc),T(or,lk),T(or,lE),T(or,lA),T(or,lO),T(or,lW);const lQ=aP({batchNorm_:function(e,t,r,n,a,i){let s,o;null==i&&(i=.001);let l=aO(e,"x","batchNorm"),u=aO(t,"mean","batchNorm"),h=aO(r,"variance","batchNorm");null!=a&&(s=aO(a,"scale","batchNorm")),null!=n&&(o=aO(n,"offset","batchNorm")),H(u.rank===h.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),H(null==o||u.rank===o.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),H(null==s||u.rank===s.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let p={x:0===l.rank||1===l.rank?s9(l,[1,1,1,l.size]):2===l.rank?s9(l,[1,1,l.shape[0],l.shape[1]]):3===l.rank?s9(l,[1,l.shape[0],l.shape[1],l.shape[2]]):l,scale:s,offset:o,mean:u,variance:h},d={varianceEpsilon:i};return s9(aN.runKernel(tL,p,d),l.shape)}}),lJ=aP({batchNorm2d_:function(e,t,r,n,a,i){let s,o,l=aO(e,"x","batchNorm"),u=aO(t,"mean","batchNorm"),h=aO(r,"variance","batchNorm");return null!=a&&(s=aO(a,"scale","batchNorm")),null!=n&&(o=aO(n,"offset","batchNorm")),H(2===l.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${l.rank}.`),H(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${u.rank}.`),H(2===h.rank||1===h.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${h.rank}.`),null!=s&&H(2===s.rank||1===s.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${s.rank}.`),null!=o&&H(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${o.rank}.`),lQ(l,u,h,o,s,i)}}),l0=aP({batchNorm3d_:function(e,t,r,n,a,i){let s,o,l=aO(e,"x","batchNorm"),u=aO(t,"mean","batchNorm"),h=aO(r,"variance","batchNorm");return null!=a&&(s=aO(a,"scale","batchNorm")),null!=n&&(o=aO(n,"offset","batchNorm")),H(3===l.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${l.rank}.`),H(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${u.rank}.`),H(3===h.rank||1===h.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${h.rank}.`),null!=s&&H(3===s.rank||1===s.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${s.rank}.`),null!=o&&H(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${o.rank}.`),lQ(l,u,h,o,s,i)}}),l1=aP({batchNorm4d_:function(e,t,r,n,a,i){let s,o,l=aO(e,"x","batchNorm"),u=aO(t,"mean","batchNorm"),h=aO(r,"variance","batchNorm");return null!=a&&(s=aO(a,"scale","batchNorm")),null!=n&&(o=aO(n,"offset","batchNorm")),H(4===l.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${l.rank}.`),H(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${u.rank}.`),H(4===h.rank||1===h.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${h.rank}.`),null!=s&&H(4===s.rank||1===s.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${s.rank}.`),null!=o&&H(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${o.rank}.`),lQ(l,u,h,o,s,i)}}),l2=aP({broadcastTo_:function(e,t){let r=aO(e,"broadcastTo","x"),n=r.shape;if(eN(t),t.length<r.rank)throw Error(`broadcastTo(): shape.length=${t.length} < input.rank=${r.rank}.`);if(t.length>r.rank){let e=r.shape.slice();for(;e.length<t.length;)e.unshift(1);r=s9(r,e)}let a=r.shape,i=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])i[e]=1;else if(1!==r.shape[e])throw Error(`broadcastTo(): [${n}] cannot be broadcast to [${t}].`);if(0===i.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return su(r);let s={x:r};return aN.runKernel(r6,s,{reps:i})}});var l3={};function l4(e,t,r){if(K(e),null!=t&&3!==t.length)throw Error("tensor3d() requires shape to have three numbers");let n=a_(e,r);if(3!==n.length&&1!==n.length)throw Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor3d() requires shape to be provided when `values` are a flat array");return aB(e,t,n,r)}N(l3,"fromPixelsAsync",()=>l8),N(l3,"toPixels",()=>l9),N(l3,"draw",()=>ue),N(l3,"fromPixels",()=>ut);let l6=!1;function l5(e,t=3){let r,a;if(t>4)throw Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw Error("pixels passed to tf.browser.fromPixels() can not be null");let i=!1,s=!1,o=!1,l=!1,u=!1,h=!1;if(e.data instanceof Uint8Array)i=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)l=!0;else if(null!=e.getContext)u=!0;else if("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap)h=!0;else throw Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);if(null!=nf(na,aN.backendName))return aN.runKernel(na,{pixels:e},{numChannels:t});let[p,d]=o?[e.videoWidth,e.videoHeight]:[e.width,e.height];if(u)r=e.getContext("2d").getImageData(0,0,p,d).data;else if(s||i)r=e.data;else if(l||o||h){if(null==n)if("undefined"==typeof document)if("undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof OffscreenCanvasRenderingContext2D)n=new OffscreenCanvas(1,1).getContext("2d");else throw Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else n=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});n.canvas.width=p,n.canvas.height=d,n.drawImage(e,0,0,p,d),r=n.getImageData(0,0,p,d).data}if(4===t)a=new Int32Array(r);else{let e=p*d;a=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)a[n*t+e]=r[4*n+e]}return l4(a,[d,p,t],"int32")}async function l8(e,t=3){var r;let n=null;if(e_.getBool("WRAP_TO_IMAGEBITMAP")&&"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&null!=(r=e)&&0!==r.width&&0!==r.height&&!(null!=e&&e.data instanceof Uint8Array)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return l5(n,t)}function l7(e){if(2!==e.rank&&3!==e.rank)throw Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);let t=2===e.rank?1:e.shape[2];if(t>4||2===t)throw Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==e.dtype&&"int32"!==e.dtype)throw Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`)}async function l9(e,t){let r=aO(e,"img","toPixels");if(!(e instanceof au)){let e=r;r=sl(e,"int32"),e.dispose()}l7(r);let[n,a]=r.shape.slice(0,2),i=2===r.rank?1:r.shape[2],s=await r.data(),o="float32"===r.dtype?255:1,l=new Uint8ClampedArray(a*n*4);for(let e=0;e<n*a;++e){let t=[0,0,0,255];for(let n=0;n<i;n++){let a=s[e*i+n];if("float32"===r.dtype){if(a<0||a>1)throw Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===r.dtype&&(a<0||a>255))throw Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===i?(t[0]=a*o,t[1]=a*o,t[2]=a*o):t[n]=a*o}let n=4*e;l[n+0]=Math.round(t[0]),l[n+1]=Math.round(t[1]),l[n+2]=Math.round(t[2]),l[n+3]=Math.round(t[3])}if(null!=t){l6||null!=nf(t$,aN.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),l6=!0),t.width=a,t.height=n;let e=t.getContext("2d"),r=new ImageData(l,a,n);e.putImageData(r,0,0)}return r!==e&&r.dispose(),l}function ue(e,t,r){let n=aO(e,"img","draw");if(!(e instanceof au)){let e=n;n=sl(e,"int32"),e.dispose()}l7(n);var a=null==r?void 0:r.imageOptions;let i=(null==a?void 0:a.alpha)||1;if(i>1||i<0)throw Error(`Alpha value ${i} is suppoed to be in range [0 - 1].`);let s={image:n};aN.runKernel(t$,s,{canvas:t,options:r})}const ut=aP({fromPixels_:l5}),ur=aP({clipByValue_:function(e,t,r){let n=aO(e,"x","clipByValue");return(H(t<=r,()=>`Error in clip: min (${t}) must be less than or equal to max (${r}).`),t===r)?sE(n.shape,t,n.dtype):aN.runKernel(ti,{x:n},{clipValueMin:t,clipValueMax:r})}}),un=aP({concat_:function(e,t=0){H(e.length>=1,()=>"Pass at least one tensor to concat");let r=aM(e,"tensors","concat","string_or_numeric");return("complex64"===r[0].dtype&&r.forEach(e=>{if("complex64"!==e.dtype)throw Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${e.dtype}. `)}),1===r.length)?su(r[0]):aN.runKernel(tl,r,{axis:t})}}),ua=aP({concat1d_:function(e){return un(e,0)}}),ui=aP({concat2d_:function(e,t){return un(e,t)}}),us=aP({concat3d_:function(e,t){return un(e,t)}}),uo=aP({concat4d_:function(e,t){return un(e,t)}}),ul=aP({conv2d_:function(e,t,r,n,a="NHWC",i=[1,1],s){let o=aO(e,"x","conv2d","float32"),l=aO(t,"filter","conv2d","float32"),u=o,h=!1;3===o.rank&&(h=!0,u=s9(o,[1,o.shape[0],o.shape[1],o.shape[2]])),H(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),H(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),s7("conv2d",n,s);let p="NHWC"===a?u.shape[3]:u.shape[1];H(p===l.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`),H(s6(r,i),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${r} and dilations '${i}'`),H(s5(i),()=>"Error in conv2D: Dilated rates should be larger than 0."),H(s5(r),()=>"Error in conv2D: Strides should be larger than 0.");let d={x:u,filter:l},c=aN.runKernel(tu,d,{strides:r,pad:n,dataFormat:a,dilations:i,dimRoundingMode:s});return h?s9(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),uu=aP({conv1d_:function(e,t,r,n,a="NWC",i=1,s){let o=aO(e,"x","conv1d"),l=aO(t,"filter","conv1d"),u=o,h=!1;2===o.rank&&(h=!0,u=s9(o,[1,o.shape[0],o.shape[1]])),H(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),H(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),s7("conv1d",n,s),H(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),H(s6(r,i),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${r} and dilation '${i}'`),H(s5(i),()=>"Error in conv1D: Dilated rates should be larger than 0."),H(s5(r),()=>"Error in conv1D: Stride should be larger than 0."),H("NWC"===a,()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`);let p=s9(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=ul(s9(u,[u.shape[0],1,u.shape[1],u.shape[2]]),p,[1,r],n,"NHWC",[1,i],s);return h?s9(d,[d.shape[2],d.shape[3]]):s9(d,[d.shape[0],d.shape[2],d.shape[3]])}}),uh=aP({conv2DBackpropInput_:function(e,t,r,n,a,i="NHWC",s){H(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=s9(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),H(4===o.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`),H(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),H(4===r.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${r.rank}`);let h="NHWC"===i?o[3]:o[1],p="NHWC"===i?l.shape[3]:l.shape[1];H(h===r.shape[2],()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${r.shape[2]}.`),H(p===r.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${r.shape[3]}.`),s7("conv2dDerInput",a,s);let d={dy:l,filter:r},c={strides:n,pad:a,dataFormat:i,dimRoundingMode:s,inputShape:o},f=aN.runKernel(tp,d,c);return u?s9(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),up=aP({conv2dTranspose_:function(e,t,r,n,a,i){return uh(r,aO(e,"x","conv2dTranspose"),aO(t,"filter","conv2dTranspose"),n,a,"NHWC",i)}}),ud=aP({conv3d_:function(e,t,r,n,a="NDHWC",i=[1,1,1]){let s=aO(e,"x","conv3d"),o=aO(t,"filter","conv3d"),l=s,u=!1;4===s.rank&&(u=!0,l=s9(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),H(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),H(5===o.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`),H(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),H(s6(r,i),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${r} and dilations '${i}'`),H("NDHWC"===a,()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`),H(s5(i),()=>"Error in conv3D: Dilated rates should be larger than 0."),H(s5(r),()=>"Error in conv3D: Strides should be larger than 0.");let h={x:l,filter:o},p=aN.runKernel(td,h,{strides:r,pad:n,dataFormat:a,dilations:i});return u?s9(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),uc=aP({conv3DBackpropInput_:function(e,t,r,n,a){H(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let i=e,s=t,o=!1;4===t.rank&&(o=!0,s=s9(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),i=[1,e[0],e[1],e[2],e[3]]);let l=i[4],u=s.shape[4];H(5===i.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${i.length}.`),H(5===s.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${s.rank}`),H(5===r.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${r.rank}`),H(l===r.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${r.shape[3]}.`),H(u===r.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${r.shape[4]}.`);let h={dy:s,filter:r},p={pad:a,strides:n,inputShape:i},d=aN.runKernel(tf,h,p);return o?s9(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),uf=aP({conv3dTranspose_:function(e,t,r,n,a){return uc(r,aO(e,"x","conv3dTranspose"),aO(t,"filter","conv3dTranspose"),n,a)}}),um=aP({denseBincount_:function(e,t,r,n=!1){let a=aO(e,"x","denseBincount"),i=aO(t,"weights","denseBincount");return H("int32"===a.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`),H(a.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`),H(r>=0,()=>`size must be non-negative, but got ${r}.`),H(i.size===a.size||0===i.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${i.shape}.`),aN.runKernel(tx,{x:a,weights:i},{size:r,binaryOutput:n})}}),ug=aP({depthwiseConv2d_:function(e,t,r,n,a="NHWC",i=[1,1],s){let o=aO(e,"x","depthwiseConv2d","float32"),l=aO(t,"filter","depthwiseConv2d","float32"),u=o,h=!1;3===o.rank&&(h=!0,u=s9(o,[1,o.shape[0],o.shape[1],o.shape[2]])),H(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),H(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let p="NHWC"===a?u.shape[3]:u.shape[1];H(p===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`),s7("depthwiseConv2d",n,s);let d={x:u,filter:l},c=aN.runKernel(tw,d,{strides:r,pad:n,dataFormat:a,dilations:i,dimRoundingMode:s});return h?s9(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});var uy={};N(uy,"dropout",()=>uA);const ub=aP({floor_:function(e){let t=aO(e,"x","floor","float32");return aN.runKernel(tz,{x:t})}});var ux={},uv=R("cmoHh"),uw=R("euRi5"),uk=R("hDsEw"),uS=R("3J2Zm"),uI=R("6Px8M"),uC=R("lDm0S"),uN={};!function(e,t,r){var n,a="random",i=r.pow(256,6),s=r.pow(2,52),o=2*s;function l(l,c,f){var m=[],g=p(function e(t,r){var n,a=[],i=typeof t;if(r&&"object"==i)for(n in t)try{a.push(e(t[n],r-1))}catch(e){}return a.length?a:"string"==i?t:t+"\0"}((c=!0==c?{entropy:!0}:c||{}).entropy?[l,d(t)]:null==l?function(){try{var r;return n&&(r=n.randomBytes)?r=r(256):(r=new Uint8Array(256),(e.crypto||e.msCrypto).getRandomValues(r)),d(r)}catch(r){var a=e.navigator,i=a&&a.plugins;return[+new Date,e,i,e.screen,d(t)]}}():l,3),m),y=new u(m),b=function(){for(var e=y.g(6),t=i,r=0;e<s;)e=(e+r)*256,t*=256,r=y.g(1);for(;e>=o;)e/=2,t/=2,r>>>=1;return(e+r)/t};return b.int32=function(){return 0|y.g(4)},b.quick=function(){return y.g(4)/0x100000000},b.double=b,p(d(y.S),t),(c.pass||f||function(e,t,n,i){return(i&&(i.S&&h(i,y),e.state=function(){return h(y,{})}),n)?(r[a]=e,t):e})(b,g,"global"in c?c.global:this==r,c.state)}function u(e){var t,r=e.length,n=this,a=0,i=n.i=n.j=0,s=n.S=[];for(r||(e=[r++]);a<256;)s[a]=a++;for(a=0;a<256;a++)s[a]=s[i=255&i+e[a%r]+(t=s[a])],s[i]=t;(n.g=function(e){for(var t,r=0,a=n.i,i=n.j,s=n.S;e--;)t=s[a=255&a+1],r=256*r+s[255&(s[a]=s[i=255&i+t])+(s[i]=t)];return n.i=a,n.j=i,r})(256)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){for(var r,n=e+"",a=0;a<n.length;)t[255&a]=255&(r^=19*t[255&a])+n.charCodeAt(a++);return d(t)}function d(e){return String.fromCharCode.apply(0,e)}if(p(r.random(),t),uN){uN=l;try{n=R("kjyEk")}catch(e){}}else"function"==typeof define&&define.amd?define(function(){return l}):r["seed"+a]=l}("undefined"!=typeof self?self:uN,[],Math),uN.alea=uv,uN.xor128=uw,uN.xorwow=uk,uN.xorshift7=uS,uN.xor4096=uI,uN.tychei=uC,ux=uN;class uT{constructor(e,t,r,n,a){this.mean=e,this.stdDev=t,this.dtype=r,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);let i=a||Math.random();this.random=ux.alea(i.toString())}nextValue(){let e,t;if(!isNaN(this.nextVal)){let e=this.nextVal;return this.nextVal=NaN,e}let r=!1;for(;!r;){let n,a,i;do i=(n=2*this.random()-1)*n+(a=2*this.random()-1)*a;while(i>=1||0===i)let s=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*n*s,t=this.mean+this.stdDev*a*s,(!this.truncated||this.isValidTruncated(e))&&(r=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class u${constructor(e,t,r,n){this.alpha=e,this.beta=1/t,this.dtype=r;let a=n||Math.random();this.randu=ux.alea(a.toString()),this.randn=new uT(0,1,r,!1,this.randu()),e<1?this.d=e+2/3:this.d=e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,r,n,a,i;for(;;){do n=this.randn.nextValue(),i=1+this.c*n;while(i<=0)if(i*=i*i,t=1-.331*(e=n*n)*e,r=.5*e+this.d*(1-i+Math.log(i)),(a=this.randu())<t||Math.log(a)<r)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class uE{constructor(e=0,t=1,r,n){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=r,null==n&&(n=Math.random()),"number"==typeof n&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=ux.alea(n)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const uR=aP({randomUniform_:function(e,t=0,r=1,n="float32",a){eN(e);let i=so(e,n),s=new uE(t,r,null,a);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),uA=aP({dropout_:function(e,t,r,n){let a=aO(e,"x","dropout");if(H("float32"===a.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`),H(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof au?a.clone():a;let i=function(e,t){if(null==t)return e.shape.slice();if(Z(e.shape,t))return t;if(e.shape.length===t.length){let r=[];for(let n=0;n<e.shape.length;n++)null==t[n]&&null!=e.shape[n]?r.push(e.shape[n]):r.push(t[n]);return r}return t}(a,r),s=1-t;return sf(a,sc(ub(sp(uR(i,0,1,"float32",n),s)),s))}}),uF=aP({equal_:function(e,t){let r=aO(e,"a","equal","string_or_numeric"),n=aO(t,"b","equal","string_or_numeric");[r,n]=ab(r,n),sP(r.shape,n.shape);let a={a:r,b:n};return aN.runKernel(tF,a)}}),u_=aP({erf_:function(e){let t=aO(e,"x","erf");H("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=sl(t,"float32"));let r={x:t};return aN.runKernel("Erf",r)}}),uD=aP({exp_:function(e){let t=aO(e,"x","exp");return aN.runKernel("Exp",{x:t})}}),uO=aP({expandDims_:function(e,t=0){let r=aO(e,"x","expandDims","string_or_numeric");return H(t<=r.rank,()=>"Axis must be <= rank of the tensor"),aN.runKernel(t_,{input:r},{dim:t})}}),uM=aP({tile_:function(e,t){let r=aO(e,"x","tile","string_or_numeric");return H(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of reps ${t}.`),aN.runKernel(r6,{x:r},{reps:t})}}),uz=aP({eye_:function(e,t,r,n="float32"){null==t&&(t=e);let a=so([e,t],n),i=e<=t?e:t;for(let e=0;e<i;++e)a.set(1,e,e);let s=s9(a.toTensor(),[e,t]);if(null==r)return s;if(1===r.length)return uM(uO(s,0),[r[0],1,1]);if(2===r.length)return uM(uO(uO(s,0),0),[r[0],r[1],1,1]);if(3===r.length)return uM(uO(uO(uO(s,0),0),0),[r[0],r[1],r[2],1,1]);throw Error(`eye() currently supports only 1D and 2D batchShapes, but received ${r.length}D.`)}});var uP={};N(uP,"conv2d",()=>uB),N(uP,"depthwiseConv2d",()=>uV),N(uP,"matMul",()=>uH);const uL=aP({conv2DBackpropFilter_:function(e,t,r,n,a,i="NHWC",s){let o=e;3===e.rank&&(o=s9(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=s9(t,[1,t.shape[0],t.shape[1],t.shape[2]])),H(4===o.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`),H(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),H(4===r.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${r}.`);let u="NHWC"===i?o.shape[3]:o.shape[1],h="NHWC"===i?l.shape[3]:l.shape[1];H(u===r[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${r[2]}.`),H(h===r[3],()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${r[3]}).`),s7("conv2dDerFilter",a,s);let p={x:o,dy:l};return aN.runKernel(th,p,{strides:n,pad:a,dataFormat:i,dimRoundingMode:s,filterShape:r})}}),uB=aP({fusedConv2d_:function({x:e,filter:t,strides:r,pad:n,dataFormat:a="NHWC",dilations:i=[1,1],dimRoundingMode:s,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:h}){let p,d;if(l=l||"linear",!1===oT(aN.state.gradientDepth,l)){H("NHWC"===a,()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let p=ul(e,t,r,n,a,i,s);return null!=o&&(p=sp(p,o)),oN(p,l,u,h)}let c=aO(e,"x","conv2d","float32"),f=aO(t,"filter","conv2d","float32"),m=c,g=!1;3===c.rank&&(g=!0,m=s9(c,[1,c.shape[0],c.shape[1],c.shape[2]])),H(4===m.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`),H(4===f.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${f.rank}.`),s7("fused conv2d",n,s);let y="NHWC"===a?m.shape[3]:m.shape[1];H(f.shape[2]===y,()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`),H(s6(r,i),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${r} and dilations '${i}'`);let b=sZ(m.shape,f.shape,r,i,n,s);if(null!=o&&(p=aO(o,"bias","fused conv2d"),[p]=ab(p,c),"NHWC"===a?sP(b.outShape,p.shape):(H(p.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${p.shape.length}.`),H(0===p.shape.length||p.shape[0]===b.outChannels||1===p.shape[0],()=>`Error in fused conv2d: bias shape (${p.shape}) is not compatible with the number of output channels (${b.outChannels})`))),null!=u){let e=u.shape;if(H(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)H(1===e[0]||e[0]===b.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${b.outChannels}).`);else if(3===e.length)try{sP(e,b.outShape)}catch(t){throw Error(`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${b.outShape}).`)}d=aO(u,"prelu weights","fused conv2d")}let x=(e,t)=>{H("NHWC"===a,()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`);let[s,o,u,h]=t,p=oI(e,u,l);H(s4(i),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`);let d=[uh(o.shape,p,s,r,n),uL(o,p,s.shape,r,n)];if(null!=h){let e=oC(h,p);d.push(e)}return d},v={x:m,filter:f,bias:p,preluActivationWeights:d},w={strides:r,pad:n,dataFormat:a,dilations:i,dimRoundingMode:s,activation:l,leakyreluAlpha:h};return null==o?sb((e,t,r)=>{let n=aN.runKernel(no,v,w);return r([t,e,n]),g&&(n=s9(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:x}})(m,f):sb((e,t,r,n)=>{let a=aN.runKernel(no,v,w);return n([t,e,a,r]),g&&(a=s9(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}})(m,f,p)}}),uW=aP({depthwiseConv2dNativeBackpropFilter_:function(e,t,r,n,a,i=[1,1],s){let o=e;3===e.rank&&(o=s9(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=s9(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:o,dy:l};return aN.runKernel(tk,u,{strides:n,pad:a,dimRoundingMode:s,dilations:i,filterShape:r})}}),uU=aP({depthwiseConv2dNativeBackpropInput_:function(e,t,r,n,a,i=[1,1],s){let o=t,l=!1;3===t.rank&&(l=!0,o=s9(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:o,filter:r},h=aN.runKernel(tS,u,{strides:n,pad:a,dimRoundingMode:s,dilations:i,inputShape:e});return l?s9(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),uV=aP({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:r,pad:n,dataFormat:a="NHWC",dilations:i=[1,1],dimRoundingMode:s,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:h}){let p,d;if(!1===oT(aN.state.gradientDepth,l)){let p=ug(e,t,r,n,a,i,s);return null!=o&&(p=sp(p,o)),oN(p,l,u,h)}let c=aO(e,"x","depthwiseConv2d","float32"),f=aO(t,"filter","depthwiseConv2d","float32"),m=c,g=!1;3===c.rank&&(g=!0,m=s9(c,[1,c.shape[0],c.shape[1],c.shape[2]])),H(4===m.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`),H(4===f.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`),H(m.shape[3]===f.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`),null==i&&(i=[1,1]),H(s6(r,i),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${r} and dilations '${i}'`),s7("fused depthwiseConv2d",n,s);let y=sZ(m.shape,f.shape,r,i,n,s,!0);null!=o&&(p=aO(o,"bias","fused conv2d"),[p]=ab(p,c),sP(y.outShape,p.shape)),null!=u&&(d=aO(u,"prelu weights","fused depthwiseConv2d"));let b=(e,t)=>{H(s4(i),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);let[a,o,u,h]=t,d=oI(e,u,l),c=uU(o.shape,d,a,r,n,i,s),f=uW(o,d,a.shape,r,n,i,s);return null!=h?[c,f,oC(p,d)]:[c,f]},x={x:m,filter:f,bias:p,preluActivationWeights:d},v={strides:r,pad:n,dataFormat:a,dilations:i,dimRoundingMode:s,activation:l,leakyreluAlpha:h};return null==o?sb((e,t,r)=>{let n=aN.runKernel(nl,x,v);return r([t,e,n]),g&&(n=s9(n,[n.shape[1],n.shape[2],n.shape[3]])),{value:n,gradFunc:b}})(m,f):sb((e,t,r,n)=>{let a=aN.runKernel(nl,x,v);return n([t,e,a,r]),g&&(a=s9(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:b}})(m,f,p)}}),uG=aP({matMul_:function(e,t,r=!1,n=!1){let a=aO(e,"a","matMul"),i=aO(t,"b","matMul");[a,i]=ab(a,i);let s={a:a,b:i};return aN.runKernel(e7,s,{transposeA:r,transposeB:n})}}),uH=aP({fusedMatMul_:function({a:e,b:t,transposeA:r=!1,transposeB:n=!1,bias:a,activation:i="linear",preluActivationWeights:s,leakyreluAlpha:o=.2}){let l,u;if(!1===oT(aN.state.gradientDepth,i)){let l=uG(e,t,r,n);return null!=a&&(l=sp(l,a)),oN(l,i,s,o)}let h=aO(e,"a","fused matMul"),p=aO(t,"b","fused matMul");[h,p]=ab(h,p);let d=r?h.shape[h.rank-2]:h.shape[h.rank-1],c=n?p.shape[p.rank-1]:p.shape[p.rank-2],f=r?h.shape[h.rank-1]:h.shape[h.rank-2],m=n?p.shape[p.rank-2]:p.shape[p.rank-1],g=h.shape.slice(0,-2),y=p.shape.slice(0,-2),b=q(g),x=q(y);H(d===c,()=>`Error in fused matMul: inner shapes (${d}) and (${c}) of Tensors with shapes ${h.shape} and ${p.shape} and transposeA=${r} and transposeB=${n} must match.`);let v=sP(h.shape.slice(0,-2),p.shape.slice(0,-2)).concat([f,m]),w=r?s9(h,[b,d,f]):s9(h,[b,f,d]),k=n?s9(p,[x,m,c]):s9(p,[x,c,m]);null!=a&&(l=aO(a,"bias","fused matMul"),[l]=ab(l,h),sP(v,l.shape)),null!=s&&(u=aO(s,"prelu weights","fused matMul"));let S=(e,t)=>{let s,o,[l,u,h,p]=t,d=oI(s9(e,h.shape),h,i);return(r||n?!r&&n?(s=uG(d,u,!1,!1),o=uG(d,l,!0,!1)):r&&!n?(s=uG(u,d,!1,!0),o=uG(l,d,!1,!1)):(s=uG(u,d,!0,!0),o=uG(d,l,!0,!0)):(s=uG(d,u,!1,!0),o=uG(l,d,!0,!1)),null!=a)?[s,o,oC(p,d)]:[s,o]},I={a:w,b:k,bias:l,preluActivationWeights:u},C={transposeA:r,transposeB:n,activation:i,leakyreluAlpha:o};return null==a?sb((e,t,r)=>{let n=aN.runKernel(ns,I,C);return r([e,t,n]),{value:s9(n,v),gradFunc:S}})(w,k):sb((e,t,r,n)=>{let a=aN.runKernel(ns,I,C);return n([e,t,a,r]),{value:s9(a,v),gradFunc:S}})(w,k,l)}}),uj=aP({gather_:function(e,t,r=0,n=0){let a=aO(e,"x","gather"),i=aO(t,"indices","gather","int32");return aN.runKernel(tB,{x:a,indices:i},{axis:r,batchDims:n})}}),uK=aP({greater_:function(e,t){let r=aO(e,"a","greater","string_or_numeric"),n=aO(t,"b","greater","string_or_numeric");[r,n]=ab(r,n),sP(r.shape,n.shape);let a={a:r,b:n};return aN.runKernel(tU,a)}}),uq=aP({greaterEqual_:function(e,t){let r=aO(e,"a","greaterEqual","string_or_numeric"),n=aO(t,"b","greaterEqual","string_or_numeric");[r,n]=ab(r,n),sP(r.shape,n.shape);let a={a:r,b:n};return aN.runKernel(tV,a)}});var uX={};N(uX,"spectral",()=>d6),N(uX,"signal",()=>d5),N(uX,"image",()=>d8),N(uX,"linalg",()=>d7),N(uX,"losses",()=>d9),N(uX,"sparse",()=>ce),N(uX,"string",()=>ct),N(uX,"abs",()=>sD),N(uX,"acos",()=>uY),N(uX,"acosh",()=>uZ),N(uX,"add",()=>sp),N(uX,"addN",()=>uQ),N(uX,"all",()=>sG),N(uX,"any",()=>sH),N(uX,"argMax",()=>sj),N(uX,"argMin",()=>uJ),N(uX,"asin",()=>u0),N(uX,"asinh",()=>u1),N(uX,"atan",()=>u2),N(uX,"atan2",()=>u3),N(uX,"atanh",()=>u4),N(uX,"avgPool",()=>oe),N(uX,"avgPool3d",()=>ot),N(uX,"basicLSTMCell",()=>u8),N(uX,"batchToSpaceND",()=>u7),N(uX,"batchNorm",()=>lQ),N(uX,"batchNorm2d",()=>lJ),N(uX,"batchNorm3d",()=>l0),N(uX,"batchNorm4d",()=>l1),N(uX,"bincount",()=>u9),N(uX,"bitwiseAnd",()=>he),N(uX,"broadcastArgs",()=>ht),N(uX,"broadcastTo",()=>l2),N(uX,"buffer",()=>so),N(uX,"cast",()=>sl),N(uX,"ceil",()=>hr),N(uX,"clipByValue",()=>ur),N(uX,"clone",()=>su),N(uX,"complex",()=>aL),N(uX,"concat",()=>un),N(uX,"concat1d",()=>ua),N(uX,"concat2d",()=>ui),N(uX,"concat3d",()=>us),N(uX,"concat4d",()=>uo),N(uX,"conv1d",()=>uu),N(uX,"conv2d",()=>ul),N(uX,"conv2dTranspose",()=>up),N(uX,"conv3d",()=>ud),N(uX,"conv3dTranspose",()=>uf),N(uX,"cos",()=>hn),N(uX,"cosh",()=>ha),N(uX,"cumprod",()=>hi),N(uX,"cumsum",()=>hs),N(uX,"denseBincount",()=>um),N(uX,"depthToSpace",()=>ho),N(uX,"depthwiseConv2d",()=>ug),N(uX,"diag",()=>hl),N(uX,"dilation2d",()=>hu),N(uX,"div",()=>sc),N(uX,"divNoNan",()=>hp),N(uX,"dot",()=>hd),N(uX,"einsum",()=>hc),N(uX,"elu",()=>og),N(uX,"ensureShape",()=>hf),N(uX,"equal",()=>uF),N(uX,"erf",()=>u_),N(uX,"euclideanNorm",()=>hx),N(uX,"exp",()=>uD),N(uX,"expandDims",()=>uO),N(uX,"expm1",()=>hv),N(uX,"eye",()=>uz),N(uX,"fill",()=>sE),N(uX,"floor",()=>ub),N(uX,"floorDiv",()=>sd),N(uX,"gather",()=>uj),N(uX,"greater",()=>uK),N(uX,"greaterEqual",()=>uq),N(uX,"imag",()=>hw),N(uX,"isFinite",()=>hk),N(uX,"isInf",()=>hS),N(uX,"isNaN",()=>hI),N(uX,"leakyRelu",()=>oy),N(uX,"less",()=>hC),N(uX,"lessEqual",()=>hN),N(uX,"linspace",()=>hT),N(uX,"localResponseNormalization",()=>h$),N(uX,"log",()=>hE),N(uX,"log1p",()=>hR),N(uX,"logSigmoid",()=>h_),N(uX,"logSoftmax",()=>hD),N(uX,"logSumExp",()=>hO),N(uX,"logicalAnd",()=>hM),N(uX,"logicalNot",()=>hz),N(uX,"logicalOr",()=>hP),N(uX,"logicalXor",()=>hL),N(uX,"lowerBound",()=>hU),N(uX,"matMul",()=>uG),N(uX,"max",()=>hg),N(uX,"maxPool",()=>hV),N(uX,"maxPool3d",()=>hG),N(uX,"maxPoolWithArgmax",()=>hH),N(uX,"maximum",()=>sL),N(uX,"mean",()=>hj),N(uX,"meshgrid",()=>hX),N(uX,"min",()=>hy),N(uX,"minimum",()=>hY),N(uX,"mirrorPad",()=>hZ),N(uX,"mod",()=>hQ),N(uX,"moments",()=>hJ),N(uX,"mul",()=>sf),N(uX,"multiRNNCell",()=>h0),N(uX,"multinomial",()=>h1),N(uX,"neg",()=>hA),N(uX,"notEqual",()=>h2),N(uX,"oneHot",()=>h3),N(uX,"ones",()=>hq),N(uX,"onesLike",()=>h4),N(uX,"outerProduct",()=>h6),N(uX,"pad",()=>h5),N(uX,"pad1d",()=>h8),N(uX,"pad2d",()=>h7),N(uX,"pad3d",()=>h9),N(uX,"pad4d",()=>pe),N(uX,"pool",()=>pr),N(uX,"pow",()=>sA),N(uX,"prelu",()=>ob),N(uX,"print",()=>sh),N(uX,"prod",()=>pn),N(uX,"raggedGather",()=>pa),N(uX,"raggedRange",()=>pi),N(uX,"raggedTensorToTensor",()=>ps),N(uX,"rand",()=>po),N(uX,"randomGamma",()=>pl),N(uX,"randomNormal",()=>pu),N(uX,"randomStandardNormal",()=>ph),N(uX,"randomUniform",()=>uR),N(uX,"randomUniformInt",()=>pp),N(uX,"range",()=>pd),N(uX,"real",()=>pc),N(uX,"reciprocal",()=>pf),N(uX,"relu",()=>ox),N(uX,"relu6",()=>ov),N(uX,"reshape",()=>s9),N(uX,"reverse",()=>pm),N(uX,"reverse1d",()=>pg),N(uX,"reverse2d",()=>py),N(uX,"reverse3d",()=>pb),N(uX,"reverse4d",()=>px),N(uX,"round",()=>pv),N(uX,"rsqrt",()=>pw),N(uX,"scalar",()=>sx),N(uX,"selu",()=>pk),N(uX,"separableConv2d",()=>pS),N(uX,"setdiff1dAsync",()=>pI),N(uX,"sigmoid",()=>ow),N(uX,"sign",()=>pC),N(uX,"sin",()=>pN),N(uX,"sinh",()=>pT),N(uX,"slice",()=>u6),N(uX,"slice1d",()=>p$),N(uX,"slice2d",()=>pE),N(uX,"slice3d",()=>pR),N(uX,"slice4d",()=>pA),N(uX,"softmax",()=>pF),N(uX,"softplus",()=>hF),N(uX,"spaceToBatchND",()=>pt),N(uX,"fft",()=>p_),N(uX,"ifft",()=>pD),N(uX,"irfft",()=>pO),N(uX,"rfft",()=>pz),N(uX,"split",()=>pM),N(uX,"sqrt",()=>sm),N(uX,"square",()=>sg),N(uX,"squaredDifference",()=>pP),N(uX,"squeeze",()=>pL),N(uX,"stack",()=>pB),N(uX,"step",()=>ok),N(uX,"stridedSlice",()=>pW),N(uX,"sub",()=>sF),N(uX,"sum",()=>oS),N(uX,"tan",()=>pU),N(uX,"tanh",()=>u5),N(uX,"tensor",()=>aW),N(uX,"tensor1d",()=>pV),N(uX,"tensor2d",()=>pG),N(uX,"tensor3d",()=>l4),N(uX,"tensor4d",()=>pH),N(uX,"tensor5d",()=>pj),N(uX,"tensor6d",()=>pK),N(uX,"tensorScatterUpdate",()=>pq),N(uX,"tile",()=>uM),N(uX,"topk",()=>pX),N(uX,"truncatedNormal",()=>pY),N(uX,"unique",()=>pZ),N(uX,"unsortedSegmentSum",()=>pQ),N(uX,"unstack",()=>pJ),N(uX,"upperBound",()=>p0),N(uX,"variable",()=>p1),N(uX,"where",()=>hh),N(uX,"whereAsync",()=>p3),N(uX,"zeros",()=>hK),N(uX,"zerosLike",()=>sy),N(uX,"op",()=>aP),N(uX,"OP_SCOPE_SUFFIX",()=>az),N(uX,"fused",()=>uP);const uY=aP({acos_:function(e){let t=aO(e,"x","acos");return aN.runKernel(eq,{x:t})}}),uZ=aP({acosh_:function(e){let t=aO(e,"x","acosh");return aN.runKernel(eX,{x:t})}}),uQ=aP({addN_:function(e){H(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),H(e.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`);let t=e.map((e,t)=>aO(e,`tensors${t}`,"addN")),r=t[0];return t.forEach(e=>{if(e.dtype!==r.dtype)throw Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!Z(e.shape,r.shape))throw Error("All tensors passed to tf.addN() must have the same shape")}),aN.runKernel(eY,t)}}),uJ=aP({argMin_:function(e,t=0){let r=aO(e,"x","argMin");return aN.runKernel(eQ,{x:r},{axis:t})}}),u0=aP({asin_:function(e){let t=aO(e,"x","asin");return aN.runKernel(eJ,{x:t})}}),u1=aP({asinh_:function(e){let t=aO(e,"x","asinh");return aN.runKernel(e0,{x:t})}}),u2=aP({atan_:function(e){let t=aO(e,"x","atan");return aN.runKernel(e1,{x:t})}}),u3=aP({atan2_:function(e,t){let r=aO(e,"a","atan2"),n=aO(t,"b","atan2");[r,n]=ab(r,n);let a={a:r,b:n};return aN.runKernel(e3,a)}}),u4=aP({atanh_:function(e){let t=aO(e,"x","atanh");return aN.runKernel(e2,{x:t})}}),u6=aP({slice_:function(e,t,r){let n=aO(e,"x","slice","string_or_numeric");if(0===n.rank)throw Error("Slicing scalar is not possible");return aN.runKernel(rz,{x:n},{begin:t,size:r})}}),u5=aP({tanh_:function(e){let t=aO(e,"x","tanh","float32");return aN.runKernel(r4,{x:t})}}),u8=aP({basicLSTMCell_:function(e,t,r,n,a,i){let s=aO(e,"forgetBias","basicLSTMCell"),o=aO(t,"lstmKernel","basicLSTMCell"),l=aO(r,"lstmBias","basicLSTMCell"),u=aO(n,"data","basicLSTMCell"),h=aO(a,"c","basicLSTMCell"),p=sp(uG(un([u,aO(i,"h","basicLSTMCell")],1),o),l),d=p.shape[0],c=p.shape[1]/4,f=[d,c],m=u6(p,[0,0],f),g=u6(p,[0,c],f),y=u6(p,[0,2*c],f),b=u6(p,[0,3*c],f),x=sp(sf(ow(m),u5(g)),sf(h,ow(sp(s,y)))),v=sf(u5(x),ow(b));return[x,v]}}),u7=aP({batchToSpaceND_:function(e,t,r){let n=aO(e,"x","batchToSpaceND"),a=t.reduce((e,t)=>e*t);return H(n.rank>=1+t.length,()=>`input rank is ${n.rank} but should be > than blockShape.length ${t.length}`),H(r.length===t.length,()=>`crops.length is ${r.length} but should be equal to blockShape.length  ${t.length}`),H(n.shape[0]%a==0,()=>`input tensor batch is ${n.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`),aN.runKernel(e9,{x:n},{blockShape:t,crops:r})}}),u9=aP({bincount_:function(e,t,r){let n=aO(e,"x","bincount"),a=aO(t,"weights","bincount");return H("int32"===n.dtype,()=>`Error in bincount: input dtype must be int32, but got ${n.dtype}`),H(r>=0,()=>`size must be non-negative, but got ${r}.`),H(a.size===n.size||0===a.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${n.shape}, weights shape: ${a.shape}.`),aN.runKernel(te,{x:n,weights:a},{size:r})}}),he=aP({bitwiseAnd_:function(e,t){let r=aO(e,"x","bitwiseAnd"),n=aO(t,"y","bitwiseAnd");if(!Z(r.shape,n.shape))throw Error(`BitwiseAnd: Tensors must have the same shape. x: ${r.shape}, y: ${n.shape}`);if("int32"!==r.dtype||"int32"!==n.dtype)throw Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${r.dtype} and type of y: ${n.dtype}`);return aN.runKernel(tt,{a:r,b:n})}}),ht=aP({broadcastArgs_:function(e,t){let r=aO(e,"s0","broadcastArgs","int32"),n=aO(t,"s1","broadcastArgs","int32");if(1!==r.rank)throw Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${r.rank}`);if(1!==n.rank)throw Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${n.rank}`);return aN.runKernel(tr,{s0:r,s1:n})}}),hr=aP({ceil_:function(e){let t=aO(e,"x","ceil","float32");return aN.runKernel(ta,{x:t})}}),hn=aP({cos_:function(e){let t=aO(e,"x","cos","float32");return aN.runKernel("Cos",{x:t})}}),ha=aP({cosh_:function(e){let t=aO(e,"x","cosh","float32");return aN.runKernel(tm,{x:t})}}),hi=aP({cumprod_:function(e,t=0,r=!1,n=!1){let a=aO(e,"x","cumprod");return aN.runKernel(tg,{x:a},{axis:t,exclusive:r,reverse:n})}}),hs=aP({cumsum_:function(e,t=0,r=!1,n=!1){let a=aO(e,"x","cumsum");return aN.runKernel(ty,{x:a},{axis:t,exclusive:r,reverse:n})}}),ho=aP({depthToSpace_:function(e,t,r="NHWC"){let n=aO(e,"x","depthToSpace","float32"),a="NHWC"===r?n.shape[1]:n.shape[2],i="NHWC"===r?n.shape[2]:n.shape[3],s="NHWC"===r?n.shape[3]:n.shape[1];return H(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),H(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${a} and ${t}  for depthToSpace with input shape
    ${n.shape}`),H(i*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${i} and ${t} for depthToSpace with input shape
        ${n.shape}`),H(s%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${s} for depthToSpace with input shape ${n.shape}`),aN.runKernel(tv,{x:n},{blockSize:t,dataFormat:r})}}),hl=aP({diag_:function(e){let t=aO(e,"x","diag");return aN.runKernel(tI,{x:t})}}),hu=aP({dilation2d_:function(e,t,r,n,a=[1,1],i="NHWC"){let s=aO(e,"x","dilation2d"),o=aO(t,"filter","dilation2d");H(3===s.rank||4===s.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${s.rank}.`),H(3===o.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`),H("NHWC"===i,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${i}`);let l=s,u=!1;3===s.rank&&(l=s9(s,[1,s.shape[0],s.shape[1],s.shape[2]]),u=!0),H(l.shape[3]===o.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${o.shape[2]}`);let h={x:l,filter:o},p=aN.runKernel(tC,h,{strides:r,pad:n,dilations:a});return u?s9(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),hh=aP({where_:function(e,t,r){let n=aO(t,"a","where"),a=aO(r,"b","where"),i=aO(e,"condition","where","bool"),s=sP(sP(i.shape,n.shape),a.shape),o=l2(i,s),l=l2(n,s),u=l2(a,s);return aN.runKernel(rO,{condition:o,t:l,e:u})}}),hp=aP({divNoNan_:function(e,t){let r=aO(e,"a","div"),n=aO(t,"b","div");[r,n]=ab(r,n);let a=sc(r,n),i=sy(a);return hh(uF(n,i),i,a)}}),hd=aP({dot_:function(e,t){let r=aO(e,"t1","dot"),n=aO(t,"t2","dot");H((1===r.rank||2===r.rank)&&(1===n.rank||2===n.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${r.rank} and ${n.rank}.`);let a=1===r.rank?r.size:r.shape[1],i=1===n.rank?n.size:n.shape[0];if(H(a===i,()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${i}.`),1===r.rank&&1===n.rank){let e=uG(s9(r,[1,-1]),s9(n,[-1,1]));return s9(e,[])}if(1===r.rank&&2===n.rank){let e=uG(s9(r,[1,-1]),s9(n,[n.shape[0],n.shape[1]]));return s9(e,[e.size])}if(2!==r.rank||1!==n.rank)return uG(r,s9(n,[n.shape[0],n.shape[1]]));{let e=uG(r,s9(n,[-1,1]));return s9(e,[e.size])}}}),hc=aP({einsum_:function(e,...t){let r=t.map((e,t)=>aO(e,`tensors${t}`,"einsum"));return aN.runKernel(tR,r,{equation:e})}}),hf=aP({ensureShape_:function(e,t){let r=aO(e,"x","ensureShape","string_or_numeric");if(!Y(r.shape,t))throw Error(`EnsureShape: Shape of tensor ${r.shape} is not compatible with expected shape ${t}`);return e}});var hm={};N(hm,"norm",()=>hb);const hg=aP({max_:function(e,t=null,r=!1){let n=aO(e,"x","max");return aN.runKernel("Max",{x:n},{reductionIndices:t,keepDims:r})}}),hy=aP({min_:function(e,t=null,r=!1){let n=aO(e,"x","min");return aN.runKernel("Min",{x:n},{axis:t,keepDims:r})}}),hb=aP({norm_:function(e,t="euclidean",r=null,n=!1){let a=function e(t,r,n=null){if(0===t.rank)return sD(t);if(1!==t.rank&&null===n)return e(s9(t,[-1]),r,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===r)return oS(sD(t),n);if(r===1/0)return hg(sD(t),n);if(r===-1/0)return hy(sD(t),n);if("euclidean"===r||2===r)return sm(oS(sA(sD(t),sx(2,"int32")),n));throw Error(`Error in norm: invalid ord value: ${r}`)}if(Array.isArray(n)&&2===n.length){if(1===r)return hg(oS(sD(t),n[0]),n[1]-1);if(r===1/0)return hg(oS(sD(t),n[1]),n[0]);if(r===-1/0)return hy(oS(sD(t),n[1]),n[0]);if("fro"===r||"euclidean"===r)return sm(oS(sg(t),n));throw Error(`Error in norm: invalid ord value: ${r}`)}throw Error(`Error in norm: invalid axis: ${n}`)}(e=aO(e,"x","norm"),t,r),i=a.shape;if(n){let t=ei(r,e.shape);i=oo(a.shape,t)}return s9(a,i)}}),hx=aP({euclideanNorm_:function(e,t=null,r=!1){return hb(e,"euclidean",t,r)}}),hv=aP({expm1_:function(e){let t=aO(e,"x","expm1");return aN.runKernel(tD,{x:t})}}),hw=aP({imag_:function(e){let t=aO(e,"input","imag");return aN.runKernel(tj,{input:t})}}),hk=aP({isFinite_:function(e){let t=aO(e,"x","isFinite");return aN.runKernel(tK,{x:t})}}),hS=aP({isInf_:function(e){let t=aO(e,"x","isInf");return aN.runKernel(tq,{x:t})}}),hI=aP({isNaN_:function(e){let t=aO(e,"x","isNaN");return aN.runKernel(tX,{x:t})}}),hC=aP({less_:function(e,t){let r=aO(e,"a","less","string_or_numeric"),n=aO(t,"b","less","string_or_numeric");[r,n]=ab(r,n),sP(r.shape,n.shape);let a={a:r,b:n};return aN.runKernel(tZ,a)}}),hN=aP({lessEqual_:function(e,t){let r=aO(e,"a","lessEqual","string_or_numeric"),n=aO(t,"b","lessEqual","string_or_numeric");[r,n]=ab(r,n),sP(r.shape,n.shape);let a={a:r,b:n};return aN.runKernel(tQ,a)}});function hT(e,t,r){if(r<=0)throw Error("The number of values should be positive.");return aN.runKernel(tJ,{},{start:e,stop:t,num:r})}const h$=aP({localResponseNormalization_:function(e,t=5,r=1,n=1,a=.5){let i=aO(e,"x","localResponseNormalization");H(4===i.rank||3===i.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${i.rank}.`),H(Q(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let s=i,o=!1;3===i.rank&&(o=!0,s=s9(i,[1,i.shape[0],i.shape[1],i.shape[2]]));let l={x:s},u=aN.runKernel("LRN",l,{depthRadius:t,bias:r,alpha:n,beta:a});return o?s9(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),hE=aP({log_:function(e){let t=aO(e,"x","log","float32");return aN.runKernel("Log",{x:t})}}),hR=aP({log1p_:function(e){let t=aO(e,"x","log1p");return aN.runKernel(t0,{x:t})}}),hA=aP({neg_:function(e){let t=aO(e,"x","neg");return aN.runKernel("Neg",{x:t})}}),hF=aP({softplus_:function(e){let t=aO(e,"x","softplus");return aN.runKernel(rW,{x:t})}}),h_=aP({logSigmoid_:function(e){let t=aO(e,"x","logSigmoid");return sb(e=>({value:hA(hF(hA(e))),gradFunc:t=>sf(t,ow(hA(e)))}))(t)}}),hD=aP({logSoftmax_:function(e,t=-1){let r=aO(e,"logits","logSoftmax");if(-1===t&&(t=r.rank-1),t!==r.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${r.rank} and axis was ${t}`);return sb((e,r)=>{let n=hg(e,t,!0),a=sF(e,n),i=sF(sl(a,"float32"),hE(oS(uD(a),t,!0)));return r([i]),{value:i,gradFunc:(e,r)=>{let[n]=r,a=uD(n);return sF(e,sf(oS(e,t,!0),a))}}})(r)}}),hO=aP({logSumExp_:function(e,t=null,r=!1){let n=aO(e,"x","logSumExp"),a=ei(t,n.shape),i=hg(n,a,!0),s=hE(oS(uD(sF(n,i)),a)),o=sp(s9(i,s.shape),s);if(r){let e=oo(o.shape,a);return s9(o,e)}return o}}),hM=aP({logicalAnd_:function(e,t){let r=aO(e,"a","logicalAnd","bool"),n=aO(t,"b","logicalAnd","bool");return sP(r.shape,n.shape),aN.runKernel(t1,{a:r,b:n})}}),hz=aP({logicalNot_:function(e){let t=aO(e,"x","logicalNot","bool");return aN.runKernel(t2,{x:t})}}),hP=aP({logicalOr_:function(e,t){let r=aO(e,"a","logicalOr","bool"),n=aO(t,"b","logicalOr","bool");return sP(r.shape,n.shape),aN.runKernel(t3,{a:r,b:n})}}),hL=aP({logicalXor_:function(e,t){let r=aO(e,"a","logicalXor","bool"),n=aO(t,"b","logicalXor","bool");return sP(r.shape,n.shape),hM(hP(e,t),hz(hM(e,t)))}});var hB={};N(hB,"searchSorted",()=>hW);const hW=aP({searchSorted_:function(e,t,r="left"){let n=aO(e,"sortedSequence","searchSorted"),a=aO(t,"values","searchSorted"),i=n.shape[n.shape.length-1],s=a.shape[a.shape.length-1],o=s9(n,[-1,i]),l=s9(a,[-1,s]);if(o.rank<2)throw Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(q(l.shape)>=0x80000000)throw Error("values tensor size must less than 2147483648");if(o.shape[1]>=0x80000000)throw Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);return aN.runKernel(rD,{sortedSequence:o,values:l},{side:r})}});function hU(e,t){return hW(e,t,"left")}const hV=aP({maxPool_:function(e,t,r,n,a){let i=aO(e,"x","maxPool"),s=i,o=!1;3===i.rank&&(o=!0,s=s9(i,[1,i.shape[0],i.shape[1],i.shape[2]])),H(4===s.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${s.rank}.`),H(s6(r,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '1'`),s7("maxPool",n,a);let l={x:s},u=aN.runKernel(t5,l,{filterSize:t,strides:r,pad:n,dimRoundingMode:a});return o?s9(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),hG=aP({maxPool3d_:function(e,t=[1,1,1],r,n,a,i="NDHWC"){let s=aO(e,"x","maxPool3d"),o=s,l=!1;4===s.rank&&(l=!0,o=s9(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),H(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),H("NDHWC"===i,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`),s7("maxPool3d",n,a);let u={x:o},h=aN.runKernel(t7,u,{filterSize:t,strides:r,pad:n,dimRoundingMode:a,dataFormat:i});return l?s9(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),hH=aP({maxPoolWithArgmax_:function(e,t,r,n,a=!1){let i=aO(e,"x","maxPoolWithArgmax"),s=aN.runKernel(re,{x:i},{filterSize:t,strides:r,pad:n,includeBatchInIndex:a});return{result:s[0],indexes:s[1]}}}),hj=aP({mean_:function(e,t=null,r=!1){let n=aO(e,"x","mean");return aN.runKernel(rt,{x:n},{axis:t,keepDims:r})}});function hK(e,t="float32"){if(eN(e),"complex64"===t)return aL(hK(e,"float32"),hK(e,"float32"));let r=eI(q(e),t);return aN.makeTensor(r,e,t)}function hq(e,t="float32"){if(eN(e),"complex64"===t)return aL(hq(e,"float32"),hK(e,"float32"));let r=eS(q(e),t);return aN.makeTensor(r,e,t)}function hX(e,t,{indexing:r="xy"}={}){if("xy"!==r&&"ij"!==r)throw TypeError(`${r} is not a valid third argument to meshgrid`);if(void 0===e)return[];let n=aO(e,"x","meshgrid",e instanceof au?e.dtype:"float32");if(void 0===t)return[n];let a=aO(t,"y","meshgrid",t instanceof au?t.dtype:"float32"),i=q(n.shape),s=q(a.shape);return"xy"===r?(n=s9(n,[1,-1]),a=s9(a,[-1,1]),[uG(hq([s,1],n.dtype),n),uG(a,hq([1,i],a.dtype))]):(n=s9(n,[-1,1]),a=s9(a,[1,-1]),[uG(n,hq([1,s],n.dtype)),uG(hq([i,1],a.dtype),a)])}const hY=aP({minimum_:function(e,t){let r=aO(e,"a","minimum"),n=aO(t,"b","minimum");[r,n]=ab(r,n),"bool"===r.dtype&&(r=sl(r,"int32"),n=sl(n,"int32")),sP(r.shape,n.shape);let a={a:r,b:n};return aN.runKernel(rr,a)}}),hZ=aP({mirrorPad_:function(e,t,r){H("reflect"===r||"symmetric"===r,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${r}.`);let n=aO(e,"x","mirrorPad");if(0===n.rank)throw Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");H(t.length===n.rank,()=>`Padding doesn't match input. Must be ${n.rank}. Got ${t.length}.`);let a=+("reflect"===r);for(let e=0;e<n.rank;e++)H(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),H(t[e][0]>=0&&t[e][0]<=n.shape[e]-a&&t[e][1]>=0&&t[e][1]<=n.shape[e]-a,()=>`Padding in dimension ${e} cannot be greater than or equal to ${n.shape[e]-a} or less than 0 for input of shape ${n.shape}`);return aN.runKernel(rn,{x:n},{paddings:t,mode:r})}}),hQ=aP({mod_:function(e,t){let r=aO(e,"a","mod"),n=aO(t,"b","mod");[r,n]=ab(r,n);let a={a:r,b:n};return aN.runKernel("Mod",a)}}),hJ=aP({moments_:function(e,t=null,r=!1){let n=ei(t,(e=aO(e,"x","moments")).shape),a=hj(e,n,r),i=a.shape;r||(i=oo(a.shape,n));let s=hj(sg(sF(sl(e,"float32"),s9(a,i))),n,r);return{mean:a,variance:s}}}),h0=aP({multiRNNCell_:function(e,t,r,n){let a=aO(t,"data","multiRNNCell"),i=aM(r,"c","multiRNNCell"),s=aM(n,"h","multiRNNCell"),o=a,l=[];for(let t=0;t<e.length;t++){let r=e[t](o,i[t],s[t]);l.push(r[0]),l.push(r[1]),o=r[1]}let u=[],h=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),h.push(l[e+1]);return[u,h]}}),h1=aP({multinomial_:function(e,t,r,n=!1){let a=aO(e,"logits","multinomial"),i=a.size,s=a.rank;if(i<2)throw Error(`Error in multinomial: you need at least 2 outcomes, but got ${i}.`);if(s>2)throw Error(`Rank of probabilities must be 1 or 2, but is ${s}`);r=r||Math.random();let o=1===s?s9(a,[1,-1]):a,l={numSamples:t,seed:r,normalized:n},u=aN.runKernel(ra,{logits:o},l);return 1===s?s9(u,[u.size]):u}}),h2=aP({notEqual_:function(e,t){let r=aO(e,"a","notEqual","string_or_numeric"),n=aO(t,"b","notEqual","string_or_numeric");[r,n]=ab(r,n),sP(r.shape,n.shape);let a={a:r,b:n};return aN.runKernel(rs,a)}}),h3=aP({oneHot_:function(e,t,r=1,n=0,a="int32"){if(t<2)throw Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let i=aO(e,"indices","oneHot","int32");return aN.runKernel(rp,{indices:i},{dtype:a,depth:t,onValue:r,offValue:n})}}),h4=aP({onesLike_:function(e){let t=aO(e,"x","onesLike");return aN.runKernel(rh,{x:t})}}),h6=aP({outerProduct_:function(e,t){let r=aO(e,"v1","outerProduct"),n=aO(t,"v2","outerProduct");return H(1===r.rank&&1===n.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${r.rank} and ${n.rank}.`),uG(s9(r,[-1,1]),s9(n,[1,-1]))}}),h5=aP({pad_:function(e,t,r=0){let n=aO(e,"x","pad");if(0===n.rank)throw Error("pad(scalar) is not defined. Pass non-scalar to pad");return aN.runKernel(rc,{x:n},{paddings:t,constantValue:r})}}),h8=aP({pad1d_:function(e,t,r=0){return H(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),h5(e,[t],r)}}),h7=aP({pad2d_:function(e,t,r=0){return H(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),h5(e,t,r)}}),h9=aP({pad3d_:function(e,t,r=0){return H(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),h5(e,t,r)}}),pe=aP({pad4d_:function(e,t,r=0){return H(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),h5(e,t,r)}}),pt=aP({spaceToBatchND_:function(e,t,r){let n=aO(e,"x","spaceToBatchND");return H(n.rank>=1+t.length,()=>`input rank ${n.rank} should be > than [blockShape] ${t.length}`),H(r.length===t.length,()=>`paddings.shape[0] ${r.length} must be equal to [blockShape] ${t.length}`),H(n.shape.reduce((e,n,a)=>a>0&&a<=t.length?e&&(n+r[a-1][0]+r[a-1][1])%t[a-1]==0:e,!0),()=>`input spatial dimensions ${n.shape.slice(1)} with paddings ${r.toString()} must be divisible by blockShapes ${t.toString()}`),aN.runKernel(rV,{x:n},{blockShape:t,paddings:r})}}),pr=aP({pool_:function(e,t,r,n,a,i,s){let o;null==a&&(a=[1,1]),null==i&&(i=1),0===n&&(n="valid");let l=aO(e,"x","maxPool"),u=l,h=!1;3===l.rank&&(h=!0,u=s9(l,[1,l.shape[0],l.shape[1],l.shape[2]])),H(s6(i,a),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${i} and dilations '${a}'`);let p=sX(u.shape,t,i,a,n),d=[p.dilationHeight,p.dilationWidth];o="same"===n?function(e,t){let r=e.map((e,r)=>e+(e-1)*(t[r]-1)).map(e=>e-1),n=r.map(e=>Math.floor(e/2)),a=r.map((e,t)=>e-n[t]);return r.map((e,t)=>[n[t],a[t]])}([p.filterHeight,p.filterWidth],d):[[0,0],[0,0]];let c=1===d[0]&&1===d[1],[f,m]=function(e,t,r){let n=r.map(e=>e[0]),a=r.map(e=>e[1]),i=e.concat(n,a),s=t.map((e,t)=>(e-i[t]%e)%e),o=a.map((e,t)=>e+s[t]);return[t.map((e,t)=>[n[t],o[t]]),t.map((e,t)=>[0,s[t]])]}([p.inHeight,p.inWidth],d,o),g=c?n:"valid",y=c?u:pt(u,d,f),b=("avg"===r?()=>oe(y,t,i,g,s):()=>hV(y,t,i,g,s))(),x=c?b:u7(b,d,m);return h?s9(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),pn=aP({prod_:function(e,t=null,r=!1){let n=aO(e,"x","prod");"bool"===n.dtype&&(n=sl(n,"int32"));let a={x:n};return aN.runKernel(rm,a,{axis:t,keepDims:r})}}),pa=aP({raggedGather_:function(e,t,r,n){let a=e.map((e,t)=>aO(e,`tensors${t}`,"raggedGather","int32")),i=aO(t,"paramsDenseValues","raggedGather"),s=aO(r,"indices","raggedGather","int32"),o=aN.runKernel(rg,{paramsNestedSplits:a,paramsDenseValues:i,indices:s},{outputRaggedRank:n});return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),pi=aP({raggedRange_:function(e,t,r){let n=aO(e,"starts","raggedRange"),a=aO(t,"limits","raggedRange",n.dtype),i=aO(r,"deltas","raggedRange",n.dtype),s=aN.runKernel(ry,{starts:n,limits:a,deltas:i});return{rtNestedSplits:s[0],rtDenseValues:s[1]}}}),ps=aP({raggedTensorToTensor_:function(e,t,r,n,a){let i=aO(e,"shape","raggedTensorToTensor","int32"),s=aO(t,"values","raggedTensorToTensor"),o=aO(r,"defaultValue","raggedTensorToTensor",s.dtype),l=n.map((e,t)=>aO(e,`tensors${t}`,"raggedTensorToTensor","int32"));return aN.runKernel(rb,{shape:i,values:s,defaultValue:o,rowPartitionTensors:l},{rowPartitionTypes:a})}}),po=aP({rand_:function(e,t,r){eN(e);let n=q(e),a=null;if(null==r||"float32"===r)a=new Float32Array(n);else if("int32"===r)a=new Int32Array(n);else if("bool"===r)a=new Uint8Array(n);else throw Error(`Unknown data type ${r}`);for(let e=0;e<n;e++)a[e]=t();return aN.makeTensor(a,e,r)}}),pl=aP({randomGamma_:function(e,t,r=1,n="float32",a){if(eN(e),null==r&&(r=1),null==n&&(n="float32"),"float32"!==n&&"int32"!==n)throw Error(`Unsupported data type ${n}`);let i=new u$(t,r,n,a),s=so(e,n);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),pu=aP({randomNormal_:function(e,t=0,r=1,n,a){if(eN(e),null!=n&&"bool"===n)throw Error(`Unsupported data type ${n}`);let i=new uT(t,r,n,!1,a),s=so(e,n);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),ph=aP({randomStandardNormal_:function(e,t,r){if(null!=t&&"bool"===t)throw Error(`Unsupported data type ${t}`);return pu(e,0,1,t,r)}}),pp=aP({randomUniformInt_:function(e,t,r,n){return uR(e,t,r,"int32",n)}});function pd(e,t,r=1,n="float32"){if(0===r)throw Error("Cannot have a step of zero");return aN.runKernel(rx,{},{start:e,stop:t,step:r,dtype:n})}const pc=aP({real_:function(e){let t=aO(e,"input","real");return aN.runKernel(rv,{input:t})}}),pf=aP({reciprocal_:function(e){let t=aO(e,"x","reciprocal");return aN.runKernel(rw,{x:t})}}),pm=aP({reverse_:function(e,t){let r=aO(e,"x","reverse");return aN.runKernel(rE,{x:r},{dims:t})}}),pg=aP({reverse1d_:function(e){let t=aO(e,"x","reverse");return H(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),pm(t,0)}}),py=aP({reverse2d_:function(e,t){let r=aO(e,"x","reverse");return H(2===r.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${r.rank}.`),pm(r,t)}}),pb=aP({reverse3d_:function(e,t){let r=aO(e,"x","reverse");return H(3===r.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${r.rank}.`),pm(r,t)}}),px=aP({reverse4d_:function(e,t){let r=aO(e,"x","reverse");return H(4===r.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${r.rank}.`),pm(r,t)}}),pv=aP({round_:function(e){let t=aO(e,"x","round");return aN.runKernel(rR,{x:t})}}),pw=aP({rsqrt_:function(e){let t=aO(e,"x","rsqrt","float32");return aN.runKernel(rA,{x:t})}}),pk=aP({selu_:function(e){let t=aO(e,"x","selu");return aN.runKernel(rM,{x:t})}}),pS=aP({separableConv2d_:function(e,t,r,n,a,i=[1,1],s="NHWC"){let o=aO(e,"x","separableConv2d"),l=aO(t,"depthwiseFilter","separableConv2d"),u=aO(r,"pointwiseFilter","separableConv2d"),h=o,p=!1;if(3===o.rank&&(p=!0,h=s9(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===s)throw Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");H(4===h.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${h.rank}.`),H(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),H(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),H(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),H(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let d=l.shape[2],c=l.shape[3];H(u.shape[2]===d*c,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*c}, but got ${u.shape[2]}.`);let f=ul(ug(h,l,n,a,s,i),u,1,"valid",s);return p?s9(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),pI=async function(e,t){let r=aO(e,"x","setdiff1d"),n=aO(t,"y","setdiff1d");H(r.dtype===n.dtype,()=>`x and y should have the same dtype, but got x (${r.dtype}) and y (${n.dtype}).`),H(1===r.rank,()=>`x should be 1D tensor, but got x (${r.shape}).`),H(1===n.rank,()=>`y should be 1D tensor, but got y (${n.shape}).`);let a=await r.data(),i=new Set(await n.data()),s=0;for(let e=0;e<a.length;e++)!i.has(a[e])&&s++;let o=new as([s],r.dtype),l=new as([s],"int32");for(let e=0,t=0;e<a.length;e++)!i.has(a[e])&&(o.values[t]=a[e],l.values[t]=e,t++);return[o.toTensor(),l.toTensor()]},pC=aP({sign_:function(e){let t=aO(e,"x","sign");return aN.runKernel(rL,{x:t})}}),pN=aP({sin_:function(e){let t=aO(e,"x","sin","float32");return aN.runKernel("Sin",{x:t})}}),pT=aP({sinh_:function(e){let t=aO(e,"x","sinh");return aN.runKernel(rP,{x:t})}}),p$=aP({slice1d_:function(e,t,r){let n=aO(e,"x","slice1d");return H(1===n.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${n.rank} tensor`),u6(n,[t],[r])}}),pE=aP({slice2d_:function(e,t,r){let n=aO(e,"x","slice2d");return H(2===n.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${n.rank} tensor`),u6(n,t,r)}}),pR=aP({slice3d_:function(e,t,r){let n=aO(e,"x","slice3d");return H(3===n.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${n.rank} tensor`),u6(n,t,r)}}),pA=aP({slice4d_:function(e,t,r){let n=aO(e,"x","slice4d");return H(4===n.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${n.rank} tensor`),u6(n,t,r)}}),pF=aP({softmax_:function(e,t=-1){let r=aO(e,"logits","softmax","float32");if(-1===t&&(t=r.rank-1),t!==r.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${r.rank} and dim was ${t}`);let n={dim:t};return aN.runKernel(rH,{logits:r},n)}}),p_=aP({fft_:function(e){return H("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),aN.runKernel("FFT",{input:e})}}),pD=aP({ifft_:function(e){return H("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),aN.runKernel(tH,{input:e})}}),pO=aP({irfft_:function(e){let t,r=e.shape[e.shape.length-1],n=e.size/r;if(r<=2)t=pD(s9(e,[n,r]));else{let a=[n,2*(r-1)],i=s9(pc(e),[n,r]),s=s9(hw(e),[n,r]),o=pm(u6(i,[0,1],[n,r-2]),1),l=sf(pm(u6(s,[0,1],[n,r-2]),1),sx(-1));t=pD(s9(aL(un([i,o],1),un([s,l],1)),[a[0],a[1]]))}if(t=pc(t),3===e.rank&&0!==e.shape[0]){let r=t,n=e.shape[0];t=s9(t,[n,t.shape[0]/n,t.shape[1]]),r.dispose()}return t}}),pM=aP({split_:function(e,t,r=0){let n=aO(e,"x","split");return aN.runKernel(rG,{x:n},{numOrSizeSplits:t,axis:r})}}),pz=aP({rfft_:function(e,t){let r;H("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let n=e.shape[e.shape.length-1],a=e.size/n;if(null!=t&&t<n){let a=e.shape.map(e=>0),i=e.shape.map(e=>e);i[e.shape.length-1]=t,r=u6(e,a,i),n=t}else if(null!=t&&t>n){let a=e.shape.map(e=>e);a[e.shape.length-1]=t-n,r=un([e,hK(a)],e.shape.length-1),n=t}else r=e;let i=sy(r),s=p_(s9(aL(r,i),[a,n])),o=Math.floor(n/2)+1,l=pc(s),u=hw(s),h=pM(l,[o,n-o],l.shape.length-1),p=pM(u,[o,n-o],u.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=o,s9(aL(h[0],p[0]),d)}}),pP=aP({squaredDifference_:function(e,t){let r=aO(e,"a","squaredDifference"),n=aO(t,"b","squaredDifference");[r,n]=ab(r,n),sP(r.shape,n.shape);let a={a:r,b:n};return aN.runKernel(rZ,a,{})}}),pL=aP({squeeze_:function(e,t){let r=aO(e,"x","squeeze","string_or_numeric");return s9(r,es(r.shape,t).newShape)}}),pB=aP({stack_:function(e,t=0){let r=aM(e,"tensors","stack","string_or_numeric");return H(r.length>=1,()=>"Pass at least one tensor to tf.stack"),r.length>0&&H(t<=r[0].rank,()=>"Axis must be <= rank of the tensor"),aN.runKernel(rd,r,{axis:t})}}),pW=aP({stridedSlice_:function(e,t,r,n,a=0,i=0,s=0,o=0,l=0){let u=aO(e,"x","stridedSlice","string_or_numeric");return aN.runKernel(r0,{x:u},{begin:t,end:r,strides:n,beginMask:a,endMask:i,ellipsisMask:s,newAxisMask:o,shrinkAxisMask:l})}}),pU=aP({tan_:function(e){let t=aO(e,"x","tan","float32");return aN.runKernel("Tan",{x:t})}});function pV(e,t){K(e);let r=a_(e,t);if(1!==r.length)throw Error("tensor1d() requires values to be a flat/TypedArray");return aB(e,null,r,t)}function pG(e,t,r){if(K(e),null!=t&&2!==t.length)throw Error("tensor2d() requires shape to have two numbers");let n=a_(e,r);if(2!==n.length&&1!==n.length)throw Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return aB(e,t,n,r)}function pH(e,t,r){if(K(e),null!=t&&4!==t.length)throw Error("tensor4d() requires shape to have four numbers");let n=a_(e,r);if(4!==n.length&&1!==n.length)throw Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor4d() requires shape to be provided when `values` are a flat array");return aB(e,t,n,r)}function pj(e,t,r){if(K(e),null!=t&&5!==t.length)throw Error("tensor5d() requires shape to have five numbers");let n=a_(e,r);if(5!==n.length&&1!==n.length)throw Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor5d() requires shape to be provided when `values` are a flat array");return aB(e,t,n,r)}function pK(e,t,r){if(K(e),null!=t&&6!==t.length)throw Error("tensor6d() requires shape to have six numbers");let n=a_(e,r);if(6!==n.length&&1!==n.length)throw Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===n.length&&null==t)throw Error("tensor6d() requires shape to be provided when `values` are a flat array");return aB(e,t=t||n,n,r)}const pq=aP({tensorScatterUpdate_:function(e,t,r){let n=aO(e,"tensor","tensorScatterupdate"),a=aO(t,"indices","tensorScatterupdate","int32"),i=aO(r,"updates","tensorScatterupdate");if(lt(i,a,n.shape),n.dtype!==i.dtype)throw Error(`tensor and updates must have the same dtype, instead they are ${n.dtype} and ${i.dtype}.`);return aN.runKernel(r_,{tensor:n,indices:a,updates:i},{})}}),pX=aP({topk_:function(e,t=1,r=!0){let n=aO(e,"x","topk");if(0===n.rank)throw Error("topk() expects the input to be of rank 1 or higher");let a=n.shape[n.shape.length-1];if(t<0)throw Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);let[i,s]=aN.runKernel(r5,{x:n},{k:t,sorted:r});return{values:i,indices:s}}}),pY=aP({truncatedNormal_:function(e,t=0,r=1,n,a){if(eN(e),null!=n&&"bool"===n)throw Error("Unsupported data type $ { dtype }");let i=new uT(t,r,n,!0,a),s=so(e,n);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}}),pZ=aP({unique_:function(e,t=0){let r=aO(e,"x","unique","string_or_numeric");H(r.rank>0,()=>"The input tensor must be at least 1D");let[n,a]=aN.runKernel(r9,{x:r},{axis:t});return{values:n,indices:a}}}),pQ=aP({unsortedSegmentSum_:function(e,t,r){let n=aO(e,"x","unsortedSegmentSum"),a=aO(t,"segmentIds","unsortedSegmentSum","int32");return H(Q(r),()=>"numSegments must be of dtype int"),aN.runKernel(nt,{x:n,segmentIds:a},{numSegments:r})}}),pJ=aP({unstack_:function(e,t=0){let r=aO(e,"x","unstack","string_or_numeric");return H(t>=-r.shape.length&&t<r.shape.length,()=>`Axis = ${t} is not in [-${r.shape.length}, ${r.shape.length})`),aN.runKernel(ne,{value:r},{axis:t})}});function p0(e,t){return hW(e,t,"right")}function p1(e,t=!0,r,n){return aN.makeVariable(e,t,r,n)}function p2(e,t){let r=[];for(let e=0;e<t.length;e++)t[e]&&r.push(e);let n=so(e,"int32"),a=so([r.length,e.length],"int32");for(let t=0;t<r.length;t++){let i=n.indexToLoc(r[t]),s=t*e.length;a.values.set(i,s)}return a.toTensor()}const p3=async function(e){let t=aO(e,"condition","whereAsync","bool"),r=await t.data(),n=p2(t.shape,r);return e!==t&&t.dispose(),n};var p4={};N(p4,"booleanMaskAsync",()=>p6);const p6=async function(e,t,r){let n=aO(e,"tensor","boolMask"),a=aO(t,"mask","boolMask","bool"),i=null==r?0:r,s=a.rank,o=n.shape;H(s>0,()=>"mask cannot be scalar"),j(o.slice(i,i+s),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=i;e<i+s;e++)l*=o[e];let u=s9(n,o.slice(0,i).concat([l],o.slice(i+s))),h=s9(a,[-1]),p=await p3(h),d=pL(p,[1]),c=uj(u,d,i);return e!==n&&n.dispose(),t!==a&&a.dispose(),d.dispose(),u.dispose(),h.dispose(),p.dispose(),c};var p5={};N(p5,"transpose",()=>p8);const p8=aP({transpose_:function(e,t,r){let n=aO(e,"x","transpose");if(null==t&&(t=n.shape.map((e,t)=>t).reverse()),H(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`),t.forEach(e=>{H(e>=0&&e<n.rank,()=>`All entries in 'perm' must be between 0 and ${n.rank-1} but got ${t}`)}),n.rank<=1)return n.clone();let a={perm:t};return"complex64"===n.dtype?aH(()=>{let e=pc(n),t=hw(n);return e=aN.runKernel(r7,{x:e},a),t=aN.runKernel(r7,{x:t},a),r&&(t=hA(t)),aL(e,t)}):aN.runKernel(r7,{x:n},a)}});var p7={};N(p7,"movingAverage",()=>p9);const p9=aP({movingAverage_:function(e,t,r,n,a=!0){let i=aO(e,"v","movingAverage"),s=aO(t,"x","movingAverage"),o=aO(r,"decay","movingAverage");ax(i,s),H(Z(i.shape,s.shape),()=>"Shape mismatch in v and x");let l=sx(1),u=sF(l,o),h=sf(sF(s,i),u);return a&&(H(null!=n,()=>"When using zeroDebias: true, step is required."),h=sc(h,sF(l,sA(o,aO(n,"step","movingAverage"))))),sp(i,h)}});var de={};N(de,"scatterND",()=>dt);const dt=aP({scatterND_:function(e,t,r){eN(r);let n=aO(e,"indices","scatterND","int32"),a=aO(t,"updates","scatterND");return lt(a,n,r),aN.runKernel(rF,{indices:n,updates:a},{shape:r})}});var dr={};N(dr,"sparseToDense",()=>dn);const dn=aP({sparseToDense_:function(e,t,r,n=0){eN(r);let a=aO(e,"sparseIndices","sparseToDense","int32"),i=aO(t,"sparseValues","sparseToDense","string_or_numeric"),s=aO(n,"defaultValue","sparseToDense",i.dtype);if("int32"!==a.dtype)throw Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${a.dtype}.`);if(a.rank>2)throw Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${a.shape}.`);let o=a.rank>0?a.shape[0]:1,l=a.rank>1?a.shape[1]:1;if(r.length!==l)throw Error(`outputShape has incorrect number of elements:, ${r.length}, should be: ${l}.`);let u=i.size;if(0!==i.rank&&(1!==i.rank||u!==o))throw Error(`sparseValues has incorrect shape ${i.shape}, should be [] or [${o}]`);if(i.dtype!==s.dtype)throw Error("sparseValues.dtype must match defaultValues.dtype");return aN.runKernel(rY,{sparseIndices:a,sparseValues:i,defaultValue:s},{outputShape:r})}});var da={};N(da,"gatherND",()=>di);const di=aP({gatherND_:function(e,t){let r=aO(t,"indices","gatherND","int32"),n=aO(e,"x","gatherND","string_or_numeric");return aN.runKernel(tW,{params:n,indices:r})}});var ds={};function dl(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function du(e,t,r){let n=1-e%2,a=new Float32Array(e);for(let i=0;i<e;++i){let s=2*Math.PI*i/(e+n-1);a[i]=t-r*Math.cos(s)}return pV(a,"float32")}N(ds,"enclosingPowerOfTwo",()=>dl),N(ds,"cosineWindow",()=>du);var dh={};N(dh,"inTopKAsync",()=>dp);const dp=async function(e,t,r=1){let n=aO(e,"predictions","inTopK"),a=aO(t,"targets","inTopK");H(n.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${n.rank}`),H(n.rank-1===a.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${n.rank} and targets rank ${a.rank}`),j(n.shape.slice(0,n.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let i=n.shape[n.shape.length-1];H(r>0&&r<=i,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${i}), but got ${r}`);let s=await n.data(),o=await a.data(),[l,u]=[s.length/i,i],h=el("bool",l);for(let e=0;e<l;e++){let t=e*u,n=s.subarray(t,t+u),a=[];for(let e=0;e<n.length;e++)a.push({value:n[e],index:e});a.sort((e,t)=>t.value-e.value),h[e]=0;for(let t=0;t<r;t++)if(a[t].index===o[e]){h[e]=1;break}}return e!==n&&n.dispose(),t!==a&&a.dispose(),aW(h,a.shape,"bool")},dd=aP({hammingWindow_:function(e){return du(e,.54,.46)}}),dc=aP({hannWindow_:function(e){return du(e,.5,.5)}}),df=aP({frame_:function(e,t,r,n=!1,a=0){let i=0,s=[];for(;i+t<=e.size;)s.push(u6(e,i,t)),i+=r;if(n)for(;i<e.size;){let n=i+t-e.size,o=un([u6(e,i,t-n),sE([n],a)]);s.push(o),i+=r}return 0===s.length?pG([],[0,t]):s9(un(s),[s.length,t])}}),dm=aP({stft_:function(e,t,r,n,a=dc){return null==n&&(n=dl(t)),pz(sf(df(e,t,r),a(t)),n)}}),dg=aP({cropAndResize_:function(e,t,r,n,a="bilinear",i=0){let s=aO(e,"image","cropAndResize"),o=aO(t,"boxes","cropAndResize","float32"),l=aO(r,"boxInd","cropAndResize","int32"),u=o.shape[0];return H(4===s.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${s.rank}.`),H(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),H(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),H(2===n.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${n.length}.`),H(n[0]>=1&&n[1]>=1,()=>`cropSize must be atleast [1,1], but was ${n}`),H("bilinear"===a||"nearest"===a,()=>`method must be bilinear or nearest, but was ${a}`),aN.runKernel(tb,{image:s,boxes:o,boxInd:l},{method:a,extrapolationValue:i,cropSize:n})}}),dy=aP({flipLeftRight_:function(e){let t=aO(e,"image","flipLeftRight","float32");return H(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),aN.runKernel(tM,{image:t},{})}}),db=aP({grayscaleToRGB_:function(e){let t=aO(e,"image","grayscaleToRGB"),r=t.rank-1,n=t.shape[r];H(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),H(1===n,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${n}.`);let a=Array(t.rank);return a.fill(1,0,r),a[r]=3,uM(t,a)}}),dx=aP({rgbToGrayscale_:function(e){let t,r=aO(e,"image","RGBToGrayscale"),n=r.rank-1,a=r.shape[n];H(r.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${r.rank}.`),H(3===a,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${a}.`);let i=r.dtype,s=sl(r,"float32"),o=pV([.2989,.587,.114]);switch(r.rank){case 2:t=hc("ij,j->i",s,o);break;case 3:t=hc("ijk,k->ij",s,o);break;case 4:t=hc("ijkl,l->ijk",s,o);break;case 5:t=hc("ijklm,m->ijkl",s,o);break;case 6:t=hc("ijklmn,n->ijklm",s,o);break;default:throw Error("Not a valid tensor rank.")}return sl(t=uO(t,-1),i)}}),dv=aP({rotateWithOffset_:function(e,t,r=0,n=.5){let a=aO(e,"image","rotateWithOffset","float32");return H(4===a.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`),aN.runKernel(ni,{image:a},{radians:t,fillValue:r,center:n})}});function dw(e,t,r,n,a,i){null==n&&(n=.5),null==a&&(a=-1/0),null==i&&(i=0);let s=e.shape[0];return r=Math.min(r,s),H(0<=n&&n<=1,()=>`iouThreshold must be in [0, 1], but was '${n}'`),H(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),H(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),H(1===t.rank,()=>"scores must be a 1D tensor"),H(t.shape[0]===s,()=>`scores has incompatible shape with boxes. Expected ${s}, but was ${t.shape[0]}`),H(0<=i&&i<=1,()=>`softNmsSigma must be in [0, 1], but was '${i}'`),{maxOutputSize:r,iouThreshold:n,scoreThreshold:a,softNmsSigma:i}}const dk=aP({nonMaxSuppression_:function(e,t,r,n=.5,a=-1/0){let i=aO(e,"boxes","nonMaxSuppression","float32"),s=aO(t,"scores","nonMaxSuppression","float32"),o=dw(i,s,r,n,a);r=o.maxOutputSize;let l={maxOutputSize:r,iouThreshold:n=o.iouThreshold,scoreThreshold:a=o.scoreThreshold};return aN.runKernel(ro,{boxes:i,scores:s},l)}});function dS(e,t){return e>t?1:e<t?-1:0}function dI(e,t,r,n,a){return dT(e,t,r,n,a,0)}function dC(e,t,r,n,a,i){return dT(e,t,r,n,a,0,!1,i,!0)}function dN(e,t,r,n,a,i){return dT(e,t,r,n,a,i,!0)}function dT(e,t,r,n,a,i,s=!1,o=!1,l=!1){let u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(d$);let h=i>0?-.5/i:0,p=[],d=[];for(;p.length<r&&u.length>0;){let t=u.pop(),{score:r,boxIndex:i,suppressBeginIndex:s}=t;if(r<a)break;let o=!1;for(let r=p.length-1;r>=s;--r){let s=function(e,t,r){let n=e.subarray(4*t,4*t+4),a=e.subarray(4*r,4*r+4),i=Math.min(n[0],n[2]),s=Math.min(n[1],n[3]),o=Math.max(n[0],n[2]),l=Math.max(n[1],n[3]),u=Math.min(a[0],a[2]),h=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),c=(o-i)*(l-s),f=(p-u)*(d-h);if(c<=0||f<=0)return 0;let m=Math.max(Math.min(o,p)-Math.max(i,u),0)*Math.max(Math.min(l,d)-Math.max(s,h),0);return m/(c+f-m)}(e,i,p[r]);if(s>=n){o=!0;break}if(t.score=t.score*function(e,t,r){let n=Math.exp(t*r*r);return r<=e?n:0}(n,h,s),t.score<=a)break}t.suppressBeginIndex=p.length,!o&&(t.score===r?(p.push(i),d.push(t.score)):t.score>a&&function(e,t,r){let n=function(e,t,r){let n=0,a=e.length,i=0,s=!1;for(;n<a;){let o=r(t,e[i=n+(a-n>>>1)]);o>0?n=i+1:(a=i,s=!o)}return s?n:-n-1}(e,t,r||dS);e.splice(n<0?-(n+1):n,0,t)}(u,t,d$))}let c=p.length,f=r-c;o&&f>0&&(p.push(...Array(f).fill(0)),d.push(...Array(f).fill(0)));let m={selectedIndices:p};return s&&(m.selectedScores=d),l&&(m.validOutputs=c),m}function d$(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}async function dE(e,t,r,n=.5,a=-1/0){let i=aO(e,"boxes","nonMaxSuppressionAsync"),s=aO(t,"scores","nonMaxSuppressionAsync"),o=dw(i,s,r,n,a);r=o.maxOutputSize,n=o.iouThreshold,a=o.scoreThreshold;let l=await Promise.all([i.data(),s.data()]),{selectedIndices:u}=dI(l[0],l[1],r,n,a);return i!==e&&i.dispose(),s!==t&&s.dispose(),pV(u,"int32")}const dR=aP({nonMaxSuppressionWithScore_:function(e,t,r,n=.5,a=-1/0,i=0){let s=aO(e,"boxes","nonMaxSuppression"),o=aO(t,"scores","nonMaxSuppression"),l=dw(s,o,r,n,a,i);r=l.maxOutputSize,n=l.iouThreshold,a=l.scoreThreshold;let u={maxOutputSize:r,iouThreshold:n,scoreThreshold:a,softNmsSigma:i=l.softNmsSigma},h=aN.runKernel(ru,{boxes:s,scores:o},u);return{selectedIndices:h[0],selectedScores:h[1]}}});async function dA(e,t,r,n=.5,a=-1/0,i=0){let s=aO(e,"boxes","nonMaxSuppressionAsync"),o=aO(t,"scores","nonMaxSuppressionAsync"),l=dw(s,o,r,n,a,i);r=l.maxOutputSize,n=l.iouThreshold,a=l.scoreThreshold,i=l.softNmsSigma;let u=await Promise.all([s.data(),o.data()]),{selectedIndices:h,selectedScores:p}=dN(u[0],u[1],r,n,a,i);return s!==e&&s.dispose(),o!==t&&o.dispose(),{selectedIndices:pV(h,"int32"),selectedScores:pV(p)}}const dF=aP({nonMaxSuppressionPadded_:function(e,t,r,n=.5,a=-1/0,i=!1){let s=aO(e,"boxes","nonMaxSuppression"),o=aO(t,"scores","nonMaxSuppression"),l=dw(s,o,r,n,a,null),u=l.maxOutputSize,h=l.iouThreshold,p=l.scoreThreshold,d=aN.runKernel(rl,{boxes:s,scores:o},{maxOutputSize:u,iouThreshold:h,scoreThreshold:p,padToMaxOutputSize:i});return{selectedIndices:d[0],validOutputs:d[1]}}});async function d_(e,t,r,n=.5,a=-1/0,i=!1){let s=aO(e,"boxes","nonMaxSuppressionAsync"),o=aO(t,"scores","nonMaxSuppressionAsync"),l=dw(s,o,r,n,a,null),u=l.maxOutputSize,h=l.iouThreshold,p=l.scoreThreshold,[d,c]=await Promise.all([s.data(),o.data()]),{selectedIndices:f,validOutputs:m}=dC(d,c,u,h,p,i);return s!==e&&s.dispose(),o!==t&&o.dispose(),{selectedIndices:pV(f,"int32"),validOutputs:sx(m,"int32")}}const dD=aP({resizeBilinear_:function(e,t,r=!1,n=!1){let a=aO(e,"images","resizeBilinear");H(3===a.rank||4===a.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`),H(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),H(!1===n||!1===r,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let i=a,s=!1;3===a.rank&&(s=!0,i=s9(a,[1,a.shape[0],a.shape[1],a.shape[2]]));let[]=t,o={images:i},l=aN.runKernel(rN,o,{alignCorners:r,halfPixelCenters:n,size:t});return s?s9(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),dO=aP({resizeNearestNeighbor_:function(e,t,r=!1,n=!1){let a=aO(e,"images","resizeNearestNeighbor");H(3===a.rank||4===a.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`),H(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),H("float32"===a.dtype||"int32"===a.dtype,()=>"`images` must have `int32` or `float32` as dtype"),H(!1===n||!1===r,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let i=a,s=!1;3===a.rank&&(s=!0,i=s9(a,[1,a.shape[0],a.shape[1],a.shape[2]]));let[]=t,o={images:i},l=aN.runKernel(rI,o,{alignCorners:r,halfPixelCenters:n,size:t});return s?s9(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),dM=aP({threshold_:function(e,t="binary",r=!1,n=.5){let a,i,s,o,l=aO(e,"image","threshold"),u=l.shape[0]*l.shape[1],h=sf(pV([n]),255);if(H(3===l.rank,()=>`Error in threshold: image must be rank 3,but got rank ${l.rank}.`),H(3===l.shape[2]||1===l.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${l.shape[2]}.`),H("int32"===l.dtype||"float32"===l.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${l.dtype}.`),H("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===l.shape[2]){[a,i,s]=pM(l,[1,1,1],-1);let e=sf(a,.2989),t=sf(i,.587),r=sf(s,.114);o=sp(sp(e,t),r)}else o=e;return"otsu"===t&&(h=function(e,t){let r,n,a,i,s,o,l=pV([-1]),u=pV([0]),h=pV([0]);for(let p=0;p<e.size-1;p++){r=u6(e,0,p+1),n=u6(e,p+1),s=sc(oS(r),t),o=sc(oS(n),t),a=sc(oS(sf(r,pd(0,r.size))),oS(r));let d=sE(n.shape,r.size),c=sp(pd(0,n.size),d),f=sF(a,i=sc(oS(sf(n,c)),oS(n))),m=sF(a,i),g=sf(s,o),y=uK(h=sf(sf(g,f),m),u);u=hh(y,h,u),l=hh(y,pV([p]),l)}return l}(u9(sl(pv(o),"int32"),aW([]),256),u)),sl(sf(r?hN(o,h):uK(o,h),255),"int32")}}),dz=aP({transform_:function(e,t,r="nearest",n="constant",a=0,i){let s=aO(e,"image","transform","float32"),o=aO(t,"transforms","transform","float32");return H(4===s.rank,()=>`Error in transform: image must be rank 4,but got rank ${s.rank}.`),H(2===o.rank&&(o.shape[0]===s.shape[0]||1===o.shape[0])&&8===o.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),H(null==i||2===i.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${i}.`),aN.runKernel(r8,{image:s,transforms:o},{interpolation:r,fillMode:n,fillValue:a,outputShape:i})}}),dP=aP({bandPart_:function(e,t,r){let n,a,i=aO(e,"a","bandPart");H(i.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${i.rank}.`);let s=i.shape,[o,l]=i.shape.slice(-2);"number"==typeof t?(H(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),H(t<=o,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`),n=aO(t<0?o:t,"numLower","bandPart")):(H("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),n=hh(hC(t,0),o,hY(t,o))),"number"==typeof r?(H(r%1==0,()=>`bandPart(): numUpper must be an integer, got ${r}.`),H(r<=l,()=>`bandPart(): numUpper (${r}) must not be greater than the number of columns (${l}).`),a=aO(r<0?l:r,"numUpper","bandPart")):(H("int32"===r.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),a=hh(hC(r,0),l,hY(r,l)));let u=sF(s9(pd(0,o,1,"int32"),[-1,1]),pd(0,l,1,"int32")),h=hM(hN(u,n),uq(u,hA(a))),p=hK([o,l],i.dtype);return s9(pB(pJ(s9(i,[-1,o,l])).map(e=>hh(h,e,p))),s)}}),dL=aP({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,H(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let r=e[0].shape[0];for(let t=1;t<e.length;++t)H(e[t].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${r})`)}else t=!0,e=pM(e,e.shape[0],0).map(e=>pL(e,[0]));H(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);let r=[],n=e;for(let t=0;t<e.length;++t)r.push(aN.tidy(()=>{let e=n[t];if(t>0)for(let n=0;n<t;++n){let t=sf(oS(sf(r[n],e)),r[n]);e=sF(e,t)}return sc(e,hb(e,"euclidean"))}));return t?pB(r,0):r}});function dB(e,t=!1){return aN.tidy(()=>{H(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);let r=e.shape[0],n=e.shape[1],a=uz(r),i=su(e),s=pG([[1]],[1,1]),o=su(s),l=r>=n?n:r;for(let e=0;e<l;++e){let t=i,l=o,u=a;[o,i,a]=aN.tidy(()=>{let t=u6(i,[e,e],[r-e,1]),l=hb(t),u=u6(i,[e,e],[1,1]),h=hh(uK(u,0),pG([[-1]]),pG([[1]])),p=sF(u,sf(h,l)),d=sc(t,p);o=1===d.shape[0]?su(s):un([s,u6(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);let c=hA(sc(uG(h,p),l)),f=u6(i,[e,0],[r-e,n]),m=sf(c,o),g=p8(o);if(0===e)i=sF(f,uG(m,uG(g,f)));else{let t=sF(f,uG(m,uG(g,f)));i=un([u6(i,[0,0],[e,n]),t],0)}let y=p8(m),b=u6(a,[0,e],[r,a.shape[1]-e]);if(0===e)a=sF(b,uG(uG(b,o),y));else{let t=sF(b,uG(uG(b,o),y));a=un([u6(a,[0,0],[r,e]),t],1)}return[o,i,a]}),aj([t,l,u])}return!t&&r>n&&(a=u6(a,[0,0],[r,n]),i=u6(i,[0,0],[n,n])),[a,i]})}const dW=aP({qr_:function(e,t=!1){if(H(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return dB(e,t);{let r=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),n=pJ(s9(e,[r,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],i=[];return n.forEach(e=>{let[r,n]=dB(e,t);a.push(r),i.push(n)}),[s9(pB(a,0),e.shape),s9(pB(i,0),e.shape)]}}});(w0=kp||(kp={}))[w0.NONE=0]="NONE",w0[w0.MEAN=1]="MEAN",w0[w0.SUM=2]="SUM",w0[w0.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const dU=aP({computeWeightedLoss_:function(e,t,r=kp.SUM_BY_NONZERO_WEIGHTS){let n=aO(e,"losses","computeWeightedLoss"),a=null;null!=t&&(a=aO(t,"weights","computeWeightedLoss"));let i=null==a?n:sf(n,a);if(r===kp.NONE)return i;if(r===kp.SUM)return oS(i);if(r===kp.MEAN)if(null==a)return hj(i);else{let e=n.size/a.size,t=sc(oS(i),oS(a));return e>1?sc(t,sx(e)):t}if(r===kp.SUM_BY_NONZERO_WEIGHTS)if(null==a)return sc(oS(i),sx(n.size));else{let e=sl(oS(h2(sf(a,hq(n.shape)),sx(0))),"float32");return sc(oS(i),e)}throw Error(`Unknown reduction: ${r}`)}}),dV=aP({absoluteDifference_:function(e,t,r,n=kp.SUM_BY_NONZERO_WEIGHTS){let a=aO(e,"labels","absoluteDifference"),i=aO(t,"predictions","absoluteDifference"),s=null;return null!=r&&(s=aO(r,"weights","absoluteDifference")),j(a.shape,i.shape,"Error in absoluteDifference: "),dU(sD(sF(a,i)),s,n)}}),dG=aP({cosineDistance_:function(e,t,r,n,a=kp.SUM_BY_NONZERO_WEIGHTS){let i=aO(e,"labels","cosineDistance"),s=aO(t,"predictions","cosineDistance"),o=null;return null!=n&&(o=aO(n,"weights","cosineDistance")),j(i.shape,s.shape,"Error in cosineDistance: "),dU(sF(sx(1),oS(sf(i,s),r,!0)),o,a)}}),dH=aP({hingeLoss_:function(e,t,r,n=kp.SUM_BY_NONZERO_WEIGHTS){let a=aO(e,"labels","hingeLoss"),i=aO(t,"predictions","hingeLoss"),s=null;null!=r&&(s=aO(r,"weights","hingeLoss")),j(a.shape,i.shape,"Error in hingeLoss: ");let o=sx(1);return a=sF(sf(sx(2),a),o),dU(ox(sF(o,sf(a,i))),s,n)}}),dj=aP({huberLoss_:function(e,t,r,n=1,a=kp.SUM_BY_NONZERO_WEIGHTS){let i=aO(e,"labels","huberLoss"),s=aO(t,"predictions","huberLoss"),o=null;null!=r&&(o=aO(r,"weights","huberLoss")),j(i.shape,s.shape,"Error in huberLoss: ");let l=sx(n),u=sD(sF(s,i)),h=hY(u,l),p=sF(u,h);return dU(sp(sf(sx(.5),sg(h)),sf(l,p)),o,a)}}),dK=aP({logLoss_:function(e,t,r,n=1e-7,a=kp.SUM_BY_NONZERO_WEIGHTS){let i=aO(e,"labels","logLoss"),s=aO(t,"predictions","logLoss"),o=null;null!=r&&(o=aO(r,"weights","logLoss")),j(i.shape,s.shape,"Error in logLoss: ");let l=sx(1),u=sx(n),h=hA(sf(i,hE(sp(s,u)))),p=sf(sF(l,i),hE(sp(sF(l,s),u)));return dU(sF(h,p),o,a)}}),dq=aP({meanSquaredError_:function(e,t,r,n=kp.SUM_BY_NONZERO_WEIGHTS){let a=aO(e,"labels","meanSquaredError"),i=aO(t,"predictions","meanSquaredError"),s=null;return null!=r&&(s=aO(r,"weights","meanSquaredError")),j(a.shape,i.shape,"Error in meanSquaredError: "),dU(pP(a,i),s,n)}}),dX=aP({sigmoidCrossEntropy_:function(e,t,r,n=0,a=kp.SUM_BY_NONZERO_WEIGHTS){let i=aO(e,"multiClassLabels","sigmoidCrossEntropy"),s=aO(t,"logits","sigmoidCrossEntropy"),o=null;if(null!=r&&(o=aO(r,"weights","sigmoidCrossEntropy")),j(i.shape,s.shape,"Error in sigmoidCrossEntropy: "),n>0){let e=sx(n),t=sx(1),r=sx(.5);i=sp(sf(i,sF(t,e)),sf(r,e))}return dU(function(e,t){let r=aO(e,"labels","sigmoidCrossEntropyWithLogits"),n=aO(t,"logits","sigmoidCrossEntropyWithLogits");j(r.shape,n.shape,"Error in sigmoidCrossEntropyWithLogits: ");let a=ox(n),i=sf(n,r),s=hR(uD(hA(sD(n))));return sp(sF(a,i),s)}(i,s),o,a)}}),dY=aP({softmaxCrossEntropy_:function(e,t,r,n=0,a=kp.SUM_BY_NONZERO_WEIGHTS){let i=aO(e,"onehotLabels","softmaxCrossEntropy"),s=aO(t,"logits","softmaxCrossEntropy"),o=null;if(null!=r&&(o=aO(r,"weights","softmaxCrossEntropy")),j(i.shape,s.shape,"Error in softmaxCrossEntropy: "),n>0){let e=sx(n),t=sx(1),r=sx(i.shape[1]);i=sp(sf(i,sF(t,e)),sc(e,r))}return dU(function(e,t,r=-1){if(-1===r&&(r=t.rank-1),r!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${r}`);return sb((e,t,n)=>{let a=hO(t,[r],!0),i=sF(sl(t,"float32"),a);return n([e,i]),{value:oS(hA(sf(i,e)),[r]),gradFunc:(e,t)=>{let[n,a]=t,i=oo(e.shape,[r]);return[sf(s9(e,i),sF(sl(n,"float32"),uD(a))),sf(s9(e,i),sF(uD(a),sl(n,"float32")))]}}})(e,t)}(i,s),o,a)}}),dZ=aP({sparseFillEmptyRows_:function(e,t,r,n){let a=aO(e,"indices","sparseFillEmptyRows","int32"),i=aO(t,"values","sparseFillEmptyRows"),s=aO(r,"denseShape","sparseFillEmptyRows","int32"),o=aO(n,"defaultValue","sparseFillEmptyRows",i.dtype);if(2!==a.rank)throw Error(`Indices should be Tensor2D but received shape
        ${a.shape}`);if(1!==i.rank)throw Error(`Values should be Tensor1D but received shape ${i.shape}`);if(1!==s.rank)throw Error(`Dense shape should be Tensor1D but received shape ${s.shape}`);if(0!==o.rank)throw Error(`Default value should be a scalar but received shape ${o.shape}`);let l=aN.runKernel(rj,{indices:a,values:i,denseShape:s,defaultValue:o});return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),dQ=aP({sparseReshape_:function(e,t,r){let n=aO(e,"inputIndices","sparseReshape","int32"),a=aO(t,"inputShape","sparseReshape","int32"),i=aO(r,"newShape","sparseReshape","int32");if(2!==n.rank)throw Error(`Input indices should be Tensor2D but received shape
        ${n.shape}`);if(1!==a.rank)throw Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw Error(`New shape should be Tensor1D but received shape ${i.shape}`);let s=aN.runKernel(rK,{inputIndices:n,inputShape:a,newShape:i});return{outputIndices:s[0],outputShape:s[1]}}}),dJ=aP({sparseSegmentMean_:function(e,t,r){let n=aO(e,"data","sparseSegmentMean"),a=aO(t,"indices","sparseSegmentMean","int32"),i=aO(r,"segmentIds","sparseSegmentMean","int32");if(n.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw Error(`Indices should be Tensor1D but received shape
          ${a.shape}`);if(1!==i.rank)throw Error(`Segment ids should be Tensor1D but received shape
          ${i.shape}`);return aN.runKernel(rq,{data:n,indices:a,segmentIds:i})}}),d0=aP({sparseSegmentSum_:function(e,t,r){let n=aO(e,"data","sparseSegmentSum"),a=aO(t,"indices","sparseSegmentSum","int32"),i=aO(r,"segmentIds","sparseSegmentSum","int32");if(n.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw Error(`Indices should be Tensor1D but received shape
         ${a.shape}`);if(1!==i.rank)throw Error(`Segment ids should be Tensor1D but received shape
         ${i.shape}`);return aN.runKernel(rX,{data:n,indices:a,segmentIds:i})}}),d1=aP({stringNGrams_:function(e,t,r,n,a,i,s,o){let l=aO(e,"data","stringNGrams","string");if("string"!==l.dtype)throw Error("Data must be of datatype string");if(1!==l.shape.length)throw Error(`Data must be a vector, saw: ${l.shape}`);let u=aO(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw Error("Data splits must be of datatype int32");let h=aN.runKernel(r1,{data:l,dataSplits:u},{separator:r,nGramWidths:n,leftPad:a,rightPad:i,padWidth:s,preserveShortSequences:o});return{nGrams:h[0],nGramsSplits:h[1]}}}),d2=aP({stringSplit_:function(e,t,r=!0){let n=aO(e,"input","stringSplit","string"),a=aO(t,"delimiter","stringSplit","string");if(1!==n.rank)throw Error(`Input should be Tensor1D but received shape ${n.shape}`);if(0!==a.rank)throw Error(`Delimiter should be a scalar but received shape ${a.shape}`);let i=aN.runKernel(r2,{input:n,delimiter:a},{skipEmpty:r});return{indices:i[0],values:i[1],shape:i[2]}}}),d3=aP({stringToHashBucketFast_:function(e,t){let r=aO(e,"input","stringToHashBucketFast","string");if(t<=0)throw Error("Number of buckets must be at least 1");return aN.runKernel(r3,{input:r},{numBuckets:t})}}),d4=aP({staticRegexReplace_:function(e,t,r,n=!0){let a=aO(e,"input","staticRegexReplace","string");return aN.runKernel(rJ,{x:a},{pattern:t,rewrite:r,replaceGlobal:n})}}),d6={fft:p_,ifft:pD,rfft:pz,irfft:pO},d5={hammingWindow:dd,hannWindow:dc,frame:df,stft:dm},d8={flipLeftRight:dy,grayscaleToRGB:db,resizeNearestNeighbor:dO,resizeBilinear:dD,rgbToGrayscale:dx,rotateWithOffset:dv,cropAndResize:dg,nonMaxSuppression:dk,nonMaxSuppressionAsync:dE,nonMaxSuppressionWithScore:dR,nonMaxSuppressionWithScoreAsync:dA,nonMaxSuppressionPadded:dF,nonMaxSuppressionPaddedAsync:d_,threshold:dM,transform:dz},d7={bandPart:dP,gramSchmidt:dL,qr:dW},d9={absoluteDifference:dV,computeWeightedLoss:dU,cosineDistance:dG,hingeLoss:dH,huberLoss:dj,logLoss:dK,meanSquaredError:dq,sigmoidCrossEntropy:dX,softmaxCrossEntropy:dY},ce={sparseFillEmptyRows:dZ,sparseReshape:dQ,sparseSegmentMean:dJ,sparseSegmentSum:d0},ct={stringNGrams:d1,stringSplit:d2,stringToHashBucketFast:d3,staticRegexReplace:d4};T(uX,p4),T(uX,p5),T(uX,hm),T(uX,p7),T(uX,de),T(uX,hB),T(uX,dr),T(uX,da),T(uX,uy),T(uX,ds),T(uX,dh);var cr={};function cn(e){return new Promise(e=>setTimeout(e)).then(e)}N(cr,"copyModel",()=>si),N(cr,"listModels",()=>sn),N(cr,"moveModel",()=>ss),N(cr,"removeModel",()=>sa),N(cr,"browserFiles",()=>cs),N(cr,"browserHTTPRequest",()=>cm),N(cr,"CompositeArrayBuffer",()=>aV),N(cr,"concatenateArrayBuffers",()=>iL),N(cr,"decodeWeights",()=>iF),N(cr,"decodeWeightsStream",()=>iM),N(cr,"encodeWeights",()=>iA),N(cr,"fromMemory",()=>cx),N(cr,"fromMemorySync",()=>cv),N(cr,"getLoadHandlers",()=>iY),N(cr,"getModelArtifactsForJSON",()=>iV),N(cr,"getModelArtifactsForJSONSync",()=>iU),N(cr,"getModelArtifactsInfoForJSON",()=>iG),N(cr,"getSaveHandlers",()=>iX),N(cr,"getWeightSpecs",()=>iH),N(cr,"http",()=>cf),N(cr,"isHTTPScheme",()=>cd),N(cr,"loadWeights",()=>cu),N(cr,"registerLoadRouter",()=>iq),N(cr,"registerSaveRouter",()=>iK),N(cr,"weightsLoaderFactory",()=>ch),N(cr,"withSaveHandler",()=>cw),N(cr,"withSaveHandlerSync",()=>ck);class ca{constructor(e){if(!e_.getBool("IS_BROWSER"))throw Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(ca.URL_SCHEME)&&(e=e.slice(ca.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw Error("Browser downloads are not supported in this environment since `document` is not present");let t=aV.join(e.weightData),r=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let t=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],n=iW(e,t),a=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),i=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=a,await cn(()=>i.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){let e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=r,await cn(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:iG(e)}}}}ca.URL_SCHEME="downloads://";class ci{constructor(e){if(null==e||e.length<1)throw Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{let r=new FileReader;r.onload=r=>{let n=JSON.parse(r.target.result),a=n.modelTopology;return null==a?void t(Error(`modelTopology field is missing from file ${this.jsonFile.name}`)):null==n.weightsManifest?void t(Error(`weightManifest field is missing from file ${this.jsonFile.name}`)):0===this.weightsFiles.length?void e({modelTopology:a}):void e(iV(n,e=>this.loadWeights(e)))},r.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(this.jsonFile)})}loadWeights(e){let t=[],r=[];for(let n of e)t.push(...n.weights),r.push(...n.paths);let n=this.checkManifestAndWeightFiles(e);return Promise.all(r.map(e=>this.loadWeightsFile(e,n[e]))).then(e=>[t,e])}loadWeightsFile(e,t){return new Promise((r,n)=>{let a=new FileReader;a.onload=e=>{r(e.target.result)},a.onerror=t=>n(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){let t=[],r=this.weightsFiles.map(e=>iB(e.name)),n={};for(let a of e)a.paths.forEach(e=>{let a=iB(e);if(-1!==t.indexOf(a))throw Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===r.indexOf(a))throw Error(`Weight file with basename '${a}' is not provided.`);n[e]=this.weightsFiles[r.indexOf(a)]});if(t.length!==this.weightsFiles.length)throw Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}}function cs(e){return new ci(e)}function co(e,t,r,n){var a,i,s;H(null!=(a=e)&&Array.isArray(a)&&a.length>0,()=>"promises must be a none empty array"),i=r=null==r?0:r,s=n=null==n?1:n,H(i>=0&&i<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${i}`),H(s>=0&&s<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${s}`),H(s>=i,()=>`startFraction must be no more than endFraction, but got startFraction ${i} and endFraction ${s}`);let o=0;return Promise.all(e.map(a=>(a.then(a=>(t(r+ ++o/e.length*(n-r)),a)),a)))}async function cl(e,t){null==t&&(t={});let r=null==t.fetchFunc?e_.platform.fetch:t.fetchFunc,n=e.map(e=>r(e,t.requestInit,{isBinary:!0})),a=(null==t.onProgress?await Promise.all(n):await co(n,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(a):await co(a,t.onProgress,.5,1)}async function cu(e,t="",r,n){return ch(e=>cl(e,{requestInit:n}))(e,t,r)}function ch(e){return async(t,r="",n)=>{let a=t.map(()=>!1),i={},s=null!=n?n.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let r=0;e.weights.forEach(e=>{let l=aU["quantization"in e?e.quantization.dtype:e.dtype]*q(e.shape),u=()=>{a[t]=!0,null==i[t]&&(i[t]=[]),i[t].push({manifestEntry:e,groupOffset:r,sizeBytes:l})};null!=n?n.forEach((t,r)=>{t===e.name&&(u(),s[r]=!0)}):u(),o.push(e.name),r+=l})}),!s.every(e=>e)){let e=n.filter((e,t)=>!s[t]);throw Error(`Could not find weights in manifest with names: ${e.join(", ")}. 
Manifest JSON has weights with names: ${o.join(", ")}.`)}let l=a.reduce((e,t,r)=>(t&&e.push(r),e),[]),u=[];l.forEach(e=>{t[e].paths.forEach(e=>{let t=r+(r.endsWith("/")?"":"/")+e;u.push(t)})});let h=await e(u),p={},d=0;return l.forEach(e=>{let r=t[e].paths.length,n=new aV(h.slice(d,d+r));i[e].forEach(e=>{let t=iF(n.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(let e in t)p[e]=t[e]}),d+=r}),p}}ij.registerSaveRouter(e=>e_.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ca.URL_SCHEME)?function(e="model"){return new ca(e)}(e.slice(ca.URL_SCHEME.length)):null);class cp{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(H("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=e_.platform.fetch,H(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&H(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{},this.loadOptions=t}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;let r=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],n=iW(e,r);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){let r=aV.join(e.weightData);t.body.append("model.weights.bin",new Blob([r],{type:"application/octet-stream"}),"model.weights.bin")}let a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:iG(e),responses:[a]};throw Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async loadModelJSON(){let e,t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",Error(e)}let r=e.modelTopology,n=e.weightsManifest;if(null==r&&null==n)throw Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return e}async load(){return this.loadOptions.streamWeights?this.loadStream():iV(await this.loadModelJSON(),e=>this.loadWeights(e))}async loadStream(){let e=await this.loadModelJSON(),t=await this.getWeightUrls(e.weightsManifest),r=iH(e.weightsManifest),n=()=>(function(e,t){var r;let n,a=null==t.fetchFunc?e_.platform.fetch:t.fetchFunc,i=0;return null==(r=t.onProgress)||r.call(t,0),new ReadableStream({pull:async r=>{for(var s;i<e.length;){n||(n=(await a(e[i],t.requestInit,{isBinary:!0})).body.getReader());let{done:o,value:l}=await n.read();if(o){i++,n=void 0,null==(s=t.onProgress)||s.call(t,i/e.length);continue}r.enqueue(l);return}r.close()}})})(t,this.loadOptions);return Object.assign(Object.assign({},e),{weightSpecs:r,getWeightStream:n})}async getWeightUrls(e){let[t,r]=function(e){let t=e.lastIndexOf("/"),r=e.lastIndexOf("?");return[e.substring(0,t)+"/",r>t?e.substring(r):""]}(Array.isArray(this.path)?this.path[1]:this.path),n=this.weightPathPrefix||t,a=[],i=[];for(let t of e)for(let e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):a.push(n+e+r);return this.weightUrlConverter&&a.push(...await Promise.all(i)),a}async loadWeights(e){let t=await this.getWeightUrls(e);return[iH(e),await cl(t,this.loadOptions)]}}function cd(e){return null!=e.match(cp.URL_SCHEME_REGEX)}cp.URL_SCHEME_REGEX=/^https?:\/\//;const cc=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc));else if(Array.isArray(e)?e.every(e=>cd(e)):cd(e))return cf(e,t);return null};function cf(e,t){return new cp(e,t)}function cm(e,t){return cf(e,t)}ij.registerSaveRouter(cc),ij.registerLoadRouter(cc);class cg{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class cy{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class cb{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function cx(e,t,r,n){let a=arguments;return new cb(cv(...a))}function cv(e,t,r,n){return 1!=arguments.length?(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new cg({modelTopology:e,weightSpecs:t,weightData:r,trainingConfig:n})):null!=e.modelTopology||null!=e.weightSpecs?new cg(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new cg({modelTopology:e}))}function cw(e){return new cy(e)}function ck(e){return new cy(e)}var cS={};N(cS,"nonMaxSuppressionV3Impl",()=>dI),N(cS,"nonMaxSuppressionV4Impl",()=>dC),N(cS,"nonMaxSuppressionV5Impl",()=>dN),N(cS,"whereImpl",()=>p2);const cI="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function cC(){return new Promise(e=>cI(()=>e()))}const cN=class{static sgd(e){return new sW(e)}static momentum(e,t,r=!1){return new sU(e,t,r)}static rmsprop(e,t=.9,r=0,n=null,a=!1){return new sV(e,t,r,n,a)}static adam(e=.001,t=.9,r=.999,n=null){return new s_(e,t,r,n)}static adadelta(e=.001,t=.95,r=null){return new s$(e,t,r)}static adamax(e=.002,t=.9,r=.999,n=null,a=0){return new sB(e,t,r,n,a)}static adagrad(e,t=.1){return new sR(e,t)}};for(const e of[s$,sR,s_,sB,sU,sV,sW])sC(e);e_.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),(w1=kd||(kd={}))[w1.DT_INVALID=0]="DT_INVALID",w1[w1.DT_FLOAT=1]="DT_FLOAT",w1[w1.DT_DOUBLE=2]="DT_DOUBLE",w1[w1.DT_INT32=3]="DT_INT32",w1[w1.DT_UINT8=4]="DT_UINT8",w1[w1.DT_INT16=5]="DT_INT16",w1[w1.DT_INT8=6]="DT_INT8",w1[w1.DT_STRING=7]="DT_STRING",w1[w1.DT_COMPLEX64=8]="DT_COMPLEX64",w1[w1.DT_INT64=9]="DT_INT64",w1[w1.DT_BOOL=10]="DT_BOOL",w1[w1.DT_QINT8=11]="DT_QINT8",w1[w1.DT_QUINT8=12]="DT_QUINT8",w1[w1.DT_QINT32=13]="DT_QINT32",w1[w1.DT_BFLOAT16=14]="DT_BFLOAT16",w1[w1.DT_QINT16=15]="DT_QINT16",w1[w1.DT_QUINT16=16]="DT_QUINT16",w1[w1.DT_UINT16=17]="DT_UINT16",w1[w1.DT_COMPLEX128=18]="DT_COMPLEX128",w1[w1.DT_HALF=19]="DT_HALF",w1[w1.DT_RESOURCE=20]="DT_RESOURCE",w1[w1.DT_VARIANT=21]="DT_VARIANT",w1[w1.DT_UINT32=22]="DT_UINT32",w1[w1.DT_UINT64=23]="DT_UINT64",w1[w1.DT_FLOAT_REF=101]="DT_FLOAT_REF",w1[w1.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",w1[w1.DT_INT32_REF=103]="DT_INT32_REF",w1[w1.DT_UINT8_REF=104]="DT_UINT8_REF",w1[w1.DT_INT16_REF=105]="DT_INT16_REF",w1[w1.DT_INT8_REF=106]="DT_INT8_REF",w1[w1.DT_STRING_REF=107]="DT_STRING_REF",w1[w1.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",w1[w1.DT_INT64_REF=109]="DT_INT64_REF",w1[w1.DT_BOOL_REF=110]="DT_BOOL_REF",w1[w1.DT_QINT8_REF=111]="DT_QINT8_REF",w1[w1.DT_QUINT8_REF=112]="DT_QUINT8_REF",w1[w1.DT_QINT32_REF=113]="DT_QINT32_REF",w1[w1.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",w1[w1.DT_QINT16_REF=115]="DT_QINT16_REF",w1[w1.DT_QUINT16_REF=116]="DT_QUINT16_REF",w1[w1.DT_UINT16_REF=117]="DT_UINT16_REF",w1[w1.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",w1[w1.DT_HALF_REF=119]="DT_HALF_REF",w1[w1.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",w1[w1.DT_VARIANT_REF=121]="DT_VARIANT_REF",w1[w1.DT_UINT32_REF=122]="DT_UINT32_REF",w1[w1.DT_UINT64_REF=123]="DT_UINT64_REF",(w3=(w2=kc||(kc={})).CheckpointFormatVersion||(w2.CheckpointFormatVersion={}))[w3.LEGACY=0]="LEGACY",w3[w3.V1=1]="V1",w3[w3.V2=2]="V2";const cT={};function c$(e,t,r,n,a){let i=t.inputParams[e];if(i&&void 0!==i.inputIndexStart){let e=i.inputIndexStart,s=0===i.inputIndexEnd?void 0:void 0===i.inputIndexEnd?e+1:i.inputIndexEnd,o=e<0?t.inputNames.length+e:e;if("tensor"===i.type)return cE(t.inputNames[o],r,n,a);if("tensors"===i.type){let i=t.inputs.slice(e,s);return t.inputNames.slice(e,s).filter((e,t)=>{var r;return(null==(r=i[t])?void 0:r.op)!=="NoOp"}).map(e=>cE(e,r,n,a))}let l=cE(t.inputNames[o],r,n,a),u=l.dataSync();return"number"===i.type?u[0]:ny.toNestedArray(l.shape,u)}let s=t.attrParams[e];return s&&s.value}function cE(e,t,r,n){let[a,i]=c_(e,r);if(null!=n){let e=n.getHashTableHandleByName(a);if(null!=e)return e}let s=r.currentContextIds.find(e=>!!t[cF(a,e)]);return void 0!==s?t[cF(a,s)][i]:void 0}function cR(e,t,r){return t[cF(e,r.currentContextId)]}function cA(e,t){let[r,n,a]=c_(e,t);return[cF(r,t&&t.currentContextId),n,a]}function cF(e,t){return t?`${e}-${t}`:e}function c_(e,t){let r;if(""===e)return["",0,void 0];let n=null!=t&&null!=t.parseNodeNameCache;if(n){let r=t.parseNodeNameCache.get(e);if(null!=r)return r}let a=e.split(":");if(1===a.length)r=[e,0,void 0];else{let e=a[0],t=3===a.length?a[1]:void 0;r=[e,Number(a[a.length-1]),t]}return n&&t.parseNodeNameCache.set(e,r),r}function cD(e,t,r){let n=c$("pad",e,t,r);if("explicit"===n){n=c$("explicitPaddings",e,t,r);let a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=n[2*e],a[e][1]=n[2*e+1];return a}return n}function cO(e){return e.kept?e:su(e)}var cM={};N(cM,"json",()=>cz);const cz=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var cP={};N(cP,"json",()=>cL);const cL=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var cB={};N(cB,"json",()=>cW);const cW=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var cU={};N(cU,"json",()=>cV);const cV=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var cG={};N(cG,"json",()=>cH);const cH=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var cj={};N(cj,"json",()=>cK);const cK=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var cq={};N(cq,"json",()=>cX);const cX=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var cY={};N(cY,"json",()=>cZ);const cZ=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var cQ={};N(cQ,"json",()=>cJ);const cJ=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var c0={};N(c0,"json",()=>c1);const c1=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var c2={};N(c2,"json",()=>c3);const c3=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}];var c4={};N(c4,"json",()=>c6);const c6=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}];var c5={};N(c5,"json",()=>c8);const c8=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}];var c7={};N(c7,"json",()=>c9);const c9=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var fe={};N(fe,"json",()=>ft);const ft=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var fr={};N(fr,"json",()=>fn);const fn=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var fa={};N(fa,"json",()=>fi);const fi=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var fs={};N(fs,"json",()=>fo);const fo=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var fl={};N(fl,"json",()=>fu);const fu=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class fh{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let e=[].concat(...[cM,cP,cB,cU,cG,cj,cq,cY,cQ,c0,c2,c4,c5,c7,fe,fr,fa,fs,fl].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){let r=e.node,n=[],a=[],i=[],s=r.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?n.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):(null==t.input||0===t.input.length)&&i.push(e[t.name]),e),{}),o=[],l=[],u={},h={};null!=t&&(u=this.mapSignatureEntries(t.inputs),h=this.mapSignatureEntries(t.outputs));let p=Object.keys(s);p.forEach(e=>{let t=s[e];t.inputNames.forEach((e,r)=>{let[n,,a]=cA(e),i=s[n];if(null!=i.outputs){let e=i.outputs.indexOf(a);if(-1!==e){let a=`${n}:${e}`;t.inputNames[r]=a}}t.inputs.push(i),i.children.push(t)})}),0===Object.keys(h).length?p.forEach(e=>{let t=s[e];0===t.children.length&&l.push(t)}):Object.keys(h).forEach(e=>{let[t]=cA(e),r=s[t];null!=r&&(r.signatureKey=h[e],l.push(r))}),Object.keys(u).length>0?Object.keys(u).forEach(e=>{let[t]=cA(e),r=s[t];r&&(r.signatureKey=u[e],o.push(r))}):o=n;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));let c={nodes:s,inputs:o,outputs:l,weights:a,placeholders:n,signature:t,functions:d};return i.length>0&&(c.initNodes=i),c}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,r)=>(t[e[r].name]=r,t),{})}mapNode(e){let t=cT[e.op]||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});let r={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(r.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(r.attrParams=t.attrs.reduce((t,r)=>{let n,a=r.type;switch(r.type){case"string":void 0===(n=fd(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fd(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"string[]":void 0===(n=fk(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fk(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"number":void 0===(n=ff(e.attr,r.tfName,r.defaultValue||0))&&r.tfDeprecatedName&&(n=ff(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"number[]":void 0===(n=fw(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fw(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"bool":void 0===(n=fc(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fc(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"bool[]":void 0===(n=fI(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fI(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"shape":void 0===(n=fv(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fv(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"shape[]":void 0===(n=fS(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fS(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"dtype":void 0===(n=fy(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fy(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"dtype[]":void 0===(n=fb(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fb(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"func":void 0===(n=fg(e.attr,r.tfName,r.defaultValue))&&r.tfDeprecatedName&&(n=fg(e.attr,r.tfDeprecatedName,r.defaultValue));break;case"tensor":case"tensors":break;default:throw Error(`Unsupported param type: ${r.type} for op: ${e.op}`)}return t[r.name]={value:n,type:a},t},{})),r}mapFunction(e){let t=e.nodeDef,r=[],n={};null!=t&&(n=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&r.push(e[t.name]),e),{}));let a=[],i=[];e.signature.inputArg.forEach(e=>{let[t]=cA(e.name),r={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:fm(e.type),type:"dtype"}},children:[]};r.signatureKey=e.name,a.push(r),n[t]=r}),Object.keys(n).forEach(e=>{let t=n[e];t.inputNames.forEach((e,r)=>{let[a,,i]=cA(e),s=n[a];if(null!=s.outputs){let e=s.outputs.indexOf(i);if(-1!==e){let n=`${a}:${e}`;t.inputNames[r]=n}}t.inputs.push(s),s.children.push(t)})});let s=e.ret;e.signature.outputArg.forEach(e=>{let[t,r]=cA(s[e.name]),a=n[t];null!=a&&(a.defaultOutput=r,i.push(a))});let o=this.mapArgsToSignature(e);return{nodes:n,inputs:a,outputs:i,weights:r,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,r)=>(t[r.name]=this.mapArgToTensorInfo(r,e.ret),t),{})}}mapArgToTensorInfo(e,t){let r=e.name;return null!=t&&(r=t[r]),{name:r,dtype:e.type}}}function fp(e,t){let r=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){let t=e_.global;return void 0!==t.atob?t.atob(e):new a6(e,"base64").toString()}(e);return t?r:r.toLowerCase()}function fd(e,t,r,n=!1){let a=e[t];return null!=a?fp(a.s,n):r}function fc(e,t,r){let n=e[t];return n?n.b:r}function ff(e,t,r){let n=e[t]||{},a=null!=n.i?n.i:null!=n.f?n.f:r;return"number"==typeof a?a:parseInt(a,10)}function fm(e){switch("string"==typeof e&&(e=kd[e]),e){case kd.DT_FLOAT:case kd.DT_HALF:return"float32";case kd.DT_INT32:case kd.DT_INT64:case kd.DT_INT8:case kd.DT_UINT8:return"int32";case kd.DT_BOOL:return"bool";case kd.DT_DOUBLE:return"float32";case kd.DT_STRING:return"string";case kd.DT_COMPLEX64:case kd.DT_COMPLEX128:return"complex64";default:return null}}function fg(e,t,r){let n=e[t];return n&&n.func?n.func.name:r}function fy(e,t,r){let n=e[t];return n&&n.type?fm(n.type):r}function fb(e,t,r){let n=e[t];return n&&n.list&&n.list.type?n.list.type.map(e=>fm(e)):r}function fx(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function fv(e,t,r){let n=e[t];return n&&n.shape?fx(n.shape):r}function fw(e,t,r){let n=e[t];return n?((n.list.f&&n.list.f.length?n.list.f:n.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):r}function fk(e,t,r,n=!1){let a=e[t];return a&&a.list&&a.list.s?a.list.s.map(e=>fp(e,n)):r}function fS(e,t,r){let n=e[t];return n&&n.list&&n.list.shape?n.list.shape.map(e=>fx(e)):r}function fI(e,t,r){let n=e[t];return n&&n.list&&n.list.b?n.list.b:r}class fC{constructor(e,t,r){this.node=e,this.tensorMap=t,this.context=r,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return cE(e,this.tensorMap,this.context)}getAttr(e,t){let r=this.node.rawAttrs[e];if(null!=r.tensor)return cE(e,this.tensorMap,this.context);if(null!=r.i||null!=r.f)return ff(this.node.rawAttrs,e,t);if(null!=r.s)return fd(this.node.rawAttrs,e,t);if(null!=r.b)return fc(this.node.rawAttrs,e,t);if(null!=r.shape)return fv(this.node.rawAttrs,e,t);if(null!=r.type)return fy(this.node.rawAttrs,e,t);if(null!=r.list){if(null!=r.list.i||null!=r.list.f)return fw(this.node.rawAttrs,e,t);if(null!=r.list.s)return fk(this.node.rawAttrs,e,t);if(null!=r.list.shape)return fS(this.node.rawAttrs,e,t);if(null!=r.list.b)return fI(this.node.rawAttrs,e,t);if(null!=r.list.type)return fb(this.node.rawAttrs,e,t)}return t}}var fN={};function fT(e,t,r=""){if("number"!=typeof e&&"number"!=typeof t){ny.assert(e.length===t.length,()=>r+` Shapes ${e} and ${t} must match`);for(let n=0;n<e.length;n++){let a=e[n],i=t[n];ny.assert(a<0||i<0||a===i,()=>r+` Shapes ${e} and ${t} must match`)}}}function f$(e){return!("number"==typeof e||e.some(e=>e<0))}function fE(e,t,r){let n=fR(e,r),a=!f$(n);if(a&&0===t.length)throw Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${n}`);if(a&&t.forEach(e=>{n=fR(e.shape,n)}),!f$(n))throw Error(`Non-fully-defined elementShape: ${n}`);return n}function fR(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw Error(`Incompatible ranks during merge: ${e} vs. ${t}`);let r=[];for(let n=0;n<e.length;++n){let a=e[n],i=t[n];if(a>=0&&i>=0&&a!==i)throw Error(`Incompatible shape during merge: ${e} vs. ${t}`);r[n]=a>=0?a:i}return r}T(fN,uX);class fA{constructor(e,t,r,n,a,i,s){this.name=e,this.dtype=t,this.maxSize=r,this.elementShape=n,this.identicalElementShapes=a,this.dynamicSize=i,this.clearAfterRead=s,this.tensors=[],this.closed_=!1,this.idTensor=sx(0),aK(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);let t=this.tensors[e];if(t.cleared)throw Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);let r=this.tensors[e]||{};if(t.dtype!==this.dtype)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=t.shape),fT(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),r.read)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(r.written)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);r.tensor=t,aK(t),r.written=!0,this.tensors[e]=r}writeMany(e,t){if(e.length!==t.length)throw Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,r)=>this.write(e,t[r]))}gather(e,t){if(t&&t!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return aW([],[0].concat(this.elementShape));let r=this.readMany(e);return fT(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),pB(r,0)}concat(e){if(e&&e!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return aW([],[0].concat(this.elementShape));let t=[];for(let e=0;e<this.size();e++)t.push(e);let r=this.readMany(t);return fT(this.elementShape,r[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${r[0].shape})`),un(r,0)}scatter(e,t){if(t.dtype!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);let r=Math.max(...e);if(!this.dynamicSize&&r>=this.maxSize)throw Error(`Max index must be < array size (${r}  vs. ${this.maxSize})`);this.writeMany(e,pJ(t,0))}split(e,t){if(t.dtype!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let r=0,n=e.map(e=>r+=e);if(r!==t.shape[0])throw Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${r}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);let a=0===r?0:t.size/r,i=[];aH(()=>{t=s9(t,[1,r,a]);for(let r=0;r<e.length;++r){let s=[0,0===r?0:n[r-1],0],o=[1,e[r],a];i[r]=s9(u6(t,s,o),this.elementShape)}return i});let s=[];for(let t=0;t<e.length;t++)s[t]=t;this.writeMany(s,i)}}class fF{get id(){return this.idTensor.id}constructor(e,t,r,n=-1){this.tensors=e,this.elementShape=t,this.elementDtype=r,null!=e&&e.forEach(e=>{if(r!==e.dtype)throw Error(`Invalid data types; op elements ${r}, but list elements ${e.dtype}`);fT(t,e.shape,"TensorList shape mismatch: "),aK(e)}),this.idTensor=sx(0),this.maxNumElements=n,aK(this.idTensor)}copy(){return new fF([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,r=-1){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==r&&this.tensors.length!==r)throw Error(`Operation expected a list with ${r} elements but got a list with ${this.tensors.length} elements.`);fT(e,this.elementShape,"TensorList shape mismatch: ");let n=fE(this.elementShape,this.tensors,e);return aH(()=>pB(this.tensors.map(e=>s9(e,n)),0))}popBack(e,t){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw Error("Trying to pop from an empty list.");let r=fE(this.elementShape,this.tensors,e),n=this.tensors.pop();return n.kept=!1,fT(n.shape,e,"TensorList shape mismatch: "),s9(n,r)}pushBack(e){if(e.dtype!==this.elementDtype)throw Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(fT(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw Error("Trying to push element into a full list.");aK(e),this.tensors.push(e)}resize(e){if(e<0)throw Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);let t=new fF([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let r=0;r<Math.min(this.tensors.length,e);++r)t.tensors[r]=this.tensors[r];return t}getItem(e,t,r){if(r!==this.elementDtype)throw Error(`Invalid data types; op elements ${r}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw Error(`element at index ${e} is null.`);fT(this.tensors[e].shape,t,"TensorList shape mismatch: ");let n=fE(this.elementShape,this.tensors,t);return s9(this.tensors[e],n)}setItem(e,t){if(t.dtype!==this.elementDtype)throw Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);fT(this.elementShape,t.shape,"TensorList shape mismatch: "),aK(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,r){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);fT(this.elementShape,r,"TensorList shape mismatch: "),e=e.slice(0,this.size());let n=fE(this.elementShape,this.tensors,r);return 0===e.length?aW([],[0].concat(n)):aH(()=>pB(e.map(e=>s9(this.tensors[e],n)),0))}concat(e,t){if(e&&e!==this.elementDtype)throw Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);fT(this.elementShape,t,"TensorList shape mismatch: ");let r=fE(this.elementShape,this.tensors,t);return 0===this.size()?aW([],[0].concat(r)):aH(()=>un(this.tensors.map(e=>s9(e,r)),0))}}const f_=async(e,t,r)=>{switch(e.op){case"If":case"StatelessIf":{let n=c$("thenBranch",e,t,r),a=c$("elseBranch",e,t,r),i=c$("cond",e,t,r),s=c$("args",e,t,r);if((await i.data())[0])return r.functionMap[n].executeFunctionAsync(s,r.tensorArrayMap,r.tensorListMap);return r.functionMap[a].executeFunctionAsync(s,r.tensorArrayMap,r.tensorListMap)}case"While":case"StatelessWhile":{let n=c$("body",e,t,r),a=c$("cond",e,t,r),i=c$("args",e,t,r),s=await r.functionMap[a].executeFunctionAsync(i,r.tensorArrayMap,r.tensorListMap),o=i.map(e=>e.id),l=await s[0].data();s.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()});let u=i;for(;l[0];){let e=u,t=(u=await r.functionMap[n].executeFunctionAsync(u,r.tensorArrayMap,r.tensorListMap)).map(e=>e.id);e.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});let i=await r.functionMap[a].executeFunctionAsync(u,r.tensorArrayMap,r.tensorListMap);l=await i[0].data(),i.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return u}case"LoopCond":return[cO(c$("pred",e,t,r))];case"Switch":{let n=c$("pred",e,t,r),a=c$("data",e,t,r);return a.kept||(a=cO(a)),(await n.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{let n=e.inputNames.find(e=>void 0!==cE(e,t,r));if(n)return[cO(cE(n,t,r))];return}case"Enter":{let n=c$("frameName",e,t,r),a=c$("tensor",e,t,r);return r.enterFrame(n),[cO(a)]}case"Exit":{let n=c$("tensor",e,t,r);return r.exitFrame(),[cO(n)]}case"NextIteration":{let n=c$("tensor",e,t,r);return r.nextIteration(),[cO(n)]}case"TensorArrayV3":{let n=c$("size",e,t,r),a=c$("dtype",e,t,r),i=c$("elementShape",e,t,r),s=c$("dynamicSize",e,t,r),o=c$("clearAfterRead",e,t,r),l=c$("identicalElementShapes",e,t,r),u=new fA(c$("name",e,t,r),a,n,i,l,s,o);return r.addTensorArray(u),[u.idTensor,sx(1)]}case"TensorArrayWriteV3":{let n=c$("tensorArrayId",e,t,r),a=c$("index",e,t,r),i=c$("tensor",e,t,r),s=r.getTensorArray(n.id);return s.write(a,i),[s.idTensor]}case"TensorArrayReadV3":{let n=c$("tensorArrayId",e,t,r),a=c$("index",e,t,r);return[r.getTensorArray(n.id).read(a)]}case"TensorArrayGatherV3":{let n=c$("tensorArrayId",e,t,r),a=c$("indices",e,t,r),i=c$("dtype",e,t,r);return[r.getTensorArray(n.id).gather(a,i)]}case"TensorArrayScatterV3":{let n=c$("tensorArrayId",e,t,r),a=c$("indices",e,t,r),i=c$("tensor",e,t,r),s=r.getTensorArray(n.id);return s.scatter(a,i),[s.idTensor]}case"TensorArrayConcatV3":{let n=c$("tensorArrayId",e,t,r),a=r.getTensorArray(n.id),i=c$("dtype",e,t,r);return[a.concat(i)]}case"TensorArraySplitV3":{let n=c$("tensorArrayId",e,t,r),a=c$("tensor",e,t,r),i=c$("lengths",e,t,r),s=r.getTensorArray(n.id);return s.split(i,a),[s.idTensor]}case"TensorArraySizeV3":{let n=c$("tensorArrayId",e,t,r);return[sx(r.getTensorArray(n.id).size(),"int32")]}case"TensorArrayCloseV3":{let n=c$("tensorArrayId",e,t,r),a=r.getTensorArray(n.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{let n=c$("tensorListId",e,t,r),a=c$("index",e,t,r),i=c$("tensor",e,t,r),s=r.getTensorList(n.id);return s.setItem(a,i),[s.idTensor]}case"TensorListGetItem":{let n=c$("tensorListId",e,t,r),a=c$("index",e,t,r),i=c$("elementShape",e,t,r),s=c$("elementDType",e,t,r);return[r.getTensorList(n.id).getItem(a,i,s)]}case"TensorListScatterV2":case"TensorListScatter":{let n=c$("indices",e,t,r),a=c$("tensor",e,t,r),i=function(e,t,r,n){if(t.length!==e.shape[0])throw Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let a=Math.max(...t);if(null!=n&&-1!==n&&a>=n)throw Error(`Max index must be < array size (${a}  vs. ${n})`);let i=new fF([],r,e.dtype,n),s=pJ(e,0);return t.forEach((e,t)=>{i.setItem(e,s[t])}),i}(a,n,c$("elementShape",e,t,r),c$("numElements",e,t,r));return r.addTensorList(i),[i.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let n=c$("elementShape",e,t,r),a=c$("elementDType",e,t,r),i=c$("TensorListReserve"===e.op?"numElements":"maxNumElements",e,t,r),s=new fF([],n,a,"TensorListReserve"===e.op?-1:i);return r.addTensorList(s),[s.idTensor]}case"TensorListGather":{let n=c$("tensorListId",e,t,r),a=c$("indices",e,t,r),i=c$("elementShape",e,t,r),s=c$("elementDType",e,t,r);return[r.getTensorList(n.id).gather(a,s,i)]}case"TensorListStack":{let n=c$("tensorListId",e,t,r),a=c$("elementShape",e,t,r),i=c$("elementDType",e,t,r),s=c$("numElements",e,t,r);return[r.getTensorList(n.id).stack(a,i,s)]}case"TensorListFromTensor":{let n=c$("tensor",e,t,r),a=function(e,t,r){let n=e.dtype;if(e.shape.length<1)throw Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==r)throw Error(`Invalid data types; op elements ${e.dtype}, but list elements ${r}`);return fT(e.shape.slice(1),t,"TensorList shape mismatch: "),new fF(pJ(e),t,n)}(n,c$("elementShape",e,t,r),c$("elementDType",e,t,r));return r.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let n=c$("tensorListId",e,t,r),a=r.getTensorList(n.id),i=c$("dtype",e,t,r),s=c$("elementShape",e,t,r);return[a.concat(i,s)]}case"TensorListPushBack":{let n=c$("tensorListId",e,t,r),a=c$("tensor",e,t,r),i=r.getTensorList(n.id);return i.pushBack(a),[i.idTensor]}case"TensorListPopBack":{let n=c$("tensorListId",e,t,r),a=c$("elementShape",e,t,r),i=c$("elementDType",e,t,r);return[r.getTensorList(n.id).popBack(a,i)]}case"TensorListSplit":{let n=c$("tensor",e,t,r),a=c$("elementShape",e,t,r),i=function(e,t,r){let n=0,a=t.map(e=>n+=e);if(n!==e.shape[0])throw Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${e.shape}`);let i=fR(e.shape.slice(1),r),s=0===n?0:e.size/n,o=aH(()=>{let r=[];e=s9(e,[1,n,s]);for(let n=0;n<t.length;++n){let o=[0,0===n?0:a[n-1],0],l=[1,t[n],s];r[n]=s9(u6(e,o,l),i)}return e.dispose(),r}),l=new fF([],r,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(n,c$("lengths",e,t,r),a);return r.addTensorList(i),[i.idTensor]}case"TensorListLength":{let n=c$("tensorListId",e,t,r);return[sx(r.getTensorList(n.id).size(),"int32")]}case"TensorListResize":{let n=c$("tensorListId",e,t,r),a=c$("size",e,t,r),i=r.getTensorList(n.id).resize(a);return r.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function fD(e,t,r){let[n,a]=c$("fusedOps",e,t,r),i="biasadd"===n,s="prelu"===a,o=c$("numArgs",e,t,r);if(i){if(s&&2!==o)throw Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!s&&i&&1!==o)throw Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if("fusedbatchnorm"===n)throw Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let l=c$("strides",e,t,r),u=cD(e,t,r),h=c$("dataFormat",e,t,r).toUpperCase(),p=c$("dilations",e,t,r),[d,c]=c$("args",e,t,r);return i||(c=d,d=void 0),{stride:l,pad:u,dataFormat:h,dilations:p,biasArg:d,preluArg:c,activationFunc:a,leakyreluAlpha:c$("leakyreluAlpha",e,t,r)}}function fO(e,t,r){let n=c$("boxes",e,t,r),a=c$("scores",e,t,r),i=c$("maxOutputSize",e,t,r),s=c$("iouThreshold",e,t,r);return{boxes:n,scores:a,maxOutputSize:i,iouThreshold:s,scoreThreshold:c$("scoreThreshold",e,t,r),softNmsSigma:c$("softNmsSigma",e,t,r)}}const fM=async(e,t,r,n,a=fN)=>{switch(e.op){case"NonMaxSuppressionV5":{let{boxes:n,scores:i,maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=fO(e,t,r),h=await a.image.nonMaxSuppressionWithScoreAsync(n,i,s,o,l,u);return[h.selectedIndices,h.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:n,scores:i,maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=fO(e,t,r),u=c$("padToMaxOutputSize",e,t,r),h=await a.image.nonMaxSuppressionPaddedAsync(n,i,s,o,l,u);return[h.selectedIndices,h.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:n,scores:i,maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=fO(e,t,r);return[await a.image.nonMaxSuppressionAsync(n,i,s,o,l)]}case"Where":{let n=a.cast(c$("condition",e,t,r),"bool"),i=[await a.whereAsync(n)];return n.dispose(),i}case"ListDiff":return a.setdiff1dAsync(c$("x",e,t,r),c$("y",e,t,r));default:throw TypeError(`Node type ${e.op} is not implemented`)}};class fz{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=sx(0),this.tensorMap=new Map,aK(this.handle)}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return sx(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);let r=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),aH(()=>{let e=pJ(t),n=r.length,a=e.length;ny.assert(n===a,()=>`The number of elements doesn't match, keys has ${n} elements, the values has ${a} elements.`);for(let t=0;t<n;t++){let n=r[t],a=e[t];aK(a),this.tensorMap.set(n,a)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);let r=await e.data();return aH(()=>{let e=[];for(let n=0;n<r.length;n++){let a=r[n],i=this.findWithDefault(a,t);e.push(i)}return pB(e)})}findWithDefault(e,t){let r=this.tensorMap.get(e);return null!=r?r:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}const fP=async(e,t,r,n)=>{switch(e.op){case"HashTable":case"HashTableV2":{let a=n.getHashTableHandleByName(e.name);if(null!=a)return[a];{let a=new fz(c$("keyDType",e,t,r),c$("valueDType",e,t,r));return n.addHashTable(e.name,a),[a.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{let a=c$("tableHandle",e,t,r,n),i=c$("keys",e,t,r),s=c$("values",e,t,r),o=n.getHashTableById(a.id);return[await o.import(i,s)]}case"LookupTableFind":case"LookupTableFindV2":{let a=c$("tableHandle",e,t,r,n),i=c$("keys",e,t,r),s=c$("defaultValue",e,t,r),o=n.getHashTableById(a.id);return[await o.find(i,s)]}case"LookupTableSize":case"LookupTableSizeV2":{let a=c$("tableHandle",e,t,r,n);return[n.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function fL(e,t,r,n,a=aH){let i=((e,t,r)=>{switch(e.category){case"arithmetic":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[n.add(c$("a",e,t,r),c$("b",e,t,r))];case"AddN":return[n.addN(c$("tensors",e,t,r))];case"FloorMod":case"Mod":return[n.mod(c$("a",e,t,r),c$("b",e,t,r))];case"Mul":return[n.mul(c$("a",e,t,r),c$("b",e,t,r))];case"RealDiv":case"Div":return[n.div(c$("a",e,t,r),c$("b",e,t,r))];case"DivNoNan":return[n.divNoNan(c$("a",e,t,r),c$("b",e,t,r))];case"FloorDiv":return[n.floorDiv(c$("a",e,t,r),c$("b",e,t,r))];case"Sub":return[n.sub(c$("a",e,t,r),c$("b",e,t,r))];case"Minimum":return[n.minimum(c$("a",e,t,r),c$("b",e,t,r))];case"Maximum":return[n.maximum(c$("a",e,t,r),c$("b",e,t,r))];case"Pow":return[n.pow(c$("a",e,t,r),c$("b",e,t,r))];case"SquaredDifference":return[n.squaredDifference(c$("a",e,t,r),c$("b",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"basic_math":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"Abs":case"ComplexAbs":return[n.abs(c$("x",e,t,r))];case"Acos":return[n.acos(c$("x",e,t,r))];case"Acosh":return[n.acosh(c$("x",e,t,r))];case"Asin":return[n.asin(c$("x",e,t,r))];case"Asinh":return[n.asinh(c$("x",e,t,r))];case"Atan":return[n.atan(c$("x",e,t,r))];case"Atan2":return[n.atan2(c$("x",e,t,r),c$("y",e,t,r))];case"Atanh":return[n.atanh(c$("x",e,t,r))];case"Ceil":return[n.ceil(c$("x",e,t,r))];case"Complex":return[n.complex(c$("real",e,t,r),c$("imag",e,t,r))];case"Cos":return[n.cos(c$("x",e,t,r))];case"Cosh":return[n.cosh(c$("x",e,t,r))];case"Elu":return[n.elu(c$("x",e,t,r))];case"Erf":return[n.erf(c$("x",e,t,r))];case"Exp":return[n.exp(c$("x",e,t,r))];case"Expm1":return[n.expm1(c$("x",e,t,r))];case"Floor":return[n.floor(c$("x",e,t,r))];case"Log":return[n.log(c$("x",e,t,r))];case"Log1p":return[n.log1p(c$("x",e,t,r))];case"Imag":return[n.imag(c$("x",e,t,r))];case"Neg":return[n.neg(c$("x",e,t,r))];case"Reciprocal":return[n.reciprocal(c$("x",e,t,r))];case"Real":return[n.real(c$("x",e,t,r))];case"Relu":return[n.relu(c$("x",e,t,r))];case"Round":return[n.round(c$("x",e,t,r))];case"Selu":return[n.selu(c$("x",e,t,r))];case"Sigmoid":return[n.sigmoid(c$("x",e,t,r))];case"Sin":return[n.sin(c$("x",e,t,r))];case"Sign":return[n.sign(c$("x",e,t,r))];case"Sinh":return[n.sinh(c$("x",e,t,r))];case"Softplus":return[n.softplus(c$("x",e,t,r))];case"Sqrt":return[n.sqrt(c$("x",e,t,r))];case"Square":return[n.square(c$("x",e,t,r))];case"Tanh":return[n.tanh(c$("x",e,t,r))];case"Tan":return[n.tan(c$("x",e,t,r))];case"ClipByValue":return[n.clipByValue(c$("x",e,t,r),c$("clipValueMin",e,t,r),c$("clipValueMax",e,t,r))];case"Relu6":return[n.relu6(c$("x",e,t,r))];case"Rsqrt":return[n.rsqrt(cE(e.inputNames[0],t,r))];case"LeakyRelu":return[n.leakyRelu(c$("x",e,t,r),c$("alpha",e,t,r))];case"Prelu":return[n.prelu(c$("x",e,t,r),c$("alpha",e,t,r))];case"IsNan":return[n.isNaN(cE(e.inputNames[0],t,r))];case"IsInf":return[n.isInf(cE(e.inputNames[0],t,r))];case"IsFinite":return[n.isFinite(cE(e.inputNames[0],t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"control":return f_(e,t,r);case"convolution":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"Conv1D":{let a=c$("stride",e,t,r),i=c$("pad",e,t,r),s=c$("dataFormat",e,t,r).toUpperCase(),o=c$("dilation",e,t,r);return[n.conv1d(c$("x",e,t,r),c$("filter",e,t,r),a,i,s,o)]}case"Conv2D":{let a=c$("strides",e,t,r),i=cD(e,t,r),s=c$("dataFormat",e,t,r).toUpperCase(),o=c$("dilations",e,t,r);return[n.conv2d(c$("x",e,t,r),c$("filter",e,t,r),[a[1],a[2]],i,s,[o[1],o[2]])]}case"_FusedConv2D":{let{stride:a,pad:i,dataFormat:s,dilations:o,biasArg:l,preluArg:u,activationFunc:h,leakyreluAlpha:p}=fD(e,t,r);return[n.fused.conv2d({x:c$("x",e,t,r),filter:c$("filter",e,t,r),strides:[a[1],a[2]],pad:i,dataFormat:s,dilations:[o[1],o[2]],bias:l,activation:h,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{let{stride:a,pad:i,dataFormat:s,dilations:o,biasArg:l,preluArg:u,activationFunc:h,leakyreluAlpha:p}=fD(e,t,r);return[n.fused.depthwiseConv2d({x:c$("x",e,t,r),filter:c$("filter",e,t,r),strides:[a[1],a[2]],pad:i,dataFormat:s,dilations:[o[1],o[2]],bias:l,activation:h,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let a=c$("outputShape",e,t,r),i=c$("strides",e,t,r),s=cD(e,t,r);return[n.conv2dTranspose(c$("x",e,t,r),c$("filter",e,t,r),a,[i[1],i[2]],s)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let a=c$("strides",e,t,r),i=cD(e,t,r),s=c$("dilations",e,t,r),o=c$("dataFormat",e,t,r).toUpperCase();return[n.depthwiseConv2d(c$("input",e,t,r),c$("filter",e,t,r),[a[1],a[2]],i,o,[s[1],s[2]])]}case"Conv3D":{let a=c$("strides",e,t,r),i=c$("pad",e,t,r),s=c$("dataFormat",e,t,r).toUpperCase(),o=c$("dilations",e,t,r);return[n.conv3d(c$("x",e,t,r),c$("filter",e,t,r),[a[1],a[2],a[3]],i,s,[o[1],o[2],o[3]])]}case"AvgPool":{let a=c$("strides",e,t,r),i=c$("pad",e,t,r),s=c$("kernelSize",e,t,r);return[n.avgPool(c$("x",e,t,r),[s[1],s[2]],[a[1],a[2]],i)]}case"MaxPool":{let a=c$("strides",e,t,r),i=c$("pad",e,t,r),s=c$("kernelSize",e,t,r);return[n.maxPool(c$("x",e,t,r),[s[1],s[2]],[a[1],a[2]],i)]}case"MaxPoolWithArgmax":{let a=c$("strides",e,t,r),i=c$("pad",e,t,r),s=c$("kernelSize",e,t,r),o=c$("includeBatchInIndex",e,t,r),{result:l,indexes:u}=n.maxPoolWithArgmax(c$("x",e,t,r),[s[1],s[2]],[a[1],a[2]],i,o);return[l,u]}case"AvgPool3D":{let a=c$("strides",e,t,r),i=c$("pad",e,t,r),s=c$("kernelSize",e,t,r);return[n.avgPool3d(c$("x",e,t,r),[s[1],s[2],s[3]],[a[1],a[2],a[3]],i)]}case"MaxPool3D":{let a=c$("strides",e,t,r),i=c$("pad",e,t,r),s=c$("kernelSize",e,t,r);return[n.maxPool3d(c$("x",e,t,r),[s[1],s[2],s[3]],[a[1],a[2],a[3]],i)]}case"Dilation2D":{let a=c$("strides",e,t,r),i=c$("pad",e,t,r),s=c$("dilations",e,t,r),o=a[1],l=a[2],u=s[1],h=s[2];return[n.dilation2d(c$("x",e,t,r),c$("filter",e,t,r),[o,l],i,[u,h],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"creation":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"Fill":{let a=c$("shape",e,t,r),i=c$("dtype",e,t,r),s=c$("value",e,t,r);return[n.fill(a,s,i)]}case"LinSpace":{let a=c$("start",e,t,r),i=c$("stop",e,t,r),s=c$("num",e,t,r);return[n.linspace(a,i,s)]}case"Multinomial":{let a=c$("logits",e,t,r),i=c$("numSamples",e,t,r),s=c$("seed",e,t,r);return[n.multinomial(a,i,s)]}case"OneHot":{let a=c$("indices",e,t,r),i=c$("depth",e,t,r),s=c$("onValue",e,t,r),o=c$("offValue",e,t,r),l=c$("dtype",e,t,r);return[n.oneHot(a,i,s,o,l)]}case"Ones":return[n.ones(c$("shape",e,t,r),c$("dtype",e,t,r))];case"OnesLike":return[n.onesLike(c$("x",e,t,r))];case"RandomStandardNormal":return[n.randomStandardNormal(c$("shape",e,t,r),c$("dtype",e,t,r),c$("seed",e,t,r))];case"RandomUniform":return[n.randomUniform(c$("shape",e,t,r),c$("minval",e,t,r),c$("maxval",e,t,r),c$("dtype",e,t,r))];case"RandomUniformInt":return[n.randomUniformInt(c$("shape",e,t,r),c$("minval",e,t,r),c$("maxval",e,t,r),c$("seed",e,t,r))];case"Range":{let a=c$("start",e,t,r),i=c$("stop",e,t,r),s=c$("step",e,t,r);return[n.range(a,i,s,c$("dtype",e,t,r))]}case"TruncatedNormal":{let a=c$("shape",e,t,r),i=c$("mean",e,t,r),s=c$("stdDev",e,t,r),o=c$("seed",e,t,r);return[n.truncatedNormal(a,i,s,c$("dtype",e,t,r),o)]}case"Zeros":return[n.zeros(c$("shape",e,t,r),c$("dtype",e,t,r))];case"ZerosLike":return[n.zerosLike(c$("x",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"dynamic":return fM(e,t,r);case"evaluation":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"LowerBound":{let a=c$("sortedSequence",e,t,r),i=c$("values",e,t,r);return[n.lowerBound(a,i)]}case"TopKV2":{let a=c$("x",e,t,r),i=c$("k",e,t,r),s=c$("sorted",e,t,r),o=n.topk(a,i,s);return[o.values,o.indices]}case"UpperBound":{let a=c$("sortedSequence",e,t,r),i=c$("values",e,t,r);return[n.upperBound(a,i)]}case"Unique":{let a=c$("x",e,t,r),i=n.unique(a);return[i.values,i.indices]}case"UniqueV2":{let a=c$("x",e,t,r),i=c$("axis",e,t,r),s=n.unique(a,i);return[s.values,s.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"image":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"ResizeBilinear":{let a=c$("images",e,t,r),i=c$("size",e,t,r),s=c$("alignCorners",e,t,r),o=c$("halfPixelCenters",e,t,r);return[n.image.resizeBilinear(a,[i[0],i[1]],s,o)]}case"ResizeNearestNeighbor":{let a=c$("images",e,t,r),i=c$("size",e,t,r),s=c$("alignCorners",e,t,r),o=c$("halfPixelCenters",e,t,r);return[n.image.resizeNearestNeighbor(a,[i[0],i[1]],s,o)]}case"CropAndResize":{let a=c$("image",e,t,r),i=c$("boxes",e,t,r),s=c$("boxInd",e,t,r),o=c$("cropSize",e,t,r),l=c$("method",e,t,r),u=c$("extrapolationValue",e,t,r);return[n.image.cropAndResize(a,i,s,o,l,u)]}case"ImageProjectiveTransformV3":{let a=c$("images",e,t,r),i=c$("transforms",e,t,r),s=c$("outputShape",e,t,r),o=c$("fillValue",e,t,r),l=c$("interpolation",e,t,r),u=c$("fillMode",e,t,r);return[n.image.transform(a,i,l.toLowerCase(),u.toLowerCase(),o,s)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"graph":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":let a=c$("default",e,t,r);return[cE(e.name,t,r)||a];case"Placeholder":return[cE(e.name,t,r)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[cO(c$("x",e,t,r))];case"IdentityN":return c$("x",e,t,r).map(e=>cO(e));case"Shape":return[n.tensor1d(c$("x",e,t,r).shape,"int32")];case"ShapeN":return c$("x",e,t,r).map(e=>n.tensor1d(e.shape));case"Size":return[n.scalar(c$("x",e,t,r).size,"int32")];case"Rank":return[n.scalar(c$("x",e,t,r).rank,"int32")];case"NoOp":return[n.scalar(1)];case"Print":let i=c$("x",e,t,r),s=c$("data",e,t,r),o=c$("message",e,t,r),l=c$("summarize",e,t,r);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<s.length;e++)console.log(Array.prototype.slice.call(s[e].dataSync()).slice(0,l));return[i];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"logical":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"Equal":return[n.equal(c$("a",e,t,r),c$("b",e,t,r))];case"NotEqual":return[n.notEqual(c$("a",e,t,r),c$("b",e,t,r))];case"Greater":return[n.greater(c$("a",e,t,r),c$("b",e,t,r))];case"GreaterEqual":return[n.greaterEqual(c$("a",e,t,r),c$("b",e,t,r))];case"Less":return[n.less(c$("a",e,t,r),c$("b",e,t,r))];case"LessEqual":return[n.lessEqual(c$("a",e,t,r),c$("b",e,t,r))];case"LogicalAnd":return[n.logicalAnd(c$("a",e,t,r),c$("b",e,t,r))];case"LogicalNot":return[n.logicalNot(c$("a",e,t,r))];case"LogicalOr":return[n.logicalOr(c$("a",e,t,r),c$("b",e,t,r))];case"Select":case"SelectV2":return[n.where(c$("condition",e,t,r),c$("a",e,t,r),c$("b",e,t,r))];case"BitwiseAnd":return[n.bitwiseAnd(c$("a",e,t,r),c$("b",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"matrices":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[n.matMul(c$("a",e,t,r),c$("b",e,t,r),c$("transposeA",e,t,r),c$("transposeB",e,t,r))];case"Einsum":return[n.einsum(c$("equation",e,t,r),...c$("tensors",e,t,r))];case"Transpose":return[n.transpose(c$("x",e,t,r),c$("perm",e,t,r))];case"_FusedMatMul":let[a,i]=c$("fusedOps",e,t,r),s="prelu"===i,o=c$("numArgs",e,t,r),l=c$("leakyreluAlpha",e,t,r);if("biasadd"===a){if(s&&2!==o)throw Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!s&&1!==o)throw Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[u,h]=c$("args",e,t,r);return[n.fused.matMul({a:c$("a",e,t,r),b:c$("b",e,t,r),transposeA:c$("transposeA",e,t,r),transposeB:c$("transposeB",e,t,r),bias:u,activation:i,preluActivationWeights:h,leakyreluAlpha:l})];case"MatrixBandPart":return[n.linalg.bandPart(c$("a",e,t,r),c$("numLower",e,t,r),c$("numUpper",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"normalization":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"EuclideanNorm":return[n.euclideanNorm(c$("x",e,t,r),c$("axis",e,t,r),c$("keepDims",e,t,r))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[n.batchNorm(c$("x",e,t,r),c$("mean",e,t,r),c$("variance",e,t,r),c$("offset",e,t,r),c$("scale",e,t,r),c$("epsilon",e,t,r))];case"LRN":return[n.localResponseNormalization(c$("x",e,t,r),c$("radius",e,t,r),c$("bias",e,t,r),c$("alpha",e,t,r),c$("beta",e,t,r))];case"Softmax":return[n.softmax(c$("x",e,t,r))];case"LogSoftmax":return[n.logSoftmax(c$("x",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"ragged":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"RaggedGather":{let{outputNestedSplits:a,outputDenseValues:i}=n.raggedGather(c$("paramsNestedSplits",e,t,r),c$("paramsDenseValues",e,t,r),c$("indices",e,t,r),c$("outputRaggedRank",e,t,r));return a.concat(i)}case"RaggedRange":{let{rtNestedSplits:a,rtDenseValues:i}=n.raggedRange(c$("starts",e,t,r),c$("limits",e,t,r),c$("splits",e,t,r));return[a,i]}case"RaggedTensorToTensor":return[n.raggedTensorToTensor(c$("shape",e,t,r),c$("values",e,t,r),c$("defaultValue",e,t,r),c$("rowPartitionTensors",e,t,r),c$("rowPartitionTypes",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"reduction":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"Max":{let a=c$("axis",e,t,r),i=c$("keepDims",e,t,r);return[n.max(c$("x",e,t,r),a,i)]}case"Mean":{let a=c$("axis",e,t,r),i=c$("keepDims",e,t,r);return[n.mean(c$("x",e,t,r),a,i)]}case"Min":{let a=c$("axis",e,t,r),i=c$("keepDims",e,t,r);return[n.min(c$("x",e,t,r),a,i)]}case"Sum":{let a=c$("axis",e,t,r),i=c$("keepDims",e,t,r);return[n.sum(c$("x",e,t,r),a,i)]}case"All":{let a=c$("axis",e,t,r),i=c$("keepDims",e,t,r);return[n.all(c$("x",e,t,r),a,i)]}case"Any":{let a=c$("axis",e,t,r),i=c$("keepDims",e,t,r);return[n.any(c$("x",e,t,r),a,i)]}case"ArgMax":{let a=c$("axis",e,t,r);return[n.argMax(c$("x",e,t,r),a)]}case"ArgMin":{let a=c$("axis",e,t,r);return[n.argMin(c$("x",e,t,r),a)]}case"Prod":{let a=c$("axis",e,t,r),i=c$("keepDims",e,t,r);return[n.prod(c$("x",e,t,r),a,i)]}case"Cumprod":{let a=c$("axis",e,t,r),i=c$("exclusive",e,t,r),s=c$("reverse",e,t,r);return[n.cumprod(c$("x",e,t,r),a,i,s)]}case"Cumsum":{let a=c$("axis",e,t,r),i=c$("exclusive",e,t,r),s=c$("reverse",e,t,r);return[n.cumsum(c$("x",e,t,r),a,i,s)]}case"Bincount":let a=c$("x",e,t,r),i=c$("weights",e,t,r),s=c$("size",e,t,r);return[n.bincount(a,i,s)];case"DenseBincount":{let a=c$("x",e,t,r),i=c$("weights",e,t,r),s=c$("size",e,t,r),o=c$("binaryOutput",e,t,r);return[n.denseBincount(a,i,s,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"slice_join":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"ConcatV2":case"Concat":{let a=c$("n",e,t,r),i=c$("axis",e,t,r),s=c$("tensors",e,t,r);return s=s.slice(0,a),[n.concat(s,i)]}case"Gather":{let a=c$("x",e,t,r),i=c$("indices",e,t,r);return[n.gather(a,n.cast(i,"int32"),0)]}case"GatherV2":{let a=c$("axis",e,t,r),i=c$("batchDims",e,t,r),s=c$("x",e,t,r),o=c$("indices",e,t,r);return[n.gather(s,n.cast(o,"int32"),a,i)]}case"Reverse":{let a=c$("dims",e,t,r),i=[];for(let e=0;e<a.length;e++)a[e]&&i.push(e);let s=c$("x",e,t,r);return[n.reverse(s,i)]}case"ReverseV2":{let a=c$("axis",e,t,r),i=c$("x",e,t,r);return[n.reverse(i,a)]}case"Slice":{let a=c$("begin",e,t,r),i=c$("size",e,t,r);return[n.slice(c$("x",e,t,r),a,i)]}case"StridedSlice":{let a=c$("begin",e,t,r),i=c$("end",e,t,r),s=c$("strides",e,t,r),o=c$("beginMask",e,t,r),l=c$("endMask",e,t,r),u=c$("ellipsisMask",e,t,r),h=c$("newAxisMask",e,t,r),p=c$("shrinkAxisMask",e,t,r),d=c$("x",e,t,r);return[n.stridedSlice(d,a,i,s,o,l,u,h,p)]}case"Pack":return aH(()=>{let a=c$("axis",e,t,r),i=c$("tensors",e,t,r),s=i[0].shape,o=n.squeeze(i[0]).shape,l=i.map(e=>{let t=ny.arraysEqual(e.shape,s);if(!t&&!ny.arraysEqual(n.squeeze(e).shape,o))throw Error("the input tensors shape does not match");return t?e:n.reshape(e,s)});return[n.stack(l,a)]});case"Unpack":{let a=c$("axis",e,t,r),i=c$("tensor",e,t,r);return n.unstack(i,a)}case"Tile":{let a=c$("reps",e,t,r);return[n.tile(c$("x",e,t,r),a)]}case"Split":case"SplitV":{let a=c$("axis",e,t,r),i=c$("numOrSizeSplits",e,t,r),s=c$("x",e,t,r);return n.split(s,i,a)}case"ScatterNd":{let a=c$("indices",e,t,r),i=c$("values",e,t,r),s=c$("shape",e,t,r);return[n.scatterND(a,i,s)]}case"GatherNd":{let a=c$("x",e,t,r),i=c$("indices",e,t,r);return[n.gatherND(a,i)]}case"SparseToDense":{let a=c$("sparseIndices",e,t,r),i=c$("outputShape",e,t,r),s=c$("sparseValues",e,t,r),o=c$("defaultValue",e,t,r);return[n.sparseToDense(a,s,i,s.dtype===o.dtype?o:n.cast(o,s.dtype))]}case"TensorScatterUpdate":{let a=c$("indices",e,t,r),i=c$("values",e,t,r),s=c$("tensor",e,t,r);return[n.tensorScatterUpdate(s,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"sparse":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"SparseFillEmptyRows":{let{outputIndices:a,outputValues:i,emptyRowIndicator:s,reverseIndexMap:o}=n.sparse.sparseFillEmptyRows(c$("indices",e,t,r),c$("values",e,t,r),c$("denseShape",e,t,r),c$("defaultValue",e,t,r));return[a,i,s,o]}case"SparseReshape":{let{outputIndices:a,outputShape:i}=n.sparse.sparseReshape(c$("inputIndices",e,t,r),c$("inputShape",e,t,r),c$("newShape",e,t,r));return[a,i]}case"SparseSegmentMean":return[n.sparse.sparseSegmentMean(c$("data",e,t,r),c$("indices",e,t,r),c$("segmentIds",e,t,r))];case"SparseSegmentSum":return[n.sparse.sparseSegmentSum(c$("data",e,t,r),c$("indices",e,t,r),c$("segmentIds",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"spectral":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"FFT":return[n.fft(c$("x",e,t,r))];case"IFFT":return[n.ifft(c$("x",e,t,r))];case"RFFT":return[n.rfft(c$("x",e,t,r))];case"IRFFT":return[n.irfft(c$("x",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"string":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"StaticRegexReplace":return[n.string.staticRegexReplace(c$("input",e,t,r),c$("pattern",e,t,r),c$("rewrite",e,t,r),c$("replaceGlobal",e,t,r))];case"StringNGrams":{let{nGrams:a,nGramsSplits:i}=n.string.stringNGrams(c$("data",e,t,r),c$("dataSplits",e,t,r),c$("separator",e,t,r),c$("nGramWidths",e,t,r),c$("leftPad",e,t,r),c$("rightPad",e,t,r),c$("padWidth",e,t,r),c$("preserveShortSequences",e,t,r));return[a,i]}case"StringSplit":{let{indices:a,values:i,shape:s}=n.string.stringSplit(c$("input",e,t,r),c$("delimiter",e,t,r),c$("skipEmpty",e,t,r));return[a,i,s]}case"StringToHashBucketFast":return[n.string.stringToHashBucketFast(c$("input",e,t,r),c$("numBuckets",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"transformation":return a(()=>((e,t,r,n=fN)=>{switch(e.op){case"Cast":return[n.cast(c$("x",e,t,r),c$("dtype",e,t,r))];case"ExpandDims":{let a=c$("axis",e,t,r);return[n.expandDims(c$("x",e,t,r),a)]}case"Squeeze":{let a=c$("axis",e,t,r);return[n.squeeze(c$("x",e,t,r),a)]}case"Reshape":return[n.reshape(c$("x",e,t,r),c$("shape",e,t,r))];case"EnsureShape":return[n.ensureShape(c$("x",e,t,r),c$("shape",e,t,r))];case"MirrorPad":return[n.mirrorPad(c$("x",e,t,r),c$("padding",e,t,r),c$("mode",e,t,r))];case"PadV2":case"Pad":return[n.pad(c$("x",e,t,r),c$("padding",e,t,r),c$("constantValue",e,t,r))];case"SpaceToBatchND":{let a=c$("blockShape",e,t,r),i=c$("paddings",e,t,r);return[n.spaceToBatchND(c$("x",e,t,r),a,i)]}case"BatchToSpaceND":{let a=c$("blockShape",e,t,r),i=c$("crops",e,t,r);return[n.batchToSpaceND(c$("x",e,t,r),a,i)]}case"DepthToSpace":{let a=c$("blockSize",e,t,r),i=c$("dataFormat",e,t,r).toUpperCase();return[n.depthToSpace(c$("x",e,t,r),a,i)]}case"BroadcastTo":return[n.broadcastTo(c$("x",e,t,r),c$("shape",e,t,r))];case"BroadcastArgs":return[n.broadcastArgs(c$("s0",e,t,r),c$("s1",e,t,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,r));case"hash_table":return fP(e,t,r,n);case"custom":let i=cT[e.op];if(i&&i.customExecutor)return i.customExecutor(new fC(e,t,r));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,r);return ny.isPromise(i)?i.then(e=>[].concat(e)):[].concat(i)}class fB{constructor(e={},t={},r={},n={},a){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=r,this.functionMap=n,this.parseNodeNameCache=a,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let e=[];for(let t=0;t<this.contexts.length-1;t++){let r=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(r))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw Error("Cannot increase frame iteration, the context is empty")}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(let t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(let t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function fW(e,t,r,n){let a=new Set,i=[],s=null,o=null,l=new Set,u=new Set(Object.keys(e).map(e=>c_(e)[0])),h=new Set((n=n||[]).map(e=>c_(e.name)[0])),p=[...t];for(;p.length>0;){var d,c;let e=p.pop();if((fj(e)||(d=e,fG.has(d.op))||(c=e,fH.has(c.op)))&&null==s&&(o=(s=e).children.map(e=>e.name).filter(e=>a.has(e))),a.add(e.name),!(null!=r[e.name]||u.has(e.name)||h.has(e.name))){if(0===e.inputs.length){i.push(e.name);continue}e.inputs.forEach(e=>{l.has(e.name)||(l.add(e.name),p.push(e))})}}return{inputs:e,outputs:t,usedNodes:a,missingInputs:i,dynamicNode:s,syncInputs:o}}class fU extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const fV=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),fG=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),fH=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function fj(e){return fV.has(e.op)}class fK{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){let t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{let t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new fK(e.functions[t],this)})}getCompilationKey(e,t){let r=e.map(e=>e.name).sort(),n=t.map(e=>e.name).sort();return r.join(this.SEPARATOR)+"--"+n.join(this.SEPARATOR)}compile(e,t){let r=fW(e,t,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:a,syncInputs:i}=r;if(null!=a)throw Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(n.length>0){let r=t.map(e=>e.name),a=Object.keys(e);throw Error(`Cannot compute the outputs [${r}] from the provided inputs [${a}]. Missing the following inputs: [${n}]`)}let s=function(e,t){let{usedNodes:r,inputs:n}=t,a=Object.keys(n).map(e=>c_(e)[0]).map(t=>e.nodes[t]),i=e.initNodes||[],s=e=>r.has("string"==typeof e?e:e.name);function o(e){return[...new Map(e.map(e=>[e.name,e])).values()]}let l=o([...a,...e.weights,...i]).filter(s),u=o([...l,...Object.values(e.nodes)]).filter(s),h=new Map(u.map(e=>[e.name,e])),p={};for(let e of u)for(let t of(p[e.name]=p[e.name]||0,e.children))s(t)||(p[t.name]=1/0),p[t.name]=(p[t.name]||0)+1;let d=Object.entries(p).filter(([,e])=>0===e).map(([e])=>e),c=[...d];for(;d.length>0;){let e=d.pop();for(let t of h.get(e).children.filter(s))0==--p[t.name]&&(c.push(t.name),d.push(t.name))}let f=function(e,t){let r=new Map(e.map(e=>[e.name,e])),n=t.map(e=>e.name),a=new Set(n);for(;n.length>0;){let e=n.pop();for(let t of r.get(e).children)!r.has(t.name)||a.has(t.name)||(a.add(t.name),n.push(t.name))}return e.filter(e=>a.has(e.name))}(c.map(e=>h.get(e)),l);return function(e,t){let r=new Map(e.map((e,t)=>[e.name,t])),n=new Set(t.map(e=>e.name)),a=e=>n.has("string"==typeof e?e:e.name),i=new Set(e.map(e=>e.name)),s=e=>i.has("string"==typeof e?e:e.name);for(let t of e){for(let e of t.children.filter(s)){if(!r.has(e.name))throw new fU(`Child ${e.name} of node ${t.name} is unreachable.`);if(r.get(t.name)>r.get(e.name))throw new fU(`Node ${t.name} is scheduled to run after its child ${e.name}.`)}if(!a(t))for(let e of t.inputs){if(!r.has(e.name))throw new fU(`Input ${e.name} of node ${t.name} is unreachable.`);if(r.get(e.name)>r.get(t.name))throw new fU(`Node ${t.name} is scheduled to run before its input ${e.name}.`)}}}(f,l),f}(this.graph,r),o=function(e){let t=new Map(e.map((e,t)=>[e.name,t])),r=Number.MAX_SAFE_INTEGER,n=e.map((e,t)=>fj(e)?r:t),a=e=>{let r=n[t.get(e.name)];return null==r?-1:r},i=e.map((e,t)=>e.children.map(a).reduce((e,t)=>Math.max(e,t),n[t])),s=new Map;for(let t=0;t<e.length;++t){let n=i[t];if(n===r)continue;let a=e[t],o=e[n];s.has(o.name)||s.set(o.name,[]),s.get(o.name).push(a)}return s}(s);return{orderedNodes:s,nodeLiveUntilMap:o}}cloneAndKeepTensor(e){if(null==e)return null;let t=e.clone();return aK(t),t}cloneTensorList(e){return e?e.map(e=>this.cloneAndKeepTensor(e)):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map(([e,t])=>[e,this.cloneTensorList(t)]))}execute(e,t){this.disposeIntermediateTensors();let r=Object.keys(e=this.mapInputs(e)).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);let n=r.map(e=>this.graph.nodes[c_(e)[0]]),a=t.map(e=>c_(e)[0]),i=new Set(a),s=a.map(e=>this.graph.nodes[e]);0===s.length&&(s=this._outputs);let o=this.getCompilationKey(n,s),l=this.compiledMap.get(o);null==l&&(l=this.compile(e,s),this.compiledMap.set(o,l));try{this.keepIntermediateTensors=e_.getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}let u={},h={};return aH(()=>{let r=new fB(this.weightMap,u,h,this.functionExecutorMap,this.parseNodeNameCache),n=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach(t=>{let[a,i]=c_(t,r),s=[];s[i]=e[t],n[a]=s,this.keepIntermediateTensors&&(this.clonedTensorsMap[a]=this.cloneTensorList(s))});let a=this.getFrozenTensorIds(n),{orderedNodes:s,nodeLiveUntilMap:o}=l;for(let e of s){if(n[e.name])continue;let t=fL(e,n,r,this._resourceManager);if(ny.isPromise(t))throw Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);n[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,n,r,a,i,o.get(e.name))}return null==this.parent&&r.dispose(a),t.map(e=>cE(e,n,r))})}getFrozenTensorIds(e){return new Set([].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id))))}checkTensorForDisposal(e,t,r,n,a,i,s){if(!(fj(t)||i.has(e))){for(let n of r[e])null!=n&&(s[n.id]=(s[n.id]||0)+t.children.length);for(let e of t.inputs){if(fj(e))continue;let t=cR(e.name,r,n);if(null!=t)for(let e of t){if(!e||e.kept||a.has(e.id))continue;let t=s[e.id];1===t?(e.dispose(),delete s[e.id]):null!=t&&s[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,r,n,a,i){if(!fj(e)&&null!=i){for(let e of i)if(!(fj(e)||a.has(e.name)))for(let a of cR(e.name,t,r))!a||a.kept||n.has(a.id)||a.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(e=>{for(let t of e)t&&!t.isDisposed&&t.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,r=!1,n={},a={}){this.disposeIntermediateTensors(),r||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=e_.getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}let i=new fB(this.weightMap,n,a,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));let s=await this.executeWithControlFlow(e,i,t,r),o=t.map(e=>cE(e,s,i)),l=new Set([...o.map(e=>e.id),...Object.keys(e).map(t=>e[t].id),...this.weightIds]);return Object.values(s).forEach(e=>{e.forEach(e=>{!e||e.isDisposed||l.has(e.id)||e.dispose()})}),null==this.parent&&i.dispose(l),o}async executeFunctionAsync(e,t,r){let n=e.reduce((e,t,r)=>(e[this.inputs[r].name]=t,e),{});return this._executeAsync(n,this.outputNodes,!0,t,r)}async executeWithControlFlow(e,t,r,n){let a=Object.keys(e),i=a.map(e=>this.graph.nodes[c_(e)[0]]),s=r.map(e=>c_(e)[0]),o=new Set(s),l=s.map(e=>this.graph.nodes[e]);0===l.length&&(l=this._outputs);let{usedNodes:u,missingInputs:h,dynamicNode:p,syncInputs:d}=fW(e,l,this.weightMap,this._initNodes),c=[...i,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),f=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{let[r,n]=c_(t),a=[];a[n]=e[t],f[r]=a});let m={},g=this.getFrozenTensorIds(f),y={};for(;c.length>0;){let e=this.processStack(i,c,t,f,y,g,o,m,u);await Promise.all(e)}null!=p||n||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let b=l.filter(e=>!fj(e)&&!cE(e.name,f,t)).map(e=>e.name);if(b.length>0){let e="";throw null!=p&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),Error(`Cannot compute the outputs [${b}] from the provided inputs [${a}]. Consider providing the following inputs: [${h}]. ${e}`)}return f}processStack(e,t,r,n,a,i,s,o,l){let u=[];for(;t.length>0;){let e=t.pop();r.currentContext=e.contexts;let h="";if("Enter"===e.node.op&&c$("isConstant",e.node,n,r)&&([h]=cA(e.node.name,r)),null==n[e.node.name]){let p=fL(e.node,n,r,this._resourceManager);h||([h]=cA(e.node.name,r));let d=r.currentContext;ny.isPromise(p)?u.push(p.then(u=>(n[h]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[h]=this.cloneTensorList(u)),r.currentContext=d,this.checkTensorForDisposal(h,e.node,n,r,i,s,o),this.processChildNodes(e.node,t,r,n,a,l),u))):(n[h]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[h]=this.cloneTensorList(p)),this.checkTensorForDisposal(h,e.node,n,r,i,s,o),this.processChildNodes(e.node,t,r,n,a,l))}else this.processChildNodes(e.node,t,r,n,a,l)}return u}processChildNodes(e,t,r,n,a,i){e.children.forEach(e=>{let[s]=cA(e.name,r);!a[s]&&i.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!cE(e,n,r))&&(a[s]=!0,t.push({contexts:r.currentContext,node:e})):e.inputNames.every(e=>!!cE(e,n,r))&&(a[s]=!0,t.push({contexts:r.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{let r=e[t],[n]=c_(t),a=this.graph.nodes[n];if(a.attrParams.shape&&a.attrParams.shape.value){let e=a.attrParams.shape.value,t=e.length===r.shape.length&&r.shape.every((t,r)=>-1===e[r]||e[r]===t);ny.assert(t,()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${r.shape}]`)}a.attrParams.dtype&&a.attrParams.dtype.value&&ny.assert(r.dtype===a.attrParams.dtype.value,()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${r.dtype}`)})}mapInputs(e){var t,r;let n={};for(let a in e){let i=null==(r=null==(t=this._signature)?void 0:t.inputs)?void 0:r[a];null!=i?n[i.name]=e[a]:n[a]=e[a]}return n}checkInputs(e){let t=Object.keys(e).filter(e=>{let[t]=c_(e);return null==this.graph.nodes[t]});if(t.length>0)throw Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>{var t,r;let n=null==(r=null==(t=this._signature)?void 0:t.outputs)?void 0:r[e];return null!=n?n.name:e},{})}checkOutputs(e){e.forEach(e=>{let[t]=c_(e);if(!this.graph.nodes[t])throw Error(`The output '${e}' is not found in the graph`)})}}class fq{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(let e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(let e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class fX{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},r=cr){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=r,null==t&&(this.loadOptions={}),this.resourceManager=new fq}findIOHandler(){let e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{let t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let e=this.handler.load();return ny.isPromise(e)?e.then(e=>null==e.getWeightStream?this.loadSync(e):this.loadStreaming(e)):this.loadSync(e)}loadSync(e){let t=this.io.decodeWeights(e.weightData,e.weightSpecs);return this.loadWithWeightMap(e,t)}async loadStreaming(e){if(null==e.getWeightStream)throw Error("Model artifacts missing streamWeights function");let t=await iM(e.getWeightStream(),e.weightSpecs);return this.loadWithWeightMap(e,t)}loadWithWeightMap(e,t){this.artifacts=e;let r=this.artifacts.modelTopology,n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){let e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}if(this.signature=n,this.version=`${r.versions.producer}.${r.versions.minConsumer}`,this.executor=new fK(fh.Instance.transformGraph(r,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(t),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){let t=fh.Instance.transformGraph(e.modelInitializer);this.initializer=new fK(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){let t=this.io.getSaveHandlers(e);if(0===t.length)throw Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){let t={};return(e instanceof au?[e]:e).forEach((e,r)=>t[this.structuredOutputKeys[r]]=e),t}return e}predict(e,t){let r=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(r)}async predictAsync(e,t){let r=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(r)}normalizeInputs(e){var t;if(!(e instanceof au)&&!Array.isArray(e)){let r=null==(t=this.signature)?void 0:t.inputs;if(null!=r)for(let t in r){let n=r[t];null!=n.resourceId&&(e[t]=this.resourceIdToCapturedInput[n.resourceId])}return e}e=Array.isArray(e)?e:[e];let r=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+r!==this.inputNodes.length)throw Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-r} non-resource placeholders, while there are ${e.length} input tensors provided.`);let n=0;return this.inputNodes.reduce((t,r)=>{var a,i,s;let o=null==(s=null==(i=null==(a=this.signature)?void 0:a.inputs)?void 0:i[r])?void 0:s.resourceId;return null!=o?t[r]=this.resourceIdToCapturedInput[o]:t[r]=e[n++],t},{})}normalizeOutputs(e){return Array.isArray(e=e||this.outputNodes)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){let t=this.initializerSignature.outputs,r=Object.keys(t);for(let n=0;n<r.length;n++){let a=t[r[n]];this.resourceIdToCapturedInput[a.resourceId]=e[n]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let r=this.executor.execute(e,t);return r.length>1?r:r[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let r=await this.executor.executeAsync(e,t);return r.length>1?r:r[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,r)=>(t[r]=[e[r]],t),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&aj(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function fY(e,t={},r=cr){var n;if(null==e)throw Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&((n=e).endsWith("/")||(n+="/"),e=`${n}model.json?tfjs-format=file`);let a=new fX(e,t,r);return await a.load(),a}const fZ=e_;fZ.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15),fZ.registerFlag("WEBGPU_CPU_FORWARD",()=>!0),fZ.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1),fZ.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!0),fZ.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1),fZ.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3),fZ.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1),fZ.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0),fZ.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",()=>!1),fZ.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",()=>-1),fZ.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",()=>!1),fZ.registerFlag("WEBGPU_PRINT_SHADER",()=>""),fZ.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",()=>!1);class fQ{constructor(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));else if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return"intel"===this.vendor}}class fJ{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireBuffer(e,t,r=!1,n=!0){var a,i;let s,o=(a=e,i=t,`${a}_${i}`);return n?(this.freeBuffers.has(o)||this.freeBuffers.set(o,[]),this.freeBuffers.get(o).length>0?(s=this.freeBuffers.get(o).pop(),this.numFreeBuffers--):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:r}),this.numBytesAllocated+=e)):(s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:r}),this.numBytesAllocated+=e),this.usedBuffers.has(o)||this.usedBuffers.set(o,[]),this.usedBuffers.get(o).push(s),this.numUsedBuffers++,this.numBytesUsed+=e,s}releaseBuffer(e,t=!0){var r,n;if(0===this.freeBuffers.size)return;let a=e.size,i=(r=a,n=e.usage,`${r}_${n}`),s=this.usedBuffers.get(i),o=s.indexOf(e);if(o<0)throw Error("Cannot find the buffer in buffer manager");s[o]=s[s.length-1],s.pop(),this.numUsedBuffers--,this.numBytesUsed-=a,t?(this.freeBuffers.get(i).push(e),this.numFreeBuffers++):(e.destroy(),this.numBytesAllocated-=a)}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.usedBuffers.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}}class f0{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,r,n){let a=e*t*f2(r),i=f1(e,t,r,n);if(this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.usedTextures.has(i)||this.usedTextures.set(i,[]),this.numBytesUsed+=a,this.numUsedTextures++,this.freeTextures.get(i).length>0){this.numFreeTextures--;let e=this.freeTextures.get(i).shift();return this.usedTextures.get(i).push(e),e}this.numBytesAllocated+=a;let s=this.device.createTexture({size:[e,t],format:r,usage:n});return this.usedTextures.get(i).push(s),s}releaseTexture(e){if(0===this.freeTextures.size)return;let t=e.width,r=e.height,n=e.format,a=f1(t,r,n,e.usage);this.freeTextures.has(a)||this.freeTextures.set(a,[]),this.freeTextures.get(a).push(e),this.numFreeTextures++,this.numUsedTextures--;let i=this.usedTextures.get(a),s=i.indexOf(e);if(s<0)throw Error("Cannot release a texture that was never provided by this texture manager");i.splice(s,1);let o=t*r*f2(n);this.numBytesUsed-=o}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.usedTextures.forEach((e,t)=>{e.forEach(e=>{e.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function f1(e,t,r,n){return`${e}_${t}_${r}_${n}`}function f2(e){if("rgba8unorm"===e)return 16;throw Error(`${e} is not supported!`)}const f3=(e,t,r)=>"int32"===r?`atomicAdd(${e}, bitcast<i32>(${t}));`:`
          {
            var oldValue = 0;
            loop {
              let newValueF32 = bitcast<f32>(oldValue) + (${t});
              let newValue = bitcast<i32>(newValueF32);
              let res = atomicCompareExchangeWeak(${e}, oldValue, newValue);
              if res.exchanged {
                break;
              }
              oldValue = res.old_value;
            }
          }`;(w4=kf||(kf={}))[w4.FROM_PIXELS=0]="FROM_PIXELS",w4[w4.DRAW=1]="DRAW";const f4=(e,t="f32")=>{switch(e){case 1:return`${t}`;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw Error(`${e}-component ${t} is not supported.`)}};function f6(e){if(e<=1)return"i32";if(2===e)return"vec2<i32>";if(3===e)return"vec3<i32>";if(4===e)return"vec4<i32>";if(5===e)return"vec5";else if(6===e)return"vec6";else throw Error(`GPU for rank ${e} is not yet supported`)}function f5(e){if(0===e)return"x";if(1===e)return"y";if(2===e)return"z";if(3===e)return"w";if(4===e)return"u";else if(5===e)return"v";else throw Error(`Index ${e} is not yet supported`)}function f8(...e){let t;switch(e.length){case 0:t=`
        fn main()
      `;break;case 1:t=`
        fn main(${e[0]} : i32)
      `;break;default:throw Error("Unreachable")}return t}function f7(e,t){var r;return`
     ${r=t,`
  @compute @workgroup_size(${r.workgroupSize[0]}, ${r.workgroupSize[1]}, ${r.workgroupSize[2]})
`}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(workgroup_id) WorkgroupId : vec3<u32>,
                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
        localId = LocalId;
        localIndex = LocalIndex;
        globalId = GlobalId;
        numWorkgroups = NumWorkgroups;
        workgroupId = WorkgroupId;
        ${e?"main(getGlobalIndex());":"main();"};
      }
    `}const f9=`
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);
    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);
  }
`,me=`
  fn isinf(val: f32) -> bool {
    return abs(val) == uniforms.INFINITY;
  }
`;function mt(e,t=""){let r,n=e.length,a=""!==t?`get${t.charAt(0).toUpperCase()+t.slice(1)}CoordsFromIndex`:"getCoordsFromIndex",i=""!==t?`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides`:"outShapeStrides";if(n<=1)return`fn ${a}(index : i32) -> i32 { return index; }`;let s=ny.computeStrides(e),o=f6(n),l=[];for(let e=0;e<n;e++)l.push(`d${e}`);return 1===s.length?`    fn ${a}(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.${i}; let d1 = index - d0 * uniforms.${i};
      return vec2<i32>(d0, d1);
    }`:(r="var index2 = index;"+s.map((e,t)=>{let r=`let ${l[t]} = index2 / uniforms.${i}.${f5(t)}`,n=t===s.length-1?`let ${l[t+1]} = index2 - ${l[t]} * uniforms.${i}.${f5(t)}`:`index2 = index2 - ${l[t]} * uniforms.${i}.${f5(t)}`;return`${r}; ${n};`}).join(""),`
    fn ${a}(index : i32) -> ${o} {
      ${r}
      return ${o}(${l.join(",")});
    }
  `)}function mr(e){return 1===e.dispatch[1]&&1===e.dispatch[2]}function mn(e,t=1){if("float32"===e)return f4(t,"f32");if("int32"===e||"bool"===e)return f4(t,"i32");throw Error(`type ${e} is not supported.`)}function ma(e){return!(e.dispatchLayout.hasOwnProperty("y")&&0!==e.dispatchLayout.y.length||e.dispatchLayout.hasOwnProperty("z")&&0!==e.dispatchLayout.z.length)}var mi={};N(mi,"tilesFitEvenlyIntoShape",()=>mo),N(mi,"computeDispatch",()=>ml),N(mi,"computeWorkgroupInfoForMatMul",()=>mu),N(mi,"computeWorkgroupSizeForConv2d",()=>mh),N(mi,"computeWorkPerThreadForConv2d",()=>mp),N(mi,"flatDispatchLayout",()=>md),N(mi,"GPUBytesPerElement",()=>mc),N(mi,"isWebGPUSupported",()=>mf),N(mi,"assertNotComplex",()=>mm),N(mi,"MatMulProgramType",()=>km);const ms=e=>{let t=1;for(let r=0;r<e.length;r++)t*=e[r];return t};function mo(e,t){if(e.length!==t.length)throw Error(`Cannot compute whether rank ${e.length} tiles fit evenly into rank ${t.length} shape - ranks must match.`);return t.every((t,r)=>t%e[r]==0)}function ml(e,t,r=[1,1,1],n=[1,1,1]){let[a,i,s]=[Math.ceil(ms(e.x.map(e=>t[e]))/(r[0]*n[0])),e.y?Math.ceil(ms(e.y.map(e=>t[e]))/(r[1]*n[1])):1,e.z?Math.ceil(ms(e.z.map(e=>t[e]))/(r[2]*n[2])):1];return[a,i,s]}function mu(e,t,r,n=!1){let a=[8,8,1],i=[4,4,1];return!n&&(e<=8&&(i[1]=1),t<=16&&r<=16&&(a[0]=4)),{workgroupSize:a,elementsPerThread:i}}function mh(e,t,r=!1){if(r)return[8,8,1];let n=ms(e.x.map(e=>t[e])),a=ms(e.y.map(e=>t[e]));return n<=4?[4,16,1]:a<=4?[16,4,1]:[16,16,1]}function mp(e,t,r=!1){if(r)return[4,4,1];let n=ms(e.x.map(e=>t[e])),a=ms(e.y.map(e=>t[e]));return n<=4?[1,2,1]:a<=4?[2,1,1]:[2,2,1]}function md(e){return{x:e.map((e,t)=>t)}}function mc(e){if("float32"===e||"int32"===e||"bool"===e||"string"===e)return 4;if("complex64"===e)return 8;throw Error(`Unknown dtype ${e}`)}function mf(){return!!("undefined"!=typeof globalThis&&globalThis.navigator&&globalThis.navigator.gpu)}function mm(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&ny.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGPU backend.`)})}(w6=km||(km={}))[w6.MatMulReduceProgram=0]="MatMulReduceProgram",w6[w6.MatMulSplitKProgram=1]="MatMulSplitKProgram",w6[w6.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",w6[w6.MatMulPackedProgram=3]="MatMulPackedProgram",w6[w6.MatMulMax=4]="MatMulMax";const mg=e_.getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD");class my extends D{nextDataId(){return my.nextDataId++}constructor(e,t){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchCountInPass=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.queryResolveBuffer=null,this.querySet=null,this.querySetCount=2,this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,this.hasReadSyncWarned=!1,this.hasTimestampQueryWarned=!1,!mf())throw Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.commandEncoder=null,this.computePassEncoder=null,this.adapterInfo=new fQ(t),this.supportTimestampQuery=this.device.features.has("timestamp-query"),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new fJ(this.device),this.textureManager=new f0(this.device),this.tensorMap=new _(this,aN),e_.getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}floatPrecision(){return 32}disposeData(e,t=!1){if(!this.tensorMap.has(e))return!0;let r=this.tensorMap.get(e);return t?r.refCount=0:r.refCount--,!(r.refCount>0)&&((null!=r.complexTensorInfos&&(this.disposeData(r.complexTensorInfos.real.dataId),this.disposeData(r.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(e))?this.tensorDataPendingDisposal.push(e):(this.releaseResource(e),this.tensorMap.delete(e)),!0)}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){let t=this.tensorMap.get(e);if(t&&t.resource){if(t.external){t.resource=null;return}t.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(t.resource):t.resource instanceof GPUTexture&&this.textureManager.releaseTexture(t.resource),t.resource=null}}refCount(e){return this.tensorMap.has(e)?this.tensorMap.get(e).refCount:0}incRef(e){let t=this.tensorMap.get(e);t.refCount++}decRef(e){if(this.tensorMap.has(e)){let t=this.tensorMap.get(e);t.refCount--}}write(e,t,r){if("complex64"===r&&null!=e)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.tensorMap.set(n,{dtype:r,shape:t,values:e,refCount:1}),n}move(e,t,r,n,a){if("complex64"===n)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:n,shape:r,values:t,refCount:a})}submitQueue(){this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(e=>{this.releaseResource(e),this.tensorMap.delete(e)}),this.uniformPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e)),this.stagingPendingDisposal.forEach(e=>this.bufferManager.releaseBuffer(e,!1)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())}endComputePassEncoder(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}async checkCompileCompletionAsync(){let e;try{e=await Promise.all(Object.values(this.pipelineCache))}catch(e){throw Error(e.message)}Object.keys(this.pipelineCache).map((t,r)=>{this.pipelineCache[t]=e[r]})}async getBufferData(e){if(e_.getBool("WEBGPU_ENGINE_COMPILE_ONLY"))return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),null;let t=e.size,r=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,r,0,t),this.submitQueue(),await r.mapAsync(GPUMapMode.READ);let n=r.getMappedRange().slice(0);return r.unmap(),null!=r&&this.bufferManager.releaseBuffer(r),e_.getBool("WEBGPU_USE_PROFILE_TOOL")&&(ny.assert(void 0!==this.dummyContext,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),n}convertAndCacheOnCPU(e,t){let r=this.tensorMap.get(e);return r.values=t,r.values}readSync(e){let t=this.tensorMap.get(e),{values:r,complexTensorInfos:n}=t;if(null!=r||"string"===t.dtype)return r;if("complex64"===t.dtype){let t=this.readSync(n.real.dataId),r=this.readSync(n.imag.dataId),a=ny.convertBackendValuesAndArrayBuffer(or.mergeRealAndImagArrays(t,r).buffer,"float32");return this.convertAndCacheOnCPU(e,a),a}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));let a=["opaque","premultiplied"],i=t.resource,s=i.size;ny.assert(s%4==0,()=>"Because there is 4 bytes for one pixel, buffer size must be multiple of 4.");let o=s/4,l=new ArrayBuffer(s),u=a.map(e=>new OffscreenCanvas(256,256)),h=new OffscreenCanvas(256,256);this.endComputePassEncoder(),u.map((e,t)=>{let r=e.getContext("webgpu");return r.configure({device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:a[t]}),r.getCurrentTexture()}).map((e,t)=>{let r=(r,n,s)=>{this.ensureCommandEncoderReady(),this.commandEncoder.copyBufferToTexture({buffer:i,bytesPerRow:1024,offset:s},{texture:e},{width:r,height:n}),this.submitQueue();let o=h.getContext("2d",{willReadFrequently:!0});o.clearRect(0,0,r,n),o.drawImage(u[t],0,0);let p=o.getImageData(0,0,r,n).data,d=a[t],c=new Uint8ClampedArray(l,s,r*n*4);for(let e=0;e<c.length;e+=4)if("premultiplied"===d)c[e+3]=p[e+3];else{let t=p[e];c[e]=p[e+2],c[e+1]=p[e+1],c[e+2]=t}},n=Math.floor(o/65536),s=256,p=256,d=0;for(let e=0;e<n;e++)r(s,p,d),d+=262144;let c=o%65536;(p=Math.floor(c/256))>0&&(r(s,p,d),d+=1024*p),(s=c%256)>0&&r(s,1,d)});let p=ny.convertBackendValuesAndArrayBuffer(l,t.dtype);return this.convertAndCacheOnCPU(e,p),p}async read(e){let t;if(!this.tensorMap.has(e))throw Error(`Tensor ${e} was not registered!`);let r=this.tensorMap.get(e),{values:n}=r;if(null!=n)return n;if("complex64"===r.dtype){let e=await Promise.all([this.read(r.complexTensorInfos.real.dataId),this.read(r.complexTensorInfos.imag.dataId)]),n=e[0],a=e[1];t=or.mergeRealAndImagArrays(n,a)}else{let e=await this.getBufferData(r.resource);t=ny.convertBackendValuesAndArrayBuffer(e,r.dtype)}return this.convertAndCacheOnCPU(e,t),t}copyBuffer(e){let t=e.size,r=e.usage,n=this.bufferManager.acquireBuffer(t,r);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,n,0,t),this.submitQueue(),n}createTensorFromGPUData(e,t,r){let n=e.buffer;if("complex64"===r)throw Error("Cannot write to a complex64 dtype. ");let a={id:this.nextDataId()};this.tensorMap.set(a,{dtype:r,shape:t,values:null,refCount:1,external:e.zeroCopy});let i=this.tensorMap.get(a),s=mc(i.dtype)*ny.sizeFromShape(i.shape);if(e.buffer.size<s)throw Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${s})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!=(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return!0!==e.zeroCopy&&(n=this.copyBuffer(n)),i.resource=n,aN.makeTensorFromDataId(a,t,r,this)}readToGPU(e){let{values:t,dtype:r,shape:n,resource:a}=this.tensorMap.get(e);if("complex64"===r)throw Error("Does not support reading buffer for complex64 dtype.");if(null==a)if(null!=t)throw Error("Data is not on GPU but on CPU.");else throw Error("There is no data on GPU or CPU.");let i=a.size,s=a.usage,o=this.bufferManager.acquireBuffer(i,s);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,o,0,i),this.submitQueue();let l=this.makeTensorInfo(n,r),u=aN.makeTensorFromTensorInfo(l);return this.tensorMap.get(l.dataId).resource=o,{tensorRef:u,buffer:o}}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let r=t.map(e=>ny.decodeString(e));return so(e.shape,e.dtype,r)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return so(e.shape,e.dtype,t)}async time(e){this.supportTimestampQuery||this.hasTimestampQueryWarned||(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --enable-dawn-features=allow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),this.hasTimestampQueryWarned=!0);let t=this.activeTimers,r=[],n=!1;null==this.programTimersStack?(this.programTimersStack=r,n=!0):this.activeTimers.push(r),this.activeTimers=r,e();let a=ny.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),i=ny.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,n&&(this.programTimersStack=null);let s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},o=await Promise.all(a);return s.kernelMs=ny.sum(o),s.getExtraProfileInfo=()=>o.map((e,t)=>({name:i[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,s}makeTensorInfo(e,t,r){return"string"===t&&null!=r&&r.length>0&&ny.isString(r[0])&&(r=r.map(e=>ny.encodeString(e))),{dataId:this.write(r,e,t),shape:e,dtype:t}}tensorToBinding(e){if(!e)return null;let t=this.tensorMap.get(e.dataId).resource;return t instanceof GPUBuffer?{buffer:t}:t instanceof GPUTexture?t.createView():t}uploadToGPU(e){let t,r=this.tensorMap.get(e);if(null!=r.resource)return;let n=mc(r.dtype)*ny.sizeFromShape(r.shape),a=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(r.values){if("unmapped"===(t=this.bufferManager.acquireBuffer(n,a,!0)).mapState){let e=this.bufferManager.acquireBuffer(n,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),a=e.getMappedRange();"int32"===r.dtype||"bool"===r.dtype?new Int32Array(a).set(r.values):new Float32Array(a).set(r.values),e.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(e,0,t,0,n),this.stagingPendingDisposal.push(e)}else{let e=t.getMappedRange();"int32"===r.dtype||"bool"===r.dtype?new Int32Array(e).set(r.values):new Float32Array(e).set(r.values),t.unmap()}r.values=null}else t=this.bufferManager.acquireBuffer(n,a);r.resource=t}makeUniforms(e){let t=0,r=0,n=[],a=1;e.forEach(e=>{let i;switch(0===e.data.length&&(e.data=[1]),e.data.length){case 1:i=4;break;case 2:i=8;break;case 3:case 4:case 5:case 6:i=16;break;default:ny.assert(!1,()=>`Unsupported ${e.data.length}D shape`)}(5===r||6===r)&&(i=16),i>a&&(a=i),t=Math.ceil(t/i)*i,r=e.data.length,n.push(t),t+=4*e.data.length});let i=new ArrayBuffer(t=Math.ceil(t/a)*a);e.forEach((e,t)=>{let r=n[t];"int32"===e.type?new Int32Array(i,r,e.data.length).set(e.data):"uint32"===e.type?new Uint32Array(i,r,e.data.length).set(e.data):new Float32Array(i,r,e.data.length).set(e.data)});let s=this.bufferManager.acquireBuffer(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(s,0,i,0,t),this.uniformPendingDisposal.push(s),{offset:0,size:t,buffer:s}}runWebGPUProgram(e,t,r,n,a){if(a||(a=this.makeTensorInfo(e.outputShape,r)),0===ny.sizeFromShape(a.shape))return this.tensorMap.get(a.dataId).values=ny.getTypedArrayFromDType(a.dtype,0),a;this.uploadToGPU(a.dataId),e.dispatch=((e,t)=>{let r=e.limits.maxComputeWorkgroupsPerDimension,n=t.dispatchLayout,a=t.dispatch;if(a.every(e=>e<=r))return a;ny.assert(a[0]>r&&void 0===n.y&&void 0===n.z,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let i=Math.ceil(Math.sqrt(a[0]));return i>r?(i=Math.ceil(Math.cbrt(a[0])),ny.assert(i<=r,()=>"Total dispatch size exceeds WebGPU maximum."),[i,i,i]):[i,i,1]})(this.device,e);let i=t.map((t,r)=>{if("complex64"===t.dtype)throw Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(t.dataId),{dtype:this.tensorMap.get(t.dataId).dtype,shape:t.shape,name:e.variableNames[r]}});e.shaderKey=function(e,t,r){let n=e.shaderKey;if(null!=e.pixelsOpType)return n;let a=[],i=[];t.forEach(e=>{a.push(e.shape),i.push(e.dtype)}),a.push(r.shape),i.push(r.dtype);let s=t.map(e=>or.getBroadcastDims(e.shape,r.shape)),o=t.map(e=>ny.arraysEqual(e.shape,r.shape)).join("_"),l=s.map(e=>e.join("_")).join(";"),u=mr(e)?"flatDispatch":"";return n+("_"+(e.workgroupSize?e.workgroupSize.join(","):"")+a.map(e=>e.length).join(",")+i.join(",")+e.variableNames.join(",")+l+o+u)}(e,i,a);let s=e_.getBool("WEBGPU_ENGINE_COMPILE_ONLY");return e.shaderKey in this.pipelineCache||(this.pipelineCache[e.shaderKey]=((e,t,r,n,a)=>{let i=function(e,t,r){var n;let a,i=[],s=r.workgroupSize[0]*r.workgroupSize[1]*r.workgroupSize[2];if(r.outputComponent=r.outputComponent?r.outputComponent:1,i.push(`

      var<private> localId: vec3<u32>;
      var<private> localIndex: u32;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;
      var<private> workgroupId: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${mr(r)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +
                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${s}u +
                localIndex);
        `}
      }
    `),null!=r.pixelsOpType){let n=r.pixelsOpType===kf.FROM_PIXELS?`@group(0) @binding(0) var<storage, read_write> result: array<${mn(t.dtype,r.outputComponent)}>;`:`@group(0) @binding(1) var<storage, read> inBuf : array<${mn(e[0].dtype,r.outputComponent)}>;`,a=3===t.shape.length?"vec2<i32>":"i32";i.push(`
        struct Uniform {
          outShapeStrides : ${a},
          size            : i32,
          numChannels     : i32,
          alpha           : f32,
        };

        ${n}
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `);let s=ma(r);return[f9,i.join("\n"),mt(t.shape),r.getUserCode(),f7(s,r)].join("\n")}let o="struct Uniforms { NAN : f32, INFINITY : f32, ";r.variableNames.forEach((t,r)=>{let n=f6(e[r].shape.length);o+=`${t.charAt(0).toLowerCase()+t.slice(1)}Shape : ${n}, `,a=f6(e[r].shape.length-1),o+=`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides: ${a}, `});let l=f6(t.shape.length);o+=`outShape : ${l}, `,a=f6(t.shape.length-1),o+=`
         outShapeStrides: ${a}, `,r.size&&(o+="size : i32, "),r.uniforms&&(o+=r.uniforms),o+="};",o=(n=o.replace(/(\w+)\s*:\s*vec(5|6)/g,e=>"@align(16) "+e)).replace(/vec(5|6)\s*,\s*(\w+)/g,(e,t,r)=>`vec${t}, @align(16) ${r}`),i.push(o),r.atomic?i.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `):i.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${mn(t.dtype,r.outputComponent)}>;
    `),r.variableNames.forEach((t,n)=>{i.push(`
      @group(0) @binding(${1+n}) var<storage, read> ${t}: array<${r.variableComponents?mn(e[n].dtype,r.variableComponents[n]):mn(e[n].dtype,r.outputComponent)}>;
        `)}),""!==o&&i.push(`
      @group(0) @binding(${1+r.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);let u=function(e,t){let{x:r,y:n=[],z:a=[]}=t,i=e.length,s=r.length+n.length+a.length;if(s!==i)return"";if(r.length===i){let e=f6(i);return`fn getOutputCoords() -> ${e}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `}let o="",l=[r,n,a];for(let e=0;e<l.length;e++){let t=l[e];if(0!==t.length)if(1===t.length)o+=`let d${t[0]} = i32(globalId[${e}]);`;else{let r=function(e,t){if(Math.max(...e)>5)throw Error("Cannot symbolically compute strides for rank > 6 tensor.");let r=e.length,n=e.map(e=>`${t}.${"xyzwuv"[e]}`),a=Array(r-1);a[r-2]=n[r-1];for(let e=r-3;e>=0;--e)a[e]=`(${a[e+1]} * ${n[e+1]})`;return a}(t,"uniforms.outShape");o+=`var index${e} = i32(globalId[${e}]);`;for(let n=0;n<r.length;n++)o+=`let d${t[n]} = index${e} / ${r[n]};`,n===r.length-1?o+=`let d${t[n+1]} = index${e} - d${t[n]} * ${r[n]};`:o+=`index${e} = index${e} - d${t[n]} * ${r[n]};`}}let u=[];for(let e=0;e<s;e++)u.push(`d${e}`);let h=f6(s),p=`fn getOutputCoords() -> ${h} {
  ${o}
`;return 0===u.length?p+=`return ${h}(0); }`:p+=`return ${h}(${u.join(",")}); }`,p}(t.shape,r.dispatchLayout),h=[f9,i.join("\n")+me,mt(t.shape),u,function(e){let t="";switch(e){case 0:case 1:t+=`
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;break;case 2:t+=`
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;break;case 3:t+=`
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;break;case 4:t+=`
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;break;case 5:t+=`
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;break;case 6:t+=`
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;break;default:ny.assert(!1,()=>`Unsupported ${e}D shape`)}return t}(t.shape.length)];r.atomic||h.push(function(e,t,r){let n=e.length,a=mn(t,r),i=`fn setOutputAtIndex(flatIndex : i32, value : ${f4(r)}) {
      result[flatIndex] = ${a}(value);
    }

    fn setOutputAtIndexI32(flatIndex : i32, value : ${f4(r,"i32")}) {
      result[flatIndex] = ${a}(value);
    }
    `;if(n>=2){let e=["d0","d1","d2","d3","d4","d5"].slice(0,n),t=f6(n);i+=`
      fn setOutputAtCoords(${e.map(e=>`${e} : i32`).join(", ")}, value : ${f4(r)}) {
        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));
        setOutputAtIndex(flatIndex${1===r?"":` / ${r}`}, value);
      }
      fn setOutputAtCoordsI32(${e.map(e=>`${e} : i32`).join(", ")}, value : ${f4(r,"i32")}) {
        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));
        setOutputAtIndexI32(flatIndex${1===r?"":` / ${r}`}, value);
      }
    `}return i}(t.shape,t.dtype,r.outputComponent)),r.variableNames.forEach((t,r)=>{h.push(`${mt(e[r].shape,t)}`)});let p=e.map((e,n)=>{var a,i,s,o;let l;return a=e,i=t.shape,s=r.variableComponents?r.variableComponents[n]:r.outputComponent,o=r.dispatchLayout.x.length===t.shape.length,l=function(e,t){let r=e.name,n=e.shape.length,a=f6(n),i="get"+r.charAt(0).toUpperCase()+r.slice(1),s=["d0","d1","d2","d3","d4","d5"].slice(0,n),o=s.map(e=>`${e} : i32`).join(", ");if(n<1)return`
      fn ${i}() -> ${f4(t)} {
        return ${f4(t)}(${r}[0]);
      }
    `;let l=`uniforms.${r.charAt(0).toLowerCase()+r.slice(1)}Shape`,u=`${n}D`;return 0===n&&(u="1D"),`
    fn ${i}(${o}) -> ${f4(t)} {
      return ${f4(t)}(${r}[getIndexFromCoords${u}(${a}(${s.join(",")}),
        ${l})${1===t?"":` / ${t}`}]);
    }
   `}(a,s),a.shape.length<=i.length&&(l+=function(e,t,r,n){let a=e.name,i=a.charAt(0).toUpperCase()+a.slice(1),s="get"+i+"ByOutput",o=e.shape.length,l=t.length,u=f6(l);if(ny.arraysEqual(e.shape,t)&&n)return`
    fn ${s}Index(globalIndex : i32) -> ${f4(r)} {
      return ${f4(r)}(${a}[globalIndex]);
    }

    fn ${s}Coords(coords : ${u}) -> ${f4(r)} {
      return ${f4(r)}(${a}[${l>1?"getOutputIndexFromCoords(coords)":"coords"}${1===r?"":` / ${r}`}]);
    }
    `;let h=or.getBroadcastDims(e.shape,t),p=l-o,d="";if(0===o)return`
    fn ${s}Index(globalIndex : i32) -> ${f4(r)}{
      return get${i}();
    }

    fn ${s}Coords(coords : ${u}) -> ${f4(r)}{
      return get${i}();
    }
  `;d=l<2&&h.length>=1?"coords = 0;":h.map(e=>`coords.${f5(e+p)} = 0;`).join("\n");let c="";if(l<2&&o>0)c="coords";else if(l>1){let t=f6(o),r=e.shape.map((e,t)=>`coords.${f5(t+p)}`).join(", ");c=`${t}(${r})`}else c="coords";let f=`uniforms.${a.charAt(0).toLowerCase()+a.slice(1)}Shape`,m=`${o}D`;return`
  fn ${s}Index(globalIndex : i32) -> ${f4(r)} {
    var coords = getCoordsFromIndex(globalIndex);
    ${d}
    return ${f4(r)}(${a}[getIndexFromCoords${m}(${c}, ${f})${1===r?"":` / ${r}`}]);
  }

  fn ${s}Coords(coordsIn : ${u}) -> ${f4(r)} {
    var coords = coordsIn;
    ${d}
    return ${f4(r)}(${a}[getIndexFromCoords${m}(${c}, ${f})${1===r?"":` / ${r}`}]);
  }
`}(a,i,s,o)),l}).join("\n");h.push(p),h.push(r.getUserCode());let d=ma(r);return h.push(f7(d,r)),h.join("\n")}(r,{dtype:n.dtype,shape:n.shape},t),s=e.createShaderModule({code:i,label:t.constructor.name}),o=e_.get("WEBGPU_PRINT_SHADER");if(""!==o){let e=(o=o.toLowerCase()).split(",");("all"===o||e.some(e=>t.shaderKey.toLowerCase().includes(e)))&&(console.group(t.shaderKey),console.debug(i),console.groupEnd())}return a?e.createComputePipelineAsync({compute:{module:s,entryPoint:"_start"},label:t.constructor.name,layout:"auto"}):e.createComputePipeline({compute:{module:s,entryPoint:"_start"},label:t.constructor.name,layout:"auto"})})(this.device,e,i,a,s)),e.pipeline=this.pipelineCache[e.shaderKey],s||this.recordAndSubmit(e,a,t,n),a}recordAndSubmit(e,t,r,n){if(e.pipeline instanceof Promise)throw Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");let a=[],i=[],s="int32";if(null==e.pixelsOpType){a.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]});let e="int32";(i=r.concat(t).map(e=>e.shape)).map(t=>{a.push({type:e,data:t});let r=ny.computeStrides(t);a.push({type:e,data:r})})}else{let e=ny.computeStrides(t.shape);a.push({type:s,data:e})}if(e.size){let t=ny.sizeFromShape(e.outputShape);a.push({type:s,data:[e.outputComponent?t/e.outputComponent:t]})}n&&(a=[...a,...n]);let o=[this.tensorToBinding(t),...r.map(e=>this.tensorToBinding(e)),this.makeUniforms(a)];r.forEach(e=>{this.commandQueueOwnedIds.add(e.dataId)}),this.commandQueueOwnedIds.add(t.dataId);let l=this.device.createBindGroup({layout:e.pipeline.getBindGroupLayout(0),entries:o.map((e,t)=>({binding:t,resource:e}))}),u=null!=this.activeTimers;this.ensureCommandEncoderReady();let h={};u&&this.supportTimestampQuery?(this.endComputePassEncoder(),null==this.querySet&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),h.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1},this.computePassEncoder=this.commandEncoder.beginComputePass(h)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(h)),this.computePassEncoder.setPipeline(e.pipeline),this.computePassEncoder.setBindGroup(0,l),this.computePassEncoder.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),this.dispatchCountInPass++,(u||e_.get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass||e.pixelsOpType===kf.DRAW)&&(this.endComputePassEncoder(),u?this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime()}):this.submitQueue())}async getQueryTime(){if(!this.supportTimestampQuery)return 0;null==this.queryResolveBuffer&&(this.queryResolveBuffer=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),this.commandEncoder.resolveQuerySet(this.querySet,0,this.querySetCount,this.queryResolveBuffer,0);let e=this.bufferManager.acquireBuffer(8*this.querySetCount,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,8*this.querySetCount),this.submitQueue(),await e.mapAsync(GPUMapMode.READ);let t=new BigUint64Array(e.getMappedRange()),r=Number(t[1]-t[0])/1e6;return e.unmap(),this.bufferManager.releaseBuffer(e),r}shouldExecuteOnCPU(e,t=mg){return e_.getBool("WEBGPU_CPU_FORWARD")&&e.every(e=>null==this.tensorMap.get(e.dataId).resource&&ny.sizeFromShape(e.shape)<t)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(null!=this.querySet&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}}my.nextDataId=0,mf()&&aX("webgpu",async()=>{let e={powerPreference:e_.get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},t=await navigator.gpu.requestAdapter(e),r={},n=[];t.features.has("timestamp-query")&&n.push("timestamp-query"),t.features.has("bgra8unorm-storage")&&n.push(["bgra8unorm-storage"]),r.requiredFeatures=n;let a=t.limits;return r.requiredLimits={maxComputeWorkgroupStorageSize:a.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:a.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:a.maxStorageBufferBindingSize,maxBufferSize:a.maxBufferSize,maxComputeWorkgroupSizeX:a.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:a.maxComputeInvocationsPerWorkgroup},new my(await t.requestDevice(r),"info"in t?t.info:"requestAdapterInfo"in t?await t.requestAdapterInfo():void 0)},3),(w5=kg||(kg={}))[w5.ADD=0]="ADD",w5[w5.ATAN2=1]="ATAN2",w5[w5.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",w5[w5.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",w5[w5.DIV=4]="DIV",w5[w5.ELU_DER=5]="ELU_DER",w5[w5.EQUAL=6]="EQUAL",w5[w5.FLOOR_DIV=7]="FLOOR_DIV",w5[w5.GREATER=8]="GREATER",w5[w5.GREATER_EQUAL=9]="GREATER_EQUAL",w5[w5.LESS=10]="LESS",w5[w5.LESS_EQUAL=11]="LESS_EQUAL",w5[w5.LOGICAL_AND=12]="LOGICAL_AND",w5[w5.LOGICAL_OR=13]="LOGICAL_OR",w5[w5.MAX=14]="MAX",w5[w5.MIN=15]="MIN",w5[w5.MOD=16]="MOD",w5[w5.MUL=17]="MUL",w5[w5.NOT_EQUAL=18]="NOT_EQUAL",w5[w5.POW=19]="POW",w5[w5.PRELU=20]="PRELU",w5[w5.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",w5[w5.SUB=22]="SUB";const mb=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a == b);
`,mx=`
  let remainder =
      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));
  let quotient = (a - remainder) / b;
  let resultTemp =
      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));
`,mv=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a > b);
`,mw=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a >= b);
`,mk=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a < b);
`,mS=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a <= b);
`,mI=`return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`,mC=`return min(vec4<f32>(a >= vec4<f32>(1.0)) +
  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`,mN=`
  let isNaN = b == 0.;
  var resultTemp = a % b;
  resultTemp = select((resultTemp + b) % b, resultTemp,
      (a < 0. && b < 0.) || (a >= 0. && b > 0.));
`,mT=`
  let isNaN = !vec4<bool>(b);
  var resultTemp = vec4<f32>(a % b);
  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {
    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];
  }
  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {
    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];
  }
  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {
    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];
  }
  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {
    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];
  }
`,m$=`
  var resultTemp = f32(a != b);
  let valueForNaN = 1.0;
`,mE=`
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
`,mR=`
  let isNaN = a < 0.0 && floor(b) < b;
  if (b == 0.0) {
    return 1.0;
  }
  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),
      round(abs(b) % 2.0) != 1.0);
`,mA=`
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);
`,mF=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`;function m_(e,t){let r;do{let n,a,i;switch(e){case kg.ATAN2:r="let resultTemp = atan2(a, b);";break;case kg.MAX:r="let resultTemp = max(a, b);";break;case kg.MIN:r="let resultTemp = min(a, b);";break;case kg.MOD:r=t?mT:mN;break;case kg.NOT_EQUAL:r=t?mE:m$;break;case kg.POW:r=t?mA:mR;break;default:continue}return t?(n="isnanVec4",a="vec4<f32>",i="vec4<bool>"):(n="isnan",a="f32",i="bool"),`
      let aIsNaN = ${n}(a);
      let aPostLegalization = select(a, ${a}(42), aIsNaN);
      let bIsNaN = ${n}(b);
      let bPostLegalization = select(b, ${a}(42), bIsNaN);
      let isNaN = false;
      let valueForNaN = uniforms.NAN;
      {
        let a = aPostLegalization;
        let b = bPostLegalization;
        ${r}
        return select(
            resultTemp, ${a}(valueForNaN),
            ${i}(isNaN) | aIsNaN | bIsNaN);
      }
    `}while(!1)switch(e){case kg.ADD:r="let resultTemp = a + b;";break;case kg.COMPLEX_MULTIPLY_IMAG:r="let resultTemp = areal * bimag + aimag * breal;";break;case kg.COMPLEX_MULTIPLY_REAL:r="let resultTemp = areal * breal - aimag * bimag;";break;case kg.DIV:r="let resultTemp = a / b;";break;case kg.ELU_DER:r="let resultTemp = select(a * (b + 1.0), a, b >= b - b);";break;case kg.EQUAL:r=mb;break;case kg.FLOOR_DIV:r=mx;break;case kg.GREATER:r=mv;break;case kg.GREATER_EQUAL:r=mw;break;case kg.LESS:r=mk;break;case kg.LESS_EQUAL:r=mS;break;case kg.LOGICAL_AND:return t?mI:"return f32(a >= 1.0 && b >= 1.0);";case kg.LOGICAL_OR:return t?mC:"return f32(a >= 1.0 || b >= 1.0);";case kg.MUL:r="let resultTemp = a * b;";break;case kg.PRELU:return t?mF:"if (a < 0.0) { return b * a; }  return a;";case kg.SQUARED_DIFFERENCE:r="let resultTemp = (a - b) * (a - b);";break;case kg.SUB:r="let resultTemp = a - b;"}return`
    ${r}
    return resultTemp;
  `}(w8=ky||(ky={}))[w8.ABS=0]="ABS",w8[w8.ACOS=1]="ACOS",w8[w8.ACOSH=2]="ACOSH",w8[w8.ASIN=3]="ASIN",w8[w8.ASINH=4]="ASINH",w8[w8.ATAN=5]="ATAN",w8[w8.ATANH=6]="ATANH",w8[w8.CEIL=7]="CEIL",w8[w8.COS=8]="COS",w8[w8.COSH=9]="COSH",w8[w8.ELU=10]="ELU",w8[w8.ERF=11]="ERF",w8[w8.EXP=12]="EXP",w8[w8.EXPM1=13]="EXPM1",w8[w8.FLOOR=14]="FLOOR",w8[w8.IS_FINITE=15]="IS_FINITE",w8[w8.IS_INF=16]="IS_INF",w8[w8.IS_NAN=17]="IS_NAN",w8[w8.LINEAR=18]="LINEAR",w8[w8.LOG=19]="LOG",w8[w8.LOG1P=20]="LOG1P",w8[w8.LOGICAL_NOT=21]="LOGICAL_NOT",w8[w8.NEG=22]="NEG",w8[w8.RELU=23]="RELU",w8[w8.RELU6=24]="RELU6",w8[w8.LEAKYRELU=25]="LEAKYRELU",w8[w8.RECIPROCAL=26]="RECIPROCAL",w8[w8.ROUND=27]="ROUND",w8[w8.RSQRT=28]="RSQRT",w8[w8.SELU=29]="SELU",w8[w8.SIGMOID=30]="SIGMOID",w8[w8.SIGN=31]="SIGN",w8[w8.SIN=32]="SIN",w8[w8.SINH=33]="SINH",w8[w8.SOFTPLUS=34]="SOFTPLUS",w8[w8.SQRT=35]="SQRT",w8[w8.SQUARE=36]="SQUARE",w8[w8.STEP=37]="STEP",w8[w8.TAN=38]="TAN",w8[w8.TANH=39]="TANH",w8[w8.TO_INT=40]="TO_INT";const mD=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return acos(a);
`,mO=`
  if (a < 1.) {
    return uniforms.NAN;
  }
  return acosh(a);
`,mM=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return asin(a);
`,mz=`
  if (isnan(a)) {
    return uniforms.NAN;
  }
  return atan(a);
`,mP=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  if (a == 1.) {
    return uniforms.INFINITY;
  }
  if (a == -1.) {
    return -uniforms.INFINITY;
  }
  return atanh(a);
`,mL=`
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`,mB=`
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`,mW=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  let p = ${or.ERF_P};
  let a1 = ${or.ERF_A1};
  let a2 = ${or.ERF_A2};
  let a3 = ${or.ERF_A3};
  let a4 = ${or.ERF_A4};
  let a5 = ${or.ERF_A5};

  let sign = sign(a);
  let absA = abs(a);
  let t = 1.0 / (1.0 + p * absA);
  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));
`,mU=`if (a < 0.0) { return uniforms.NAN; }
  return log(a);`,mV=`
  if (isnan(a)) { return a; }
  return log(1.0 + a);
`,mG=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,mH=`
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`,mj=`
  if (a >= 0.0) {
    return ${or.SELU_SCALE} * a;
  } else {
    return ${or.SELU_SCALEALPHA} * (exp(a) - 1.0);
  }
`,mK=`
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`,mq=`
  let epsilon = 1.1920928955078125e-7;
  let threshold = log(epsilon) + 2.0;

  let too_large = a > -threshold;
  let too_small = a < threshold;
  let exp_a = exp(a);

  if (too_large) {
    return a;
  } else if (too_small) {
    return exp_a;
  } else {
    return log(exp_a + 1.0);
  }
`,mX=`
  if (isnan(a)) {
    return a;
  }

  return select(uniforms.stepAlpha, 1.0, a > 0.0);
`,mY=`
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`;function mZ(e,t){switch(e){case ky.ABS:return"return abs(a);";case ky.ACOS:return mD;case ky.ACOSH:return mO;case ky.ASIN:return mM;case ky.ASINH:return"return asinh(a);";case ky.ATAN:return mz;case ky.ATANH:return mP;case ky.COS:return"return cos(a);";case ky.COSH:return mL;case ky.CEIL:return"return ceil(a);";case ky.ELU:return t?mB:"if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";case ky.ERF:return mW;case ky.EXP:return"return exp(a);";case ky.EXPM1:return"return exp(a) - 1.0;";case ky.FLOOR:return"return floor(a);";case ky.IS_FINITE:return"return f32(!isnan(a) && !isinf(a));";case ky.IS_INF:return"return f32(isinf(a));";case ky.IS_NAN:return"return f32(isnan(a));";case ky.LINEAR:return"return a;";case ky.LOG:return mU;case ky.LOG1P:return mV;case ky.LOGICAL_NOT:return"return f32(!(a >= 1.0));";case ky.NEG:return"return -a;";case ky.LEAKYRELU:return t?mG:"if (a < 0.0) { return uniforms.alpha * a; } return a;";case ky.RECIPROCAL:return"return 1.0 / a;";case ky.RELU:return t?mH:"return select(a, 0.0, a < 0.0);";case ky.RELU6:return t?"return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));":"return clamp(a, 0.0, 6.0);";case ky.ROUND:return"return round(a);";case ky.RSQRT:return"return inverseSqrt(a);";case ky.SELU:return mj;case ky.SIGMOID:return"return 1.0 / (1.0 + exp(-1.0 * a));";case ky.SIGN:return"return sign(a);";case ky.SIN:return"return sin(a);";case ky.SINH:return mK;case ky.SOFTPLUS:return mq;case ky.SQRT:return"return sqrt(a);";case ky.SQUARE:return"return a * a;";case ky.STEP:return mX;case ky.TAN:return"return tan(a);";case ky.TANH:return mY;case ky.TO_INT:return"return f32(i32((a)));";default:throw Error(`BinaryType ${e} is not implemented!`)}}function mQ(e,t=!1,r=!1,n=3){if(null===e)return"";let a="";if("linear"===e)a=mZ(ky.LINEAR);else if("relu"===e)a=mZ(ky.RELU,r);else if("elu"===e)a=mZ(ky.ELU,r);else if("relu6"===e)a=mZ(ky.RELU6,r);else if("prelu"===e)a=m_(kg.PRELU,r);else if("sigmoid"===e)a=mZ(ky.SIGMOID,r);else if("leakyrelu"===e)a=mZ(ky.LEAKYRELU,r);else throw Error(`Activation ${e} has not been implemented for the WebGPU backend.`);let i=f4(r?4:1);return t?`
      fn activation(a : ${i}, coords : vec${n}<i32>) -> ${i} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${a}
      }`:`
      fn activation(a : ${i}, coords : vec${n}<i32>) -> ${i} {
        ${a}
      }`}function mJ(e,t){return`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      ${t?"value = activation(value, coords);":""}
      `}function m0(e,t,r=!1,n=!1,a=!1,i=1){ny.assert(e&&1===i||!e,()=>`transposeA ${e} is not compatible with component size ${i}`);let s=`
      ${e?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}

    `;return`
  fn mm_readA(batch: i32, row: i32, col: i32) -> ${f4(i)} {
    var value = ${f4(i)}(0.0);
    ${r&&a?s:`
    ${e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${s}
    }
    `}
    return value;
  }

  fn mm_readB(batch: i32, row: i32, col: i32) -> ${f4(i)} {
    var value = ${f4(i)}(0.0);
    ${t?"value = getB(batch, col, row);":"value = getB(batch, row, col);"}
    return value;
  }
  `}function m1(e,t,r,n,a=!1,i=!1,s=!1,o=1){return`
  ${m0(r,n,a,i,s,o)}
  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${f4(o)}) {
    ${a&&i?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${mJ(e,t)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `}function m2(e,t,r=!1,n=32,a=!1,i=32,s=!1){let o=t[1]*e[1],l=t[0]*e[0],u=r?o:n,h=r?n:o,p=u/t[0],d=n/t[1],c=e[1],f=e[0];return ny.assert((r&&4===p&&4===e[1]||!r&&(3===p||4===p))&&u%t[0]==0&&n%t[1]==0&&4===e[0],()=>`If transposeA ${r} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.
          Otherwise, innerElementSize ${p} must be 3 or 4.
      tileAWidth ${u} must be divisible by workgroupSize[0]${t[0]}. tileInner ${n} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`),`
  var<workgroup> mm_Asub : array<array<vec${p}<f32>, ${u/p}>, ${h}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${l/e[0]}>, ${n}>;

  ${f8()} {
    let localRow = i32(localId.y);
    let tileRow = localRow * ${c};
    let tileCol = i32(localId.x);

    let globalRow = i32(globalId.y) * ${c};
    let globalCol = i32(globalId.x) * ${f};
    let batch = ${a?"0":"i32(globalId.z)"};
    let batchA = ${a||!s?"batch":"batch % uniforms.aShape[0]"};
    let batchB = ${a||!s?"batch":"batch % uniforms.bShape[0]"};
    let globalRowStart = i32(workgroupId.y) * ${o};

    let numTiles = ${a?`${Math.ceil(i/n)}`:`(uniforms.dimInner - 1) / ${n} + 1`};
    var kStart = ${a?`i32(globalId.z) * ${i}`:"0"};

    var acc: array<vec4<f32>, ${c}>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${d};
    for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${c}; innerRow++) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol * ${p});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRow + innerRow,
          kStart + inputCol * ${p});
        `}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${d}; innerRow++) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);
        }
        kStart = kStart + ${n};
        workgroupBarrier();

        // Compute acc values for a single thread.
        ${((e,t,r,n)=>{if(e)return`
      for (var k = 0; k < ${n}; k++) {
        let BCached0 = mm_Bsub[k][tileCol];
        let ACached0 = mm_Asub[k][localRow];
        for (var i = 0; i < ${r}; i++) {
          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);
        }
      }`;{let e="",a="";for(let r=0;r<t;r++)e+=`let BCached${r} = mm_Bsub[k * ${t} + ${r}][tileCol];`,a+=`acc[i] = fma(BCached${r}, vec4<f32>(ACached[${r}]), acc[i]);`;return`
      for (var k = 0; k < ${n/t}; k++) {
        ${e}
        for (var i = 0; i < ${r}; i++) {
          let ACached = mm_Asub[tileRow + i][k];
          ${a}
        }
      }`}})(r,p,c,n)}
        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < ${c}; innerRow++) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`}const m3=e=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRowStart + inputRow,
          kStart + inputCol);
        `;function m4(e,t,r=!1,n=32,a=!1,i=32,s=!1,o=!1){let l=e[1]*t[1],u=e[0]*t[0],h=r?l:n,p=r?n:l;ny.assert(p%t[1]==0&&h%t[0]==0&&n%t[1]==0,()=>`tileAHight ${p} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}, tileInner ${n} must be divisible by workgroupSize[1]${t[1]}`);let d=p/t[1],c=h/t[0],f=n/t[1],m=e[1],g=e[0],y=s?`
      let localRow = i32(localId.y);
      let localCol = i32(localId.x);
      let globalRowStart = i32(workgroupId.y) * ${l};
      let globalColStart = i32(workgroupId.x) * ${u};

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var inputRow = localRow; inputRow < ${p}; inputRow = inputRow + ${t[1]}) {
          for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {
            ${m3(r)}
          }
        }
        // Load one tile of B into local memory.
        for (var inputRow = localRow; inputRow < ${n}; inputRow = inputRow + ${t[1]}) {
              for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${t[0]}) {
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
              kStart + inputRow,
              globalColStart + inputCol);
          }
        }
        kStart = kStart + ${n};
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ${g}>;
        for (var k = 0; k < ${n}; k++) {
          for (var inner = 0; inner < ${g}; inner++) {
            BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
          }
          for (var innerRow = 0; innerRow < ${m}; innerRow++) {
            let ACached = ${r?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
            for (var innerCol = 0; innerCol < ${g}; innerCol++) {
              acc[innerRow][innerCol] =
                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
            }
          }
        }
        workgroupBarrier();
      }
      for (var innerRow = 0; innerRow < ${m}; innerRow++) {
        let gRow = globalRowStart + localRow + innerRow * ${t[1]};
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          let gCol = globalColStart + localCol + innerCol * ${t[0]};
          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
        }
      }
      `:`
  let tileRow = i32(localId.y) * ${m};
  let tileCol = i32(localId.x) * ${g};

  let globalRow = i32(globalId.y) * ${m};
  let globalCol = i32(globalId.x) * ${g};
  let globalRowStart = i32(workgroupId.y) * ${l};

  let tileRowA = i32(localId.y) * ${d};
  let tileColA = i32(localId.x) * ${c};
  let tileRowB = i32(localId.y) * ${f};
  // Loop over shared dimension.
  for (var t = 0; t < numTiles; t++) {
    // Load one tile of A into local memory.
    for (var innerRow = 0; innerRow < ${d}; innerRow++) {
      for (var innerCol = 0; innerCol < ${c}; innerCol++) {
        let inputRow = tileRowA + innerRow;
        let inputCol = tileColA + innerCol;
        ${m3(r)}
      }
    }

    // Load one tile of B into local memory.
    for (var innerRow = 0; innerRow < ${f}; innerRow++) {
      for (var innerCol = 0; innerCol < ${g}; innerCol++) {
        let inputRow = tileRowB + innerRow;
        let inputCol = tileCol + innerCol;
        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
          kStart + inputRow,
          globalCol + innerCol);
      }
    }
    kStart = kStart + ${n};
    workgroupBarrier();

    // Compute acc values for a single thread.
    var BCached : array<f32, ${g}>;
    for (var k = 0; k < ${n}; k++) {
      for (var inner = 0; inner < ${g}; inner++) {
        BCached[inner] = mm_Bsub[k][tileCol + inner];
      }

      for (var innerRow = 0; innerRow < ${m}; innerRow++) {
        ${r?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];"}
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] =
              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
        }
      }
    }

    workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < ${m}; innerRow++) {
    for (var innerCol = 0; innerCol < ${g}; innerCol++) {
      mm_write(batch, globalRow + innerRow, globalCol + innerCol,
          acc[innerRow][innerCol]);
    }
  }
  `;return`
    var<workgroup> mm_Asub : array<array<f32, ${h}>, ${p}>;
    var<workgroup> mm_Bsub : array<array<f32, ${u}>, ${n}>;

    ${f8()} {
      let batch = ${a?"0":"i32(globalId.z)"};
      let batchA = ${a||!o?"batch":"batch % uniforms.aShape[0]"};
      let batchB = ${a||!o?"batch":"batch % uniforms.bShape[0]"};
      let numTiles = ${a?`${Math.ceil(i/n)}`:`(uniforms.dimInner - 1) / ${n} + 1`};
      var kStart = ${a?`i32(globalId.z) * ${i}`:"0"};

      var acc : array<array<f32, ${g}>, ${m}>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < ${m}; innerRow++) {
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] = 0.0;
        }
      }
      ${y}
    }
  `}class m6{constructor(e,t,r=!1,n=!1,a=null,i=null,s=null,o=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};let l=r?e[1]:e[2];if(this.isVec4=(l%4==0&&!r||t[1]%4==0&&r)&&t[2]%4==0&&!n,this.outputComponent=this.isVec4?4:1,this.isVectorA=1===t[1]&&!r,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{let e=mu(t[1],l,t[2],r);this.workgroupSize=e.workgroupSize,this.elementsPerThread=e.elementsPerThread}this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);let u=null!=a,h=null!=s;u&&this.variableNames.push("bias"),h&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=o,this.transposeA=r,this.transposeB=n,this.addBias=u,this.activation=i,this.hasPreluActivationWeights=h,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],l),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${r}_${n}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(e,t,r){let n=this.workgroupSize[1]*this.elementsPerThread[1],a=this.workgroupSize[0]*this.elementsPerThread[0];return!this.isVec4&&this.isVectorA?this.tileInner=4*this.workgroupSize[0]:this.tileInner=a,[e%n==0,t%a==0,r%this.tileInner==0]}getUserCode(){return`
      ${mQ(this.activation,this.hasPreluActivationWeights,this.isVec4)}
      ${m1(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}
      ${this.isVec4?m2(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?function(e,t=!1){ny.assert(1===e[1]&&1===e[2],()=>`A linear work group size is required. But got ${e}.`);let r=4*e[0];return`
    var<workgroup> mm_Asub : array<vec4<f32>, ${e[0]}>;

    ${f8()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / ${r} + 1;
      let batch = i32(globalId.z);
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        let colA = t * ${r} + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${t?`
      mm_readA(batchA, colA, globalRow),
      mm_readA(batchA, colA + 1, globalRow),
      mm_readA(batchA, colA + 2, globalRow),
      mm_readA(batchA, colA + 3, globalRow)
  `:`
      mm_readA(batchA, globalRow, colA),
      mm_readA(batchA, globalRow, colA + 1),
      mm_readA(batchA, globalRow, colA + 2),
      mm_readA(batchA, globalRow, colA + 3)
  `});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < ${r/4}; k++) {
          let rowB = t * ${r} + k * 4;
          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),
                              mm_readB(batchB, rowB + 1, globalCol),
                              mm_readB(batchB, rowB + 2, globalCol),
                              mm_readB(batchB, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `}(this.workgroupSize,this.transposeA):m4(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}
    `}}class m5{constructor(e,t=!1,r=!1,n=null,a=null,i=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize);let s=null!=n,o=null!=i;s&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=r,this.addBias=s,this.activation=a,this.hasPreluActivationWeights=o,this.shaderKey=`matMulReduce_${this.activation}_${t}_${r}`}getUserCode(){var e;return`
      ${mQ(this.activation,this.hasPreluActivationWeights)}
      ${m1(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${e=this.workgroupSize[0],`
    var<workgroup> sumValues : array<f32, ${e}>;
    ${f8()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + ${e}) {
        let dataA = mm_readA(batchA, row, k);
        let dataB = mm_readB(batchB, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = ${e/2}u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `}
    `}}class m8{constructor(e,t,r,n=!1,a=!1,i=null,s=null,o=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=r,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(r[2]/this.workgroupSize[0]),Math.ceil(r[1]/this.workgroupSize[1]),r[0]];let l=null!=i;l&&this.variableNames.push("bias");let u=null!=o;u&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=a,this.addBias=l,this.activation=s,this.hasPreluActivationWeights=u,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${n}_${a}`}getUserCode(){return`
      ${mQ(this.activation,this.hasPreluActivationWeights)}
      ${m1(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${function(e){let t=e[1],r=e[0],n=t>r?t:r;return`
  var<workgroup> mm_Asub : array<array<f32, ${n}>, ${t}>;
  var<workgroup> mm_Bsub : array<array<f32, ${r}>, ${n}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${f8()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);
    let batchA = batch % uniforms.aShape[0];
    let batchB = batch % uniforms.bShape[0];

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${n} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batchA, globalRow, globalColA);
    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${n};
    globalRowB = globalRowB + ${n};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batchA, globalRow, globalColA);
      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${n};
      globalRowB = globalRowB + ${n};

      for (var k = 0; k < ${n}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `}(this.workgroupSize)}
    `}}class m7{constructor(e,t,r=!1,n=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,ny.assert(1===e[0],()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]};let a=(r&&this.outputShape[1]%4==0||!r&&t%4==0)&&this.outputShape[2]%4==0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=a?4:1,!a&&(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=ml(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],t],this.workgroupSize,this.elementsPerThread),this.transposeA=r,this.transposeB=n,this.shaderKey=`matMulSplitK_${r}_${n}_${this.elementsPerThread}_${this.outputComponent}`}getUserCode(){let e=this.outputComponent;return`
      ${m0(!1,this.transposeB,!1,!1,!1,e)}
      fn mm_write(batch: i32, row : i32, col : i32, value : ${f4(e)}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          for (var i = 0; i < ${e}; i = i + 1) {
            ${f3("&result[flatIndex + i]",`${e>1?"value[i]":"value"}`,"float32")}
          }
        }
      }
      ${4===e?m2(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):m4(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}
    `}}class m9{constructor(e,t=null,r=null,n=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=null!=t,this.hasPreluActivationWeights=null!=n,this.activation=r,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${r}`}getUserCode(){return`
    ${mQ(this.activation,this.hasPreluActivationWeights)}
    ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${mJ(this.addBias,this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `}}class ge{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`
    ${f8("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `}}function gt(e){let{backend:t,attrs:r}=e,{shape:n,value:a}=r,{dtype:i}=r;if("string"===(i=i||ny.inferDtype(a))){let e=ny.getArrayFromDType(i,ny.sizeFromShape(n));return e.fill(a),t.makeTensorInfo(n,i,e)}{let e=new ge(n);return t.runWebGPUProgram(e,[],i,[{type:"float32",data:[a]}])}}function gr(e){let{inputs:t,attrs:r}=e,{x:n}=t,{shape:a}=r,i=ny.sizeFromShape(n.shape),s=ny.inferFromImplicitShape(a,i),o=ny.sizeFromShape(s);return ny.assert(i===o,()=>`The new shape (${s}) has ${o} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),e.backend.incRef(n.dataId),{dataId:n.dataId,shape:s,dtype:n.dtype}}function gn({a:e,b:t,transposeA:r,transposeB:n,backend:a,bias:i=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:l=null}){let u,h,p=e.shape.length,d=t.shape.length,c=r?e.shape[p-2]:e.shape[p-1],f=n?t.shape[d-1]:t.shape[d-2],m=r?e.shape[p-1]:e.shape[p-2],g=n?t.shape[d-2]:t.shape[d-1],y=e.shape.slice(0,-2),b=t.shape.slice(0,-2),x=ny.sizeFromShape(y),v=ny.sizeFromShape(b),w=sO.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([m,g]);ny.assert(c===f,()=>`Error in matMul: inner shapes (${c}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${r} and transposeB=${n} must match.`);let k=r?[x,c,m]:[x,m,c],S=n?[v,g,f]:[v,f,g],I=gr({inputs:{x:e},backend:a,attrs:{shape:k}}),C=gr({inputs:{x:t},backend:a,attrs:{shape:S}}),N=[I,C],T=Math.max(x,v),$=[I,C],E=[{type:"int32",data:[m]},{type:"int32",data:[g]},{type:"int32",data:[c]}],R=[T,m,g],A=e_.get("WEBGPU_MATMUL_PROGRAM_TYPE");if(A<0){let e=e_.getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),t=e>0?e:a.thresholdToIncreaseWorkgroups,r=T*Math.ceil(m/32)*Math.ceil(g/32);A=r<=t||m<=8&&r<=2*t?T*m*g<=128?km.MatMulReduceProgram:1===T&&f>=2e3?km.MatMulSplitKProgram:km.MatMulSmallOutputSizeProgram:km.MatMulPackedProgram}switch(A){case km.MatMulReduceProgram:u=new m5(R,r,n,i,l,s);break;case km.MatMulSplitKProgram:if(h=gt({backend:a,attrs:{shape:R,value:0,dtype:e.dtype}}),u=new m7(R,f,r,n),i||l){let t=new m9((h=a.runWebGPUProgram(u,$,e.dtype,E,h)).shape,i,l,s),r=null,n=[h];i&&n.push(i),s&&n.push(s),"leakyrelu"===l&&(r=[{type:"float32",data:[o]}],t.uniforms+=" alpha : f32,");let p=a.runWebGPUProgram(t,n,h.dtype,r);N.push(h);let d=gr({inputs:{x:p},backend:a,attrs:{shape:w}});for(let e of(N.push(p),N))a.disposeData(e.dataId);return d}break;case km.MatMulSmallOutputSizeProgram:u=new m8(k,S,R,r,n,i,l,s);break;case km.MatMulPackedProgram:u=new m6(k,R,r,n,i,l,s,a.adapterInfo.isIntel());break;default:throw Error(`Unsupported MatMulProgramType ${A}.`)}i&&$.push(i),s&&$.push(s),"leakyrelu"===l&&(E.push({type:"float32",data:[o]}),u.uniforms+=" alpha : f32,");let F=gr({inputs:{x:h=a.runWebGPUProgram(u,$,e.dtype,E,h)},backend:a,attrs:{shape:w}});for(let e of(N.push(h),N))a.disposeData(e.dataId);return F}class ga{constructor(e,t,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=or.assertAndGetBroadcastShape(t,r),this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`binaryOpComplex_${e}`,this.op=e}getUserCode(){let e=m_(this.op,!1);return`
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${e}
      }

      ${f8("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `}}class gi{constructor(e,t,r){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=or.assertAndGetBroadcastShape(t,r),this.dispatchLayout=md(this.outputShape),this.op=e,this.useSharedMemoryWithA=t.length<=1&&r.length>1&&t[0]<128,this.useSharedMemoryWithB=r.length<=1&&t.length>1&&r[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?r[0]:t[0],this.shaderKey=`binary_${e}_${this.lastDimensionSize}`,this.type="shared",this.workgroupSize=[256,1,1];else{let n=t.length>0&&t[t.length-1]%4==0,a=r.length>0&&r[r.length-1]%4==0;n&&a?(this.outputComponent=4,this.variableComponents=[4,4]):n&&(ny.isScalarShape(r)||1===r[r.length-1])||a&&(ny.isScalarShape(t)||1===t[t.length-1])?(this.outputComponent=4,this.variableComponents=n?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey=`binary_${e}_${this.variableComponents}`,this.workgroupSize=[128,1,1]}this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}getUserCode(){let e,t=4===this.outputComponent?"vec4<f32>":"f32",r=`
    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {
      ${m_(this.op,4===this.outputComponent)}
    };
    `;if("shared"===this.type){let t=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",n=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);
          let b = sharedBuf[${t}];`:`let a = sharedBuf[${t}];
          let b = getBByOutputIndex(index);`;e=`
        ${r}
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${f8("index")} {
          // Fill in the shared memory buffer.
          let localIndex = i32(localId.x);
          if(localIndex < ${this.lastDimensionSize}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);
          }
          workgroupBarrier();

          if(index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            ${n}
            setOutputAtIndex(index, binaryOperation(a, b));
          }
        }
        `}else e=`
       ${r}
       ${f8("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index * ${this.outputComponent});
           let a = ${t}(getAByOutputCoords(coords));
           let b = ${t}(getBByOutputCoords(coords));
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `;return e}}function gs(e){let{inputs:t}=e,{x:r}=t;return e.backend.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function go(e){let{inputs:t,backend:r}=e,{real:n,imag:a}=t,i=r.makeTensorInfo(n.shape,"complex64"),s=r.tensorMap.get(i.dataId);return s.complexTensorInfos={real:gs({inputs:{x:n},backend:r}),imag:gs({inputs:{x:a},backend:r})},i}class gl{constructor(e,t,r=""){this.variableNames=["A"],this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,""!==r&&(this.uniforms=r),this.shaderKey=`unary_${t}`}getUserCode(){return`
      fn unaryOperation(a : f32) -> f32 {
        ${mZ(this.op,!1)}
      }
      ${f8("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `}}function gu({opType:e,cpuKernelImpl:t,dtype:r}){return({inputs:n,backend:a})=>{let{x:i}=n,s=r||i.dtype;if(a.shouldExecuteOnCPU([i])&&null!=t){let e=t(a.tensorMap.get(i.dataId).values,s);return a.makeTensorInfo(i.shape,s,e)}let o=new gl(i.shape,e);return a.runWebGPUProgram(o,[i],s)}}function gh({opType:e,cpuKernelImpl:t,supportsComplex:r=!1,dtype:n}){return({inputs:a,backend:i})=>{let{a:s,b:o}=a;if(r&&"complex64"===s.dtype){let t,r,n=i.tensorMap.get(s.dataId),a=i.tensorMap.get(o.dataId);if(e!==kg.MUL)[t,r]=[[n.complexTensorInfos.real,a.complexTensorInfos.real],[n.complexTensorInfos.imag,a.complexTensorInfos.imag]].map(t=>{let[r,n]=t,a={dataId:r.dataId,dtype:r.dtype,shape:s.shape},l={dataId:n.dataId,dtype:n.dtype,shape:o.shape},u=new gi(e,s.shape,o.shape);return i.runWebGPUProgram(u,[a,l],af(r.dtype,n.dtype))});else{let e=new ga(kg.COMPLEX_MULTIPLY_REAL,s.shape,o.shape),l=new ga(kg.COMPLEX_MULTIPLY_IMAG,s.shape,o.shape),u=[{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:s.shape},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o.shape}];t=i.runWebGPUProgram(e,u,"float32"),r=i.runWebGPUProgram(l,u,"float32")}let l=go({inputs:{real:t,imag:r},backend:i});return i.disposeData(t.dataId),i.disposeData(r.dataId),l}let l=n||af(s.dtype,o.dtype);if(("string"===s.dtype||"string"===o.dtype||i.shouldExecuteOnCPU([s,o]))&&null!=t){let e=i.tensorMap.get(s.dataId).values,r=i.tensorMap.get(o.dataId).values,n="string"===s.dtype?or.fromUint8ToStringArray(e):e,a="string"===s.dtype?or.fromUint8ToStringArray(r):r,[u,h]=t(s.shape,o.shape,n,a,l);return i.makeTensorInfo(h,l,u)}let u=new gi(e,s.shape,o.shape);return i.runWebGPUProgram(u,[s,o],l)}}var gp={};function gd(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&ny.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}function gc(e){let t=new Float32Array(e.length);for(let r=0;r<e.length;++r)t[r]=Math.abs(e[r]);return t}function gf(e){return(t,r,n,a,i)=>{let s=or.assertAndGetBroadcastShape(t,r),o=s.length,l=ny.computeStrides(s),u=ny.sizeFromShape(s),h=ny.getTypedArrayFromDType(i,u),p=t.length,d=r.length,c=ny.computeStrides(t),f=ny.computeStrides(r),m=or.getBroadcastDims(t,s),g=or.getBroadcastDims(r,s);if(m.length+g.length===0)for(let t=0;t<h.length;++t)h[t]=e(n[t%n.length],a[t%a.length]);else for(let t=0;t<h.length;++t){let r=ny.indexToLoc(t,o,l),i=r.slice(-p);m.forEach(e=>i[e]=0);let s=ny.locToIndex(i,p,c),u=r.slice(-d);g.forEach(e=>u[e]=0);let y=ny.locToIndex(u,d,f);h[t]=e(n[s],a[y])}return[h,s]}}function gm(e){let{inputs:t,backend:r}=e,{real:n,imag:a}=t,i=r.data.get(n.dataId).values,s=r.data.get(a.dataId).values,o=r.makeTensorInfo(n.shape,"complex64");return r.data.get(o.dataId).complexTensorInfos={real:r.makeTensorInfo(n.shape,"float32",i),imag:r.makeTensorInfo(a.shape,"float32",s)},o}function gg(e,t,r="float32"){if("complex64"===r)return gm({inputs:{real:gg(e,t,"float32"),imag:gg(e,t,"float32")},backend:e});let n=ny.makeZerosTypedArray(ny.sizeFromShape(t),r);return e.makeTensorInfo(t,r,n)}function gy(e){let{inputs:t,backend:r}=e,{x:n}=t;return r.incRef(n.dataId),{dataId:n.dataId,shape:n.shape,dtype:n.dtype}}function gb(e){let{inputs:t,backend:r}=e,{input:n}=t,a=r.data.get(n.dataId).complexTensorInfos.real,i=r.data.get(a.dataId).values;return r.makeTensorInfo(a.shape,a.dtype,i)}function gx(e,t,r,n){if("int32"===n)return[t,"int32",Int32Array.from(e)];if("bool"===n){let n=ny.toTypedArray([0],r),[a,i]=gf((e,t)=>+(e!==t))(t,[],e,n,"bool");return[i,"bool",a]}throw Error(`Error in Cast: failed to cast ${r} to ${n}`)}function gv(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{dtype:i}=n;if("complex64"===i){if("complex64"===a.dtype)return gy({inputs:{x:a},backend:r});let e=gg(r,a.shape,a.dtype),t=gv({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),n=gm({inputs:{real:t,imag:e},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),n}if("complex64"===a.dtype){let e=gb({inputs:{input:a},backend:r}),t=gv({inputs:{x:e},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(e),t}if(!ny.hasEncodingLoss(a.dtype,i)){let e=gy({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}let[s,o,l]=gx(r.data.get(a.dataId).values,a.shape,a.dtype,i);return r.makeTensorInfo(s,o,l)}function gw(e,t,r,n){return null==r?({inputs:r,backend:a})=>{let{a:i,b:s}=r;gd([i,s],e);let o=a.data.get(i.dataId).values,l=a.data.get(s.dataId).values,u="string"===i.dtype?or.fromUint8ToStringArray(o):o,h="string"===i.dtype?or.fromUint8ToStringArray(l):l,p=n||i.dtype,[d,c]=t(i.shape,s.shape,u,h,p);return a.makeTensorInfo(c,p,d)}:({inputs:e,backend:a})=>{let{a:i,b:s}=e;if("complex64"===i.dtype||"complex64"===s.dtype){let e=gv({inputs:{x:i},backend:a,attrs:{dtype:"complex64"}}),t=a.data.get(e.dataId),n=t.complexTensorInfos.real,o=t.complexTensorInfos.imag,l=a.data.get(n.dataId).values,u=a.data.get(o.dataId).values,h=gv({inputs:{x:s},backend:a,attrs:{dtype:"complex64"}}),p=a.data.get(h.dataId),d=p.complexTensorInfos.real,c=p.complexTensorInfos.imag,f=a.data.get(d.dataId).values,m=a.data.get(c.dataId).values,[g,y,b]=r(i.shape,s.shape,l,u,f,m),x=a.makeTensorInfo(b,"float32",g),v=a.makeTensorInfo(b,"float32",y),w=gm({inputs:{real:x,imag:v},backend:a});return a.disposeIntermediateTensorInfo(e),a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(v),w}{let e=a.data.get(i.dataId).values,r=a.data.get(s.dataId).values,o=n||i.dtype,[l,u]=t(i.shape,s.shape,e,r,o);return a.makeTensorInfo(u,o,l)}}}function gk(e){return(t,r,n,a,i,s)=>{let o=or.assertAndGetBroadcastShape(t,r),l=ny.sizeFromShape(o),u=o.length,h=ny.computeStrides(o),p=ny.getTypedArrayFromDType("float32",l),d=ny.getTypedArrayFromDType("float32",l),c=or.getBroadcastDims(t,o),f=or.getBroadcastDims(r,o),m=or.mergeRealAndImagArrays(n,a),g=or.mergeRealAndImagArrays(i,s),y=t.length,b=ny.computeStrides(t),x=r.length,v=ny.computeStrides(r);if(c.length+f.length===0)for(let t=0;t<p.length;t++){let r=t%m.length,n=t%g.length,a=e(m[2*r],m[2*r+1],g[2*n],g[2*n+1]);p[t]=a.real,d[t]=a.imag}else for(let t=0;t<p.length;t++){let r=ny.indexToLoc(t,u,h),n=r.slice(-y);c.forEach(e=>n[e]=0);let a=ny.locToIndex(n,y,b),i=r.slice(-x);f.forEach(e=>i[e]=0);let s=ny.locToIndex(i,x,v),o=e(m[2*a],m[2*a+1],g[2*s],g[2*s+1]);p[t]=o.real,d[t]=o.imag}return[p,d,o]}}N(gp,"simpleAbsImpl",()=>gc),N(gp,"addImpl",()=>gS),N(gp,"bincountImpl",()=>gC),N(gp,"bincountReduceImpl",()=>gN),N(gp,"bitwiseAndImpl",()=>gT),N(gp,"castImpl",()=>gx),N(gp,"ceilImpl",()=>gF),N(gp,"concatImpl",()=>gD),N(gp,"equalImpl",()=>gO),N(gp,"expImpl",()=>gz),N(gp,"expm1Impl",()=>gL),N(gp,"floorImpl",()=>gW),N(gp,"floorDivImpl",()=>gV),N(gp,"gatherNdImpl",()=>gH),N(gp,"gatherV2Impl",()=>gj),N(gp,"greaterImpl",()=>gK),N(gp,"greaterEqualImpl",()=>gX),N(gp,"lessImpl",()=>gZ),N(gp,"lessEqualImpl",()=>gJ),N(gp,"linSpaceImpl",()=>g1),N(gp,"logImpl",()=>g2),N(gp,"maxImpl",()=>g4),N(gp,"maximumImpl",()=>g6),N(gp,"minimumImpl",()=>g8),N(gp,"multiplyImpl",()=>g9),N(gp,"negImpl",()=>yt),N(gp,"notEqualImpl",()=>yr),N(gp,"prodImpl",()=>ys),N(gp,"raggedGatherImpl",()=>yl),N(gp,"raggedRangeImpl",()=>yu),N(gp,"raggedTensorToTensorImpl",()=>yf),N(gp,"rangeImpl",()=>ym),N(gp,"rsqrtImpl",()=>yg),N(gp,"scatterImpl",()=>yb),N(gp,"sigmoidImpl",()=>yx),N(gp,"sliceImpl",()=>yw),N(gp,"sparseFillEmptyRowsImpl",()=>yS),N(gp,"sparseReshapeImpl",()=>yI),N(gp,"sparseSegmentReductionImpl",()=>yC),N(gp,"sqrtImpl",()=>yN),N(gp,"squaredDifferenceImpl",()=>y$),N(gp,"staticRegexReplaceImpl",()=>yR),N(gp,"stridedSliceImpl",()=>yF),N(gp,"stringNGramsImpl",()=>yD),N(gp,"stringSplitImpl",()=>yO),N(gp,"stringToHashBucketFastImpl",()=>yM),N(gp,"subImpl",()=>yz),N(gp,"tileImpl",()=>yL),N(gp,"topKImpl",()=>yW),N(gp,"transposeImpl",()=>ya),N(gp,"uniqueImpl",()=>yU);const gS=gf((e,t)=>e+t),gI=gw("Add",gS,gk((e,t,r,n)=>({real:e+r,imag:t+n})));function gC(e,t,r,n,a){let i=ny.sizeFromShape(n),s=ny.makeZerosTypedArray(a,r);for(let r=0;r<e.length;r++){let n=e[r];if(n<0)throw Error("Input x must be non-negative!");n>=a||(i>0?s[n]+=t[r]:s[n]+=1)}return s}function gN(e,t,r,n=!1){let a=e.shape[0],i=e.shape[1],s=so([a,r],t.dtype);for(let o=0;o<a;o++)for(let a=0;a<i;a++){let i=e.get(o,a);if(i<0)throw Error("Input x must be non-negative!");i>=r||(n?s.set(1,o,i):t.size>0?s.set(s.get(o,i)+t.get(o,a),o,i):s.set(s.get(o,i)+1,o,i))}return s}const gT=gf((e,t)=>e&t),g$=gw(tt,gT);function gE(e){return(t,r,n)=>{let a=ny.getArrayFromDType(r,t.length);for(let r=0;r<t.length;++r)a[r]=e(t[r],n);return a}}function gR(e,t,r){return gA(e,gE(t),r)}function gA(e,t,r){return({inputs:n,attrs:a,backend:i})=>{let s,{x:o}=n;gd(o,e);let l=i.data.get(o.dataId).values;if("string"===o.dtype){if(!Array.isArray(l))throw Error("String tensor's value was not an instance of Array");s=or.fromUint8ToStringArray(l)}else s=l;let u=r||o.dtype,h=t(s,u,a);return i.makeTensorInfo(o.shape,u,h)}}const gF=gE(e=>Math.ceil(e)),g_=gA(ta,gF);function gD(e,t,r,n){let a=ny.getArrayFromDType(r,ny.sizeFromShape(t));if(n&&"string"!==r){let t=0;e.forEach(e=>{let r=ny.sizeFromShape(e.shape);a.set(e.vals,t),t+=r})}else{let n=0;e.forEach(e=>{let i="string"===r?or.fromUint8ToStringArray(e.vals):e.vals,s=0;for(let r=0;r<e.shape[0];++r){let o=r*t[1]+n;for(let t=0;t<e.shape[1];++t)a[o+t]=i[s++]}n+=e.shape[1]})}return a}const gO=gf((e,t)=>+(e===t)),gM=gw(tF,gO,null,"bool"),gz=gE(e=>Math.exp(e)),gP=gA("Exp",gz,"float32"),gL=gE(e=>Math.expm1(e)),gB=gA(tD,gL),gW=gE(e=>Math.floor(e)),gU=gA(tz,gW),gV=gf((e,t)=>Math.floor(e/t)),gG=gw(tP,gV,null,"int32");function gH(e,t,r,n,a,i,s,o,l){let u=so([n,i],r);for(let r=0;r<n;r++){let n=[],h=0;for(let t=0;t<a;t++){let i=e[r*a+t];h+=i*s[t],n.push(i)}if(h<0||h>=l/i)throw Error(`Invalid indices: ${n} does not index into ${o}`);for(let e=0;e<i;e++)u.values[r*i+e]=t.get(...t.indexToLoc(h*i+e))}return u}function gj(e,t,r){let n=so(r,e.dtype);for(let r=0;r<n.size;++r){let a=n.indexToLoc(r).slice(),i=a[0],s=a[2],o=t.locToIndex([i,s]);a[2]=t.values[o];let l=e.locToIndex(a);0<=l&&l<e.values.length&&(n.values[r]=e.values[l])}return n}const gK=gf((e,t)=>+(e>t)),gq=gw(tU,gK,null,"bool"),gX=gf((e,t)=>+(e>=t)),gY=gw(tV,gX,null,"bool"),gZ=gf((e,t)=>+(e<t)),gQ=gw(tZ,gZ,null,"bool"),gJ=gf((e,t)=>+(e<=t)),g0=gw(tQ,gJ,null,"bool");function g1(e,t,r){let n=(t-e)/(r-1),a=ny.makeZerosTypedArray(r,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const g2=gE(e=>Math.log(e)),g3=gA("Log",g2);function g4(e,t,r,n){let a=ny.getTypedArrayFromDType(n,ny.sizeFromShape(r));for(let r=0;r<a.length;++r){let n=r*t,i=e[n];for(let r=0;r<t;++r){let t=e[n+r];(Number.isNaN(t)||t>i)&&(i=t)}a[r]=i}return a}const g6=gf((e,t)=>Math.max(e,t)),g5=gw(t6,g6),g8=gf((e,t)=>Math.min(e,t)),g7=gw(rr,g8),g9=gf((e,t)=>e*t),ye=gw(ri,g9,gk((e,t,r,n)=>({real:e*r-t*n,imag:e*n+t*r})));function yt(e,t,r){return g9([],t,ny.createScalarValue(-1,r),e,r)}const yr=gf((e,t)=>+(e!==t)),yn=gw(rs,yr,null,"bool");function ya(e,t,r,n,a){let i=t.length,s=ny.sizeFromShape(t),o=ny.computeStrides(t),l=ny.computeStrides(a),u=ny.getTypedArrayFromDType(r,ny.sizeFromShape(a));for(let t=0;t<s;++t){let r=ny.indexToLoc(t,i,o),a=Array(r.length);for(let e=0;e<a.length;e++)a[e]=r[n[e]];u[ny.locToIndex(a,i,l)]=e[t]}return u}function yi(e){let{inputs:t,attrs:r,backend:n}=e,{x:a}=t,{perm:i}=r;gd(a,"transpose");let s=Array(a.shape.length);for(let e=0;e<s.length;e++)s[e]=a.shape[i[e]];let o=ya(n.data.get(a.dataId).values,a.shape,a.dtype,i,s);return{dataId:n.write(o,s,a.dtype),shape:s,dtype:a.dtype}}function ys(e,t,r,n){let[a,i]=or.computeOutAndReduceShapes(e,n),s=af(t,"int32"),o=ny.makeZerosTypedArray(ny.sizeFromShape(a),s),l=ny.sizeFromShape(i);for(let e=0;e<o.length;++e){let t=e*l,n=1;for(let e=0;e<l;++e)n*=r[t+e];o[e]=n}return{outVals:o,outShape:a,outDtype:s}}function yo(e,t){let r=e.slice(0,t);for(;r.length<t;)r.push(1);for(let n=t;n<e.length;n++)r[t-1]*=e[n];return r}function yl(e,t,r,n,a,i,s,o){if(0===e.length)throw Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw Error("Split tensors must not be scalars");let l=t[0][0]-1;if(i.forEach((e,t)=>{if(e<0||e>=l){let r=ny.indexToLoc(t,s.length,ny.computeStrides(s)).join(",");throw Error(`indices[${r}] = ${e} is not in [0, ${l})`)}}),0===n.length)throw Error("params.rank must be nonzero");let{outSplits:u,valueSlices:h,numValues:p}=function(e,t,r,n){let a=[],i=0,s=Array(t.length-1+r.length).fill(null).map(()=>[0]);for(let e=0;e<r.length;++e){let t=r[e],a=e===r.length-1?n:r[e+1].length;if(0===t.length)throw Error("Ragged splits may not be empty");if(t[0]<0)throw Error("Ragged splits must be non-negative");if(t[t.length-1]>a)throw Error("Ragged splits must not point past values");for(let e=1;e<t.length;++e)if(t[e-1]>t[e])throw Error("Ragged splits must be sorted in ascending order")}let o=1;for(let e=0;e<t.length-1;++e){o*=t[e];let r=t[e+1];for(let t=1;t<o+1;++t)s[e].push(t*r)}for(let n=0;n<e.length;++n){let o=e[n],l=e[n]+1;for(let e=0;e<r.length;++e){let n=r[e],a=e+t.length-1;if(a>=0){let e=s[a],t=e[e.length-1]-n[o];for(let e=o;e<l;++e)s[a].push(n[e+1]+t)}o=n[o],l=n[l]}l!==o&&(a.push([o,l]),i+=l-o)}return{outSplits:s,valueSlices:a,numValues:i}}(i,s,e,n[0]),d=function(e){let t=[];for(let r=0;r<e.length;++r){let n=e[r].length,a=ny.getArrayFromDType("int32",n);t.push(a),e[r].forEach((e,t)=>a[t]=e)}return t}(u),c=function(e,t,r,n,a){let i=t.slice();i[0]=a;let s=ny.getArrayFromDType(r,ny.sizeFromShape(i)),o=e.length,l=0===o?0:o/t[0];return!function(e,t,r,n,a,i){let s=yo(t,2)[1],o=yo(i,2)[1],l=0;for(let t of r)for(let r=t[0];r<t[1];++r){for(let t=0;t<n;++t)a[l*o+t]=e[r*s+t];++l}}(e,t,n,l,s,i),[s,i]}(r,n,a,h,p);return[d,c[0],c[1]]}function yu(e,t,r,n,a,i,s){if(t.length>1)throw Error("starts must be a scalar or vector");if(a.length>1)throw Error("limits must be a scalar or vector");if(s.length>1)throw Error("deltas must be a scalar or vector");let o=0===t.length,l=0===a.length,u=0===s.length,h=[];o||h.push(t[0]),l||h.push(a[0]),u||h.push(s[0]);for(let e=1;e<h.length;++e)if(h[e]!==h[e-1])throw Error("starts, limits, and deltas must have the same shape");let p=0===h.length?1:h[0],d=ny.getArrayFromDType("int32",p+1);d[0]=0;for(let t=0;t<p;++t){let r,a=o?e[0]:e[t],s=l?n[0]:n[t],h=u?i[0]:i[t];if(0===h)throw Error("Requires delta != 0");if(h>0&&s<a||h<0&&s>a)r=0;else if((r=Math.ceil(Math.abs((s-a)/h)))>0x7fffffff)throw Error("Requires ((limit - start) / delta) <= 2147483647");d[t+1]=d[t]+r}let c=d[p],f=ny.getArrayFromDType(r,c),m=0;for(let t=0;t<p;++t){let r=d[t+1]-d[t],n=o?e[0]:e[t],a=u?i[0]:i[t];for(let e=0;e<r;++e)f[m++]=n,n+=a}return[d,f]}var yh=or.RowPartitionType;class yp{constructor(e,t,r,n,a,i,s,o,l,u){this.shape=e,this.shapeShape=t,this.values=r,this.valuesShape=n,this.valuesDType=a,this.defaultValue=i,this.defaultValueShape=s,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=or.getRowPartitionTypesHelper(u),this.raggedRank=or.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===yh.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===yh.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case yh.VALUE_ROWIDS:return yp.getMaxWidthValueRowID(t);case yh.ROW_SPLITS:return yp.getMaxWidthRowSplit(t);default:throw Error(`Cannot handle partition type ${yh[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(0===t||1===t)return 0;let r=0;for(let n=0;n<t-1;++n){let t=e[n+1]-e[n];t>r&&(r=t)}return r}static getMaxWidthValueRowID(e){let t=e.length;if(0===t)return 0;let r=0,n=e[0],a=0;for(let i=1;i<t;++i){let t=e[i];t!==n&&(n=t,a=Math.max(i-r,a),r=i)}return Math.max(t-r,a)}tensorShapeFromTensor(e,t,r=!0){if(0===t.length){if(-1===e[0])return[];throw Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return yc(e,r)}calculateOutputSize(e){let t=this.valuesShape,r=this.defaultValueShape;or.validateDefaultValueShape(r,t);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=or.combineRaggedTensorToTensorShapes(this.raggedRank,n,t);a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}calculateFirstParentOutputIndex(e,t,r){let n=Math.min(e,r),a=[],i=0;for(let e=0;e<n;++e,i+=t)a.push(i);for(let t=n;t<e;++t)a.push(-1);return ny.assert(a.length===e,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(e,t,r,n){let a=e.length,i=[];for(let s=0;s<a-1;++s){let a=e[s+1]-e[s],o=Math.min(n,a),l=t[s];-1===l&&(o=0);for(let e=0;e<o;++e)i.push(l),l+=r;for(let e=0;e<a-o;++e)i.push(-1)}if(a>0&&i.length!==e[a-1])throw Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(e,t,r,n){let a=e.length,i=[];if(0===a)return[];let s=0,o=e[0];if(o>=t.length)throw Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];i.push(l);for(let u=1;u<a;++u){let a=e[u];if(a===o)l>=0&&(++s<n?l+=r:l=-1);else{if(s=0,o=a,a>=t.length)throw Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);l=t[a]}i.push(l)}if(i.length!==e.length)throw Error("Invalid row ids.");return i}calculateOutputIndex(e,t,r,n){let a=this.getRowPartitionTensor(e),i=this.getRowPartitionTypeByDimension(e);switch(i){case yh.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,r,n);case yh.ROW_SPLITS:if(a.length-1>t.length)throw Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,r,n);default:throw Error(`Unsupported partition type: ${yh[i]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case yh.FIRST_DIM_SIZE:return e[0];case yh.VALUE_ROWIDS:throw Error("Cannot handle VALUE_ROWIDS in first dimension.");case yh.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw Error(`Cannot handle type ${yh[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),r=Array(this.raggedRank+1);r[r.length-1]=1;for(let e=r.length-2;e>=0;--e)r[e]=r[e+1]*t[e+1];let n=yc(t,!1),a=ny.getArrayFromDType(this.valuesDType,ny.sizeFromShape(n));if(r[0]*t[0]>0){let i=this.calculateFirstParentOutputIndex(e,r[0],t[0]);for(let e=1;e<=this.raggedRank;++e)i=this.calculateOutputIndex(e-1,i,r[e],t[e]);this.setOutput(this.raggedRank,i,a,n)}return[n,a]}setOutput(e,t,r,n){if(0===r.length)return;let a=this.values,i=n.slice();i=i.slice(e+1);let s=ny.sizeFromShape(i),o=t.length,l=this.defaultValue;if(l.length!==s&&1!==l.length){let e=this.defaultValueShape;aH(()=>{l=l2(s9(l,e),i).dataSync()})}let u=0,h=0,p=0;for(let e=0;e<=o;++e){let n=e<o?t[e]:-1;if(n===p){++p;continue}if(h<p){let e=a.subarray(u*s);yd(r.subarray(h*s),e,(p-h)*s)}if(e>=o&&(n=Math.floor(r.length/s)),n>p)if(1===this.defaultValue.length)r.subarray(p*s,n*s).fill(this.defaultValue[0]),p=n;else for(;n>p;)yd(r.slice(p*s),l,s),++p;n<0?(u=e+1,h=p):(u=e,p=(h=p)+1)}}}function yd(e,t,r){for(let n=0;n<r;n++)e[n]=t[n]}function yc(e,t){let r=[];for(let n of e){if(n<0){if(!t)throw Error(`Dimension ${n} must be >= 0`);if(n<-1)throw Error(`Dimension ${n} must be >= -1`);n=-1}r.push(n)}return r}function yf(e,t,r,n,a,i,s,o,l,u){return new yp(e,t,r,n,a,i,s,o,l,u).compute()}function ym(e,t,r,n){let a=e===t,i=e<t&&r<0,s=t<e&&r>1;if(a||i||s)return ny.makeZerosTypedArray(0,n);let o=Math.abs(Math.ceil((t-e)/r)),l=ny.makeZerosTypedArray(o,n);t<e&&1===r&&(r=-1),l[0]=e;for(let e=1;e<l.length;e++)l[e]=l[e-1]+r;return l}const yg=gE(e=>1/Math.sqrt(e)),yy=gA(rA,yg);function yb(e,t,r,n,a,i,s,o,l,u){let h=e.values,p=t.values;if(0===n)return so(r,t.dtype);let d=l instanceof as?l:so([n/a,a],t.dtype);"string"==typeof l||"number"==typeof l?d.values.fill(l):"boolean"==typeof l&&d.values.fill(+l);for(let e=0;e<i;e++){let i=[],l=0;for(let t=0;t<s;t++){let r=h[e*s+t];i.push(r),l+=r*o[t]}if(l<0||l>=n/a)throw Error(`Invalid indices: ${i} does not index into ${r}`);for(let r=0;r<a;r++)u?d.values[l*a+r]+=p[e*a+r]:d.values[l*a+r]=0===t.rank?p[0]:p[e*a+r]}return d}const yx=gE(e=>1/(1+Math.exp(-e))),yv=gR(rB,e=>1/(1+Math.exp(-e)));function yw(e,t,r,n,a){let i=oM.isSliceContinous(n,t,r),s=ny.sizeFromShape(r),o=ny.computeStrides(n);if(i){let r=oM.computeFlatOffset(t,o);return"string"===a?e.slice(r,r+s):e.subarray(r,r+s)}let l="string"===a?or.fromUint8ToStringArray(e):e,u=so(n,a,l),h=so(r,a);for(let e=0;e<h.size;++e){let r=h.indexToLoc(e),n=r.map((e,r)=>e+t[r]);h.set(u.get(...n),...r)}return"string"===a?or.fromStringArrayToUint8(h.values):h.values}function yk(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{begin:i,size:s}=n;gd(a,"slice");let[o,l]=oM.parseSliceParams(a,i,s);oM.assertParamsValid(a,o,l);let u=yw(r.data.get(a.dataId).values,o,l,a.shape,a.dtype);return r.makeTensorInfo(l,a.dtype,u)}function yS(e,t,r,n,a,i,s){let o=t[0],l=i[0],u=Array(l),h=Array(o),p=t[1];if(0===l){if(0!==o)throw Error(or.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[ny.getArrayFromDType(r,0),[0,p],ny.getArrayFromDType(a,0),u,h]}let d=!0,c=0,f=Array(l).fill(0);for(let t=0;t<o;++t){let r=e[t*p];if(r<0)throw Error(or.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,r));if(r>=l)throw Error(or.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,r,l));++f[r],d=d&&r>=c,c=r}let m=!0;for(let e=0;e<l;++e){let t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){for(let e=0;e<o;++e)h[e]=e;return[e,[o,p],n,u,h]}{let t=f[l-1],i=ny.getArrayFromDType(r,t*p),d=ny.getArrayFromDType(a,t),c=Array(l).fill(0);for(let t=0;t<o;++t){let r=e[t*p],a=c[r],s=(0===r?0:f[r-1])+a;c[r]++;for(let r=0;r<p;++r)i[s*p+r]=e[t*p+r];d[s]=n[t],h[t]=s}for(let e=0;e<l;++e)if(0===c[e]){let t=0===e?0:f[e-1];i[t*p+0]=e;for(let e=1;e<p;++e)i[t*p+e]=0;d[t]=s}return[i,[t,p],d,u,h]}}function yI(e,t,r,n,a){let i=ny.sizeFromShape(n),s=t[0],o=a.length,l=[],u=1,h=-1;for(let e=0;e<o;++e){let t=a[e];if(-1===t){if(-1!==h)throw Error(or.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(h,e));h=e,l.push(1)}else{if(t<0)throw Error(or.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==h){if(u<=0)throw Error(or.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let e=Math.trunc(i/u);if(u*e!==i)throw Error(or.getSparseReshapeInputOutputMultipleErrorMessage(n,l));l[h]=e}if(ny.sizeFromShape(l)!==i)throw Error(or.getSparseReshapeInputOutputMismatchErrorMessage(n,l));let p=n.length,d=[];if(p>0){d[p-1]=1;for(let e=p-2;e>=0;--e)d[e]=d[e+1]*n[e+1]}let c=[];if(o>0){c[o-1]=1;for(let e=o-2;e>=0;--e)c[e]=c[e+1]*l[e+1]}let f=ny.getArrayFromDType(r,s*o);for(let t=0;t<s;++t){let r=0;for(let n=0;n<p;++n)r+=e[t*p+n]*d[n];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(r/c[e]),r%=c[e]}return[f,[s,o],l]}function yC(e,t,r,n,a,i=!1,s=0){let o=n.length,l=[t[0],e.length/t[0]],u=l[1],h=o>0?a[o-1]+1:0;if(h<0)throw Error(or.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let p=t.slice();p[0]=h;let d=p.reduce((e,t)=>e*t,1),c=ny.getArrayFromDType(r,d);if(0===o)return h>0&&c.fill(s),[c,p];if(h<=0)throw Error(or.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=a[0];for(;;){let t=0;if(m<o){if(y===(t=a[m])){++m;continue}if(y>=t)throw Error(or.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=h)throw Error(or.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,h));y>g&&c.fill(s,g*u,y*u);for(let t=f;t<m;++t){let r=n[t];if(r<0||r>=l[0])throw Error(or.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,n[t],l[0]));for(let t=0;t<u;t++)c[y*u+t]+=e[r*u+t]}if(i)for(let e=0;e<u;e++)c[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>o)break}return g<h&&c.fill(s,g*u,h*u),[c,p]}const yN=gE(e=>Math.sqrt(e)),yT=gR(rU,e=>Math.sqrt(e)),y$=gf((e,t)=>{let r=e-t;return r*r}),yE=gw(rZ,y$),yR=gE((e,t)=>{let{pattern:r,replaceGlobal:n,rewrite:a}=t;return e.replace(new RegExp(r,n?"g":""),a)}),yA=gA(rJ,yR);function yF(e,t,r,n){let a=so(e,t.dtype);for(let e=0;e<a.size;e++){let i=a.indexToLoc(e),s=Array(i.length);for(let e=0;e<s.length;e++)s[e]=i[e]*r[e]+n[e];a.set(t.get(...s),...i)}return a}class y_{constructor(e,t,r,n,a,i){this.separator=ny.encodeString(e),this.nGramWidths=t,this.leftPad=ny.encodeString(r),this.rightPad=ny.encodeString(n),this.padWidth=a,this.preserveShort=i}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){return Math.max(0,e+2*this.getPadWidth(t)-t+1)}createNGrams(e,t,r,n,a,i){for(let s=0;s<a;++s){let o,l=this.getPadWidth(i),u=Math.max(0,l-s),h=Math.max(0,l-(a-(s+1))),p=i-(u+h),d=t+(u>0?0:s-l);o=0+u*this.leftPad.length;for(let t=0;t<p;++t)o+=e[d+t].length;o+=h*this.rightPad.length,o+=(u+h+p-1)*this.separator.length,r[n+s]=new Uint8Array(o);let c=r[n+s],f=0,m=e=>e.forEach(e=>c[f++]=e);for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<p-1;++t)m(e[d+t]),m(this.separator);if(p>0){m(e[d+p-1]);for(let e=0;e<h;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<h-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){let r=e.length,n=t.length;if(n>0){let e=t[0];if(0!==e)throw Error(`First split value must be 0, got ${e}`);for(let a=1;a<n;++a){let n=t[a]>=e;if(!(n=n&&t[a]<=r))throw Error(`Invalid split value ${t[a]}, must be in [${e}, ${r}]`);e=t[a]}if(e!==r)throw Error(`Last split value must be data size. Expected ${r}, got ${e}`)}let a=n-1,i=ny.getArrayFromDType("int32",n);if(0===r||0===n){let e=Array(r);for(let e=0;e<=a;++e)i[e]=0;return[e,i]}i[0]=0;for(let e=1;e<=a;++e){let r=t[e]-t[e-1],n=0;this.nGramWidths.forEach(e=>{n+=this.getNumNGrams(r,e)}),this.preserveShort&&r>0&&0===n&&(n=1),i[e]=i[e-1]+n}let s=Array(i[a]);for(let r=0;r<a;++r){let n=t[r],a=i[r];if(this.nGramWidths.forEach(i=>{let o=t[r+1]-t[r],l=this.getNumNGrams(o,i);this.createNGrams(e,n,s,a,l,i),a+=l}),this.preserveShort&&a===i[r]){let i=t[r+1]-t[r];if(0===i)continue;let o=i+2*this.padWidth;this.createNGrams(e,n,s,a,1,o)}}return[s,i]}}function yD(e,t,r,n,a,i,s,o){return new y_(r,n,a,i,s,o).compute(e,t)}function yO(e,t,r){let n=e.length,a=[],i=0,s=0,o=Array(n);for(let l=0;l<n;++l){let n=a.length;!function(e,t,r,n){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)n.push(e.subarray(t,t+1));return}if(1===t.length){let a=t[0],i=e.indexOf(a);for(;-1!==i;){let t=e.subarray(0,i);r&&0===t.length||n.push(t),i=(e=e.subarray(i+1)).indexOf(a)}r&&0===e.length||n.push(e);return}let a=0;for(let i=0;i<e.length+1;i++)if(i===e.length||-1!==t.indexOf(e[i])){let t=e.subarray(a,i);r&&0===t.length||n.push(t),a=i+1}}(e[l],t,r,a);let u=a.length-n;o[l]=u,i+=u,s=Math.max(s,u)}let l=ny.getArrayFromDType("int32",2*i),u=Array(i),h=[n,s],p=0;for(let e=0;e<n;++e)for(let t=0;t<o[e];++t)l[2*p]=e,l[2*p+1]=t,u[p]=a[p],++p;return[l,u,h]}function yM(e,t){let r=ny.getArrayFromDType("int32",e.length);for(let n=0;n<e.length;++n)r[n]=ny.fingerPrint64(e[n]).modulo(t).getLowBitsUnsigned();return r}const yz=gf((e,t)=>e-t),yP=gw("Sub",yz,gk((e,t,r,n)=>({real:e-r,imag:t-n})));function yL(e,t){let r=Array(e.rank);for(let n=0;n<r.length;n++)r[n]=e.shape[n]*t[n];let n=so(r,e.dtype);for(let t=0;t<n.values.length;++t){let r=n.indexToLoc(t),a=Array(e.rank);for(let t=0;t<a.length;t++)a[t]=r[t]%e.shape[t];let i=e.locToIndex(a);n.values[t]=e.values[i]}return n}const yB=(e,t)=>{let r=t.value-e.value;return 0===r?e.index-t.index:r};function yW(e,t,r,n,a){let i=t[t.length-1],[s,o]=[e.length/i,i],l=ny.getTypedArrayFromDType(r,s*n),u=ny.getTypedArrayFromDType("int32",s*n);for(let t=0;t<s;t++){let r=t*o,i=e.subarray(r,r+o),s=Array(i.length);i.forEach((e,t)=>s[t]={value:e,index:t}),n<s.length&&(!function e(t,r,n=0,a=t.length-1){for(;a>n;){if(a-n>600){let i=a-n+1,s=r-n+1,o=Math.log(i),l=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*l*(i-l)/i)*Math.sign(s-i/2),h=Math.max(n,Math.floor(r-s*l/i+u)),p=Math.min(a,Math.floor(r+(i-s)*l/i+u));e(t,r,h,p)}let i=t[r],s=n,o=a;for(ny.swap(t,n,r),yB(t[a],i)>0&&ny.swap(t,n,a);s<o;){for(ny.swap(t,s,o),s++,o--;0>yB(t[s],i);)s+=1;for(;yB(t[o],i)>0;)o-=1}0===yB(t[n],i)?ny.swap(t,n,o):(o+=1,ny.swap(t,o,a)),o<=r&&(n=o+1),r<=o&&(a=o-1)}}(s,n),s=s.slice(0,n)),a&&s.sort(yB);let h=t*n,p=l.subarray(h,h+n),d=u.subarray(h,h+n);for(let e=0;e<n;e++)p[e]=s[e].value,d[e]=s[e].index}let h=t.slice();return h[h.length-1]=n,[so(h,r,l),so(h,"int32",u)]}function yU(e,t,r,n){let a=ny.parseAxisParam(t,r)[0],i=[1,r[0],1];for(let e=0;e<a;e++)i[0]*=r[e];i[1]=r[a];for(let e=a+1;e<r.length;e++)i[2]*=r[e];let s=new Map,o=new Int32Array(r[a]),l=new as(i,n,e),u=[],h=1===i[0]&&1===i[2];for(let t=0;t<r[a];t++){let r;if(h)r=e[t].toString();else{let e=[];for(let r=0;r<i[0];r++)for(let n=0;n<i[2];n++)e.push(l.get(r,t,n));r=e.join(",")}let n=s.get(r);if(null!=n)o[t]=n;else{let e=s.size;s.set(r,e),o[t]=e,u.push(t)}}let p=i.slice();p[1]=s.size;let d=new as(p,n);u.forEach((e,t)=>{for(let r=0;r<i[0];r++)for(let n=0;n<i[2];n++)d.set(l.get(r,e,n),r,t,n)});let c=r.slice();return c[a]=p[1],{outputValues:d.values,outputShape:c,indices:o}}const{addImpl:yV,castImpl:yG,ceilImpl:yH,concatImpl:yj,equalImpl:yK,expImpl:yq,expm1Impl:yX,floorImpl:yY,floorDivImpl:yZ,gatherNdImpl:yQ,gatherV2Impl:yJ,greaterEqualImpl:y0,greaterImpl:y1,lessEqualImpl:y2,lessImpl:y3,logImpl:y4,maxImpl:y6,maximumImpl:y5,minimumImpl:y8,multiplyImpl:y7,negImpl:y9,notEqualImpl:be,prodImpl:bt,rangeImpl:br,rsqrtImpl:bn,scatterImpl:ba,simpleAbsImpl:bi,sliceImpl:bs,stridedSliceImpl:bo,stringNGramsImpl:bl,subImpl:bu,tileImpl:bh,topKImpl:bp,transposeImpl:bd,uniqueImpl:bc}=gp,bf=gu({opType:ky.ABS,cpuKernelImpl:bi}),bm=gu({opType:ky.ACOS}),bg=gu({opType:ky.ACOSH}),by=gh({opType:kg.ADD,cpuKernelImpl:yV,supportsComplex:!0});class bb{constructor(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map((e,t)=>`T${t}`),this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){let e=[];this.variableNames.forEach(t=>{e.push(`let v${t} = get${t}ByOutputCoords(coords);`)});let t=this.variableNames.map(e=>`v${e}`).join(" + ");return`
      ${f8("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${e.join("\n        ")}
            setOutputAtIndex(flatIndex, ${t});
          }
        }
      }
    `}}class bx{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[t[n]];this.outputShape=r,this.dispatchLayout={x:[0],y:[1]},this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){ny.assert(this.workgroupSize[0]===this.workgroupSize[1],()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);let e=this.workgroupSize[0];return`
      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;
      ${f8()} {
        var x = i32(workgroupId.x) * ${e} + i32(localId.x);
        var y = i32(workgroupId.y) * ${e} + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = f32(A[y * width + x]);
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * ${e} + i32(localId.x);
        y = i32(workgroupId.x) * ${e} + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `}}class bv{constructor(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[t[n]];this.outputShape=r,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey=`transpose_${t}`}getUserCode(){let e=f6(this.outputShape.length),t=bw(this.newDim);return`
      ${f8("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${e}(${t}), uniforms.aShape)]);
          }
        }
      }
    `}}function bw(e){let t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let r=Array(t);for(let t=0;t<e.length;t++)r[e[t]]=`coords.${f5(t)}`;return r.join()}function bk(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{perm:i}=n,s=Array(a.shape.length);for(let e=0;e<s.length;e++)s[e]=a.shape[i[e]];if(r.shouldExecuteOnCPU([a])){let e=bd(r.tensorMap.get(a.dataId).values,a.shape,a.dtype,i,s);return r.makeTensorInfo(s,a.dtype,e)}if(2===a.shape.length&&ny.arraysEqual(i,[1,0])){let e=new bx(a.shape,i);return r.runWebGPUProgram(e,[a],a.dtype)}let o=new bv(a.shape,i);return r.runWebGPUProgram(o,[a],a.dtype)}class bS{constructor(e,t,r){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];let[n]=or.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=0===n.length?[1]:n,e.inSize>=32768&&r>=512?this.workgroupSize=[512,1,1]:e.inSize>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=t,this.shaderKey=`reduce_${t}`}getUserCode(){let e="",t="0.0",r=this.workgroupSize[0];"min"===this.reduceType||"max"===this.reduceType?(e=`
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${"min"===this.reduceType?"<":">"} bestValue)
           {  bestValue = candidate; }`,t="f32(x[offset])"):"sum"===this.reduceType||"mean"===this.reduceType?e=" bestValue = bestValue + candidate; ":"prod"===this.reduceType?(e=" bestValue = bestValue * candidate; ",t="1.0"):"all"===this.reduceType?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):"any"===this.reduceType&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");let n="mean"===this.reduceType?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);",a=`
         var<workgroup> xBestValues : array<f32, ${r}>;
       `;return`
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${a}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${1===this.outputShape.length?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${f8("index")} {
         let outputIndex = index / ${r};
         let offset = getOffset(outputIndex);
         var bestValue = ${t};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), ${r}u);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + ${r}) {
           let candidate = f32(x[offset + k]);
           ${e}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), ${r}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${e}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${n}
        }
       }
     `}}const bI={mean:"float32",all:"bool",any:"bool"};function bC(e,t,r,n,a){let i,s=e.shape.length,o=[],l=ny.parseAxisParam(t,e.shape),u=l,h=or.getAxesPermutation(u,s),p=e;null!=h&&(p=bk({inputs:{x:e},attrs:{perm:h},backend:a}),u=or.getInnerMostAxes(u.length,s),o.push(p)),or.assertAxesAreInnerMostDims(n,u,s);let[d,c]=or.computeOutAndReduceShapes(p.shape,u),f=d;if(r&&(f=or.expandShapeToKeepDim(d,l)),("max"===n||"prod"===n)&&a.shouldExecuteOnCPU([p])){let t=a.tensorMap.get(p.dataId).values;switch(n){case"max":let r=y6(t,ny.sizeFromShape(c),f,e.dtype);i=a.makeTensorInfo(f,e.dtype,r);break;case"prod":let{outVals:s,outShape:o,outDtype:l}=bt(p.shape,p.dtype,t,u);i=a.makeTensorInfo(o,l,s);break;default:throw Error(`${n} CPU implementation is not yet supported.`)}}else{let t=ny.sizeFromShape(c),r=ny.sizeFromShape(p.shape)/t,s=bI[n]||am(e.dtype),l=new bS({windowSize:t,inSize:t,batchSize:r,outSize:1},n,a.device.limits.maxComputeWorkgroupSizeX),u=a.runWebGPUProgram(l,[p],s,[{type:"int32",data:[t]}]);o.push(u),i=gr({inputs:{x:u},attrs:{shape:f},backend:a})}return o.forEach(e=>a.disposeData(e.dataId)),i}class bN{constructor(e,t,r){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0,this.op="min"===r?"<":">";let[n,a]=or.computeOutAndReduceShapes(e,[t]);this.outputShape=0===n.length?[1]:n,this.dispatchLayout=md(this.outputShape),32>ny.sizeFromShape(a)?(this.type="plain",this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=ml(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){let e=this.workgroupSize[0],t=()=>1===this.inputShape.length?"uniforms.xShape":`uniforms.xShape.${f5(this.inputShape.length-1)}`,r=()=>{let e="";if(1===this.outputShape.length)1!==this.inputShape.length&&(e+="outputCoords,");else for(let t=0;t<this.outputShape.length;t++)e+=`outputCoords.${f5(t)},`;return e};if("shared"!==this.type)return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${r()} 0);
          let reduceLength = ${t()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${r()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `;{let n=`
      var<workgroup> xBestIndices : array<i32, ${e}>;
      var<workgroup> xBestValues : array<f32, ${e}>;
    `;return`
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${n}

      ${f8("index")} {
        let outputIndex = index / ${e};
        let reduceLength = ${t()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + ${e}) {
          let candidate = getX(${r()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), ${e}u);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    `}}}const bT=gu({opType:ky.ASIN}),b$=gu({opType:ky.ASINH}),bE=gu({opType:ky.ATAN}),bR=gh({opType:kg.ATAN2}),bA=gu({opType:ky.ATANH});class bF{constructor(e){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.strides;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `}}class b_{constructor(e,t,r=!1,n=!1,a=!1){if(this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&r)throw Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=r,this.flattenPositions=n,this.includeBatchIndex=a,this.shaderKey=`pool2D_${t}_${r}_${n}_${a}`}getUserCode(){let e;if("avg"===this.poolType)e="resultValue = resultValue + value; count = count + 1.0;";else if(this.computePositions){let t=this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC";e=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${t};
      }`}else e="resultValue = max(value, resultValue);";let t="resultValue";return"avg"===this.poolType&&(t="resultValue / max(count, 1.0)"),`
      ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, d);
              ${e}
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}
        }
      }
    `}}class bD{constructor(e,t,r=!1,n=!1,a=!1){if(this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,"avg"===t&&r)throw Error("Cannot compute positions for average pool.");this.outputShape=e.outShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=t,this.computePositions=r,this.flattenPositions=n,this.includeBatchIndex=a,this.shaderKey=`pool3D_${t}_${r}_${n}_${a}`}getUserCode(){let e;if("avg"===this.poolType)e="resultValue += value; count += 1.0;";else if(this.computePositions){let t=this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC";e=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${t};
      }`}else e="resultValue = max(value, resultValue);";let t="resultValue";return"avg"===this.poolType&&(t="resultValue / max(count, 1.0)"),`
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords.x;
          let ch = coords.u;

          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
          let xDCorner = xCorner.x;
          let xRCorner = xCorner.y;
          let xCCorner = xCorner.z;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {
            let xD = xDCorner + wD;
            if (xD < 0 || xD >= uniforms.convDims.x) {
              continue;
            }

            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {
              let xR = xRCorner + wR;
              if (xR < 0 || xR >= uniforms.convDims.y) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {
                let xC = xCCorner + wC;
                if (xC < 0 || xC >= uniforms.convDims.z) {
                  continue;
                }

                let value = getX(batch, xD, xR, xC, ch);
                ${e}
              }
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${t});`}
        }
      }
    `}}function bO(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{reductionIndices:i,keepDims:s}=n;return bC(a,i,s,"max",r)}function bM(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{keepDims:i,axis:s}=n;return bC(a,s,i,"mean",r)}function bz(e,t,r,n){let a;if(1===t.filterWidth&&1===t.filterHeight&&ny.arraysEqual(t.inShape,t.outShape))return gs({inputs:{x:e},backend:n});if(t.filterWidth===t.inWidth&&t.filterHeight===t.inHeight&&1===t.batchSize&&"VALID"===t.padInfo.type){let a,i=e.shape.length,s=gr({inputs:{x:e},backend:n,attrs:{shape:[e.shape[i-3]*e.shape[i-2],e.shape[i-1]]}});"avg"===r?a=bM({inputs:{x:s},backend:n,attrs:{axis:0,keepDims:!1}}):(ny.assert("max"===r,()=>`Invalid pool type ${r}`),a=bO({inputs:{x:s},backend:n,attrs:{reductionIndices:0,keepDims:!1}}));let o=gr({inputs:{x:a},backend:n,attrs:{shape:t.outShape}});return n.disposeData(s.dataId),n.disposeData(a.dataId),o}let i=[{type:"int32",data:[t.strideHeight,t.strideWidth]}];return 1===t.filterHeight&&1===t.filterWidth?a=new bF(t):("avg"===r?a=new b_(t,"avg"):(ny.assert("max"===r,()=>`Invalid pool type ${r}`),a=new b_(t,"max")),i.push({type:"int32",data:[t.padInfo.top,t.padInfo.left]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[t.inHeight,t.inWidth]},{type:"int32",data:[t.effectiveFilterHeight,t.effectiveFilterWidth]})),n.runWebGPUProgram(a,[e],e.dtype,i)}class bP{constructor(e){this.variableNames=["dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}getUserCode(){return`
      ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);

            dotProd = dotProd + dyValue * uniforms.avgMultiplier;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class bL{constructor(e){this.variableNames=["dy"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}getUserCode(){return`
      ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              dotProd += dyValue * uniforms.avgMultiplier;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class bB{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${f6(e.length)}, `,this.shaderKey="slice"}getUserCode(){let e,t=f6(this.rank),r=function(e){if(1===e)return"sourceLoc";if(e<=6)return bW.slice(0,e).map(e=>`sourceLoc.${e}`).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);return e=1===this.start.length?this.outputShape.map((e,t)=>"sourceLoc = uniforms.start + coords;"):this.outputShape.map((e,t)=>`sourceLoc.${bW[t]} = uniforms.start.${f5(t)} + coords.${bW[t]};`),`
      ${f8("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${t};
          let coords = getCoordsFromIndex(index);
          ${e.join("\n")}
          setOutputAtIndex(index, getSource(${r}));
        }
      }
    `}}const bW=["x","y","z","w","u","v"];function bU(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{begin:i,size:s}=n,[o,l]=oM.parseSliceParams(a,i,s);if(oM.assertParamsValid(a,o,l),r.shouldExecuteOnCPU([a])||"string"===a.dtype){let e=bs(r.tensorMap.get(a.dataId).values,o,l,a.shape,a.dtype);return r.makeTensorInfo(l,a.dtype,e)}if(0===ny.sizeFromShape(l))return r.makeTensorInfo(l,a.dtype,[]);let u=new bB(o,l),h=[{type:"int32",data:o}];return r.runWebGPUProgram(u,[a],a.dtype,h)}const bV=`
  fn bincount_write(index: i32, value: f32) {
    ${f3("&result[index]","value","float32")}
  }
`,bG=`
  fn bincount_write(index: i32, value: f32) {
    atomicStore(&result[index], bitcast<i32>(value));
  }
`;class bH{constructor(e,t,r=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=r,r&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`
    ${this.binaryOutput?bG:bV}
  ${f8("index")} {
    ${1===this.rank?`if (index < uniforms.xShape) {
      let indexVal = i32(getX(index));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};
        bincount_write(indexVal, value);
      }
    }`:`let coord = getCoordsFromIndex(index);
    if (coordsInBounds2D(coord, uniforms.xShape)) {
      let indexVal = i32(getX(coord[0], coord[1]));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};
        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);
      }
    }`}
  }
  `}}class bj{constructor(e){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}getUserCode(){return`
  ${f8("index")} {
    if (index < uniforms.size) {
      var s0 = 1.0;
      var s1 = 1.0;
      let indexS0 = index - uniforms.size + uniforms.s0Size;
      let indexS1 = index - uniforms.size + uniforms.s1Size;
      if (indexS0 >= 0) {
        s0 = getS0(indexS0);
      }
      if (indexS1 >= 0) {
        s1 = getS1(indexS1);
      }

      if (s0 == 1.0) {
        setOutputAtIndex(index, s1);
      } else if (s1 == 1.0) {
        setOutputAtIndex(index, s0);
      } else if (s0 != s1) {
        setOutputAtIndex(index, uniforms.NAN);
      } else {
        setOutputAtIndex(index, s0);
      }
    }
  }
  `}}const bK=gh({opType:kg.NOT_EQUAL,dtype:"bool",cpuKernelImpl:be});function bq(e){let{inputs:t,backend:r}=e,{input:n}=t;return gs({inputs:{x:r.tensorMap.get(n.dataId).complexTensorInfos.real},backend:r})}const bX=gu({opType:ky.CEIL,cpuKernelImpl:yH});class bY{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`
      ${f8("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue = clamp(
              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));
          clampedValue = select(clampedValue, value, isnanVec4(value));
          setOutputAtIndex(index, clampedValue);
        }
      }
    `}}class bZ{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`
      ${f8("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `}}class bQ{constructor(e){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}getUserCode(){return`
    ${f8("index")} {
      if (index < uniforms.size) {
        let re = abs(getRealByOutputIndex(index));
        let im = abs(getImagByOutputIndex(index));
        let mx = max(re, im);

        // The length function in wgsl may be not underflow-safe on some GPUs.
        // So the safe solution is to ensure underflow-safety in all cases.
        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));
      }
    }
  `}}function bJ(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}class b0{constructor(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=or.computeOutShape(e,1),this.variableNames=e.map((e,t)=>`T${t}`),this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){let e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let t=1;t<this.offsetLength;t++)e.push(`else if (yC < uniforms.offset${[t]}){ setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${t-1})); }`);let t=this.offsetLength,r=this.offsetLength-1;e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${r})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`
      ${f8("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${e.join("\n        ")}
          }
        }
      }
    `}}function b1(e){let{inputs:t,backend:r}=e,{input:n}=t;return gs({inputs:{x:r.tensorMap.get(n.dataId).complexTensorInfos.imag},backend:r})}function b2(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n,i=ny.parseAxisParam(a,t[0].shape)[0],s=t.map(e=>e.shape);or.assertParamsConsistent(s,i);let o=or.computeOutShape(t.map(e=>e.shape),i);if(0===ny.sizeFromShape(o))return r.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter(e=>ny.sizeFromShape(e.shape)>0);return 1===l.length?gs({inputs:{x:l[0]},backend:r}):function e(t,r,n){let a=t[0].dtype;if("complex64"===a){let a=t.map(e=>bq({inputs:{input:e},backend:n})),i=t.map(e=>b1({inputs:{input:e},backend:n})),s=e(a,r,n),o=e(i,r,n),l=go({inputs:{real:s,imag:o},backend:n});return a.forEach(e=>n.disposeData(e.dataId)),i.forEach(e=>n.disposeData(e.dataId)),n.disposeData(s.dataId),n.disposeData(o.dataId),l}let i=n.shouldExecuteOnCPU(t);if("string"===a&&(i=!0),i){let e=t.map(e=>{let t=ny.sizeFromShape(e.shape.slice(r));return gr({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),i=e.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),s=yj(i,or.computeOutShape(e.map(e=>e.shape),1),a,1===e[0].shape[0]),o=or.computeOutShape(t.map(e=>e.shape),r),l=n.makeTensorInfo(o,a,s);return e.forEach(e=>n.disposeData(e.dataId)),l}let s=n.device.limits.maxStorageBuffersPerShaderStage-1;if(t.length>s){let a=[];for(let i=0;i<t.length;i+=s){let o=t.slice(i,i+s);a.push(e(o,r,n))}let i=e(a,r,n);for(let e of a)n.disposeData(e.dataId);return i}let{tensors2D:o,outShape:l}=function(e,t,r){let n=or.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>gr({inputs:{x:e},backend:r,attrs:{shape:[ny.sizeFromShape(e.shape.slice(0,t)),ny.sizeFromShape(e.shape.slice(t))]}})),outShape:n}}(t,r,n),u=o.map(e=>e.shape),h=new b0(u),p=[],d=Array(u.length-1);if(d.length>0){d[0]=u[0][1],p.push({type:"int32",data:[d[0]]});for(let e=1;e<d.length;e++)d[e]=d[e-1]+u[e][1],p.push({type:"int32",data:[d[e]]})}let c=n.runWebGPUProgram(h,o,o[0].dtype,p);o.forEach(e=>n.disposeData(e.dataId));let f=gr({inputs:{x:c},backend:n,attrs:{shape:l}});return n.disposeData(c.dataId),f}(l,i,r)}class b3{constructor(e,t,r,n,a=!1,i=null,s=!1,o=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=((e.inChannels%4==0||e.inChannels%3==0)&&this.isChannelsLast||e.outWidth%4==0&&!this.isChannelsLast)&&e.outChannels%4==0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=mh(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=mp(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&e.inChannels%4!=0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),a&&(this.variableNames.push("bias"),this.variableComponents.push(4)),s&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],a&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=o,this.addBias=a,this.activation=i,this.hasPreluActivationWeights=s,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter==0,this.fitBOuter=r%this.tileBOuter==0,this.fitInner=n%this.tileInner==0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){let e=this.isVec4?m2(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):m4(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`
    ${function(e,t,r,n,a=!1,i=null,s=!1,o=4,l=4,u=4){let h=e?`
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `,p=e?`
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      `:`
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `,d=e?"row":"col",c=e?"col":"row",f=`
      let inChannels = uniforms.wShape[2];
      let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};
      let outRow = ${d} / outWidth;
      let outCol = ${d} % outWidth;

      let WRow = ${c} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${c} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];
      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];
      let xCh = ${c} % inChannels;
      var resData = ${f4(o)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${e?"uniforms.xShape[1]":"uniforms.xShape[2]"} && xCol >= 0 && xCol < ${e?"uniforms.xShape[2]":"uniforms.xShape[3]"}) {
        ${h}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${(e=>{switch(e){case 1:return"resData = f32(x[xIndex]);";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = vec4<f32>(x[xIndex / 4]);";default:throw Error(`innerElementSize ${e} is not supported.`)}})(o)}
      }
      return resData;`,m=e?t&&n?`
      ${f}`:`
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${f}
      }
      return ${f4(o)}(0.0);`:n&&r?`
      ${f}`:`
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${f}
      }
      return ${f4(o)}(0.0);`,g=`${(e=>{switch(e){case 1:return"return f32(W[row * uniforms.wShape[3] + col]);";case 4:return"return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";default:throw Error(`innerElementSize ${e} is not supported.`)}})(l)}`,y=f4(u),b=e?f4(o):f4(l),x=e?f4(l):f4(o);return`
      ${mQ(i,s,4===u,4)}
      fn mm_readA(batch: i32, row : i32, col : i32) -> ${b} {
        ${e?m:g}
      }

      fn mm_readB(batch: i32, row : i32, col : i32) -> ${x} {
        ${e?g:m}
      }

      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${y}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};
        ${p}
        ${mJ(a,i)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`}(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}
    ${e}
  `}}class b4{constructor(e,t=!1,r=null,n=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=r,this.hasPreluActivationWeights=n,t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`
       ${mQ(this.activation,this.hasPreluActivationWeights,!1,4)}
       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{
         let coords = vec4<i32>(batch, row, col, chan);
         if (coordsInBounds4D(coords, uniforms.xShape)) {
           return  getX(batch, row, col, chan);
         } else {
          return 0.0;
         }
       }
       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{
         let coords = vec4<i32>(row, col, xChannel, outChannel);
         if(coordsInBounds4D(coords, uniforms.wShape)) {
           return getW(row, col, xChannel, outChannel);
          } else {
            return 0.0;
          }
       }
       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {
         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}
         if (coordsInBounds4D(coords, uniforms.outShape)) {
           var value = valueIn;
           ${mJ(this.addBias,this.activation)}
           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);
         }
       }
       ${f8("index")} {
         let coords = getOutputCoords();
         let batch = coords[0];
         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}
         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}
         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}
         var acc : f32 = 0.0;
         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {
           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {
             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];
             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];
             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {
               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}
               let f = readFilt(row, col, xChannel, outChannel);
               acc = acc + v * f;
             }
           }
         }
         writeResult(batch, outRow, outCol, outChannel, acc);
       }
     `}}class b6{constructor(e,t){this.variableNames=["x"],this.uniforms=`pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,
       inChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey=`im2col_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,r=this.isChannelsLast?"coords[1]":"coords[2]",n=this.isChannelsLast?"coords[2]":"coords[1]",a=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`
    ${f8("index")} {
      let coords = getCoordsFromIndex(index);
      if(index < uniforms.size) {
        let batch = coords[0];
        let row = ${r};
        let col = ${n};
        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];
        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);
        var value = 0.0;
        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {
          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -
              uniforms.pads[1];
          let xCol = offsetX + uniforms.dilations[1] * ((col %
              uniforms.itemsPerBlockRow) / uniforms.inChannels);
          let ch = col % uniforms.inChannels;
          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {
            value = ${a};
          }
        }
        setOutputAtIndex(index, value);
      }
    }
   `}}function b5(e,t){let r=e.length;return r>=3?t?[...e.slice(0,-3),e[r-3]*e[r-2],e[r-1]]:[...e.slice(0,-3),e[r-3],e[r-2]*e[r-1]]:!t&&1===r&&e[0]>1?[e[0],1]:null}function b8({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let l,u=null!=a,h=null!=i,p="channelsLast"===r.dataFormat,d=p&&r.filterHeight===r.inHeight&&r.filterWidth===r.inWidth&&"VALID"===r.padInfo.type,c=e_.getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!c&&(d||1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type)))return function({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let l,u,h="channelsLast"===r.dataFormat,p=h&&r.filterHeight===r.inHeight&&r.filterWidth===r.inWidth&&"VALID"===r.padInfo.type,d=[];if(p){let a=r.inHeight*r.inWidth*r.inChannels;l=gr({inputs:{x:e},backend:n,attrs:{shape:[1,r.batchSize,a]}}),u=gr({inputs:{x:t},backend:n,attrs:{shape:[1,a,r.outChannels]}})}else l=gr({inputs:{x:e},backend:n,attrs:{shape:h?[r.batchSize,r.inHeight*r.inWidth,r.inChannels]:[r.batchSize,r.inChannels,r.inHeight*r.inWidth]}}),u=gr({inputs:{x:t},backend:n,attrs:{shape:[1,r.inChannels,r.outChannels]}});if(d.push(l),d.push(u),null!=i){let e=b5(i.shape,h);null!=e&&(i=gr({inputs:{x:i},backend:n,attrs:{shape:e}}),d.push(i))}if(null!=a){let e=b5(a.shape,h);null!=e&&(a=gr({inputs:{x:a},backend:n,attrs:{shape:e}}),d.push(a))}let c=gn({a:h?l:u,b:h?u:l,transposeA:!h,transposeB:!1,backend:n,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s}),f=gr({inputs:{x:c},backend:n,attrs:{shape:r.outShape}});for(let e of(d.push(c),d))n.disposeData(e.dataId);return f}({x:e,filter:t,convInfo:r,backend:n,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s});let f=e_.getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),m=f>-1?f:n.thresholdToIncreaseWorkgroups,g=r.batchSize*Math.ceil(r.outHeight*r.outWidth/32)*Math.ceil(r.outChannels/32);if(e_.getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||g<=m)return function({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let{filterWidth:l,filterHeight:u,inChannels:h,strideWidth:p,strideHeight:d,padInfo:c,outWidth:f,outHeight:m,dilationWidth:g,dilationHeight:y,dataFormat:b}=r,x="channelsLast"===b,v=l*u*h,w=m*f,k=new b6(x?[r.batchSize,w,v]:[r.batchSize,v,w],x),S=[{type:"int32",data:[c.top,c.left]},{type:"int32",data:[d,p]},{type:"int32",data:[y,g]},{type:"int32",data:[f]},{type:"int32",data:[h*l]},{type:"int32",data:[h]}],I=n.runWebGPUProgram(k,[e],e.dtype,S),C=[];C.push(I);let N=gr({inputs:{x:t},backend:n,attrs:{shape:[1,v,-1]}});if(C.push(N),null!=i){let e=b5(i.shape,x);null!=e&&(i=gr({inputs:{x:i},backend:n,attrs:{shape:e}}),C.push(i))}if(null!=a){let e=b5(a.shape,x);null!=e&&(a=gr({inputs:{x:a},backend:n,attrs:{shape:e}}),C.push(a))}let T=gn({a:x?I:N,b:x?N:I,transposeA:!x,transposeB:!1,backend:n,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s}),$=gr({inputs:{x:T},backend:n,attrs:{shape:r.outShape}});for(let e of(C.push(T),C))n.disposeData(e.dataId);return $}({x:e,filter:t,convInfo:r,backend:n,bias:a,preluActivationWeights:i,leakyreluAlpha:s,activation:o});let y=[r.padInfo.top,r.padInfo.left],b=[{type:"int32",data:[r.filterHeight,r.filterWidth]},{type:"int32",data:[...y]},{type:"int32",data:[r.strideHeight,r.strideWidth]},{type:"int32",data:[r.dilationHeight,r.dilationWidth]}];if(c)l=new b4(r,u,o,h);else{let e=p?r.outHeight*r.outWidth:r.outChannels,t=p?r.outChannels:r.outHeight*r.outWidth,a=r.filterHeight*r.filterWidth*r.inChannels;b.push({type:"int32",data:[e]},{type:"int32",data:[t]},{type:"int32",data:[a]}),l=new b3(r,e,t,a,u,o,h,n.adapterInfo.isIntel())}let x=[],v=[e,t];u&&(p||1!==a.shape.length||x.push(a=gr({inputs:{x:a},backend:n,attrs:{shape:[a.shape[0],1,1]}})),v.push(a)),h&&(p||1!==i.shape.length||x.push(i=gr({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}})),v.push(i)),"leakyrelu"===o&&(b.push({type:"float32",data:[s]}),l.uniforms+=" alpha : f32,");let w=n.runWebGPUProgram(l,v,e.dtype,b);for(let e of x)n.disposeData(e.dataId);return w}class b7{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=e.inShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=this.isChannelsLast&&e.outChannels%4==0&&e.inChannels%4==0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey=`conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`}getUserCode(){let e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,r=this.isChannelsLast?3:1,n=`
    ${f8()} {
      let batch = i32(globalId.z) / uniforms.outShape[1];
      let r = i32(globalId.z) % uniforms.outShape[1];
      let c = i32(globalId.y) * ${this.workPerThread};
      let d1 = i32(globalId.x) * 4;

      let dyCorner = vec2<i32>(r, c) - uniforms.pads;

      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
      // ? = to be determined. : = across all values in that axis.
      var dotProd: array<vec4<f32>, ${this.workPerThread}>;
      for (var i = 0; i < ${this.workPerThread}; i++) {
        dotProd[i] = vec4<f32>(0.0);
      }
      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);
        let wRPerm = uniforms.filterDims.x - 1 - wR;
        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||
            fract(dyR) > 0.0) {
          continue;
        }
        let idyR = i32(dyR);

        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);
          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);
          let wCPerm = uniforms.filterDims.y - 1 - wC;
          var bDyCVal = true;
          var bDyCVal2 = true;
          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
              fract(dyC) > 0.0) {
            bDyCVal = false;
          }
          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||
              fract(dyC2) > 0.0) {
            bDyCVal2 = false;
          }

          let idyC = i32(dyC);
          let idyC2 = i32(dyC2);
          if (bDyCVal && bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
              xValue = getDy(batch, idyR, idyC2, d2);
              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),
                                                  dot(xValue, wValue1),
                                                  dot(xValue, wValue2),
                                                  dot(xValue, wValue3));
            }
          } else if (bDyCVal) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
            }
          } else if (bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC2, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[1] = dotProd[1] + tmpval;
            }
          }
        }
      }

      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
        let coords = vec4<i32>(batch, r, c + i, d1);
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);
        }
      }
    }
    `;return this.isVec4?`
    ${n}
    `:`
    ${f8("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${r}];

        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = i32(dyC);

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              let xValue = ${this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)"};
              let wValue = getW(wRPerm, wCPerm, d1, d2);
              dotProd = dotProd + xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class b9{constructor(e){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey=`conv2DDerFilter_${this.isChannelsLast}`}getUserCode(){return`
    ${f8("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let d2 = coords[3];

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b = b + 1) {
          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];
            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              if (${this.isChannelsLast}) {
                let dyValue = getDy(b, yR, yC, d2);
                let xValue = getX(b, xR, xC, d1);
                dotProd = dotProd + xValue * dyValue;
              } else {
                let dyValue = getDy(b, d2, yR, yC);
                let xValue = getX(b, d1, xR, xC);
                dotProd = dotProd + xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class xe{constructor(e){this.variableNames=["x","dy"],this.uniforms=`pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,
       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}getUserCode(){return`
    ${f8("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wF = coords.x;
        let wR = coords.y;
        let wC = coords.z;
        let d1 = coords.w;
        let d2 = coords.u;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yF = 0; yF < uniforms.outDepth; yF++) {
            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];
            if (xF < 0 || xF >= uniforms.inDepth) {
              continue;
            }

            for (var yR = 0; yR < uniforms.outHeight; yR++) {
              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];
              if (xR < 0 || xR >= uniforms.inHeight) {
                continue;
              }

              for (var yC = 0; yC < uniforms.outWidth; yC++) {
                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];
                if (xC < 0 || xC >= uniforms.inWidth) {
                  continue;
                }

                let dyValue = getDy(b, yF, yR, yC, d2);
                let xValue = getX(b, xF, xR, xC, d1);
                dotProd += xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class xt{constructor(e){this.variableNames=["dy","W"],this.uniforms=`filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}getUserCode(){return`
    ${f8("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let d1 = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyFCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);
          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {
            continue;
          }
          let idyF = i32(dyF);

          let wFPerm = uniforms.filterDims[0] - 1 - wF;

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            let wRPerm = uniforms.filterDims[1] - 1 - wR;

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let wCPerm = uniforms.filterDims[2] - 1 - wC;

              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {
                let xValue = getDy(batch, idyF, idyR, idyC, d2);
                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}}class xr{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,ny.assert("channelsLast"===e.dataFormat,()=>"TODO: NCHW is unimplemented"),this.isVec4=e.inChannels%4==0&&e.outChannels%4==0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=mh(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=mp(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){let e=this.isVec4?m2(this.elementsPerThread,this.workgroupSize):m4(this.elementsPerThread,this.workgroupSize);return`
    ${function(e=4){let t=`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${f4(e)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${f4(e)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${e}];`,r=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${t}
      }
      return ${f4(e)}(0.0);`;return`
  fn mm_readA(batch: i32, row : i32, col : i32) -> ${f4(e)} {
    ${r}
  }

  fn mm_readB(batch: i32, row : i32, col : i32) -> ${f4(e)} {
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${(e=>{switch(e){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw Error(`innerElementSize ${e} is not supported.`)}})(e)}
    }
    return ${f4(e)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${f4(e)}) {
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${e}] = value;
    }
  }`}(this.isVec4?4:1)}
    ${e}
    `}}class xn{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}getUserCode(){return`
    ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords.x;
        let d2 = coords.u;

        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
        let xFCorner = xFRCCorner.x;
        let xRCorner = xFRCCorner.y;
        let xCCorner = xFRCCorner.z;

        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;
        let inputDepthVec4Remainder = uniforms.xShape.u % 4;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let xF = xFCorner + wF * uniforms.dilations[0];
          if (xF < 0 || xF >= uniforms.xShape.y) {
            continue;
          }

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let xR = xRCorner + wR * uniforms.dilations[1];
            if (xR < 0 || xR >= uniforms.xShape.z) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let xC = xCCorner + wC * uniforms.dilations[2];
              if (xC < 0 || xC >= uniforms.xShape.w) {
                continue;
              }

              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {
                let xValues = vec4<f32>(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                let wValues = vec4<f32>(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (inputDepthVec4Remainder == 1) {
                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *
                  getW(wF, wR, wC, inputDepthNearestVec4, d2);
              } else if (inputDepthVec4Remainder == 2) {
                let xValues = vec2<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)
                );
                let wValues = vec2<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (inputDepthVec4Remainder == 3) {
                let xValues = vec3<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)
                );
                let wValues = vec3<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }`}}const xa=gu({opType:ky.COS}),xi=gu({opType:ky.COSH});class xs{constructor(e,t,r,n){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;let[a]=t;this.outputShape=[a,r[0],r[1],e],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId=+("bilinear"===n),this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){let[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[r,n,a]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${e}`],[i,s,o]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${t}`];return`
    ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${r});
        let width_ratio = f32(${i});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${n};
        let width_scale = ${s};
        let in_y = ${a};
        if( in_y < 0.0 || in_y > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${o};
        if( in_x < 0.0 || in_x > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `}}(w7=kb||(kb={})).Prod="*",w7.Sum="+";class xo{constructor(e,t,r,n){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=r,this.reverse=n,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){let e=this.outputShape.length,t=this.op===kb.Prod?"1.0":"0.0",r=this.exclusive?t:`getX(${xl(e,"coords",this.op)})`,n=this.outputShape[this.outputShape.length-1],a="",i="";return this.exclusive?(a=this.reverse?`end != ${n-1}`:"end != 0",i=this.reverse?"end + 1":"end - 1"):(a=this.reverse?`end + pow2 < ${n}`:"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),`
      ${f8("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${xu(e,"coords",this.op)};
         var val = ${r};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${a}) {
           let idx = ${i};
           ${xu(e,"coords",this.op)} = idx;
           val ${this.op}= getX(${xl(e,"coords",this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `}}function xl(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}function xu(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}function xh(e,t,r,n,a,i){let s=t.shape.length,o=or.getAxesPermutation([n],s),l=t;null!=o&&(l=bk({inputs:{x:t},backend:r,attrs:{perm:o}}));let u=or.getInnerMostAxes(1,s)[0];if(u!==s-1)throw Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${n}`);let h=l.shape[u],p=gs({inputs:{x:l},backend:r});for(let t=0;t<=Math.ceil(Math.log2(h))-1;t++){let n=new xo(e,l.shape,!1,i),a=p,s=[{type:"float32",data:[t]}];p=r.runWebGPUProgram(n,[p],p.dtype,s),r.disposeData(a.dataId)}if(a){let t=new xo(e,l.shape,a,i),n=p;p=r.runWebGPUProgram(t,[p],p.dtype,[{type:"float32",data:[0]}]),r.disposeData(n.dataId)}if(null!=o){let e=bk({inputs:{x:p},backend:r,attrs:{perm:or.getUndoAxesPermutation(o)}});return r.disposeData(p.dataId),r.disposeData(l.dataId),e}return p}class xp{constructor(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`depthToSpace_${t}`,this.dataFormat=t}getUserCode(){return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class xd{constructor(e,t,r,n=!1,a=null,i=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),n&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=n,this.activation=a,this.hasPreluActivation=i,this.filterHeight=t,this.filterWidth=r,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){let e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],r=this.workgroupSize[1]+this.filterHeight-1,n=this.workgroupSize[0]+this.filterWidth-1;return`
      ${mQ(this.activation,this.hasPreluActivation,!1,4)}

      var<workgroup> mm_Asub : array<array<f32, ${n}>, ${r}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${f8()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${r}; inputRow = inputRow + ${this.workgroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${n}; inputCol = inputCol + ${this.workgroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = i32(localIndex);
        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${mJ(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}}class xc{constructor(e,t=!1,r=null,n=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=e.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;let a=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=md(a),this.dispatch=ml(this.dispatchLayout,a,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),ny.assert("channelsLast"===e.dataFormat,()=>"TODO: NCHW is unimplemented"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=r,this.hasPreluActivation=n,this.shaderKey=`depthwiseVec4_${r}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){let e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,r=this.convInfo.strideWidth;return`
      ${mQ(this.activation,this.hasPreluActivation,!0,4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (col >=0 && col < uniforms.inDims[1]) {
          value = getX(batch, row, col, channel);
        }
        return value;
      }

      ${f8("index")} {
        let width0 = uniforms.outShape[3] / ${this.outputComponent};
        let d1 = (index % width0) * ${this.outputComponent};
        var index1 = index / width0;
        let width1 = uniforms.virtualWidth / ${this.workPerThread};
        let c = (index1 % width1) * ${this.workPerThread};
        index1 = index1 / width1;
        let r = index1 % uniforms.outShape[1];
        let batch = index1 / uniforms.outShape[1];

        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${r}) - uniforms.pads;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${e}>;
        var dotProd : array<vec4<f32>, ${this.workPerThread}>;
        for (var i = 0; i < ${this.workPerThread}; i++) {
          dotProd[i] = vec4<f32>(0.0);
        }

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          if (xR >=0 && xR < uniforms.inDims[0]) {
            for (var i = 0; i < ${e}; i++) {
              xVals[i] = readX(batch, xR, xCCorner + i, d1);
            }
            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
              let wValue = getW(wR, wC, d1, 0);
              for (var i = 0; i < ${this.workPerThread}; i++) {
                dotProd[i] = fma(xVals[i * ${r} + wC], wValue, dotProd[i]);
              }
            }
          }
        }

        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${mJ(this.addBias,this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `}}class xf{constructor(e,t=!1,r=null,n=!1){this.variableNames=["x","W"],this.uniforms=`pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`,this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=r,this.hasPreluActivation=n,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){let e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`
      ${mQ(this.activation,this.hasPreluActivation,!1,4)}

      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.strides - uniforms.pads;
          let d2 = coords[${this.isChannelsLast?3:1}];
          let channelMul = uniforms.wShape[3];
          let d1 = d2 / channelMul;
          let q = d2 % channelMul;

          let inputRowStart = xRCCorner.x;
          let inputColStart = xRCCorner.y;
          let inputRowEnd = inputRowStart + uniforms.filterHeight *
              uniforms.dilations[0];
          let inputColEnd = inputColStart + uniforms.filterWidth *
              uniforms.dilations[1];

          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
          var value = 0.0;

          // Extract if checking out of for loop for performance.
          if (inputRowStart >= 0 && inputColStart >= 0 &&
            inputRowEnd < uniforms.inDims[0] &&
                inputColEnd < uniforms.inDims[1]) {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            } else {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                if (xR < 0 || xR >= uniforms.inDims[0]) {
                  continue;
                }

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  if (xC < 0 || xC >= uniforms.inDims[1]) {
                    continue;
                  }

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            }
            ${mJ(this.addBias,this.activation)}
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}}class xm{constructor(e){this.variableNames=["x","dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,
      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}getUserCode(){return`
      ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let dm = coords[3];
        let d2 = d1 * uniforms.channelMul + dm;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yR = 0; yR < uniforms.outHeight; yR++) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];

            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC++) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              let dyValue = getDy(b, yR, yC, d2);
              let xValue = getX(b, xR, xC, d1);
              dotProd += xValue * dyValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class xg{constructor(e){this.variableNames=["dy","W"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}getUserCode(){return`
      ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[3];
        let dyCorner = coords.yz - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }

          let idyR = i32(dyR);
          let wRPerm = uniforms.filterDims[0] - 1 - wR;

          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }

            let idyC = i32(dyC);
            let wCPerm = uniforms.filterDims[1] - 1 - wC;

            for (var dm = 0; dm < uniforms.channelMul; dm++) {
              let d2 = d1 * uniforms.channelMul + dm;
              let xValue = getDy(batch, idyR, idyC, d2);
              let wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class xy{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);
          setOutputAtIndex(index, value);
        }
      }
    `}}class xb{constructor(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`
       ${f8("index")} {
         if (index < uniforms.size) {
           let neg_infinity = -3.4e38;
           let coords = getOutputCoords();
           let batch = coords.x;
           let d1 = coords.w;
           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;
           let hBeg = outTopLeftCorner.x;
           let wBeg = outTopLeftCorner.y;

           var curVal = neg_infinity;
           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {
             let hIn = hBeg + h * uniforms.dilations[0];

             if (hIn >= 0 && hIn < uniforms.xShape[1]) {
               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {
                 let wIn = wBeg + w * uniforms.dilations[1];

                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {
                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);
                   if (val > curVal) {
                     curVal = val;
                   }
                 }
               }
             }
           }

           setOutputAtIndex(index, curVal);
         }
       }
     `}}class xx{constructor(e,t){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.inShape,this.dispatchLayout=md(e.outShape),this.dispatch=ml(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==t&&"int32"!==t)throw Error(`Dilation2DBackpropInput only supports float32 and int32
          types, does not support ${t} type.`);this.type=t,this.shaderKey="dilation2DBackpropInput"}getUserCode(){return`
       ${f8("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var xRMax = 0;
           var xCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     xRMax = xR;
                     xCMax = xC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.xShape[3] *
               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));
           let value = getDy(b, r, c, d);
           ${f3("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}}class xv{constructor(e,t,r){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e.filterShape,this.dispatchLayout=md(e.outShape),this.dispatch=ml(this.dispatchLayout,e.outShape,this.workgroupSize),"float32"!==r&&"int32"!==r)throw Error(`Dilation2DBackpropFilter only supports float32 and int32
          types, does not support ${r} type.`);this.type=r,this.shaderKey="dilation2DBackpropFilter"}getUserCode(){return`
       ${f8("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var wRMax = 0;
           var wCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     wRMax = wR;
                     wCMax = wC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);
           let value = getDy(b, r, c, d);
           ${f3("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}}class xw{constructor(e,t,r){this.variableNames=["Image"],this.uniforms="alpha: f32,",this.workgroupSize=[64,1,1],this.pixelsOpType=kf.DRAW,this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.type=t,this.textureFormat=r,this.shaderKey=`draw_${t}_${r}`}getUserCode(){let e,t="float32"===this.type?"value":"value / 255.0";return e=`
      if (uniforms.numChannels == 1) {
        rgba[0] = ${t};
        rgba[1] = ${t};
        rgba[2] = ${t};
      } else {
        rgba[d] = ${t};
      }`,`
       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;
       ${f8("index")} {
         if (index < uniforms.size) {
           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);
           for (var d = 0; d < uniforms.numChannels; d = d + 1) {
             let value = f32(inBuf[index * uniforms.numChannels + d]);
             ${e}
           }
           rgba.x = rgba.x * rgba.w;
           rgba.y = rgba.y * rgba.w;
           rgba.z = rgba.z * rgba.w;
           let coords = getCoordsFromIndex(index);
           textureStore(outImage, vec2<i32>(coords.yx), rgba);
         }
       }
      `}}const xk=gh({opType:kg.MUL,cpuKernelImpl:y7,supportsComplex:!0});function xS(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;return bC(a,i,s,"sum",r)}const xI=gu({opType:ky.ELU}),xC=gh({opType:kg.EQUAL,dtype:"bool",cpuKernelImpl:yK}),xN=gu({opType:ky.ERF}),xT=gu({opType:ky.EXP,cpuKernelImpl:yq,dtype:"float32"});function x$(e){let{inputs:t,attrs:r,backend:n}=e,{dim:a}=r,{input:i}=t,s=i.shape.length,o=i.shape.slice(),l=a;return a<0&&(ny.assert(-(s+1)<=a,()=>`Axis must be in the interval [${-(s+1)}, ${s}]`),l=s+a+1),o.splice(l,0,1),gr({inputs:{x:i},backend:n,attrs:{shape:o}})}const xE=gu({opType:ky.EXPM1,cpuKernelImpl:yX});class xR{constructor(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey=`fft_${e}`}getUserCode(){let e="real"===this.component?"return real * expR - imag * expI;":"return real * expI + imag * expR;";return`
    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {
      ${e}
    }

    fn mulMatDFT(batch: i32, index: i32) -> f32 {
      let indexRatio = f32(index) / f32(uniforms.realShape[1]);
      let exponentMultiplierTimesIndexRatio =
          uniforms.exponentMultiplier * indexRatio;

      var result = 0.0;

      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {
        // x = (-2|2 * PI / N) * index * i;
        let x = exponentMultiplierTimesIndexRatio * f32(i);
        let expR = cos(x);
        let expI = sin(x);
        let real = getReal(batch, i);
        let imag = getImag(batch, i);

        result = result +
            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;
      }

      return result;
    }

    ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));
      }
    }
  `}}function xA(e,t,r){let n=r.tensorMap.get(e.dataId),a=ny.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],s=[],o=gr({inputs:{x:e},backend:r,attrs:{shape:[a/i,i]}});s.push(o);let l=o.shape,u=new xR("real",l),h=new xR("imag",l),p=[{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:l},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:l}],d=[{type:"float32",data:[t?2*Math.PI:-2*Math.PI]},{type:"float32",data:[t?l[1]:1]}],c=r.runWebGPUProgram(u,p,"float32",d);s.push(c);let f=r.runWebGPUProgram(h,p,"float32",d);s.push(f);let m=go({inputs:{real:c,imag:f},backend:r});s.push(m);let g=gr({inputs:{x:m},backend:r,attrs:{shape:e.shape}});return s.forEach(e=>r.disposeData(e.dataId)),g}class xF{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `}}const x_=gu({opType:ky.FLOOR,cpuKernelImpl:yY}),xD=gh({opType:kg.FLOOR_DIV,cpuKernelImpl:yZ,dtype:"int32"});class xO{constructor(e,t,r=!1){this.pixelsOpType=kf.FROM_PIXELS,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=r,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){let e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)",t=this.importVideo?"texture_external":"texture_2d<f32>";return`
      @binding(1) @group(0) var src: ${t};
      ${f8("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${e};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `}}let xM=e_.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class xz{constructor(e,t,r,n,a){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],or.assertAndGetBroadcastShape(e,t),or.assertAndGetBroadcastShape(e,r),this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),null!=n&&(or.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset")),null!=a&&(or.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale")),this.offsetShape=n,this.scaleShape=a,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";null!=this.offsetShape&&(e="getOffsetByOutputIndex(index)");let t="1.0";return null!=this.scaleShape&&(t="getScaleByOutputIndex(index)"),`
      ${f8("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${e};
          let scaleValue = ${t};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `}}class xP{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`gathernd_${e}`,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${f6(e)},`}getUserCode(){let e;return e=this.sliceDim>1?"uniforms.strides[j]":"uniforms.strides",`
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${e};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `}}class xL{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){let e=function(e){let t=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let n=0;n<e.length;n++)2===n?r.push("indexZ"):r.push(`${t[n]}`);return r.join()}(this.aShape);return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${e}));
        }
      }
    `}}function xB(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,indices:i}=t,{axis:s,batchDims:o}=n,l=ny.parseAxisParam(s,a.shape)[0],u=or.segment_util.collectGatherOpShapeInfo(a,i,l,o),h=ny.sizeFromShape(i.shape),p=[],d=gr({inputs:{x:a},backend:r,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),c=gr({inputs:{x:i},backend:r,attrs:{shape:[u.batchSize,h/u.batchSize]}});p.push(d),p.push(c);let f=[u.batchSize,u.outerSize,h/u.batchSize,u.sliceSize];if(r.shouldExecuteOnCPU([a,i])){let e=r.tensorMap.get(c.dataId).values,t=so(c.shape,c.dtype,e),n=r.tensorMap.get(d.dataId).values,a=yJ(so(d.shape,d.dtype,n),t,f);return p.forEach(e=>r.disposeData(e.dataId)),r.makeTensorInfo(u.outputShape,a.dtype,a.values)}let m=new xL(d.shape,f),g=r.runWebGPUProgram(m,[d,c],d.dtype);p.push(g);let y=gr({inputs:{x:g},backend:r,attrs:{shape:u.outputShape}});return p.forEach(e=>r.disposeData(e.dataId)),y}const xW=gh({opType:kg.GREATER,cpuKernelImpl:y1,dtype:"bool"}),xU=gh({opType:kg.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:y0}),xV=gu({opType:ky.IS_FINITE,dtype:"bool"}),xG=gu({opType:ky.IS_INF,dtype:"bool"}),xH=gu({opType:ky.IS_NAN,dtype:"bool"}),xj=gh({opType:kg.LESS,dtype:"bool",cpuKernelImpl:y3}),xK=gh({opType:kg.LESS_EQUAL,dtype:"bool",cpuKernelImpl:y2});class xq{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`
      ${f8("index")} {
        if (index < uniforms.size) {
          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);
        }
      }
    `}}const xX=gu({opType:ky.LOG,cpuKernelImpl:y4}),xY=gu({opType:ky.LOG1P}),xZ=gh({opType:kg.LOGICAL_AND,dtype:"bool"}),xQ=gu({opType:ky.LOGICAL_NOT}),xJ=gh({opType:kg.LOGICAL_OR}),x0=`
  var powValue = 0.0;
  let basis = uniforms.bias + uniforms.alpha * sum;
  if (uniforms.beta == 0.5) {
    powValue = inverseSqrt(basis);
  } else if (uniforms.beta == 1.0) {
    powValue = 1.0 / basis;
  } else {
    powValue = exp(log(basis) * (-uniforms.beta));
  }
`;class x1{constructor(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`
    ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];
        let d = coords[3];

        let x = getX(b, r, c, d);
        var sum = 0.0;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let idx = d + i;
          if (idx >= 0 && idx < uniforms.xShape[3]) {
            let z = getX(b, r, c, idx);
            sum = sum + z * z;
          }
        }
        ${x0}

        setOutputAtIndex(index, x * powValue);
      }
    }
  `}}class x2{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,ny.assert(t<=this.maxAllowRadius,()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${t}`),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=ml(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`
    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;
    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};
    const maxAllowRadius = ${this.maxAllowRadius};

    ${f8()} {
      let localDepth = i32(localId.x);
      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;
      let xDepth = workgroupDepth + localDepth - maxAllowRadius;
      let b = i32(globalId.z) / uniforms.xShape[1];
      let r = i32(globalId.z) - b * uniforms.xShape[1];
      let c = i32(globalId.y);
      let d = workgroupDepth + localDepth;

      var x = 0.0;
      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {
        x = getX(b, r, c, xDepth);
      }
      lrnSub[localDepth] = x;
      workgroupBarrier();

      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {
        var sum = 0.0;
        let index = localDepth + maxAllowRadius;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let z = lrnSub[index + i];
          sum = sum + z * z;
        }
        ${x0}

        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);
      }
    } `}}class x3{constructor(e){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}getUserCode(){return`
    ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];

        let MIN_DEPTH_BEGIN = 0;
        let MAX_DEPTH_END = uniforms.outShape[3];
        var result = 0.0;
        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {
          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);
          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);

          var norm = 0.0;
          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            } else {
              break;
            }
          }

          norm = uniforms.alpha * norm + uniforms.bias;

          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              var dyi = -2.0 * uniforms.alpha * uniforms.beta
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * uniforms.beta);
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            } else {
              break;
            }
          }
        }

        setOutputAtIndex(index, result);
      }
    }
  `}}const x4=gh({opType:kg.MAX,cpuKernelImpl:y5});class x6{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}getUserCode(){return`
      ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);
            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            let curPosValue = wR * uniforms.filterDims[1] + wC;
            let mask = select(0.0, 1.0, maxPosValue == curPosValue);
            dotProd += dyValue * mask;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}}class x5{constructor(e){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}getUserCode(){return`
      ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;

        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;
              let mask = select(0.0, 1.0, maxPosValue == curPosValue);
              dotProd += dyValue * mask;
            }
          }
        }

        setOutputAtIndex(index, dotProd);
      }
    }
    `}}const x8=gh({opType:kg.MIN,cpuKernelImpl:y8});class x7{constructor(e,t,r){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]),this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.offset=+("reflect"!==r),this.shaderKey=`mirrorPad_${r}`}getUserCode(){let e=this.xShape.length,t=this.xShape.map((e,t)=>`uniforms.pad${t}[0]`).join(","),r=this.xShape.map((t,r)=>`uniforms.pad${r}[0] + uniforms.xShape${e>1?`[${r}]`:""}`).join(","),n=1===e?"start":"start[i]",a=1===e?"end":"end[i]",i=1===e?"outC":"outC[i]",s=f6(e),o=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let start = ${s}(${t});
          let end = ${s}(${r});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${e}; i = i + 1) {
            if (${i} < ${n}) {
              ${i} = ${n} * 2 - ${i} - ${this.offset};
            } else if(${i} >= ${a}) {
              ${i} = (${a} - 1) * 2 - ${i} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${o}));
        }
      }
    `}}const x9=gh({opType:kg.MOD});class ve{constructor(e,t){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}getUserCode(){return`
    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {
      let HASHSCALE1 = 443.8975;
      let p = resultUV * seed;
      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);
      p3 = p3 + dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${f8("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords[0];

        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),
            f32(coords[0]) / f32(uniforms.outShape[0]));
        let r = random(uniforms.seed, resUV);
        var cdf = 0.0;
        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {
          cdf = cdf + getProbs(batch, i);

          if (r < cdf) {
            setOutputAtIndexI32(index, i);
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);
      }
    }
  `}}class vt{constructor(e){this.variableNames=["logits"],this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.outputShape[1]>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.shaderKey="softmax"}getUserCode(){return`
    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;
    var<workgroup> rowMaxShared : f32;
    var<workgroup> rowSumShared : f32;
    const blockSize = ${this.workgroupSize[0]};
    ${f8("index")} {
      let row = index / blockSize;
      let tid = i32(localId.x);
      let cols = uniforms.outShape[1];

      var threadMax = -3.402823e+38f;
      for (var col = tid; col < cols; col += blockSize) {
        let value = getLogits(row, col);
        threadMax = max(threadMax, value);
      }
      if (tid < cols) {
        buf[tid] = threadMax;
      }
      workgroupBarrier();

      var reduceSize = min(cols, blockSize);
      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
        reduceSize = currSize + (reduceSize & 1);
        if (tid < currSize) {
          buf[tid] = max(buf[tid], buf[tid + reduceSize]);
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowMaxShared = buf[0];
      }
      workgroupBarrier();

      var threadSum = 0.0;
      for (var col = tid; col < cols; col += blockSize) {
        let subExp = exp(getLogits(row, col) - rowMaxShared);
        threadSum += subExp;
      }
      buf[tid] = threadSum;
      workgroupBarrier();

      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {
        if (tid < currSize) {
          buf[tid] = buf[tid] + buf[tid + currSize];
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowSumShared = buf[0];
      }
      workgroupBarrier();

      for (var col = tid; col < cols; col += blockSize) {
        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;
        setOutputAtCoords(row, col, value);
      }
  }
    `}}function vr(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{dim:i}=n,s=gr({inputs:{x:a},backend:r,attrs:{shape:[ny.sizeFromShape(a.shape)/a.shape[i],a.shape[i]]}}),o=new vt(s.shape),l=r.runWebGPUProgram(o,[s],a.dtype),u=gr({inputs:{x:l},backend:r,attrs:{shape:a.shape}});return r.disposeData(s.dataId),r.disposeData(l.dataId),u}class vn{constructor(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`
      ${f8("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,
                                      f32(i32(round(getX(coords.x))) == coords.y)));
        }
      }
    `}}function va(e){let{inputs:t,backend:r}=e,{x:n}=t;if("complex64"!==n.dtype)return gt({attrs:{shape:n.shape,dtype:n.dtype,value:"string"===n.dtype?"":0},backend:r});{let e=bq({inputs:{input:n},backend:r}),t=va({inputs:{x:e},backend:r}),a=b1({inputs:{input:n},backend:r}),i=va({inputs:{x:a},backend:r}),s=go({inputs:{real:t,imag:i},backend:r});return r.disposeData(e.dataId),r.disposeData(t.dataId),r.disposeData(a.dataId),r.disposeData(i.dataId),s}}function vi(e,t=!1){let r=e.length,n=f6(r),a=e.map((e,t)=>`uniforms.pad${t}[0]`).join(","),i=e.map((e,t)=>`uniforms.pad${t}[0] + uniforms.xShape${r>1?`[${t}]`:""}`).join(","),s=r>1?`${n}(${a})`:`${a}`,o=r>1?`${n}(${i})`:`${i}`,l=r>1?"any(paddedCoords < start)":"paddedCoords < start",u=r>1?"any(paddedCoords >= end)":"paddedCoords >= end",h=r>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r):"coords";return`
        let start = ${s};
        let end = ${o};
        if (${l} || ${u}) {
          setOutputAtIndex(index, ${t?0:"uniforms.constantValue"});
        } else {
          let coords = paddedCoords - start;
          setOutputAtIndex(index, getX(${h}));
        }
  `}class vs{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]),this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.xShape=e,this.shaderKey="pad"}getUserCode(){return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let paddedCoords = getCoordsFromIndex(index);
          ${vi(this.xShape)}
        }
      }
    `}}const vo=gh({opType:kg.POW}),vl=gh({opType:kg.DIV}),vu=gu({opType:ky.RECIPROCAL}),vh=gu({opType:ky.RELU}),vp=gu({opType:ky.RELU6});class vd{constructor(e,t,r){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,r,e[3]],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`
      ${f8("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `}}class vc{constructor(e,t){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,
       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeBilinearBackprop_${t}`}getUserCode(){return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let dxR = f32(dyR) * uniforms.heightScale;
              let topDxRIndex = i32(floor(dxR));
              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));
              let dxRLerp = dxR - f32(topDxRIndex);
              let inverseDxRLerp = 1.0 - dxRLerp;

              let dxC = f32(dyC) * uniforms.widthScale;
              let leftDxCIndex = i32(floor(dxC));
              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));
              let dxCLerp = dxC - f32(leftDxCIndex);
              let inverseDxCLerp = 1.0 - dxCLerp;

              if (r == topDxRIndex && c == leftDxCIndex) {
                // topLeft
                accumulator +=
                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
              }

              if (r == topDxRIndex && c == rightDxCIndex) {
                // topRight
                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
              }

              if (r == bottomDxRIndex && c == leftDxCIndex) {
                // bottomLeft
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
              }

              if (r == bottomDxRIndex && c == rightDxCIndex) {
                // bottomRight
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}}class vf{constructor(e,t,r,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,r,e[3]],this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=n,this.shaderKey=`resizeNearest_${n}`}getUserCode(){let e;return e=this.halfPixelCenters?"max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":"vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${e};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `}}class vm{constructor(e,t){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,
       winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=t,this.shaderKey=`resizeNearestNeigborBackprop_${t}`}getUserCode(){return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *
                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));

              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *
                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));

              let sourceNearestRow =
                  i32(min(f32(uniforms.outShape[1] - 1),
                  ${this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)"}));

              let sourceNearestCol =
                  i32(min(f32(uniforms.outShape[2] - 1),
                  ${this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)"}));

              if (r == sourceNearestRow && c == sourceNearestCol) {
                accumulator += getDy(b, dyR, dyC, d);
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}}class vg{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){let e=`
      // Using uniform variables as judging conditions, so the function has
      // coherent execution within all threads.
      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {
        var reverseCoords = coords;
        if (uniforms.axis[0] == 1) {
          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;
        }
        if (uniforms.axis[1] == 1) {
          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;
        }
        if (uniforms.axis[2] == 1) {
          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;
        }
        if (uniforms.axis[3] == 1) {
          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;
        }

        return reverseCoords;
      }
    `;return`
      ${e}
      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let reverseCoords = getReverseCoords(coords);
          setOutputAtIndex(index, getX(reverseCoords[0],
              reverseCoords[1], reverseCoords[2], reverseCoords[3]));
        }
      }
    `}}class vy{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`,this.shaderKey="rotate",this.outputShape=e,"number"==typeof t?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`
        ${f8("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `}}const vb=gu({opType:ky.ROUND}),vx=gu({opType:ky.RSQRT,cpuKernelImpl:bn});class vv{constructor(e,t,r,n,a,i,s,o=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=s,this.sumDupeIndices=o,this.dispatchLayout=md(e),this.dispatch=ml(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${r}_${n}_${this.sliceDimGreaterThanOne}_${s}_${o}_${a.length}`;let l=f6(a.length);this.uniforms=`sliceDim : i32, strides: ${l}, updatesSize: i32,`,this.updatesRank=n,this.indicesRank=r}getUserCode(){let e="";1===this.indicesRank?e="coords[0]":2===this.indicesRank&&(e="coords[0], j");let t=`getIndices(${e})`,r=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides",n="",a="";1===this.dispatchLayout.x.length?(n="flattenedIndex",a=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `):2===this.dispatchLayout.x.length&&(n="vec2<i32>(flattenedIndex, coords[1])",a=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);let i=Array.from({length:this.updatesRank},(e,t)=>`coords[${t}]`),s=`getUpdates(${i.join(", ")})`;return`
    ${a}
      ${f8("index")} {
        if (index < uniforms.updatesSize) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${t}));
            flattenedIndex = flattenedIndex + indexInside * ${r};
          }
          let updateValue =
              ${mn(this.type)}(${s});
          let flatIndex = getOutputIndexFromCoords(${n});

          ${this.sumDupeIndices?f3("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}
        }
      }`}}class vw{constructor(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey=`search_sorted_${t}`}getUserCode(){let e="left"===this.side?"<":"<=";return`
      fn findBound(batch: i32, value: f32) -> i32 {
        var left = i32(0);
        var right = uniforms.numInputs;
        while (left < right) {
          var mid = (left + right) / 2;
          if (getSortedSequence(batch, mid) ${e} value) {
            left = mid + 1;
          } else {
            right = mid;
          }
        }
        return right;
      }

      ${f8("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let value = getValuesByOutputIndex(index);
          setOutputAtIndexI32(index, findBound(coords[0], value));
        }
      }
    `}}class vk{constructor(e,t,r){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=r,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(1===this.rank)t="resRC",e="resRC";else{let r=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[],a=[];for(let e=0;e<this.outputShape.length;e++)a.push(`${r[e]}`),e<this.cRank&&n.push(`${r[e]}`);e=n.join(),t=a.join()}return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${e});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${t}));
          } else {
            setOutputAtIndex(index, getB(${t}));
          }
        }
      }
    `}}const vS=gu({opType:ky.SELU}),vI=gu({opType:ky.SIGMOID}),vC=gu({opType:ky.SIGN}),vN=gu({opType:ky.SIN}),vT=gu({opType:ky.SINH}),v$=gu({opType:ky.SOFTPLUS});class vE{constructor(e,t,r,n,a,i){this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;let s=Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[a[e]];this.outputShape=s,this.newDim=a,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,this.paddedXShape=t,this.uniforms+=`reshapedPaddedXShape : ${f6(n.length)}, paddedXShapeStrides : ${f6(i)}, `,r.map((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`}),this.shaderKey=`spaceToBatchND_${a}`}getUserCode(){let e=f6(this.outputShape.length),t=bw(this.newDim);return`
      ${mt(this.paddedXShape,"PaddedX")}
      ${f8("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${e}(${t}), uniforms.reshapedPaddedXShape);
          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);
          ${vi(this.xShape,!0)}
        }
      }
    `}}class vR{constructor(e,t,r){this.variableNames=["input","indices","segmentIds"],this.outputShape=[],this.uniforms="segmentSize : i32, sparseSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e,this.type=r,this.dispatchLayout=md([t]),this.dispatch=ml(this.dispatchLayout,[t],this.workgroupSize),this.shaderKey="sparseSegmentSum"}getUserCode(){return`
    ${f8("index")} {
      if (index < uniforms.sparseSize) {
        let indexInSegmentIds = index / uniforms.segmentSize;
        let indexInSegment = index % uniforms.segmentSize;
        let indexInInput = indices[indexInSegmentIds];
        let segmentId = segmentIds[indexInSegmentIds];

        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];
        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;
        ${f3("&result[outIndex]","value",this.type)}
      }
    }
  `}}class vA{constructor(e,t){this.variableNames=["segmentIds"],this.outputShape=[],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=[e],this.dispatchLayout=md(t),this.dispatch=ml(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="sparseSegmentIdCountProgram"}getUserCode(){return`
    ${f8("index")} {
      if (index < uniforms.segmentIdsShape) {
        let segmentId = segmentIds[index];
        ${f3("&result[segmentId]","1","int32")}
      }
    }
  `}}class vF{constructor(e,t){this.variableNames=["segmentSum","sameSegmentIdCount"],this.outputShape=[],this.uniforms="segmentSize : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.type=t,this.dispatchLayout=md(e),this.dispatch=ml(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="sparseSegmentMean"}getUserCode(){return`
    ${f8("index")} {
      if (index < uniforms.size) {
        let segmentId = index / uniforms.segmentSize;
        let count = sameSegmentIdCount[segmentId];
        if (count != 0) {
          ${"float32"===this.type?"setOutputAtIndex(index, segmentSum[index] / f32(count));":"setOutputAtIndexI32(index, segmentSum[index] / count);"}
        }
      }
    }
  `}}function v_(e,t,r,n=!1,a){let i,s=ny.sizeFromShape(e.shape)/e.shape[0],o=e.dtype,l=ny.sizeFromShape(t.shape),u=a.readSync(r.dataId),h=l>0?u[l-1]+1:0,p=e.shape.slice();p[0]=h;let d=l*s,c=gt({backend:a,attrs:{shape:p,value:0,dtype:o}});i=new vR(p,d,o);let f=[{type:"int32",data:[s]},{type:"int32",data:[d]}],m=a.runWebGPUProgram(i,[e,t,r],o,f,c);if(n)return m;let g=gt({backend:a,attrs:{shape:[h],value:0,dtype:"int32"}});i=new vA(h,r.shape);let y=a.runWebGPUProgram(i,[r],"int32",null,g),b=gt({backend:a,attrs:{shape:p,value:0,dtype:o}});i=new vF(p,o),f=[{type:"int32",data:[s]}];let x=a.runWebGPUProgram(i,[m,y],o,f,b);return a.disposeData(m.dataId),a.disposeData(y.dataId),x}class vD{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[n]*t[n];this.outputShape=r,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){let e=function(e,t=""){if(e>=5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`(resRC % ${t}aShape)`;let r=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let a=0;a<e;a++)n.push(`(${r[a]} % ${t}aShape[${a}])`);return n.join()}(this.rank,"uniforms.");return`
      ${f8("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${e}));
        }
      }
    `}}function vO(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{reps:i}=n;if(r.shouldExecuteOnCPU([a])||"string"===a.dtype||a.shape.length>=5){let e=r.readSync(a.dataId),t="string"===a.dtype?e.map(e=>ny.decodeString(e)):e,n=bh(so(a.shape,a.dtype,t),i);return r.makeTensorInfo(n.shape,n.dtype,n.values)}let s=new vD(a.shape,i);return r.runWebGPUProgram(s,[a],a.dtype)}const vM=gu({opType:ky.SQRT}),vz=gh({opType:kg.SQUARED_DIFFERENCE});class vP{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);let t=f6(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){let e=this.outputShape.length,t="";if(1===e)t="coords * uniforms.strides + uniforms.begin";else{let e=0;t=this.outputShape.map((t,r)=>(e++,1===this.outputShape.length?`coords * uniforms.strides[${r}] + uniforms.begin[${r}]`:`coords[${e-1}] * uniforms.strides[${r}] + uniforms.begin[${r}]`)).join(",")}return`
       ${f8("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${t}));
         }
       }
     `}}const vL=gh({opType:kg.SUB,cpuKernelImpl:bu,supportsComplex:!0}),vB=gu({opType:ky.TAN}),vW=gu({opType:ky.TANH});class vU{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`,this.shaderKey="swap"}getUserCode(){return`
        ${f8("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}}class vV{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`
        ${f8("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}}function vG(e,t){null!==t&&e.disposeData(t.dataId)}function vH(e){let t=1;for(;t<e;)t*=2;return t}class vj{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=md(this.outputShape),this.dispatch=ml(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${f8("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `}}class vK{constructor(e,t,r){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.dispatchLayout=md(e),this.dispatch=ml(this.dispatchLayout,e,this.workgroupSize),"float32"!==r&&"int32"!==r)throw Error(`UnsortedSegmentSum only supports float32 and int32
              types, does not support ${r} type.`);this.type=r,this.shaderKey="unsortedSegmentSum"}getUserCode(){return`
    ${f8("index")} {
      if (index < uniforms.xSize) {
        let coords = getXCoordsFromIndex(index);
        let b = coords[0];
        let inCol = coords[1];

        let segmentId = i32(getSegmentIds(inCol));
        if (segmentId >= 0) {
          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;
          let value = getX(b, inCol);

          ${f3("&result[flatIndex]","value",this.type)}
        }
      }
    }
  `}}for(const e of[{kernelName:ns,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{a:a,b:i,bias:s,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:h,leakyreluAlpha:p}=n;return gn({a:a,b:i,transposeA:l,transposeB:u,backend:r,bias:s,preluActivationWeights:o,leakyreluAlpha:p,activation:h})}},{kernelName:"Abs",backendName:"webgpu",kernelFunc:bf},{kernelName:eq,backendName:"webgpu",kernelFunc:bm},{kernelName:eX,backendName:"webgpu",kernelFunc:bg},{kernelName:"Add",backendName:"webgpu",kernelFunc:by},{kernelName:eY,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e;if(1===t.length)return gs({inputs:{x:t[0]},backend:r});let n=t.map(e=>e.dtype).reduce((e,t)=>af(e,t)),a=new bb(t.map(e=>e.shape));return r.runWebGPUProgram(a,t,n)}},{kernelName:"All",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{keepDims:i,axis:s}=n;return bC(a,s,i,"all",r)}},{kernelName:"Any",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{keepDims:i,axis:s}=n;return bC(a,s,i,"any",r)}},{kernelName:eZ,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n,s=ny.parseAxisParam(i,a.shape),o=or.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=bk({inputs:{x:a},backend:r,attrs:{perm:o}})),s=or.getInnerMostAxes(s.length,l.shape.length)),or.assertAxesAreInnerMostDims("argMax",[s[0]],l.shape.length);let h=new bN(l.shape,s[0],"max"),p=r.runWebGPUProgram(h,[l],"int32",[{type:"float32",data:[-1/0]}]);return u.forEach(e=>r.disposeData(e.dataId)),p}},{kernelName:eQ,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n,s=ny.parseAxisParam(i,a.shape),o=or.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=bk({inputs:{x:a},backend:r,attrs:{perm:o}})),s=or.getInnerMostAxes(s.length,l.shape.length)),or.assertAxesAreInnerMostDims("argMin",[s[0]],l.shape.length);let h=new bN(l.shape,s[0],"min"),p=r.runWebGPUProgram(h,[l],"int32",[{type:"float32",data:[1/0]}]);return u.forEach(e=>r.disposeData(e.dataId)),p}},{kernelName:eJ,backendName:"webgpu",kernelFunc:bT},{kernelName:e0,backendName:"webgpu",kernelFunc:b$},{kernelName:e1,backendName:"webgpu",kernelFunc:bE},{kernelName:e3,backendName:"webgpu",kernelFunc:bR},{kernelName:e2,backendName:"webgpu",kernelFunc:bA},{kernelName:e4,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=n,u=or.computePool2DInfo(a.shape,i,s,1,o,l);return bz(a,u,"avg",r)}},{kernelName:e5,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dataFormat:l,dimRoundingMode:u}=n,h=or.computePool3DInfo(a.shape,i,s,[1,1,1],o,u,l),p=new bD(h,"avg"),d=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.front,h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inDepth,h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]}];return r.runWebGPUProgram(p,[a],a.dtype,d)}},{kernelName:e8,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,h=or.computePool3DInfo(i.shape,s,o,1,l,u),p=new bL(h),d=1/(h.filterDepth*h.filterHeight*h.filterWidth),c=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.effectiveFilterDepth-1-h.padInfo.front,h.effectiveFilterHeight-1-h.padInfo.top,h.effectiveFilterWidth-1-h.padInfo.left]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]},{type:"int32",data:[h.outDepth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"float32",data:[d]}];return r.runWebGPUProgram(p,[a],i.dtype,c)}},{kernelName:e6,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t;mm([a,i],"avgPoolGrad");let{filterSize:s,strides:o,pad:l}=n,u=or.computePool2DInfo(i.shape,s,o,1,l),h=new bP(u),p=1/(u.filterHeight*u.filterWidth),d=[{type:"int32",data:[u.strideHeight,u.strideWidth]},{type:"int32",data:[u.effectiveFilterHeight-1-u.padInfo.top,u.effectiveFilterWidth-1-u.padInfo.left]},{type:"int32",data:[u.dilationHeight,u.dilationWidth]},{type:"int32",data:[u.effectiveFilterHeight,u.effectiveFilterWidth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"float32",data:[p]}];return r.runWebGPUProgram(h,[a],i.dtype,d)}},{kernelName:e7,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{a:a,b:i}=t,{transposeA:s,transposeB:o}=n;return gn({a:a,b:i,transposeA:s,transposeB:o,backend:r})}},{kernelName:e9,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,crops:s}=n;ny.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");let o=i.reduce((e,t)=>e*t),l=or.getReshaped(a.shape,i,o),u=or.getPermuted(l.length,i.length),h=or.getReshapedPermuted(a.shape,i,o),p=or.getSliceBeginCoords(s,i.length),d=or.getSliceSize(h,s,i.length),c=[],f=gr({inputs:{x:a},backend:r,attrs:{shape:l}}),m=bk({inputs:{x:f},backend:r,attrs:{perm:u}}),g=gr({inputs:{x:m},backend:r,attrs:{shape:h}}),y=bU({inputs:{x:g},backend:r,attrs:{begin:p,size:d}});return c.push(f),c.push(m),c.push(g),c.forEach(e=>r.disposeData(e.dataId)),y}},{kernelName:te,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s}=n,o=ny.sizeFromShape(a.shape),l=ny.sizeFromShape(i.shape)>0,u=i.dtype,h=gt({backend:r,attrs:{shape:[s],value:0,dtype:u}}),p=new bH([o],l),d=[{type:"int32",data:[s]}],c=l?[a,i]:[a];return r.runWebGPUProgram(p,c,u,d,h)}},{kernelName:tr,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{s0:n,s1:a}=t;if(r.shouldExecuteOnCPU([n,a])){let e=r.tensorMap.get(n.dataId),t=r.tensorMap.get(a.dataId),i=e.values,s=t.values,o=or.assertAndGetBroadcastShape(Array.from(i),Array.from(s));return r.makeTensorInfo([o.length],"int32",Int32Array.from(o))}let i=ny.sizeFromShape(n.shape),s=ny.sizeFromShape(a.shape),o=new bj(Math.max(i,s)),l=[{type:"int32",data:[i]},{type:"int32",data:[s]}];return r.runWebGPUProgram(o,[n,a],"int32",l)}},{kernelName:tn,backendName:"webgpu",kernelFunc:function e(t){let{inputs:r,backend:n,attrs:a}=t,{x:i}=r,{dtype:s}=a;if("complex64"===s){if("complex64"===i.dtype)return gs({inputs:{x:i},backend:n});let t=hK(i.shape),r=e({inputs:{x:i},backend:n,attrs:{dtype:"float32"}}),a=go({inputs:{real:r,imag:t},backend:n});return t.dispose(),n.disposeData(r.dataId),a}if("complex64"===i.dtype){let t=bq({inputs:{input:i},backend:n}),r=e({inputs:{x:t},backend:n,attrs:{dtype:s}});return n.disposeData(t.dataId),r}if(!ny.hasEncodingLoss(i.dtype,s)){let e=gs({inputs:{x:i},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}if(n.shouldExecuteOnCPU([i])){let[e,t,r]=yG(n.tensorMap.get(i.dataId).values,i.shape,i.dtype,s);return n.makeTensorInfo(e,t,r)}if("int32"===s){let e=new gl(i.shape,ky.TO_INT),t=n.runWebGPUProgram(e,[i],"int32");return{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}if("bool"===s){let e=n.makeTensorInfo([],"bool",ny.getTypedArrayFromDType("bool",1)),t=bK({inputs:{a:i,b:e},backend:n});return n.disposeData(e.dataId),t}throw Error(`Error in Cast: failed to cast ${i.dtype} to ${s}`)}},{kernelName:ta,backendName:"webgpu",kernelFunc:bX},{kernelName:ti,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{clipValueMin:s,clipValueMax:o}=a;return t=ny.sizeFromShape(i.shape)%4==0?new bY(i.shape):new bZ(i.shape),n.runWebGPUProgram(t,[i],i.dtype,[{type:"float32",data:[s]},{type:"float32",data:[o]}])}},{kernelName:ts,backendName:"webgpu",kernelFunc:go},{kernelName:to,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t,a=r.tensorMap.get(n.dataId),i=new bQ(n.shape),s=[bJ(n,a.complexTensorInfos.real),bJ(n,a.complexTensorInfos.imag)];return r.runWebGPUProgram(i,s,s[0].dtype)}},{kernelName:tl,backendName:"webgpu",kernelFunc:b2},{kernelName:tu,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,attrs:r,backend:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dataFormat:l,dilations:u,dimRoundingMode:h}=r,p=or.convertConv2DDataFormat(l),d=or.computeConv2DInfo(a.shape,i.shape,s,u,o,h,!1,p);return b8({x:a,filter:i,convInfo:d,backend:n})}},{kernelName:th,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:h}=n,p=or.convertConv2DDataFormat(l),d=or.computeConv2DInfo(a.shape,h,s,1,o,u,!1,p),c=new b9(d),f=[{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.batchSize]},{type:"int32",data:[d.outHeight]},{type:"int32",data:[d.outWidth]},{type:"int32",data:[d.inHeight]},{type:"int32",data:[d.inWidth]}];return r.runWebGPUProgram(c,[a,i],a.dtype,f)}},{kernelName:tp,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{dy:i,filter:s}=r,{inputShape:o,strides:l,pad:u,dataFormat:h,dimRoundingMode:p}=a,d=or.convertConv2DDataFormat(h),c=or.computeConv2DInfo(o,s.shape,l,1,u,p,!1,d),f=[{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.filterHeight-1-c.padInfo.top,c.filterWidth-1-c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.batchSize,c.outHeight,c.outWidth,c.outChannels]}];if(e_.getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||"channelsLast"!==c.dataFormat)t=new b7(c);else{t=new xr(c);let e=c.inHeight*c.inWidth,r=c.inChannels,n=c.filterHeight*c.filterWidth*c.outChannels;f.push({type:"uint32",data:[e]},{type:"uint32",data:[r]},{type:"uint32",data:[n]})}return n.runWebGPUProgram(t,[i,s],"float32",f)}},{kernelName:td,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dilations:l}=n,u=or.computeConv3DInfo(a.shape,i.shape,s,l,o),h=[u.padInfo.front,u.padInfo.top,u.padInfo.left],p=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[...h]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationDepth,u.dilationHeight,u.dilationWidth]}],d=new xn(u),c=af(a.dtype,i.dtype);return r.runWebGPUProgram(d,[a,i],c,p)}},{kernelName:tc,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,filterShape:l}=n,u=or.computeConv3DInfo(a.shape,l,s,1,o),h=new xe(u),p=[{type:"int32",data:[u.padInfo.front,u.padInfo.top,u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.batchSize]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.inDepth]},{type:"int32",data:[u.inHeight]},{type:"int32",data:[u.inWidth]}];return r.runWebGPUProgram(h,[a,i],i.dtype,p)}},{kernelName:tf,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{strides:s,pad:o,inputShape:l}=n,u=or.computeConv3DInfo(l,i.shape,s,1,o),h=new xt(u),p=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[u.filterDepth-1-u.padInfo.front,u.filterHeight-1-u.padInfo.top,u.filterWidth-1-u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.outChannels]}];return r.runWebGPUProgram(h,[a,i],a.dtype,p)}},{kernelName:"Cos",backendName:"webgpu",kernelFunc:xa},{kernelName:tm,backendName:"webgpu",kernelFunc:xi},{kernelName:tb,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{image:a,boxes:i,boxInd:s}=t,{cropSize:o,method:l,extrapolationValue:u}=n,h=new xs(a.shape[3],i.shape,o,l);return r.runWebGPUProgram(h,[a,i,s],"float32",[{type:"float32",data:[u]}])}},{kernelName:tg,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;return xh(kb.Prod,a,r,i,s,o)}},{kernelName:ty,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;return xh(kb.Sum,a,r,i,s,o)}},{kernelName:tx,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s,binaryOutput:o}=n,l=1===a.shape.length,u=ny.sizeFromShape(i.shape)>0,h=i.dtype,p=l?[a.shape[0]]:[a.shape[0],a.shape[1]],d=gt({backend:r,attrs:{shape:l?[s]:[a.shape[0],s],value:0,dtype:h}}),c=new bH(p,u,o),f=[{type:"int32",data:[s]}],m=u?[a,i]:[a];return r.runWebGPUProgram(c,m,h,f,d)}},{kernelName:tv,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockSize:i,dataFormat:s}=n,o=a.shape[0],l="NHWC"===s?a.shape[1]:a.shape[2],u="NHWC"===s?a.shape[2]:a.shape[3],h="NHWC"===s?a.shape[3]:a.shape[1],p=l*i,d=u*i,c=h/(i*i),f=new xp("NHWC"===s?[o,p,d,c]:[o,c,p,d],s);return r.runWebGPUProgram(f,[a],a.dtype,[{type:"int32",data:[i]}])}},{kernelName:tk,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,filterShape:h}=n,p=or.computeConv2DInfo(a.shape,h,s,o,l,u,!0),d=new xm(p),c=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.inHeight]},{type:"int32",data:[p.inWidth]},{type:"int32",data:[p.batchSize]},{type:"int32",data:[p.outChannels/p.inChannels]}];return r.runWebGPUProgram(d,[a,i],"float32",c)}},{kernelName:tS,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,inputShape:h}=n,p=or.computeConv2DInfo(h,i.shape,s,o,l,u,!0),d=new xg(p),c=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.filterHeight-1-p.padInfo.top,p.filterWidth-1-p.padInfo.left]},{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.outChannels/p.inChannels]}];return r.runWebGPUProgram(d,[a,i],a.dtype,c)}},{kernelName:tw,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s}=r,{strides:o,pad:l,dataFormat:u,dilations:h,dimRoundingMode:p}=a,d=or.convertConv2DDataFormat(u),c=h;null==c&&(c=[1,1]);let f=or.computeConv2DInfo(i.shape,s.shape,o,c,l,p,!0,d),m=[{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.inHeight,f.inWidth]}],g="channelsLast"===f.dataFormat;return!g&&f.inHeight>16&&f.inWidth>16&&1===f.strideHeight&&1===f.strideWidth&&1===f.dilationWidth&&1===f.dilationHeight&&f.inChannels===f.outChannels?t=new xd(f.outShape,f.filterHeight,f.filterWidth):g&&f.outHeight>4&&f.outWidth>4&&f.strideWidth<=2&&f.inChannels===f.outChannels&&1===f.dilationHeight&&1===f.dilationWidth&&f.inChannels%4==0?(t=new xc(f),m.push({type:"int32",data:[t.virtualWidth]})):(t=new xf(f),m.push({type:"int32",data:[f.filterHeight]},{type:"int32",data:[f.filterWidth]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]})),n.runWebGPUProgram(t,[i,s],i.dtype,m)}},{kernelName:tI,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t,a=[...n.shape,...n.shape],i=ny.sizeFromShape(n.shape),s=gr({inputs:{x:n},backend:r,attrs:{shape:[i]}}),o=new xy(i),l=r.runWebGPUProgram(o,[s],s.dtype),u=gr({inputs:{x:l},backend:r,attrs:{shape:a}});return r.disposeData(s.dataId),r.disposeData(l.dataId),u}},{kernelName:tC,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dilations:l}=n,u=or.computeDilation2DInfo(a.shape,i.shape,s,o,"NHWC",l),h=[u.padInfo.top,u.padInfo.left],p=[{type:"int32",data:[u.filterHeight,u.filterWidth]},{type:"int32",data:[...h]},{type:"int32",data:[u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationHeight,u.dilationWidth]}],d=new xb(u);return r.runWebGPUProgram(d,[a,i],a.dtype,p)}},{kernelName:tT,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i,dy:s}=t,{strides:o,pad:l,dilations:u}=n,h=or.computeDilation2DInfo(a.shape,i.shape,o,l,"NHWC",u),p=i.dtype,d=new xv(h,i.shape,p),c=[{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[ny.sizeFromShape(h.outShape)]}],f=gt({backend:r,attrs:{shape:i.shape,value:0,dtype:p}});return r.runWebGPUProgram(d,[a,i,s],p,c,f)}},{kernelName:tN,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i,dy:s}=t,{strides:o,pad:l,dilations:u}=n,h=or.computeDilation2DInfo(a.shape,i.shape,o,l,"NHWC",u),p=a.dtype,d=new xx(h,p),c=[{type:"int32",data:[h.filterHeight,h.filterWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[ny.sizeFromShape(h.outShape)]}],f=gt({backend:r,attrs:{shape:h.inShape,value:0,dtype:p}});return r.runWebGPUProgram(d,[a,i,s],p,c,f)}},{kernelName:t$,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{image:i}=r,{canvas:s,options:o}=a,[l,u]=i.shape.slice(0,2),{imageOptions:h}=o||{},p=(null==h?void 0:h.alpha)||1,d=n.device.features.has("bgra8unorm-storage")?"bgra8unorm":"rgba8unorm",c=[l,u],f=new xw(c,i.dtype,d);s.width=u,s.height=l;let m="webgpu",g=s.getContext(m);g||(g=(t=new OffscreenCanvas(u,l)).getContext(m));let y=3===i.shape.length?i.shape[2]:1;g.configure({device:n.device,format:d,usage:GPUTextureUsage.STORAGE_BINDING,alphaMode:"premultiplied"});let b="int32",x=n.makeTensorInfo(c,b),v=n.tensorMap.get(x.dataId);if(v.resource=g.getCurrentTexture(),v.external=!0,n.runWebGPUProgram(f,[i],b,[{type:"uint32",data:[y]},{type:"float32",data:[p]}],x),t){let e=s.getContext("2d");if(!e)throw Error("Please make sure this canvas has only been used for 2d or webgpu context!");e.drawImage(t,0,0)}return n.disposeData(x.dataId),i}},{kernelName:tR,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{equation:a}=n,{allDims:i,summedDims:s,idDims:o}=or.decodeEinsumEquation(a,t.length);or.checkEinsumDimSizes(i.length,o,t);let{path:l,steps:u}=or.getEinsumComputePath(s,o),h=u.length,p=null,d=i.length,c=[];for(let e=0;e<h;++e){for(let n of u[e]){let e,{permutationIndices:a,expandDims:i}=or.getEinsumPermutation(d,o[n]);or.isIdentityPermutation(a)?e=t[n]:(e=bk({inputs:{x:t[n]},backend:r,attrs:{perm:a}}),c.push(e));let s=e.shape.slice();for(let e=0;e<i.length;++e)s.splice(i[e],0,1);ny.arraysEqual(e.shape,s)||(e=gr({inputs:{x:e},backend:r,attrs:{shape:s}}),c.push(e)),null===p?p=e:(p=xk({inputs:{a:e,b:p},backend:r}),c.push(p))}e<h-1&&(l[e]>=0&&(p=xS({inputs:{x:p},backend:r,attrs:{axis:l[e]-(i.length-d),keepDims:!1}}),c.push(p)),d--)}for(let e of c)e!==p&&r.disposeData(e.dataId);return p}},{kernelName:"Elu",backendName:"webgpu",kernelFunc:xI},{kernelName:tA,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r}=e,{dy:n,y:a}=t,i=new gi(kg.ELU_DER,n.shape,a.shape);return r.runWebGPUProgram(i,[n,a],n.dtype)}},{kernelName:tF,backendName:"webgpu",kernelFunc:xC},{kernelName:"Erf",backendName:"webgpu",kernelFunc:xN},{kernelName:"Exp",backendName:"webgpu",kernelFunc:xT},{kernelName:t_,backendName:"webgpu",kernelFunc:x$},{kernelName:tD,backendName:"webgpu",kernelFunc:xE},{kernelName:"FFT",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t;return xA(n,!1,r)}},{kernelName:tO,backendName:"webgpu",kernelFunc:gt},{kernelName:tM,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{let{image:r}=e,n=new xF(r.shape);return t.runWebGPUProgram(n,[r],r.dtype)}},{kernelName:na,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{pixels:i}=t,{numChannels:s}=n;if(null==i)throw Error("pixels passed to tf.browser.fromPixels() can not be null");let o="undefined"!=typeof HTMLVideoElement&&i instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&i instanceof HTMLImageElement,u="undefined"!=typeof HTMLCanvasElement&&i instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&i instanceof OffscreenCanvas,h="undefined"!=typeof ImageBitmap&&i instanceof ImageBitmap,[p,d]=o?[i.videoWidth,i.videoHeight]:[i.width,i.height],c=[d,p,s],f=e_.getBool("WEBGPU_IMPORT_EXTERNAL_TEXTURE")&&o,m=o||l;if(h||u||m){let e;if(f)e=r.device.importExternalTexture({source:i});else{if(m){let e=e_.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==a||e!==xM)&&(xM=e,a=document.createElement("canvas").getContext("2d",{willReadFrequently:xM})),a.canvas.width=p,a.canvas.height=d,a.drawImage(i,0,0,p,d),i=a.canvas}let t=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,n=r.textureManager.acquireTexture(c[1],c[0],"rgba8unorm",t);r.queue.copyExternalImageToTexture({source:i},{texture:n},[c[1],c[0]]),e=n}let t=ny.sizeFromShape(c),n=ny.computeStrides(c),o=new xO(c,s,f),l=[{type:"uint32",data:[t]},{type:"uint32",data:[s]},{type:"uint32",data:[...n]}],u=r.makeTensorInfo([d,p],"int32");r.tensorMap.get(u.dataId).resource=e;let h=r.runWebGPUProgram(o,[u],"int32",l);return r.disposeData(u.dataId),h}let g=i.data,y=g;if(null!=s&&4!==s){y=new Uint8Array(i.width*i.height*s);let e=g.length,t=0;for(let r=0;r<e;r++)r%4<s&&(y[t++]=g[r])}let b=r.makeTensorInfo(c,"int32",new Int32Array(y));return r.uploadToGPU(b.dataId),b}},{kernelName:tz,backendName:"webgpu",kernelFunc:x_},{kernelName:tP,backendName:"webgpu",kernelFunc:xD},{kernelName:tL,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:n,scale:a,offset:i,mean:s,variance:o}=e,{varianceEpsilon:l}=t,u=[n,s,o],h=null;null!=i&&(h=i.shape,u.push(i));let p=null;null!=a&&(p=a.shape,u.push(a));let d=new xz(n.shape,s.shape,o.shape,h,p);return r.runWebGPUProgram(d,u,n.dtype,[{type:"float32",data:[l]}])}},{kernelName:no,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=n,m=or.convertConv2DDataFormat(h),g=or.computeConv2DInfo(a.shape,i.shape,l,p,u,d,!1,m);return b8({x:a,filter:i,convInfo:g,backend:r,bias:s,preluActivationWeights:o,leakyreluAlpha:f,activation:c})}},{kernelName:nl,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s,bias:o,preluActivationWeights:l}=r,{strides:u,pad:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=a,m=p;null==m&&(m=[1,1]),ny.assert(or.eitherStridesOrDilationsAreOne(u,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`);let g=or.computeConv2DInfo(i.shape,s.shape,u,m,h,d,!0),y=[i,s],b=null!=o,x=null!=l;b&&y.push(o),x&&y.push(l);let v=[{type:"int32",data:[g.padInfo.top,g.padInfo.left]},{type:"int32",data:[g.inHeight,g.inWidth]}];return g.outHeight>4&&g.outWidth>4&&g.strideWidth<=2&&g.inChannels===g.outChannels&&1===g.dilationHeight&&1===g.dilationWidth&&g.inChannels%4==0?(t=new xc(g,b,c,x),v.push({type:"int32",data:[t.virtualWidth]})):(t=new xf(g,b,c,x),v.push({type:"int32",data:[g.filterHeight]},{type:"int32",data:[g.filterWidth]},{type:"int32",data:[g.strideHeight,g.strideWidth]},{type:"int32",data:[g.dilationHeight,g.dilationWidth]})),"leakyrelu"===c&&(v.push({type:"float32",data:[f]}),t.uniforms+=" alpha : f32,"),n.runWebGPUProgram(t,y,"float32",v)}},{kernelName:tW,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{params:n,indices:a}=t,i=a.shape,s=i[i.length-1],o=ny.sizeFromShape(n.shape),[l,u,h,p]=or.prepareAndValidate(n,a),d=gr({inputs:{x:a},backend:r,attrs:{shape:[u,s]}}),c=gr({inputs:{x:n},backend:r,attrs:{shape:[ny.sizeFromShape(n.shape)/h,h]}});if(r.shouldExecuteOnCPU([n,a])||"string"===n.dtype){let e=yQ(r.readSync(a.dataId),r.bufferSync(n),n.dtype,u,s,h,p,n.shape,o);return r.makeTensorInfo(l,n.dtype,e.values)}let f=new xP(s,[u,h]),m=[{type:"int32",data:[s]},{type:"int32",data:p}],g=r.runWebGPUProgram(f,[c,d],c.dtype,m),y=gr({inputs:{x:g},backend:r,attrs:{shape:l}});return r.disposeData(d.dataId),r.disposeData(c.dataId),r.disposeData(g.dataId),y}},{kernelName:tB,backendName:"webgpu",kernelFunc:xB},{kernelName:tU,backendName:"webgpu",kernelFunc:xW},{kernelName:tV,backendName:"webgpu",kernelFunc:xU},{kernelName:tG,backendName:"webgpu",kernelFunc:gs},{kernelName:tH,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t;return xA(n,!0,r)}},{kernelName:tj,backendName:"webgpu",kernelFunc:b1},{kernelName:tK,backendName:"webgpu",kernelFunc:xV},{kernelName:tq,backendName:"webgpu",kernelFunc:xG},{kernelName:tX,backendName:"webgpu",kernelFunc:xH},{kernelName:tY,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{alpha:i}=n,s=new gl(a.shape,ky.LEAKYRELU,"alpha : f32,");return r.runWebGPUProgram(s,[a],"float32",[{type:"float32",data:[i]}])}},{kernelName:tZ,backendName:"webgpu",kernelFunc:xj},{kernelName:tQ,backendName:"webgpu",kernelFunc:xK},{kernelName:tJ,backendName:"webgpu",kernelFunc:function(e){let{backend:t,attrs:r}=e,{start:n,stop:a,num:i}=r,s=(a-n)/(i-1),o=new xq(i);return t.runWebGPUProgram(o,[],"float32",[{type:"float32",data:[n]},{type:"float32",data:[s]}])}},{kernelName:t0,backendName:"webgpu",kernelFunc:xY},{kernelName:"Log",backendName:"webgpu",kernelFunc:xX},{kernelName:t1,backendName:"webgpu",kernelFunc:xZ},{kernelName:t2,backendName:"webgpu",kernelFunc:xQ},{kernelName:t3,backendName:"webgpu",kernelFunc:xJ},{kernelName:"LRN",backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{depthRadius:s,bias:o,alpha:l,beta:u}=a;t=s>16?new x1(i.shape):new x2(i.shape,s);let h=[{type:"int32",data:[s]},{type:"float32",data:[o]},{type:"float32",data:[l]},{type:"float32",data:[u]}];return n.runWebGPUProgram(t,[i],i.dtype,h)}},{kernelName:t4,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,y:i,dy:s}=t,{depthRadius:o,bias:l,alpha:u,beta:h}=n,p=new x3(a.shape);return r.runWebGPUProgram(p,[a,i,s],a.dtype,[{type:"int32",data:[o]},{type:"float32",data:[l]},{type:"float32",data:[u]},{type:"float32",data:[h]}])}},{kernelName:"Max",backendName:"webgpu",kernelFunc:bO},{kernelName:t6,backendName:"webgpu",kernelFunc:x4},{kernelName:t5,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=n,u=or.computePool2DInfo(a.shape,i,s,1,o,l);return bz(a,u,"max",r)}},{kernelName:t8,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i,output:s}=t;mm([i,s],"maxPoolGrad");let{filterSize:o,strides:l,pad:u,dimRoundingMode:h}=n,p=or.computePool2DInfo(i.shape,o,l,1,u,h),d=new b_(p,"max",!0),c=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.dilationHeight,p.dilationWidth]},{type:"int32",data:[p.inHeight,p.inWidth]},{type:"int32",data:[p.effectiveFilterHeight,p.effectiveFilterWidth]}],f=r.runWebGPUProgram(d,[i],"int32",c),m=new x6(p);c=[{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.effectiveFilterHeight-1-p.padInfo.top,p.effectiveFilterWidth-1-p.padInfo.left]},{type:"int32",data:[p.dilationHeight,p.dilationWidth]},{type:"int32",data:[p.effectiveFilterHeight,p.effectiveFilterWidth]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]}];let g=r.runWebGPUProgram(m,[a,f],i.dtype,c);return r.disposeData(f.dataId),g}},{kernelName:t7,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dataFormat:l,dimRoundingMode:u}=n,h=or.computePool3DInfo(a.shape,i,s,[1,1,1],o,u,l),p=new bD(h,"max"),d=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.front,h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inDepth,h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]}];return r.runWebGPUProgram(p,[a],a.dtype,d)}},{kernelName:t9,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,h=or.computePool3DInfo(i.shape,s,o,[1,1,1],l,u),p=new bD(h,"max",!0),d=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.front,h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inDepth,h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]}],c=r.runWebGPUProgram(p,[i],"int32",d),f=new x5(h);d=[{type:"int32",data:[h.strideDepth,h.strideHeight,h.strideWidth]},{type:"int32",data:[h.effectiveFilterDepth-1-h.padInfo.front,h.effectiveFilterHeight-1-h.padInfo.top,h.effectiveFilterWidth-1-h.padInfo.left]},{type:"int32",data:[h.effectiveFilterDepth,h.effectiveFilterHeight,h.effectiveFilterWidth]},{type:"int32",data:[h.outDepth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]}];let m=r.runWebGPUProgram(f,[a,c],i.dtype,d);return r.disposeData(c.dataId),m}},{kernelName:re,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{filterSize:a,strides:i,pad:s,includeBatchInIndex:o}=n,{x:l}=t;ny.assert(4===l.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${l.shape.length}.`);let u=[1,1];ny.assert(or.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let h=or.computePool2DInfo(l.shape,a,i,u,s),p=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[h.inHeight,h.inWidth]},{type:"int32",data:[h.effectiveFilterHeight,h.effectiveFilterWidth]}],d=new b_(h,"max",!1),c=r.runWebGPUProgram(d,[l],l.dtype,p);return d=new b_(h,"max",!0,!0,o),[c,r.runWebGPUProgram(d,[l],"int32",p)]}},{kernelName:rt,backendName:"webgpu",kernelFunc:bM},{kernelName:"Min",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;return bC(a,i,s,"min",r)}},{kernelName:rr,backendName:"webgpu",kernelFunc:x8},{kernelName:rn,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:n}=e,{paddings:a,mode:i}=t,s=a.map(e=>({type:"int32",data:[e[0],e[1]]})),o=new x7(n.shape,a,i);return r.runWebGPUProgram(o,[n],n.dtype,s)}},{kernelName:"Mod",backendName:"webgpu",kernelFunc:x9},{kernelName:ra,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{numSamples:i,seed:s,normalized:o}=n,l=o?a:vr({inputs:{logits:a},backend:r,attrs:{dim:a.shape.length-1}}),u=l.shape[0],h=l.shape[1],p=new ve(u,i),d=r.runWebGPUProgram(p,[l],"int32",[{type:"float32",data:[s]},{type:"int32",data:[h]}]);return o||r.disposeData(l.dataId),d}},{kernelName:ri,backendName:"webgpu",kernelFunc:xk},{kernelName:"Neg",backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t;if(r.shouldExecuteOnCPU([n])){let[e,t]=y9(r.tensorMap.get(n.dataId).values,n.shape,n.dtype);return r.makeTensorInfo(t,n.dtype,e)}let a=new gl(n.shape,ky.NEG);return r.runWebGPUProgram(a,[n],n.dtype)}},{kernelName:ro,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=n,u=r.readSync(a.dataId),h=r.readSync(i.dataId),{selectedIndices:p}=cS.nonMaxSuppressionV3Impl(u,h,s,o,l);return r.makeTensorInfo([p.length],"int32",new Int32Array(p))}},{kernelName:ru,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=n,h=r.readSync(a.dataId),p=r.readSync(i.dataId),{selectedIndices:d,selectedScores:c}=cS.nonMaxSuppressionV5Impl(h,p,s,o,l,u);return[r.makeTensorInfo([d.length],"int32",new Int32Array(d)),r.makeTensorInfo([c.length],"float32",new Float32Array(c))]}},{kernelName:rs,backendName:"webgpu",kernelFunc:bK},{kernelName:rp,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{indices:a}=t,{dtype:i,depth:s,onValue:o,offValue:l}=n,u=ny.sizeFromShape(a.shape),h=new vn(u,s),p=gr({inputs:{x:a},backend:r,attrs:{shape:[u]}}),d=r.runWebGPUProgram(h,[p],i,[{type:"float32",data:[o]},{type:"float32",data:[l]}]);r.disposeData(p.dataId);let c=gr({inputs:{x:d},backend:r,attrs:{shape:[...a.shape,s]}});return r.disposeData(d.dataId),c}},{kernelName:rh,backendName:"webgpu",kernelFunc:function e(t){let{inputs:r,backend:n}=t,{x:a}=r;if("string"===a.dtype)throw Error("onesLike is not supported under string dtype");if("complex64"!==a.dtype)return gt({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:n});{let t=bq({inputs:{input:a},backend:n}),r=e({inputs:{x:t},backend:n}),i=b1({inputs:{input:a},backend:n}),s=va({inputs:{x:i},backend:n}),o=go({inputs:{real:r,imag:s},backend:n});return n.disposeData(t.dataId),n.disposeData(r.dataId),n.disposeData(i.dataId),n.disposeData(s.dataId),o}}},{kernelName:rd,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n;if(1===t.length)return x$({inputs:{input:t[0]},backend:r,attrs:{dim:a}});let i=t[0].shape,s=t[0].dtype;t.forEach(e=>{ny.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),ny.assert(s===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let o=[],l=b2({inputs:t.map(e=>{let t=x$({inputs:{input:e},backend:r,attrs:{dim:a}});return o.push(t),t}),backend:r,attrs:{axis:a}});return o.forEach(e=>r.disposeData(e.dataId)),l}},{kernelName:rc,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{paddings:i,constantValue:s}=n;if(i.every(e=>ny.arraysEqual(e,[0,0])))return gs({inputs:{x:a},backend:r});if(0===ny.sizeFromShape(a.shape))return gt({backend:r,attrs:{shape:i.map((e,t)=>e[0]+a.shape[t]+e[1]),value:s,dtype:a.dtype}});let o=[{type:"float32",data:[s]}];i.map(e=>o.push({type:"int32",data:[e[0],e[1]]}));let l=new vs(a.shape,i);return r.runWebGPUProgram(l,[a],a.dtype,o)}},{kernelName:"Pow",backendName:"webgpu",kernelFunc:vo},{kernelName:rf,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n,alpha:a}=t,i=new gi(kg.PRELU,n.shape,a.shape);return r.runWebGPUProgram(i,[n,a],"float32")}},{kernelName:rm,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;return bC(a,i,s,"prod",r)}},{kernelName:rx,backendName:"webgpu",kernelFunc:e=>{let{backend:t,attrs:r}=e,{start:n,stop:a,step:i,dtype:s}=r,o=br(n,a,i,s);return t.makeTensorInfo([o.length],s,o)}},{kernelName:rv,backendName:"webgpu",kernelFunc:bq},{kernelName:tE,backendName:"webgpu",kernelFunc:vl},{kernelName:rw,backendName:"webgpu",kernelFunc:vu},{kernelName:rk,backendName:"webgpu",kernelFunc:vh},{kernelName:r$,backendName:"webgpu",kernelFunc:vp},{kernelName:rS,backendName:"webgpu",kernelFunc:gr},{kernelName:rN,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,size:s,halfPixelCenters:o}=n,[l,u]=s,h=[{type:"float32",data:[i&&l>1?1:0,i&&u>1?1:0]},{type:"float32",data:[.5*!!o]}],p=new vd(a.shape,l,u);return r.runWebGPUProgram(p,[a],"float32",h)}},{kernelName:rT,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n,[,o,l]=a.shape,[,u,h]=i.shape,p=[s&&u>1?o-1:o,s&&h>1?l-1:l],d=[s&&u>1?u-1:u,s&&h>1?h-1:h],c=p[0]/d[0],f=p[1]/d[1],m=1/c,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2,x=new vc(a.shape,s),v=[{type:"int32",data:p},{type:"int32",data:d},{type:"float32",data:[c]},{type:"float32",data:[f]},{type:"float32",data:[m]},{type:"float32",data:[g]},{type:"int32",data:[y]},{type:"int32",data:[b]}];return r.runWebGPUProgram(x,[i],i.dtype,v)}},{kernelName:rI,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:s,size:o}=n,[l,u]=o,h=[{type:"float32",data:[i&&l>1?1:0,i&&u>1?1:0]},{type:"float32",data:[.5*!!i]}],p=new vf(a.shape,l,u,s);return r.runWebGPUProgram(p,[a],a.dtype,h)}},{kernelName:rC,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n,[,o,l]=a.shape,[,u,h]=i.shape,p=[s&&u>1?o-1:o,s&&h>1?l-1:l],d=[s&&u>1?u-1:u,s&&h>1?h-1:h],c=p[0]/d[0],f=p[1]/d[1],m=1/c,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2,x=new vm(a.shape,s),v=[{type:"int32",data:p},{type:"int32",data:d},{type:"float32",data:[m]},{type:"float32",data:[g]},{type:"int32",data:[y]},{type:"int32",data:[b]}];return r.runWebGPUProgram(x,[i],i.dtype,v)}},{kernelName:rE,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{dims:i}=n,s=a.shape.length;if(0===s)return gs({inputs:{x:a},backend:r});let o=a.shape,l=[1,1,1,1];o.forEach((e,t)=>{l[t+4-s]=e});let u=ny.parseAxisParam(i,a.shape),h=[0,0,0,0];u.forEach(e=>{h[e+4-s]=1});let p=[{type:"int32",data:h}],d=gr({inputs:{x:a},backend:r,attrs:{shape:l}}),c=new vg(l),f=r.runWebGPUProgram(c,[d],d.dtype,p);r.disposeData(d.dataId);let m=gr({inputs:{x:f},backend:r,attrs:{shape:o}});return r.disposeData(f.dataId),m}},{kernelName:ni,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{image:n}=e,{radians:a,fillValue:i,center:s}=t,o=new vy(n.shape,i),[l,u]=or.getImageCenter(s,n.shape[1],n.shape[2]),h=[{type:"float32",data:[l]},{type:"float32",data:[u]},{type:"float32",data:[Math.sin(a)]},{type:"float32",data:[Math.cos(a)]}];return"number"==typeof i?h.push({type:"float32",data:[Number.parseFloat(i.toFixed(2))]}):h.push({type:"float32",data:i}),r.runWebGPUProgram(o,[n],n.dtype,h)}},{kernelName:rR,backendName:"webgpu",kernelFunc:vb},{kernelName:rA,backendName:"webgpu",kernelFunc:vx},{kernelName:rF,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{indices:a,updates:i}=t,{shape:s}=n,{sliceRank:o,numUpdates:l,sliceSize:u,strides:h,outputSize:p}=or.calculateShapes(i,a,s),d=[p/u,u];if(0===p)return r.makeTensorInfo(s,a.dtype);let c=gr({inputs:{x:a},backend:r,attrs:{shape:[l,o]}}),f=gr({inputs:{x:i},backend:r,attrs:{shape:[l,u]}}),m=f.dtype,g=gt({backend:r,attrs:{shape:d,value:0,dtype:m}}),y=[{type:"int32",data:[o]},{type:"int32",data:h},{type:"int32",data:[ny.sizeFromShape(f.shape)]}],b=new vv(f.shape,o,c.shape.length,f.shape.length,h,d,m),x=r.runWebGPUProgram(b,[f,c],m,y,g),v=gr({inputs:{x:x},backend:r,attrs:{shape:s}});return r.disposeData(c.dataId),r.disposeData(f.dataId),r.disposeData(x.dataId),v}},{kernelName:rD,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{sortedSequence:a,values:i}=t,{side:s}=n,o=new vw([i.shape[0],i.shape[1]],s),l=[{type:"int32",data:[a.shape[1]]}];return r.runWebGPUProgram(o,[a,i],"int32",l)}},{kernelName:rO,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{condition:n,t:a,e:i}=t,s=new vk(n.shape.length,a.shape,a.shape.length);return r.runWebGPUProgram(s,[n,a,i],af(a.dtype,i.dtype))}},{kernelName:rM,backendName:"webgpu",kernelFunc:vS},{kernelName:rB,backendName:"webgpu",kernelFunc:vI},{kernelName:rL,backendName:"webgpu",kernelFunc:vC},{kernelName:"Sin",backendName:"webgpu",kernelFunc:vN},{kernelName:rP,backendName:"webgpu",kernelFunc:vT},{kernelName:rz,backendName:"webgpu",kernelFunc:bU},{kernelName:nn,backendName:"webgpu",kernelFunc:function({inputs:e,attrs:t,backend:r}){let{x:n}=e,a=new gl(n.shape,ky.STEP,"stepAlpha : f32,"),i=[{type:"float32",data:[t.alpha]}];return r.runWebGPUProgram(a,[n],n.dtype,i)}},{kernelName:r0,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{begin:s,end:o,strides:l,beginMask:u,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:c}=a,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:w}=oM.sliceInfo(i.shape,s,o,l,u,h,p,d,c);if(g)t=gr({inputs:{x:i},backend:n,attrs:{shape:m}});else if(y||b){ny.assert(i.shape.length>=1,()=>`Input must have rank at least 1, got: ${i.shape.length}`);let e=oM.computeOutShape(x,v,w),r=bU({inputs:{x:i},backend:n,attrs:{begin:x,size:e}});t=gr({inputs:{x:r},backend:n,attrs:{shape:m}}),n.disposeData(r.dataId)}else if(n.shouldExecuteOnCPU([i])){let e=n.readSync(i.dataId),r=bo(f,so(i.shape,i.dtype,e),w,x);t=n.makeTensorInfo(m,i.dtype,r.values)}else{let e=new vP(f),r=[{type:"int32",data:x},{type:"int32",data:w}],a=n.runWebGPUProgram(e,[i],i.dtype,r);t=gr({inputs:{x:a},backend:n,attrs:{shape:m}}),n.disposeData(a.dataId)}return t}},{kernelName:r1,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{separator:a,nGramWidths:i,leftPad:s,rightPad:o,padWidth:l,preserveShortSequences:u}=n,{data:h,dataSplits:p}=t,[d,c]=bl(r.readSync(h.dataId),r.readSync(p.dataId),a,i,s,o,l,u);return[r.makeTensorInfo([d.length],"string",d),r.makeTensorInfo(p.shape,"int32",c)]}},{kernelName:rH,backendName:"webgpu",kernelFunc:vr},{kernelName:rW,backendName:"webgpu",kernelFunc:v$},{kernelName:rV,backendName:"webgpu",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,paddings:s}=n;ny.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");let o=i.reduce((e,t)=>e*t),l=[[0,0]];l.push(...s);for(let e=1+i.length;e<a.shape.length;++e)l.push([0,0]);let u=l.map((e,t)=>e[0]+a.shape[t]+e[1]),h=or.getReshaped(u,i,o,!1),p=or.getPermuted(h.length,i.length,!1),d=or.getReshapedPermuted(u,i,o,!1),c=ny.computeStrides(u),f=new vE(a.shape,u,l,h,p,c.length),m=[{type:"int32",data:h},{type:"int32",data:c}];l.map(e=>m.push({type:"int32",data:[e[0],e[1]]}));let g=r.runWebGPUProgram(f,[a],a.dtype,m),y=gr({inputs:{x:g},backend:r,attrs:{shape:d}});return r.disposeData(g.dataId),y}},{kernelName:rq,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;return v_(n,a,i,!1,r)}},{kernelName:rX,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;return v_(n,a,i,!0,r)}},{kernelName:rY,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{sparseIndices:a,sparseValues:i,defaultValue:s}=t,{outputShape:o}=n,{sliceRank:l,numUpdates:u,sliceSize:h,strides:p,outputSize:d}=or.calculateShapes(i,a,o);if("string"===i.dtype){let e=r.bufferSync(a),t=ba(e,r.bufferSync(i),o,d,h,u,l,p,ny.decodeString(r.readSync(s.dataId)[0]),!1);return r.makeTensorInfo(o,t.dtype,t.values)}let c=[d/h,h],f=gr({inputs:{x:a},backend:r,attrs:{shape:[u,l]}}),m=i.shape.length?gr({inputs:{x:i},backend:r,attrs:{shape:[u,h]}}):gs({inputs:{x:i},backend:r}),g=m.dtype,y=r.makeTensorInfo([],g,ny.makeZerosTypedArray(1,g)),b=gr({inputs:{x:s},backend:r,attrs:{shape:Array(c.length).fill(1)}}),x=vO({inputs:{x:b},backend:r,attrs:{reps:c}}),v=[{type:"int32",data:[l]},{type:"int32",data:p},{type:"int32",data:[ny.sizeFromShape([u,h])]}];switch(u){case 0:break;case 1:{let e=new vv([u,h],l,f.shape.length,m.shape.length,p,c,g,!1);r.runWebGPUProgram(e,[m,f],g,v,x)}break;default:{let e=new vv([u,h],l,f.shape.length,y.shape.length,p,c,g,!1);r.runWebGPUProgram(e,[y,f],g,v,x)}{let e=new vv([u,h],l,f.shape.length,m.shape.length,p,c,g);r.runWebGPUProgram(e,[m,f],g,v,x)}}let w=gr({inputs:{x:x},backend:r,attrs:{shape:o}});return r.disposeData(f.dataId),r.disposeData(m.dataId),r.disposeData(b.dataId),r.disposeData(y.dataId),r.disposeData(x.dataId),w}},{kernelName:rG,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{numOrSizeSplits:i,axis:s}=n,o=ny.parseAxisParam(s,a.shape)[0],l=or.prepareSplitSize(a,i,o),u=Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{let t=[...h];t[o]=e;let n=bU({inputs:{x:a},backend:r,attrs:{begin:u,size:t}});return u[o]+=e,n})}},{kernelName:rU,backendName:"webgpu",kernelFunc:vM},{kernelName:rQ,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{let{x:r}=e,n=new gl(r.shape,ky.SQUARE);return t.runWebGPUProgram(n,[r],r.dtype)}},{kernelName:rZ,backendName:"webgpu",kernelFunc:vz},{kernelName:"Sub",backendName:"webgpu",kernelFunc:vL},{kernelName:"Sum",backendName:"webgpu",kernelFunc:xS},{kernelName:"Tan",backendName:"webgpu",kernelFunc:vB},{kernelName:r4,backendName:"webgpu",kernelFunc:vW},{kernelName:r_,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{tensor:a,indices:i,updates:s}=t,{}=n,{sliceRank:o,numUpdates:l,sliceSize:u,strides:h,outputSize:p}=or.calculateShapes(s,i,a.shape),d=[p/u,u];if(0===p)return r.makeTensorInfo(a.shape,i.dtype);let c=[],f=gr({inputs:{x:i},backend:r,attrs:{shape:[l,o]}});c.push(f);let m=gr({inputs:{x:s},backend:r,attrs:{shape:[l,u]}});c.push(m);let g=gr({inputs:{x:a},backend:r,attrs:{shape:d}});c.push(g);let y=vO({inputs:{x:g},backend:r,attrs:{reps:Array(d.length).fill(1)}}),b=new vv([l,u],o,f.shape.length,m.shape.length,h,d,a.dtype,!1),x=[{type:"int32",data:[o]},{type:"int32",data:h},{type:"int32",data:[ny.sizeFromShape([l,u])]}],v=r.runWebGPUProgram(b,[m,f],g.dtype,x,y);c.push(v);let w=gr({inputs:{x:v},backend:r,attrs:{shape:a.shape}});return c.forEach(e=>r.disposeData(e.dataId)),w}},{kernelName:r6,backendName:"webgpu",kernelFunc:vO},{kernelName:r5,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{k:i,sorted:s}=n,o=a.shape,l=o[o.length-1];if(r.shouldExecuteOnCPU([a])){let[e,t]=bp(r.readSync(a.dataId),o,a.dtype,i,s);return[r.makeTensorInfo(e.shape,e.dtype,e.values),r.makeTensorInfo(t.shape,t.dtype,t.values)]}if(0===i)return o[o.length-1]=0,[r.makeTensorInfo(o,a.dtype,[]),r.makeTensorInfo(o,"int32",[])];if(1===l)return[a,gt({attrs:{shape:o,dtype:"int32",value:0},backend:r})];let u=ny.sizeFromShape(o)/l,h=gr({inputs:{x:a},attrs:{shape:[u,l]},backend:r}),p=vH(i),d=vH(l),c=null,f=()=>null===c?[h,h]:[h,c],m=(e,t,n)=>{let a=f(),i=new vU(n),s=[{type:"int32",data:[l]},{type:"int32",data:[+(null===c)]},{type:"float32",data:[-1/0]},{type:"int32",data:[e]},{type:"int32",data:[t]}],o=c;c=r.runWebGPUProgram(i,a,"int32",s),vG(r,o)};for(let e=1;e<p;e*=2){let t=2*e;for(let r=e;r>=1;r/=2)m(t,r,[u,d])}for(let e=d;e>p;e/=2){let t=f(),n=new vV([u,e/2]),a=[{type:"int32",data:[l]},{type:"int32",data:[+(null===c)]},{type:"int32",data:[p]}],i=c;c=r.runWebGPUProgram(n,t,"int32",a),vG(r,i);let s=p/2,o=2*s;for(let e=s;e>=1;e/=2)m(o,e,c.shape)}let g=c;c=bU({inputs:{x:c},backend:r,attrs:{begin:0,size:[u,i]}}),vG(r,g);let y=xB({inputs:{x:h,indices:c},backend:r,attrs:{axis:1,batchDims:1}});vG(r,h);let b=o.slice(0,-1);b.push(i),g=c,c=gr({inputs:{x:c},attrs:{shape:b},backend:r}),vG(r,g);let x=y;return y=gr({inputs:{x:y},attrs:{shape:b},backend:r}),vG(r,x),[y,c]}},{kernelName:r8,backendName:"webgpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{image:i,transforms:s}=r,{interpolation:o,fillMode:l,fillValue:u,outputShape:h}=a,[p,d,c,f]=i.shape,[m,g]=null!=h?h:[d,c],y=new vj([p,m,g,f]);switch(l){case"constant":default:t=1;break;case"reflect":t=2;break;case"wrap":t=3;break;case"nearest":t=4}let b=[{type:"int32",data:["nearest"===o?1:2]},{type:"int32",data:[t]},{type:"float32",data:[u]}];return n.runWebGPUProgram(y,[i,s],"float32",b)}},{kernelName:r7,backendName:"webgpu",kernelFunc:bk},{kernelName:ne,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{value:a}=t,{axis:i}=n;i<0&&(i+=a.shape.length);let s=a.shape.length,o=a.shape[i],l=Array(s-1),u=0;for(let e=0;e<s;e++)e!==i&&(l[u++]=a.shape[e]);let h=[],p=Array(s).fill(0),d=a.shape.slice();d[i]=1;let c=Array(o);for(let e=0;e<c.length;e++){p[i]=e;let t=bU({inputs:{x:a},backend:r,attrs:{begin:p,size:d}}),n=gr({inputs:{x:t},backend:r,attrs:{shape:l}});c[e]=n,h.push(t)}return h.forEach(e=>r.disposeData(e.dataId)),c}},{kernelName:nt,backendName:"webgpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,segmentIds:i}=t,{numSegments:s}=n,o=a.shape.length,l=[],u=0,h=or.getAxesPermutation([u],o),p=a;null!=h&&(l.push(p=bk({inputs:{x:a},backend:r,attrs:{perm:h}})),u=or.getInnerMostAxes(1,o)[0]);let d=or.segment_util.computeOutShape(p.shape,u,s),c=ny.sizeFromShape([p.shape[u]]),f=gr({inputs:{x:p},backend:r,attrs:{shape:[-1,c]}});l.push(f);let m=a.dtype,g=[f.shape[0],s],y=gt({backend:r,attrs:{shape:g,value:0,dtype:m}}),b=new vK(f.shape,g,m),x=[{type:"int32",data:[s]},{type:"int32",data:[ny.sizeFromShape(f.shape)]}],v=r.runWebGPUProgram(b,[f,i],m,x,y),w=gr({inputs:{x:v},backend:r,attrs:{shape:d}});l.push(v);let k=w;return null!=h&&(l.push(w),k=bk({inputs:{x:k},backend:r,attrs:{perm:or.getUndoAxesPermutation(h)}})),l.forEach(e=>r.disposeData(e.dataId)),k}},{kernelName:nr,backendName:"webgpu",kernelFunc:va}])ng(e);var vq=function(e,t){return(vq=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};function vX(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}vq(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var vY=function(){return(vY=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};function vZ(e,t,r,n){return new(r||(r=Promise))(function(a,i){function s(e){try{l(n.next(e))}catch(e){i(e)}}function o(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?a(e.value):((t=e.value)instanceof r?t:new r(function(e){e(t)})).then(s,o)}l((n=n.apply(e,t||[])).next())})}function vQ(e,t){var r,n,a,i,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){var l=[i,o];if(r)throw TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(a=2&l[0]?n.return:l[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,l[1])).done)return a;switch(n=0,a&&(l=[2&l[0],a.value]),l[0]){case 0:case 1:a=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,n=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!(a=(a=s.trys).length>0&&a[a.length-1])&&(6===l[0]||2===l[0])){s=0;continue}if(3===l[0]&&(!a||l[1]>a[0]&&l[1]<a[3])){s.label=l[1];break}if(6===l[0]&&s.label<a[1]){s.label=a[1],a=l;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(l);break}a[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],n=0}finally{r=a=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}}}function vJ(e,t,r){if(r||2==arguments.length)for(var n,a=0,i=t.length;a<i;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))}var v0=["nose","left_eye","right_eye","left_ear","right_ear","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle"],v1=["nose","left_eye_inner","left_eye","left_eye_outer","right_eye_inner","right_eye","right_eye_outer","left_ear","right_ear","mouth_left","mouth_right","left_shoulder","right_shoulder","left_elbow","right_elbow","left_wrist","right_wrist","left_pinky","right_pinky","left_index","right_index","left_thumb","right_thumb","left_hip","right_hip","left_knee","right_knee","left_ankle","right_ankle","left_heel","right_heel","left_foot_index","right_foot_index"],v2={left:[1,2,3,7,9,11,13,15,17,19,21,23,25,27,29,31],right:[4,5,6,8,10,12,14,16,18,20,22,24,26,28,30,32],middle:[0]},v3={left:[1,3,5,7,9,11,13,15],right:[2,4,6,8,10,12,14,16],middle:[0]},v4=[[0,1],[0,2],[1,3],[2,4],[5,6],[5,7],[5,11],[6,8],[6,12],[7,9],[8,10],[11,12],[11,13],[12,14],[13,15],[14,16]],v6=[[0,1],[0,4],[1,2],[2,3],[3,7],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[11,23],[12,14],[14,16],[12,24],[13,15],[15,17],[16,18],[16,20],[15,17],[15,19],[15,21],[16,22],[17,19],[18,20],[23,25],[23,24],[24,26],[25,27],[26,28],[27,29],[28,30],[27,31],[28,32],[29,31],[30,32]];function v5(e){return e instanceof SVGAnimatedLength?e.baseVal.value:e}function v8(e){return vZ(this,void 0,void 0,function(){var t,r;return vQ(this,function(n){switch(n.label){case 0:return t=document.createElement("canvas"),e instanceof au?[4,l3.toPixels(e,t)]:[3,2];case 1:return n.sent(),[3,3];case 2:t.width=v5(e.width),t.height=v5(e.height),r=t.getContext("2d"),e instanceof ImageData?r.putImageData(e,0,0):r.drawImage(e,0,0),n.label=3;case 3:return[2,t]}})})}function v7(e){return vZ(this,void 0,void 0,function(){var t,r,n,a,i,s;return vQ(this,function(o){switch(o.label){case 0:return e instanceof au?(r=(t=e.shape.slice(0,2))[0],n=t[1],a=ImageData.bind,[4,l3.toPixels(e)]):[3,2];case 1:return[2,new(a.apply(ImageData,[void 0,o.sent(),n,r]))];case 2:return s=(i=document.createElement("canvas")).getContext("2d"),i.width=v5(e.width),i.height=v5(e.height),s.drawImage(e,0,0),[2,s.getImageData(0,0,i.width,i.height)]}})})}function v9(e){if(e<0||e>=256)throw Error("Mask value must be in range [0, 255] but got ".concat(e));if(!Number.isInteger(e))throw Error("Mask value must be an integer but got ".concat(e))}var we={runtime:"mediapipe",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,modelType:"full"},wt=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return vZ(this,void 0,void 0,function(){return vQ(this,function(e){return[2,this.mask]})})},e.prototype.toImageData=function(){return vZ(this,void 0,void 0,function(){return vQ(this,function(e){return[2,v7(this.mask)]})})},e.prototype.toTensor=function(){return vZ(this,void 0,void 0,function(){return vQ(this,function(e){return[2,function(e){return vZ(this,void 0,void 0,function(){var t,r;return vQ(this,function(n){switch(n.label){case 0:return e instanceof SVGImageElement||e instanceof OffscreenCanvas?[4,v8(e)]:[3,2];case 1:return r=n.sent(),[3,3];case 2:r=e,n.label=3;case 3:return t=r,[2,l3.fromPixels(t,4)]}})})}(this.mask)]})})},e.prototype.getUnderlyingType=function(){return"canvasimagesource"},e}();function wr(e){return v9(e),"person"}var wn=function(){function e(e){var t,r=this;switch(this.width=0,this.height=0,this.selfieMode=!1,this.poseSolution=new(0,F.Pose)({locateFile:function(t,r){if(e.solutionPath){var n=e.solutionPath.replace(/\/+$/,"");return"".concat(n,"/").concat(t)}return"".concat(r,"/").concat(t)}}),e.modelType){case"lite":t=0;break;case"heavy":t=2;break;default:t=1}this.poseSolution.setOptions({modelComplexity:t,smoothLandmarks:e.enableSmoothing,enableSegmentation:e.enableSegmentation,smoothSegmentation:e.smoothSegmentation,selfieMode:this.selfieMode}),this.poseSolution.onResults(function(e){if(r.height=e.image.height,r.width=e.image.width,null==e.poseLandmarks)r.poses=[];else{var t=r.translateOutput(e.poseLandmarks,e.poseWorldLandmarks);e.segmentationMask&&(t.segmentation={maskValueToLabel:wr,mask:new wt(e.segmentationMask)}),r.poses=[t]}})}return e.prototype.translateOutput=function(e,t){var r=this,n={keypoints:e.map(function(e,t){return{x:e.x*r.width,y:e.y*r.height,z:e.z,score:e.visibility,name:v1[t]}})};return null!=t&&(n.keypoints3D=t.map(function(e,t){return{x:e.x,y:e.y,z:e.z,score:e.visibility,name:v1[t]}})),n},e.prototype.estimatePoses=function(e,t,r){return vZ(this,void 0,void 0,function(){var n,a;return vQ(this,function(i){switch(i.label){case 0:return t&&t.flipHorizontal&&t.flipHorizontal!==this.selfieMode&&(this.selfieMode=t.flipHorizontal,this.poseSolution.setOptions({selfieMode:this.selfieMode})),e instanceof au?(a=ImageData.bind,[4,l3.toPixels(e)]):[3,2];case 1:return n=new(a.apply(ImageData,[void 0,i.sent(),e.shape[1],e.shape[0]])),[3,3];case 2:n=e,i.label=3;case 3:return e=n,[4,this.poseSolution.send({image:e},r)];case 4:return i.sent(),[2,this.poses]}})})},e.prototype.dispose=function(){this.poseSolution.close()},e.prototype.reset=function(){this.poseSolution.reset()},e.prototype.initialize=function(){return this.poseSolution.initialize()},e}();function wa(e){return e instanceof au?{height:e.shape[0],width:e.shape[1]}:{height:e.height,width:e.width}}function wi(e){return e-2*Math.PI*Math.floor((e+Math.PI)/(2*Math.PI))}function ws(e){return e instanceof au?e:l3.fromPixels(e)}function wo(e,t,r){return wl(r,"inputResolution"),[1/r.width*e[0][0]*t.width,1/r.height*e[0][1]*t.width,e[0][3]*t.width,1/r.width*e[1][0]*t.height,1/r.height*e[1][1]*t.height,e[1][3]*t.height,0,0]}function wl(e,t){ny.assert(0!==e.width,function(){return"".concat(t," width cannot be 0.")}),ny.assert(0!==e.height,function(){return"".concat(t," height cannot be 0.")})}function wu(e,t,r){var n,a,i,s,o,l,u,h=r.rotationVectorStartKeypointIndex,p=r.rotationVectorEndKeypointIndex,d=e.locationData,c=d.relativeKeypoints[h].x*t.width,f=d.relativeKeypoints[h].y*t.height,m=d.relativeKeypoints[p].x*t.width,g=d.relativeKeypoints[p].y*t.height,y=2*Math.sqrt((m-c)*(m-c)+(g-f)*(g-f)),b=(a=e.locationData,i=r.rotationVectorStartKeypointIndex,s=r.rotationVectorEndKeypointIndex,n=r.rotationVectorTargetAngle?r.rotationVectorTargetAngle:Math.PI*r.rotationVectorTargetAngleDegree/180,o=a.relativeKeypoints[i].x*t.width,l=a.relativeKeypoints[i].y*t.height,u=a.relativeKeypoints[s].x*t.width,wi(n-Math.atan2(-(a.relativeKeypoints[s].y*t.height-l),u-o)));return{xCenter:c/t.width,yCenter:f/t.height,width:y/t.width,height:y/t.height,rotation:b}}function wh(e){if(16!==e.length)throw Error("Array length must be 16 but got ".concat(e.length));return[[e[0],e[1],e[2],e[3]],[e[4],e[5],e[6],e[7]],[e[8],e[9],e[10],e[11]],[e[12],e[13],e[14],e[15]]]}function wp(e,t,r,n,a,i,s){return e[t][a]*(e[r][i]*e[n][s]-e[r][s]*e[n][i])}function wd(e,t,r){var n=(t+1)%4,a=(t+2)%4,i=(t+3)%4,s=(r+1)%4,o=(r+2)%4,l=(r+3)%4;return wp(e,n,a,i,s,o,l)+wp(e,a,i,n,s,o,l)+wp(e,i,n,a,s,o,l)}function wc(e,t,r){void 0===r&&(r={ignoreRotation:!1});for(var n=[],a=0;a<e.length;a++){var i=e[a],s=i.x-.5,o=i.y-.5,l=r.ignoreRotation?0:t.rotation,u=Math.cos(l)*s-Math.sin(l)*o,h=Math.sin(l)*s+Math.cos(l)*o;u=u*t.width+t.xCenter,h=h*t.height+t.yCenter;var p=i.z*t.width,d=vY({},i);d.x=u,d.y=h,d.z=p,n.push(d)}return n}function wf(e,t){var r=function(e,t,r,n){!1;var a=(n-r)/255;return{scale:a,offset:r-e*a}}(0,0,t[0],t[1]);return aH(function(){return sp(sf(e,r.scale),r.offset)})}function wm(e,t,r){var n,a,i,s,o,l,u,h,p,d,c,f=t.outputTensorSize,m=t.keepAspectRatio,g=t.borderMode,y=t.outputTensorFloatRange,b=wa(e),x=r?{xCenter:r.xCenter*b.width,yCenter:r.yCenter*b.height,width:r.width*b.width,height:r.height*b.height,rotation:r.rotation}:{xCenter:.5*b.width,yCenter:.5*b.height,width:b.width,height:b.height,rotation:0},v=function(e,t,r){if(void 0===r&&(r=!1),!r)return{top:0,left:0,right:0,bottom:0};var n=t.height,a=t.width;wl(t,"targetSize"),wl(e,"roi");var i,s,o=n/a,l=e.height/e.width,u=0,h=0;return o>l?(i=e.width,s=e.width*o,h=(1-l/o)/2):(i=e.height/o,s=e.height,u=(1-o/l)/2),e.width=i,e.height=s,{top:h,left:u,right:u,bottom:h}}(x,f,m),w=(n=b.width,a=b.height,i=x.width,s=x.height,o=Math.cos(x.rotation),l=Math.sin(x.rotation),u=x.xCenter,h=x.yCenter,p=1/n,d=1/a,(c=Array(16))[0]=i*o*1*p,c[1]=-s*l*p,c[2]=0,c[3]=(-.5*i*o*1+.5*s*l+u)*p,c[4]=i*l*1*d,c[5]=s*o*d,c[6]=0,c[7]=(-.5*s*o-.5*i*l*1+h)*d,c[8]=0,c[9]=0,c[10]=i*p,c[11]=0,c[12]=0,c[13]=0,c[14]=0,c[15]=1,wh(c));return{imageTensor:aH(function(){var t=ws(e),r=pG(wo(w,b,f),[1,8]),n=d8.transform(uO(sl(t,"float32")),r,"bilinear","zero"===g?"constant":"nearest",0,[f.height,f.width]);return null!=y?wf(n,y):n}),padding:v,transformationMatrix:w}}function wg(e,t,r,n){return 1===n?.5*(e+t):e+(t-e)*r/(n-1)}function wy(e){return null!=e&&null!=e.currentTime}function wb(e){for(var t={locationData:{relativeKeypoints:[]}},r=Number.MAX_SAFE_INTEGER,n=Number.MIN_SAFE_INTEGER,a=Number.MAX_SAFE_INTEGER,i=Number.MIN_SAFE_INTEGER,s=0;s<e.length;++s){var o=e[s];r=Math.min(r,o.x),n=Math.max(n,o.x),a=Math.min(a,o.y),i=Math.max(i,o.y),t.locationData.relativeKeypoints.push({x:o.x,y:o.y})}return t.locationData.relativeBoundingBox={xMin:r,yMin:a,xMax:n,yMax:i,width:n-r,height:i-a},t}function wx(e,t){return e.map(function(e){var r=vY(vY({},e),{x:e.x*t.width,y:e.y*t.height});return null!=e.z&&(r.z=e.z*t.width),r})}function wv(e,t){var r=t.left,n=t.top,a=t.left+t.right,i=t.top+t.bottom;return e.map(function(e){return vY(vY({},e),{x:(e.x-r)/(1-a),y:(e.y-n)/(1-i),z:e.z/(1-a)})})}function ww(e,t,r,n){return vZ(this,void 0,void 0,function(){var a,i,s,o,l,u,h;return vQ(this,function(p){switch(p.label){case 0:return r=r||t.flipHorizontally||!1,n=n||t.flipVertically||!1,a=e.size/t.numLandmarks,[4,e.data()];case 1:for(i=p.sent(),s=[],o=0;o<t.numLandmarks;++o){var d,c;l=o*a,(h={x:0,y:0}).x=r?t.inputImageWidth-i[l]:i[l],a>1&&(h.y=n?t.inputImageHeight-i[l+1]:i[l+1]),a>2&&(h.z=i[l+2]),a>3&&(h.score=(d=t.visibilityActivation,c=i[l+3],"none"===d?c:1/(1+Math.exp(-c)))),s.push(h)}for(u=0;u<s.length;++u)(h=s[u]).x=h.x/t.inputImageWidth,h.y=h.y/t.inputImageHeight,h.z=h.z/t.inputImageWidth/(t.normalizeZ||1);return[2,s]}})})}function wk(e,t,r){var n,a=e.width,i=e.height,s=e.rotation;if(null==r.rotation&&null==r.rotationDegree||(n=s,null!=r.rotation?n+=r.rotation:null!=r.rotationDegree&&(n+=Math.PI*r.rotationDegree/180),s=wi(n)),0===s)e.xCenter=e.xCenter+a*r.shiftX,e.yCenter=e.yCenter+i*r.shiftY;else{var o=(t.width*a*r.shiftX*Math.cos(s)-t.height*i*r.shiftY*Math.sin(s))/t.width,l=(t.width*a*r.shiftX*Math.sin(s)+t.height*i*r.shiftY*Math.cos(s))/t.height;e.xCenter=e.xCenter+o,e.yCenter=e.yCenter+l}if(r.squareLong){var u=Math.max(a*t.width,i*t.height);a=u/t.width,i=u/t.height}else if(r.squareShort){var h=Math.min(a*t.width,i*t.height);a=h/t.width,i=h/t.height}return e.width=a*r.scaleX,e.height=i*r.scaleY,e}var wS=function(){function e(e){this.alpha=e,this.initialized=!1}return e.prototype.apply=function(e,t){var r;return this.initialized?r=null==t?this.storedValue+this.alpha*(e-this.storedValue):this.storedValue+this.alpha*t*Math.asinh((e-this.storedValue)/t):(r=e,this.initialized=!0),this.rawValue=e,this.storedValue=r,r},e.prototype.applyWithAlpha=function(e,t,r){return this.alpha=t,this.apply(e,r)},e.prototype.hasLastRawValue=function(){return this.initialized},e.prototype.lastRawValue=function(){return this.rawValue},e.prototype.reset=function(){this.initialized=!1},e}(),wI=function(){function e(e){this.frequency=e.frequency,this.minCutOff=e.minCutOff,this.beta=e.beta,this.thresholdCutOff=e.thresholdCutOff,this.thresholdBeta=e.thresholdBeta,this.derivateCutOff=e.derivateCutOff,this.x=new wS(this.getAlpha(this.minCutOff)),this.dx=new wS(this.getAlpha(this.derivateCutOff)),this.lastTimestamp=0}return e.prototype.apply=function(e,t,r){if(null==e)return e;var n=Math.trunc(t);if(this.lastTimestamp>=n)return e;0!==this.lastTimestamp&&0!==n&&(this.frequency=1/(1e-6*(n-this.lastTimestamp))),this.lastTimestamp=n;var a=this.x.hasLastRawValue()?(e-this.x.lastRawValue())*r*this.frequency:0,i=this.dx.applyWithAlpha(a,this.getAlpha(this.derivateCutOff)),s=this.minCutOff+this.beta*Math.abs(i),o=null!=this.thresholdCutOff?this.thresholdCutOff+this.thresholdBeta*Math.abs(i):null;return this.x.applyWithAlpha(e,this.getAlpha(s),o)},e.prototype.getAlpha=function(e){return 1/(1+this.frequency/(2*Math.PI*e))},e}(),wC=function(){function e(e){this.config=e}return e.prototype.apply=function(e,t,r){var n=this;if(null==e)return this.reset(),null;this.initializeFiltersIfEmpty(e);var a=1;if(!this.config.disableValueScaling){if(r<this.config.minAllowedObjectScale)return vJ([],e,!0);a=1/r}return e.map(function(e,r){var i=vY(vY({},e),{x:n.xFilters[r].apply(e.x,t,a),y:n.yFilters[r].apply(e.y,t,a)});return null!=e.z&&(i.z=n.zFilters[r].apply(e.z,t,a)),i})},e.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},e.prototype.initializeFiltersIfEmpty=function(e){var t=this;null!=this.xFilters&&this.xFilters.length===e.length||(this.xFilters=e.map(function(e){return new wI(t.config)}),this.yFilters=e.map(function(e){return new wI(t.config)}),this.zFilters=e.map(function(e){return new wI(t.config)}))},e}(),wN=function(){function e(e){this.config=e,this.window=[],this.lowPassFilter=new wS(1),this.lastValue=0,this.lastValueScale=1,this.lastTimestamp=-1}return e.prototype.apply=function(e,t,r){if(null==e)return e;var n,a=Math.trunc(t);if(this.lastTimestamp>=a)return e;if(-1===this.lastTimestamp)n=1;else{for(var i=e*r-this.lastValue*this.lastValueScale,s=a-this.lastTimestamp,o=i,l=s,u=(1+this.window.length)*(1e6/30),h=0,p=this.window;h<p.length;h++){var d=p[h];if(l+d.duration>u)break;o+=d.distance,l+=d.duration}var c=o/(1e-6*l);n=1-1/(1+this.config.velocityScale*Math.abs(c)),this.window.unshift({distance:i,duration:s}),this.window.length>this.config.windowSize&&this.window.pop()}return this.lastValue=e,this.lastValueScale=r,this.lastTimestamp=a,this.lowPassFilter.applyWithAlpha(e,n)},e}(),wT=function(){function e(e){this.config=e}return e.prototype.apply=function(e,t,r){var n=this;if(null==e)return this.reset(),null;var a=1;if(!this.config.disableValueScaling){if(r<this.config.minAllowedObjectScale)return vJ([],e,!0);a=1/r}return this.initializeFiltersIfEmpty(e),e.map(function(e,r){var i=vY(vY({},e),{x:n.xFilters[r].apply(e.x,t,a),y:n.yFilters[r].apply(e.y,t,a)});return null!=e.z&&(i.z=n.zFilters[r].apply(e.z,t,a)),i})},e.prototype.reset=function(){this.xFilters=null,this.yFilters=null,this.zFilters=null},e.prototype.initializeFiltersIfEmpty=function(e){var t=this;null!=this.xFilters&&this.xFilters.length===e.length||(this.xFilters=e.map(function(e){return new wN(t.config)}),this.yFilters=e.map(function(e){return new wN(t.config)}),this.zFilters=e.map(function(e){return new wN(t.config)}))},e}(),w$=function(){function e(e){if(null!=e.velocityFilter)this.keypointsFilter=new wT(e.velocityFilter);else{if(null==e.oneEuroFilter)throw Error("Either configure velocityFilter or oneEuroFilter, but got "+"".concat(e,"."));this.keypointsFilter=new wC(e.oneEuroFilter)}}return e.prototype.apply=function(e,t,r,n,a){if(void 0===n&&(n=!1),null==e)return this.keypointsFilter.reset(),null;var i=null!=a?(a.width*r.width+a.height*r.height)/2:1,s=n?wx(e,r):e,o=this.keypointsFilter.apply(s,t,i);return n?o.map(function(e){var t=vY(vY({},e),{x:e.x/r.width,y:e.y/r.height});return null!=e.z&&(e.z=e.z/r.width),t}):o},e}(),wE=function(){function e(e){this.alpha=e.alpha}return e.prototype.apply=function(e){var t=this;if(null==e)return this.visibilityFilters=null,null;null!=this.visibilityFilters&&this.visibilityFilters.length===e.length||(this.visibilityFilters=e.map(function(e){return new wS(t.alpha)}));for(var r=[],n=0;n<e.length;++n){var a=e[n],i=vY({},a);i.score=this.visibilityFilters[n].apply(a.score),r.push(i)}return r},e}(),wR={reduceBoxesInLowestlayer:!1,interpolatedScaleAspectRatio:1,featureMapHeight:[],featureMapWidth:[],numLayers:5,minScale:.1484375,maxScale:.75,inputSizeHeight:224,inputSizeWidth:224,anchorOffsetX:.5,anchorOffsetY:.5,strides:[8,16,32,32,32],aspectRatios:[1],fixedAnchorSize:!0},wA={runtime:"tfjs",modelType:"full",enableSmoothing:!0,enableSegmentation:!1,smoothSegmentation:!0,detectorModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/detector/1",landmarkModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/blazepose_3d/landmark/full/2"},wF={maxPoses:1,flipHorizontal:!1},w_={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:2254,numCoords:12,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:4,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:224,yScale:224,hScale:224,wScale:224,minScoreThresh:.5},wD={shiftX:0,shiftY:0,scaleX:1.25,scaleY:1.25,squareLong:!0},wO={outputTensorSize:{width:224,height:224},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:"zero"},wM={outputTensorSize:{width:256,height:256},keepAspectRatio:!0,outputTensorFloatRange:[0,1],borderMode:"zero"},wz={numLandmarks:39,inputImageWidth:256,inputImageHeight:256,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},wP={numLandmarks:39,inputImageWidth:1,inputImageHeight:1,visibilityActivation:"sigmoid",flipHorizontally:!1,flipVertically:!1},wL={kernelSize:7,minConfidenceToRefine:.5},wB={alpha:.1},wW={oneEuroFilter:{frequency:30,minCutOff:.05,beta:80,derivateCutOff:1,minAllowedObjectScale:1e-6}},wU={oneEuroFilter:{frequency:30,minCutOff:.01,beta:10,derivateCutOff:1,minAllowedObjectScale:1e-6}},wV={oneEuroFilter:{frequency:30,minCutOff:.1,beta:40,derivateCutOff:1,minAllowedObjectScale:1e-6,disableValueScaling:!0}},wG={activation:"none"},wH={combineWithPreviousRatio:.7},wj=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return vZ(this,void 0,void 0,function(){return vQ(this,function(e){return[2,v8(this.mask)]})})},e.prototype.toImageData=function(){return vZ(this,void 0,void 0,function(){return vQ(this,function(e){return[2,v7(this.mask)]})})},e.prototype.toTensor=function(){return vZ(this,void 0,void 0,function(){return vQ(this,function(e){return[2,this.mask]})})},e.prototype.getUnderlyingType=function(){return"tensor"},e}();function wK(e){return v9(e),"person"}var wq,wX,wY,wZ,wQ,wJ,w0,w1,w2,w3,w4,w6,w5,w8,w7,w9,ke,kt,kr,kn,ka,ki,ks,ko,kl,ku,kh,kp,kd,kc,kf,km,kg,ky,kb,kx,kv,kw=function(){function e(e,t,r,n,a,i){this.detectorModel=e,this.landmarkModel=t,this.enableSmoothing=r,this.enableSegmentation=n,this.smoothSegmentation=a,this.modelType=i,this.regionOfInterest=null,this.prevFilteredSegmentationMask=null,this.anchors=function(e){null==e.reduceBoxesInLowestLayer&&(e.reduceBoxesInLowestLayer=!1),null==e.interpolatedScaleAspectRatio&&(e.interpolatedScaleAspectRatio=1),null==e.fixedAnchorSize&&(e.fixedAnchorSize=!1);for(var t=[],r=0;r<e.numLayers;){for(var n=[],a=[],i=[],s=[],o=r;o<e.strides.length&&e.strides[o]===e.strides[r];){var l=wg(e.minScale,e.maxScale,o,e.strides.length);if(0===o&&e.reduceBoxesInLowestLayer)i.push(1),i.push(2),i.push(.5),s.push(.1),s.push(l),s.push(l);else{for(var u=0;u<e.aspectRatios.length;++u)i.push(e.aspectRatios[u]),s.push(l);if(e.interpolatedScaleAspectRatio>0){var h=o===e.strides.length-1?1:wg(e.minScale,e.maxScale,o+1,e.strides.length);s.push(Math.sqrt(l*h)),i.push(e.interpolatedScaleAspectRatio)}}o++}for(var p=0;p<i.length;++p){var d=Math.sqrt(i[p]);n.push(s[p]/d),a.push(s[p]*d)}var c=0,f=0;if(e.featureMapHeight.length>0)c=e.featureMapHeight[r],f=e.featureMapWidth[r];else{var m=e.strides[r];c=Math.ceil(e.inputSizeHeight/m),f=Math.ceil(e.inputSizeWidth/m)}for(var g=0;g<c;++g)for(var y=0;y<f;++y)for(var b=0;b<n.length;++b){var x={xCenter:(y+e.anchorOffsetX)/f,yCenter:(g+e.anchorOffsetY)/c,width:0,height:0};e.fixedAnchorSize?(x.width=1,x.height=1):(x.width=a[b],x.height=n[b]),t.push(x)}r=o}return t}(wR);var s=pV(this.anchors.map(function(e){return e.width})),o=pV(this.anchors.map(function(e){return e.height})),l=pV(this.anchors.map(function(e){return e.xCenter})),u=pV(this.anchors.map(function(e){return e.yCenter}));this.anchorTensor={x:l,y:u,w:s,h:o},this.prevFilteredSegmentationMask=this.enableSegmentation?pG([],[0,0]):null}return e.prototype.estimatePoses=function(e,t,r){return vZ(this,void 0,void 0,function(){var n,a,i,s,o,l,u,h,p,d,c,f,m,g,y,b,x,v,w,k,S,I;return vQ(this,function(C){switch(C.label){case 0:return n=function(e){var t;if(null==(t=null==e?wF:vY({},e)).maxPoses&&(t.maxPoses=1),t.maxPoses<=0)throw Error("Invalid maxPoses ".concat(t.maxPoses,". Should be > 0."));if(t.maxPoses>1)throw Error("Multi-pose detection is not implemented yet. Please set maxPoses to 1.");return t}(t),null==e?(this.reset(),[2,[]]):(this.maxPoses=n.maxPoses,this.timestamp=null!=r?1e3*r:wy(e)?1e6*e.currentTime:null,a=wa(e),i=aH(function(){return sl(ws(e),"float32")}),null!=(s=this.regionOfInterest)?[3,2]:[4,this.detectPose(i)]);case 1:if(0===(o=C.sent()).length)return this.reset(),i.dispose(),[2,[]];l=o[0],s=this.poseDetectionToRoi(l,a),C.label=2;case 2:return[4,this.poseLandmarksByRoi(s,i)];case 3:return u=C.sent(),i.dispose(),null==u?(this.reset(),[2,[]]):(h=u.landmarks,p=u.auxiliaryLandmarks,d=u.poseScore,c=u.worldLandmarks,f=u.segmentationMask,g=(m=this.poseLandmarkFiltering(h,p,c,a)).actualLandmarksFiltered,y=m.auxiliaryLandmarksFiltered,b=m.actualWorldLandmarksFiltered,x=this.poseLandmarksToRoi(y,a),this.regionOfInterest=x,v=this.smoothSegmentation&&null!=f?this.poseSegmentationFiltering(f):f,null!=(w=null!=g?wx(g,a):null)&&w.forEach(function(e,t){e.name=v1[t]}),null!=(k=b)&&k.forEach(function(e,t){e.name=v1[t]}),S={score:d,keypoints:w,keypoints3D:k},null!==v&&(I=aH(function(){return hZ(h5(uO(v,2),[[0,0],[0,0],[0,1]]),[[0,0],[0,0],[0,2]],"symmetric")}),this.smoothSegmentation||aj(v),S.segmentation={maskValueToLabel:wK,mask:new wj(I)}),[2,[S]])}})})},e.prototype.poseSegmentationFiltering=function(e){var t,r,n,a=this.prevFilteredSegmentationMask;return 0===a.size?this.prevFilteredSegmentationMask=e:(this.prevFilteredSegmentationMask="webgl"===aq()?(t=wH.combineWithPreviousRatio.toFixed(2),r={variableNames:["prevMask","newMask"],outputShape:a.shape,userCode:"\n  void main() {\n      ivec2 coords = getOutputCoords();\n      int height = coords[0];\n      int width = coords[1];\n\n      float prevMaskValue = getPrevMask(height, width);\n      float newMaskValue = getNewMask(height, width);\n\n      /*\n      * Assume p := newMaskValue\n      * H(p) := 1 + (p * log(p) + (1-p) * log(1-p)) / log(2)\n      * uncertainty alpha(p) =\n      *   Clamp(1 - (1 - H(p)) * (1 - H(p)), 0, 1) [squaring the\n      * uncertainty]\n      *\n      * The following polynomial approximates uncertainty alpha as a\n      * function of (p + 0.5):\n      */\n      const float c1 = 5.68842;\n      const float c2 = -0.748699;\n      const float c3 = -57.8051;\n      const float c4 = 291.309;\n      const float c5 = -624.717;\n      float t = newMaskValue - 0.5;\n      float x = t * t;\n\n      float uncertainty =\n        1.0 - min(1.0, x * (c1 + x * (c2 + x * (c3 + x * (c4 + x * c5)))));\n\n      float outputValue = newMaskValue + (prevMaskValue - newMaskValue) *\n                             (uncertainty * ".concat(t,");\n\n      setOutput(outputValue);\n    }\n")},n=aY(),aH(function(){var t=n.compileAndRun(r,[a,e]);return aN.makeTensorFromDataId(t.dataId,t.shape,t.dtype)})):aH(function(){var t=sg(sF(e,.5)),r=sF(1,hY(1,sf(t,sp(5.68842,sf(t,sp(-.748699,sf(t,sp(-57.8051,sf(t,sp(291.309,sf(t,-624.717)))))))))));return sp(e,sf(sF(a,e),sf(r,wH.combineWithPreviousRatio)))}),aj(e)),aj(a),this.prevFilteredSegmentationMask},e.prototype.dispose=function(){this.detectorModel.dispose(),this.landmarkModel.dispose(),aj([this.anchorTensor.x,this.anchorTensor.y,this.anchorTensor.w,this.anchorTensor.h,this.prevFilteredSegmentationMask])},e.prototype.reset=function(){this.regionOfInterest=null,this.enableSegmentation&&(aj(this.prevFilteredSegmentationMask),this.prevFilteredSegmentationMask=pG([],[0,0])),this.visibilitySmoothingFilterActual=null,this.visibilitySmoothingFilterAuxiliary=null,this.landmarksSmoothingFilterActual=null,this.landmarksSmoothingFilterAuxiliary=null},e.prototype.detectPose=function(e){return vZ(this,void 0,void 0,function(){var t,r,n,a,i,s,o,l,u;return vQ(this,function(h){switch(h.label){case 0:var p;return r=(t=wm(e,wO)).imageTensor,n=t.padding,p=a=this.detectorModel.predict(r),s=(i=aH(function(){var e=aH(function(){return[u6(p,[0,0,0],[1,-1,1]),u6(p,[0,0,1],[1,-1,-1])]}),t=e[0];return{boxes:pL(e[1]),logits:pL(t)}})).boxes,[4,function(e,t,r){return vZ(this,void 0,void 0,function(){var n,a,i,s;return vQ(this,function(o){switch(o.label){case 0:var l;return n=e[0],l=e[1],a=aH(function(){r.reverseOutputOrder?(n=pL(u6(l,[0,r.boxCoordOffset+0],[-1,1])),e=pL(u6(l,[0,r.boxCoordOffset+1],[-1,1])),i=pL(u6(l,[0,r.boxCoordOffset+2],[-1,1])),a=pL(u6(l,[0,r.boxCoordOffset+3],[-1,1]))):(e=pL(u6(l,[0,r.boxCoordOffset+0],[-1,1])),n=pL(u6(l,[0,r.boxCoordOffset+1],[-1,1])),a=pL(u6(l,[0,r.boxCoordOffset+2],[-1,1])),i=pL(u6(l,[0,r.boxCoordOffset+3],[-1,1]))),n=sp(sf(sc(n,r.xScale),t.w),t.x),e=sp(sf(sc(e,r.yScale),t.h),t.y),r.applyExponentialOnBoxSize?(a=sf(uD(sc(a,r.hScale)),t.h),i=sf(uD(sc(i,r.wScale)),t.w)):(a=sf(sc(a,r.hScale),t.h),i=sf(sc(i,r.wScale),t.h));var e,n,a,i,s=sF(e,sc(a,2)),o=sF(n,sc(i,2)),u=sp(e,sc(a,2)),h=sp(n,sc(i,2)),p=un([s9(s,[r.numBoxes,1]),s9(o,[r.numBoxes,1]),s9(u,[r.numBoxes,1]),s9(h,[r.numBoxes,1])],1);if(r.numKeypoints)for(var d=0;d<r.numKeypoints;++d){var c=r.keypointCoordOffset+d*r.numValuesPerKeypoint,f=void 0,m=void 0;r.reverseOutputOrder?(f=pL(u6(l,[0,c],[-1,1])),m=pL(u6(l,[0,c+1],[-1,1]))):(m=pL(u6(l,[0,c],[-1,1])),f=pL(u6(l,[0,c+1],[-1,1])));var g=sp(sf(sc(f,r.xScale),t.w),t.x),y=sp(sf(sc(m,r.yScale),t.h),t.y);p=un([p,s9(g,[r.numBoxes,1]),s9(y,[r.numBoxes,1])],1)}return p}),i=aH(function(){var e=n;return r.sigmoidScore?(null!=r.scoreClippingThresh&&(e=ur(n,-r.scoreClippingThresh,r.scoreClippingThresh)),e=ow(e)):e}),[4,function(e,t,r){return vZ(this,void 0,void 0,function(){var n,a,i,s,o,l,u,h,p,d,c,f;return vQ(this,function(m){switch(m.label){case 0:return n=[],[4,e.data()];case 1:return a=m.sent(),[4,t.data()];case 2:for(i=m.sent(),s=0;s<r.numBoxes;++s){var g,y,b,x,v,w;if(!(null!=r.minScoreThresh&&i[s]<r.minScoreThresh||(u=(g=a[(o=s*r.numCoords)+0],y=a[o+1],b=a[o+2],x=a[o+3],v=i[s],w=r.flipVertically,l={score:[v],ind:s,locationData:{relativeBoundingBox:{xMin:y,yMin:w?1-b:g,xMax:x,yMax:w?1-g:b,width:x-y,height:b-g}}}).locationData.relativeBoundingBox).width<0||u.height<0)){if(r.numKeypoints>0)for((h=l.locationData).relativeKeypoints=[],p=r.numKeypoints*r.numValuesPerKeypoint,d=0;d<p;d+=r.numValuesPerKeypoint)f={x:a[(c=o+r.keypointCoordOffset+d)+0],y:r.flipVertically?1-a[c+1]:a[c+1]},h.relativeKeypoints.push(f);n.push(l)}}return[2,n]}})})}(a,i,r)];case 1:return s=o.sent(),aj([a,i]),[2,s]}})})}([o=i.logits,s],this.anchorTensor,w_)];case 1:return 0===(l=h.sent()).length?(aj([r,a,o,s]),[2,l]):[4,function(e,t,r,n){return vZ(this,void 0,void 0,function(){var r,n,a,i,s;return vQ(this,function(o){switch(o.label){case 0:return e.sort(function(e,t){return Math.max.apply(Math,t.score)-Math.max.apply(Math,e.score)}),r=pG(e.map(function(e){return[e.locationData.relativeBoundingBox.yMin,e.locationData.relativeBoundingBox.xMin,e.locationData.relativeBoundingBox.yMax,e.locationData.relativeBoundingBox.xMax]})),n=pV(e.map(function(e){return e.score[0]})),[4,d8.nonMaxSuppressionAsync(r,n,t,.3)];case 1:return[4,(a=o.sent()).array()];case 2:return i=o.sent(),s=e.filter(function(e,t){return i.indexOf(t)>-1}),aj([r,n,a]),[2,s]}})})}(l,this.maxPoses,0)];case 2:return u=function(e,t){void 0===e&&(e=[]);for(var r=t.left,n=t.top,a=t.left+t.right,i=t.top+t.bottom,s=0;s<e.length;s++){var o=e[s],l=o.locationData.relativeBoundingBox,u=(l.xMin-r)/(1-a),h=(l.yMin-n)/(1-i),p=l.width/(1-a),d=l.height/(1-i);l.xMin=u,l.yMin=h,l.width=p,l.height=d,l.xMax=u+p,l.yMax=h+d;var c=o.locationData.relativeKeypoints;c&&c.forEach(function(e){var t=(e.x-r)/(1-a),s=(e.y-n)/(1-i);e.x=t,e.y=s})}return e}(h.sent(),n),aj([r,a,o,s]),[2,u]}})})},e.prototype.poseDetectionToRoi=function(e,t){return wk(wu(e,t,{rotationVectorEndKeypointIndex:1,rotationVectorStartKeypointIndex:0,rotationVectorTargetAngleDegree:90}),t,wD)},e.prototype.poseLandmarksByRoi=function(e,t){return vZ(this,void 0,void 0,function(){var r,n,a,i,s,o,l,u,h,p,d,c,f,m;return vQ(this,function(g){switch(g.label){case 0:if(r=wa(t),a=(n=wm(t,wM,e)).imageTensor,i=n.padding,s=n.transformationMatrix,"lite"!==this.modelType&&"full"!==this.modelType&&"heavy"!==this.modelType)throw Error("Model type must be one of lite, full or heavy,"+"but got ".concat(this.modelType));return o=["ld_3d","output_poseflag","activation_heatmap","world_3d"],this.enableSegmentation&&o.push("activation_segmentation"),l=this.landmarkModel.execute(a,o),[4,this.tensorsToPoseLandmarksAndSegmentation(l)];case 1:return null==(u=g.sent())?(aj(l),aj(a),[2,null]):(h=u.landmarks,p=u.auxiliaryLandmarks,d=u.poseScore,c=u.worldLandmarks,f=u.segmentationMask,[4,this.poseLandmarksAndSegmentationInverseProjection(r,e,i,s,h,p,c,f)]);case 2:return m=g.sent(),aj(l),aj(a),[2,vY({poseScore:d},m)]}})})},e.prototype.poseLandmarksAndSegmentationInverseProjection=function(e,t,r,n,a,i,s,o){return vZ(this,void 0,void 0,function(){var l,u,h,p,d,c;return vQ(this,function(f){return l=wv(a,r),u=wv(i,r),h=wc(l,t),p=wc(u,t),d=function(e,t){for(var r=[],n=0;n<e.length;n++){var a=e[n],i=a.x,s=a.y,o=t.rotation,l=Math.cos(o)*i-Math.sin(o)*s,u=Math.sin(o)*i+Math.cos(o)*s,h=vY({},a);h.x=l,h.y=u,r.push(h)}return r}(s,t),c=null,this.enableSegmentation&&(c=aH(function(){var t=o.shape,r=t[0],a=t[1],i=pG(wo(function(e){var t=wh(Array(16).fill(0));t[0][0]=wd(e,0,0),t[1][0]=-wd(e,0,1),t[2][0]=wd(e,0,2),t[3][0]=-wd(e,0,3),t[0][2]=wd(e,2,0),t[1][2]=-wd(e,2,1),t[2][2]=wd(e,2,2),t[3][2]=-wd(e,2,3),t[0][1]=-wd(e,1,0),t[1][1]=wd(e,1,1),t[2][1]=-wd(e,1,2),t[3][1]=wd(e,1,3),t[0][3]=-wd(e,3,0),t[1][3]=wd(e,3,1),t[2][3]=-wd(e,3,2),t[3][3]=wd(e,3,3);for(var r=e[0][0]*t[0][0]+e[1][0]*t[0][1]+e[2][0]*t[0][2]+e[3][0]*t[0][3],n=0;n<t.length;n++)for(var a=0;a<t.length;a++)t[n][a]/=r;return t}(n),{width:a,height:r},e),[1,8]),s=[1,r,a,1];return pL(d8.transform(s9(o,s),i,"bilinear","constant",0,[e.height,e.width]),[0,3])}),aj(o)),[2,{landmarks:h,auxiliaryLandmarks:p,worldLandmarks:d,segmentationMask:c}]})})},e.prototype.tensorsToPoseLandmarksAndSegmentation=function(e){return vZ(this,void 0,void 0,function(){var t,r,n,a,i,s,o,l,u,h,p,d;return vQ(this,function(c){switch(c.label){case 0:return t=e[0],r=e[1],n=e[2],a=e[3],i=this.enableSegmentation?e[4]:null,[4,r.data()];case 1:return(s=c.sent()[0])<.5?[2,null]:[4,ww(t,wz)];case 2:return[4,function(e,t,r){return vZ(this,void 0,void 0,function(){var n,a,i,s,o,l,u,h,p,d,c,f,m,g,y,b,x,v,w,k,S,I,C,N;return vQ(this,function(T){switch(T.label){case 0:if(i=(a=(n=pL(t,[0])).shape)[0],s=a[1],o=a[2],e.length!==o)throw Error("Expected heatmap to have same number of channels as the number of landmarks. But got landmarks length: "+"".concat(e.length,", heatmap length: ").concat(o));return l=[],[4,n.buffer()];case 1:for(u=T.sent(),h=0;h<e.length;h++)if(p=e[h],d=vY({},p),l.push(d),c=Math.trunc(d.x*s),f=Math.trunc(d.y*i),!(c<0||c>=s||f<0||c>=i)){for(g=Math.max(0,c-(m=Math.trunc((r.kernelSize-1)/2))),y=Math.min(s,c+m+1),b=Math.max(0,f-m),x=Math.min(i,f+m+1),v=0,w=0,k=0,S=0,I=b;I<x;++I)for(C=g;C<y;++C)N=u.get(I,C,h),v+=N,S=Math.max(S,N),w+=C*N,k+=I*N;S>=r.minConfidenceToRefine&&v>0&&(d.x=w/s/v,d.y=k/i/v)}return n.dispose(),[2,l]}})})}(c.sent(),n,wL)];case 3:return l=(o=c.sent()).slice(0,33),u=o.slice(33,35),[4,ww(a,wP)];case 4:var f;return h=c.sent().slice(0,33),p=function(e,t,r){void 0===r&&(r=!0);for(var n=[],a=0;a<e.length;a++){var i=vY({},t[a]);r&&(i.score=e[a].score),n.push(i)}return n}(l,h,!0),d=this.enableSegmentation?(f=i,aH(function(){var e=pL(f,[0]),t=e.shape[2];if(1===t){var r=e;switch(wG.activation){case"none":break;case"sigmoid":r=ow(r);break;case"softmax":throw Error("Softmax activation requires two channels.");default:throw Error("Activation not supported (".concat(wG.activation,")"))}return pL(r,[2])}throw Error("Unsupported number of tensor channels ".concat(t))})):null,[2,{landmarks:l,auxiliaryLandmarks:u,poseScore:s,worldLandmarks:p,segmentationMask:d}]}})})},e.prototype.poseLandmarksToRoi=function(e,t){return wk(wu(wb(e),t,{rotationVectorStartKeypointIndex:0,rotationVectorEndKeypointIndex:1,rotationVectorTargetAngleDegree:90}),t,wD)},e.prototype.poseLandmarkFiltering=function(e,t,r,n){var a,i,s;if(null!=this.timestamp&&this.enableSmoothing){var o=wu(wb(t),n,{rotationVectorEndKeypointIndex:0,rotationVectorStartKeypointIndex:1,rotationVectorTargetAngleDegree:90});null==this.visibilitySmoothingFilterActual&&(this.visibilitySmoothingFilterActual=new wE(wB)),a=this.visibilitySmoothingFilterActual.apply(e),null==this.visibilitySmoothingFilterAuxiliary&&(this.visibilitySmoothingFilterAuxiliary=new wE(wB)),i=this.visibilitySmoothingFilterAuxiliary.apply(t),s=this.visibilitySmoothingFilterActual.apply(r),null==this.landmarksSmoothingFilterActual&&(this.landmarksSmoothingFilterActual=new w$(wW)),a=this.landmarksSmoothingFilterActual.apply(a,this.timestamp,n,!0,o),null==this.landmarksSmoothingFilterAuxiliary&&(this.landmarksSmoothingFilterAuxiliary=new w$(wU)),i=this.landmarksSmoothingFilterAuxiliary.apply(i,this.timestamp,n,!0,o),null==this.worldLandmarksSmoothingFilterActual&&(this.worldLandmarksSmoothingFilterActual=new w$(wV)),s=this.worldLandmarksSmoothingFilterActual.apply(r,this.timestamp)}else a=e,i=t,s=r;return{actualLandmarksFiltered:a,auxiliaryLandmarksFiltered:i,actualWorldLandmarksFiltered:s}},e}(),kk=function(){function e(e){!function(e){if(e.maxTracks<1)throw Error("Must specify 'maxTracks' to be at least 1, but "+"encountered ".concat(e.maxTracks));if(e.maxAge<=0)throw Error("Must specify 'maxAge' to be positive, but "+"encountered ".concat(e.maxAge));if(void 0!==e.keypointTrackerParams){if(e.keypointTrackerParams.keypointConfidenceThreshold<0||e.keypointTrackerParams.keypointConfidenceThreshold>1)throw Error("Must specify 'keypointConfidenceThreshold' to be in the range [0, 1], but encountered "+"".concat(e.keypointTrackerParams.keypointConfidenceThreshold));if(e.keypointTrackerParams.minNumberOfKeypoints<1)throw Error("Must specify 'minNumberOfKeypoints' to be at least 1, but "+"encountered ".concat(e.keypointTrackerParams.minNumberOfKeypoints));for(var t=0,r=e.keypointTrackerParams.keypointFalloff;t<r.length;t++){var n=r[t];if(n<=0)throw Error("Must specify each keypoint falloff parameterto be positive "+"but encountered ".concat(n))}}}(e),this.tracks=[],this.maxTracks=e.maxTracks,this.maxAge=1e3*e.maxAge,this.minSimilarity=e.minSimilarity,this.nextID=1}return e.prototype.apply=function(e,t){this.filterOldTracks(t);var r=this.computeSimilarity(e);return this.assignTracks(e,r,t),this.updateTracks(t),e},e.prototype.getTracks=function(){return this.tracks.slice()},e.prototype.getTrackIDs=function(){return new Set(this.tracks.map(function(e){return e.id}))},e.prototype.filterOldTracks=function(e){var t=this;this.tracks=this.tracks.filter(function(r){return e-r.lastTimestamp<=t.maxAge})},e.prototype.assignTracks=function(e,t,r){for(var n=Array.from(Array(t[0].length).keys()),a=[],i=0,s=Array.from(Array(e.length).keys());i<s.length;i++){var o=s[i];if(0!==n.length){for(var l=-1,u=-1,h=0;h<n.length;h++){var p=n[h],d=t[o][p];d>=this.minSimilarity&&d>u&&(l=p,u=d)}if(l>=0){var c=this.tracks[l];c=Object.assign(c,this.createTrack(e[o],r,c.id)),e[o].id=c.id;var f=n.indexOf(l);n.splice(f,1)}else a.push(o)}else a.push(o)}for(var m=0;m<a.length;m++){o=a[m];var g=this.createTrack(e[o],r);this.tracks.push(g),e[o].id=g.id}},e.prototype.updateTracks=function(e){this.tracks.sort(function(e,t){return t.lastTimestamp-e.lastTimestamp}),this.tracks=this.tracks.slice(0,this.maxTracks)},e.prototype.createTrack=function(e,t,r){var n={id:r||this.nextTrackID(),lastTimestamp:t,keypoints:vJ([],e.keypoints,!0).map(function(e){return vY({},e)})};return void 0!==e.box&&(n.box=vY({},e.box)),n},e.prototype.nextTrackID=function(){var e=this.nextID;return this.nextID+=1,e},e.prototype.remove=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.tracks=this.tracks.filter(function(t){return!e.includes(t.id)})},e.prototype.reset=function(){this.tracks=[]},e}(),kS=function(e){function t(t){return e.call(this,t)||this}return vX(t,e),t.prototype.computeSimilarity=function(e){var t=this;return 0===e.length||0===this.tracks.length?[[]]:e.map(function(e){return t.tracks.map(function(r){return t.iou(e,r)})})},t.prototype.iou=function(e,t){var r=Math.max(e.box.xMin,t.box.xMin),n=Math.max(e.box.yMin,t.box.yMin),a=Math.min(e.box.xMax,t.box.xMax),i=Math.min(e.box.yMax,t.box.yMax);if(r>=a||n>=i)return 0;var s=(a-r)*(i-n);return s/(e.box.width*e.box.height+t.box.width*t.box.height-s)},t}(kk),kI=function(e){function t(t){var r=e.call(this,t)||this;return r.keypointThreshold=t.keypointTrackerParams.keypointConfidenceThreshold,r.keypointFalloff=t.keypointTrackerParams.keypointFalloff,r.minNumKeyoints=t.keypointTrackerParams.minNumberOfKeypoints,r}return vX(t,e),t.prototype.computeSimilarity=function(e){if(0===e.length||0===this.tracks.length)return[[]];for(var t=[],r=0;r<e.length;r++){for(var n=e[r],a=[],i=0,s=this.tracks;i<s.length;i++){var o=s[i];a.push(this.oks(n,o))}t.push(a)}return t},t.prototype.oks=function(e,t){for(var r=this.area(t.keypoints)+1e-6,n=0,a=0,i=0;i<e.keypoints.length;++i){var s=e.keypoints[i],o=t.keypoints[i];s.score<this.keypointThreshold||o.score<this.keypointThreshold||(a+=1,n+=Math.exp(-1*(Math.pow(s.x-o.x,2)+Math.pow(s.y-o.y,2))/(2*r*Math.pow(2*this.keypointFalloff[i],2))))}return a<this.minNumKeyoints?0:n/a},t.prototype.area=function(e){var t=this,r=e.filter(function(e){return e.score>t.keypointThreshold}),n=Math.min.apply(Math,vJ([1],r.map(function(e){return e.x}),!1)),a=Math.max.apply(Math,vJ([0],r.map(function(e){return e.x}),!1)),i=Math.min.apply(Math,vJ([1],r.map(function(e){return e.y}),!1));return(a-n)*(Math.max.apply(Math,vJ([0],r.map(function(e){return e.y}),!1))-i)},t}(kk);function kC(e){switch(e){case kv.BlazePose:return v1.reduce(function(e,t,r){return e[t]=r,e},{});case kv.PoseNet:case kv.MoveNet:return v0.reduce(function(e,t,r){return e[t]=r,e},{});default:throw Error("Model ".concat(e," is not supported."))}}(p=kx||(kx={})).Keypoint="keypoint",p.BoundingBox="boundingBox",(d=kv||(kv={})).MoveNet="MoveNet",d.BlazePose="BlazePose",d.PoseNet="PoseNet";var kN=Object.freeze({__proto__:null,getKeypointIndexBySide:function(e){switch(e){case kv.BlazePose:return v2;case kv.PoseNet:case kv.MoveNet:return v3;default:throw Error("Model ".concat(e," is not supported."))}},getAdjacentPairs:function(e){switch(e){case kv.BlazePose:return v6;case kv.PoseNet:case kv.MoveNet:return v4;default:throw Error("Model ".concat(e," is not supported."))}},getKeypointIndexByName:kC}),kT=["SinglePose.Lightning","SinglePose.Thunder","MultiPose.Lightning"],k$={modelType:"SinglePose.Lightning",enableSmoothing:!0},kE={},kR={frequency:30,minCutOff:2.5,beta:300,derivateCutOff:2.5,thresholdCutOff:.5,thresholdBeta:5,disableValueScaling:!0},kA={maxTracks:18,maxAge:1e3,minSimilarity:.2,keypointTrackerParams:{keypointConfidenceThreshold:.3,keypointFalloff:[.026,.025,.025,.035,.035,.079,.079,.072,.072,.062,.062,.107,.107,.087,.087,.089,.089],minNumberOfKeypoints:4}},kF={maxTracks:18,maxAge:1e3,minSimilarity:.15,trackerParams:{}};function k_(e,t){var r,n,a,i;return e?t.width>t.height?(r=1,n=t.height/t.width,a=0,i=(t.width/2-t.height/2)/t.width):(r=t.width/t.height,n=1,a=(t.height/2-t.width/2)/t.height,i=0):t.width>t.height?(r=t.width/t.height,n=1,a=(t.height/2-t.width/2)/t.height,i=0):(r=1,n=t.height/t.width,a=0,i=(t.width/2-t.height/2)/t.width),{yMin:a,xMin:i,yMax:a+r,xMax:i+n,height:r,width:n}}function kD(e,t){var r={maxTracks:e.maxTracks,maxAge:e.maxAge,minSimilarity:e.minSimilarity};return null!=t.maxTracks&&(r.maxTracks=t.maxTracks),null!=t.maxAge&&(r.maxAge=t.maxAge),null!=t.minSimilarity&&(r.minSimilarity=t.minSimilarity),r}var kO=function(){function e(e,t){this.moveNetModel=e,this.modelInputResolution={height:0,width:0},this.keypointIndexByName=kC(kv.MoveNet),"SinglePose.Lightning"===t.modelType?(this.modelInputResolution.width=192,this.modelInputResolution.height=192):"SinglePose.Thunder"===t.modelType&&(this.modelInputResolution.width=256,this.modelInputResolution.height=256),this.multiPoseModel="MultiPose.Lightning"===t.modelType,this.multiPoseModel||(this.keypointFilter=new wC(kR),this.cropRegionFilterYMin=new wS(.9),this.cropRegionFilterXMin=new wS(.9),this.cropRegionFilterYMax=new wS(.9),this.cropRegionFilterXMax=new wS(.9)),this.enableSmoothing=t.enableSmoothing,t.minPoseScore?this.minPoseScore=t.minPoseScore:this.minPoseScore=.25,t.multiPoseMaxDimension?this.multiPoseMaxDimension=t.multiPoseMaxDimension:this.multiPoseMaxDimension=256,this.enableTracking=t.enableTracking,this.multiPoseModel&&this.enableTracking&&(t.trackerType===kx.Keypoint?this.tracker=new kI(t.trackerConfig):t.trackerType===kx.BoundingBox&&(this.tracker=new kS(t.trackerConfig)),this.enableSmoothing&&(this.keypointFilterMap=new Map))}return e.prototype.runSinglePersonPoseModel=function(e){return vZ(this,void 0,void 0,function(){var t,r,n,a,i;return vQ(this,function(s){switch(s.label){case 0:if(4!==(t=this.moveNetModel.execute(e)).shape.length||1!==t.shape[0]||1!==t.shape[1]||17!==t.shape[2]||3!==t.shape[3])throw t.dispose(),Error("Unexpected output shape from model: [".concat(t.shape,"]"));return"webgpu"===aq()?[3,1]:(r=t.dataSync(),[3,3]);case 1:return[4,t.data()];case 2:r=s.sent(),s.label=3;case 3:for(t.dispose(),n={keypoints:[],score:0},a=0,i=0;i<17;++i)n.keypoints[i]={y:r[3*i],x:r[3*i+1],score:r[3*i+2]},n.keypoints[i].score>.2&&(++a,n.score+=n.keypoints[i].score);return a>0&&(n.score/=a),[2,n]}})})},e.prototype.runMultiPersonPoseModel=function(e){return vZ(this,void 0,void 0,function(){var t,r,n,a,i,s,o,l;return vQ(this,function(u){switch(u.label){case 0:if(3!==(t=this.moveNetModel.execute(e)).shape.length||1!==t.shape[0]||56!==t.shape[2])throw t.dispose(),Error("Unexpected output shape from model: [".concat(t.shape,"]"));return"webgpu"===aq()?[3,1]:(r=t.dataSync(),[3,3]);case 1:return[4,t.data()];case 2:r=u.sent(),u.label=3;case 3:for(t.dispose(),n=[],a=r.length/56,i=0;i<a;++i)for(n[i]={keypoints:[]},s=56*i+51,n[i].box={yMin:r[s],xMin:r[s+1],yMax:r[s+2],xMax:r[s+3],width:r[s+3]-r[s+1],height:r[s+2]-r[s]},o=56*i+55,n[i].score=r[o],n[i].keypoints=[],l=0;l<17;++l)n[i].keypoints[l]={y:r[56*i+3*l],x:r[56*i+3*l+1],score:r[56*i+3*l+2]};return[2,n]}})})},e.prototype.estimatePoses=function(e,t,r){return void 0===t&&(t=kE),vZ(this,void 0,void 0,function(){var n,a,i,s,o,l;return vQ(this,function(u){switch(u.label){case 0:var h;return t=null==(h=t)?kE:vY({},h),null==e?(this.reset(),[2,[]]):(null==r?wy(e)&&(r=1e6*e.currentTime):r*=1e3,a=wa(n=ws(e)),i=uO(n,0),e instanceof au||n.dispose(),s=[],this.multiPoseModel?[3,2]:[4,this.estimateSinglePose(i,a,r)]);case 1:return s=u.sent(),[3,4];case 2:return[4,this.estimateMultiplePoses(i,a,r)];case 3:s=u.sent(),u.label=4;case 4:for(o=0;o<s.length;++o)for(l=0;l<s[o].keypoints.length;++l)s[o].keypoints[l].name=v0[l],s[o].keypoints[l].y*=a.height,s[o].keypoints[l].x*=a.width;return[2,s]}})})},e.prototype.estimateSinglePose=function(e,t,r){return vZ(this,void 0,void 0,function(){var n,a,i,s,o=this;return vQ(this,function(l){switch(l.label){case 0:return this.cropRegion||(this.cropRegion=k_(null==this.cropRegion,t)),n=aH(function(){var t=pG([[o.cropRegion.yMin,o.cropRegion.xMin,o.cropRegion.yMax,o.cropRegion.xMax]]),r=hK([1],"int32"),n=[o.modelInputResolution.height,o.modelInputResolution.width];return sl(d8.cropAndResize(e,t,r,n,"bilinear",0),"int32")}),e.dispose(),[4,this.runSinglePersonPoseModel(n)];case 1:if(a=l.sent(),n.dispose(),a.score<this.minPoseScore)return this.reset(),[2,[]];for(i=0;i<a.keypoints.length;++i)a.keypoints[i].y=this.cropRegion.yMin+a.keypoints[i].y*this.cropRegion.height,a.keypoints[i].x=this.cropRegion.xMin+a.keypoints[i].x*this.cropRegion.width;return null!=r&&this.enableSmoothing&&(a.keypoints=this.keypointFilter.apply(a.keypoints,r,1)),s=function(e,t,r,n){for(var a={},i=0;i<v0.length;i++){var s=v0[i];a[s]=[t[r[s]].y*n.height,t[r[s]].x*n.width]}if((t[r.left_hip].score>.2||t[r.right_hip].score>.2)&&(t[r.left_shoulder].score>.2||t[r.right_shoulder].score>.2)){var o=(a.left_hip[0]+a.right_hip[0])/2,l=(a.left_hip[1]+a.right_hip[1])/2,u=function(e,t,r,n,a){for(var i=["left_shoulder","right_shoulder","left_hip","right_hip"],s=0,o=0,l=0;l<i.length;l++)(c=Math.abs(n-r[i[l]][0]))>s&&(s=c),(f=Math.abs(a-r[i[l]][1]))>o&&(o=f);for(var u=0,h=0,p=0,d=Object.keys(r);p<d.length;p++){var c,f,m=d[p];!(e[t[m]].score<.2)&&((c=Math.abs(n-r[m][0]))>u&&(u=c),(f=Math.abs(a-r[m][1]))>h&&(h=f))}return[s,o,u,h]}(t,r,a,o,l),h=u[0],p=Math.max(1.9*u[1],1.9*h,1.2*u[2],1.2*u[3]),d=[o-(p=Math.min(p,Math.max(l,n.width-l,o,n.height-o))),l-p];if(p>Math.max(n.width,n.height)/2)return k_(null==e,n);var c=2*p;return{yMin:d[0]/n.height,xMin:d[1]/n.width,yMax:(d[0]+c)/n.height,xMax:(d[1]+c)/n.width,height:(d[0]+c)/n.height-d[0]/n.height,width:(d[1]+c)/n.width-d[1]/n.width}}return k_(null==e,n)}(this.cropRegion,a.keypoints,this.keypointIndexByName,t),this.cropRegion=this.filterCropRegion(s),[2,[a]]}})})},e.prototype.estimateMultiplePoses=function(e,t,r){return vZ(this,void 0,void 0,function(){var n,a,i,s,o,l,u,h,p,d,c,f=this;return vQ(this,function(m){switch(m.label){case 0:return t.width>t.height?(a=this.multiPoseMaxDimension,i=Math.round(this.multiPoseMaxDimension*t.height/t.width),n=d8.resizeBilinear(e,[i,a]),o=a,s=h5(n,[[0,0],[0,(l=32*Math.ceil(i/32))-i],[0,0],[0,0]])):(a=Math.round(this.multiPoseMaxDimension*t.width/t.height),i=this.multiPoseMaxDimension,n=d8.resizeBilinear(e,[i,a]),o=32*Math.ceil(a/32),l=i,s=h5(n,[[0,0],[0,0],[0,o-a],[0,0]])),n.dispose(),e.dispose(),u=sl(s,"int32"),s.dispose(),[4,this.runMultiPersonPoseModel(u)];case 1:for(h=m.sent(),u.dispose(),h=h.filter(function(e){return e.score>=f.minPoseScore}),d=0;d<h.length;++d)for(p=0;p<h[d].keypoints.length;++p)h[d].keypoints[p].y*=l/i,h[d].keypoints[p].x*=o/a;if(this.enableTracking&&(this.tracker.apply(h,r),this.enableSmoothing)){for(d=0;d<h.length;++d)this.keypointFilterMap.has(h[d].id)||this.keypointFilterMap.set(h[d].id,new wC(kR)),h[d].keypoints=this.keypointFilterMap.get(h[d].id).apply(h[d].keypoints,r,1);c=this.tracker.getTrackIDs(),this.keypointFilterMap.forEach(function(e,t){c.has(t)||f.keypointFilterMap.delete(t)})}return[2,h]}})})},e.prototype.filterCropRegion=function(e){if(e){var t=this.cropRegionFilterYMin.apply(e.yMin),r=this.cropRegionFilterXMin.apply(e.xMin),n=this.cropRegionFilterYMax.apply(e.yMax),a=this.cropRegionFilterXMax.apply(e.xMax);return{yMin:t,xMin:r,yMax:n,xMax:a,height:n-t,width:a-r}}return this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset(),null},e.prototype.dispose=function(){this.moveNetModel.dispose()},e.prototype.reset=function(){this.cropRegion=null,this.resetFilters()},e.prototype.resetFilters=function(){this.keypointFilter.reset(),this.cropRegionFilterYMin.reset(),this.cropRegionFilterXMin.reset(),this.cropRegionFilterYMax.reset(),this.cropRegionFilterXMax.reset()},e}(),kM={architecture:"MobileNetV1",outputStride:16,multiplier:.75,inputResolution:{height:257,width:257}},kz=["MobileNetV1","ResNet50"],kP={MobileNetV1:[8,16],ResNet50:[16]},kL=[8,16,32],kB={MobileNetV1:[.5,.75,1],ResNet50:[1]},kW=[1,2,4],kU={maxPoses:1,flipHorizontal:!1},kV={maxPoses:5,flipHorizontal:!1,scoreThreshold:.5,nmsRadius:20},kG=[-123.15,-115.9,-103.06];function kH(e){return Math.floor(e/2)}var kj=function(){function e(e,t){this.priorityQueue=Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return -1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less(kH(e),e);)this.exchange(e,kH(e)),e=kH(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var r=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=r},e}();function kK(e,t,r,n){return{y:n.get(e,t,r),x:n.get(e,t,r+17)}}function kq(e,t,r){var n=kK(e.heatmapY,e.heatmapX,e.id,r),a=n.y,i=n.x;return{x:e.heatmapX*t+i,y:e.heatmapY*t+a}}function kX(e,t,r,n){var a=r.x,i=r.y;return e.some(function(e){var r,s,o,l,u=e.keypoints;return r=u[n].y,s=u[n].x,(o=r-i)*o+(l=s-a)*l<=t})}var kY=v0.reduce(function(e,t,r){return e[t]=r,e},{}),kZ=[["nose","left_eye"],["left_eye","left_ear"],["nose","right_eye"],["right_eye","right_ear"],["nose","left_shoulder"],["left_shoulder","left_elbow"],["left_elbow","left_wrist"],["left_shoulder","left_hip"],["left_hip","left_knee"],["left_knee","left_ankle"],["nose","right_shoulder"],["right_shoulder","right_elbow"],["right_elbow","right_wrist"],["right_shoulder","right_hip"],["right_hip","right_knee"],["right_knee","right_ankle"]].map(function(e){var t=e[0],r=e[1];return[kY[t],kY[r]]}),kQ=kZ.map(function(e){return e[1]}),kJ=kZ.map(function(e){return e[0]});function k0(e,t,r,n){var a,i,s,o;return{y:(a=Math.round(e.y/t),i=r-1,a<0?0:a>i?i:a),x:(s=Math.round(e.x/t),o=n-1,s<0?0:s>o?o:s)}}function k1(e,t){return{x:e.x+t.x,y:e.y+t.y}}function k2(e,t,r,n,a,i,s,o){void 0===o&&(o=2);for(var l,u,h=n.shape,p=h[0],d=h[1],c={y:t.y,x:t.x},f=k1(c,(l=k0(c,i,p,d),u=s.shape[2]/2,{y:s.get(l.y,l.x,e),x:s.get(l.y,l.x,u+e)})),m=0;m<o;m++){var g=k0(f,i,p,d),y=kK(g.y,g.x,r,a);f=k1({x:g.x*i,y:g.y*i},{x:y.x,y:y.y})}var b=k0(f,i,p,d),x=n.get(b.y,b.x,r);return{y:f.y,x:f.x,name:v0[r],score:x}}function k3(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];switch(t.length){case 0:e="fn main() ";break;case 1:e="fn main(".concat(t[0]," : i32)");break;default:throw Error("Unreachable")}return e}var k4=function(){function e(e){this.variableNames=["A","B"],this.size=!0,this.workgroupSize=[32,1,1],this.outputShape=[e[0],1],this.dispatchLayout=mi.flatDispatchLayout(this.outputShape),this.dispatch=mi.computeDispatch(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="getpointsConfidenceOp"}return e.prototype.getUserCode=function(){return"\n        ".concat(k3("index")," {\n          if (index < uniforms.size) {\n            let y = B[index * 2];\n            let x = B[index * 2 + 1];\n            let outIndex = y * uniforms.aShape.x * uniforms.aShape.z + x * uniforms.aShape.z + index;\n            result[index] = A[outIndex];\n          }\n        }\n        ")},e}(),k6=function(){function e(e){if(this.variableNames=["A","B"],this.size=!0,this.supportedLastDimension=2,2!==e.length||e[1]!==this.supportedLastDimension)throw Error("GetOffsetVectorsProgram only supports shape of [x, ".concat(this.supportedLastDimension,"], but current shape is ").concat(e));this.workgroupSize=[32,1,1],this.outputShape=e;var t=[e[0],1];this.dispatchLayout=mi.flatDispatchLayout(t),this.dispatch=mi.computeDispatch(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="GetOffsetVectors"}return e.prototype.getUserCode=function(){return"\n    fn getOffsetPoint(y: i32, x: i32, index: i32) -> vec2<i32> {\n      let outIndexY = y * uniforms.bShape.x * uniforms.bShape.y + x * uniforms.bShape.y + index;\n      let outIndexX = outIndexY + uniforms.bShape.z;\n      let outY = i32(B[outIndexY]);\n      let outX = i32(B[outIndexX]);\n      return vec2<i32>(outY, outX);\n    }\n\n    ".concat(k3("index")," {\n      if (index < uniforms.size) {\n        let indexY = index * ").concat(this.supportedLastDimension,";\n        let indexX = indexY + 1;\n        let heatmapY = A[indexY];\n        let heatmapX = A[indexX];\n        let out = getOffsetPoint(i32(heatmapY), i32(heatmapX), index);\n        result[indexY] = f32(out[0]);\n        result[indexX] = f32(out[1]);\n      }\n    }\n    ")},e}();function k5(e){var t=e.shape,r=t[0],n=t[1],a=t[2];return aH(function(){var t=sj(s9(e,[r*n,a]),0);return un([uO(sc(t,sx(n,"int32")),1),uO(aH(function(){var e=sc(t,sx(n,"int32"));return sF(t,sf(e,sx(n,"int32")))}),1)],1)})}var k8="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/mobilenet/",k7="https://storage.googleapis.com/tfjs-models/savedmodel/posenet/resnet50/";function k9(e,t){return(e-1)%t==0?e:Math.floor(e/t)*t+1}var Se=function(){function e(e,t){this.posenetModel=e;var r,n,a=this.posenetModel.inputs[0].shape;ny.assert(-1===a[1]&&-1===a[2],function(){return"Input shape [".concat(a[1],", ").concat(a[2],"] ")+"must both be equal to or -1"});var i,s,o=(i=t.inputResolution,s=t.outputStride,{height:k9(i.height,s),width:k9(i.width,s)});r=t.outputStride,ny.assert(kL.indexOf(r)>=0,function(){return"outputStride of ".concat(r," is invalid. ")+"It must be either 8 or 16."}),n=t.outputStride,ny.assert((o.height-1)%n==0,function(){return"height of ".concat(o.height," is invalid for output stride ")+"".concat(n,".")}),ny.assert((o.width-1)%n==0,function(){return"width of ".concat(o.width," is invalid for output stride ")+"".concat(n,".")}),this.inputResolution=o,this.outputStride=t.outputStride,this.architecture=t.architecture}return e.prototype.estimatePoses=function(e,t){return void 0===t&&(t=kU),vZ(this,void 0,void 0,function(){return vQ(this,function(r){return[2,this.estimatePosesGPU(e,t,!1)]})})},e.prototype.estimatePosesGPU=function(e,t,r){return void 0===t&&(t=kU),void 0===r&&(r=!1),vZ(this,void 0,void 0,function(){var n,a,i,s,o,l,u,h,p,d,c,f,m,g,y,b,x,v;return vQ(this,function(w){switch(w.label){case 0:return n=function(e){var t=e;if(null==t.maxPoses&&(t.maxPoses=1),t.maxPoses<=0)throw Error("Invalid maxPoses ".concat(t.maxPoses,". Should be > 0."));if(t.maxPoses>1){if((t=vY(vY({},kV),t)).scoreThreshold<0||t.scoreThreshold>1)throw Error("Invalid scoreThreshold ".concat(t.scoreThreshold,". ")+"Should be in range [0.0, 1.0]");if(t.nmsRadius<=0)throw Error("Invalid nmsRadius ".concat(t.nmsRadius,"."))}return t}(t),null==e?[2,r?[[],[]]:[]]:(this.maxPoses=n.maxPoses,i=(a=wm(e,{outputTensorSize:this.inputResolution,keepAspectRatio:!0,borderMode:"replicate"})).imageTensor,s=a.padding,o="ResNet50"===this.architecture?sp(i,kG):wf(i,[-1,1]),l=this.posenetModel.predict(o),"ResNet50"===this.architecture?(u=pL(l[2],[0]),h=pL(l[3],[0]),p=pL(l[0],[0]),d=pL(l[1],[0])):(u=pL(l[0],[0]),h=pL(l[1],[0]),p=pL(l[2],[0]),d=pL(l[3],[0])),c=ow(h),1!==this.maxPoses?[3,5]:r?[4,function(e,t,r){return vZ(this,void 0,void 0,function(){var n;return vQ(this,function(a){var i;return i=n=k5(e),[2,[aH(function(){var e=function(e,t){if(aY()instanceof my){var r,n,a;return r=aY(),n=new k6(e.shape),a=r.runWebGPUProgram(n,[e,t],"float32"),aN.makeTensorFromTensorInfo(a)}throw Error("getOffsetVectorsGPU is not supported in this backend!")}(i,t);return sp(sl(sf(i,sx(r,"int32")),"float32"),e)}),function(e,t){if(aY()instanceof my){var r,n,a;return r=aY(),n=new k4(t.shape),a=r.runWebGPUProgram(n,[e,t],"float32"),aN.makeTensorFromTensorInfo(a)}throw Error("getPointsConfidenceWebGPU is not supported in this backend!")}(e,n)]]})})}(c,u,this.outputStride)]:[3,2]);case 1:return y=(m=w.sent())[0],g=m[1],f=[y,g],[3,4];case 2:return[4,function(e,t,r){return vZ(this,void 0,void 0,function(){var n,a,i,s,o,l,u,h,p;return vQ(this,function(d){switch(d.label){case 0:return n=0,a=k5(e),[4,Promise.all([e.buffer(),t.buffer(),a.buffer()])];case 1:var c;return s=(i=d.sent())[0],o=i[1],[4,(c=l=i[2],u=aH(function(){var e=function(e,t){for(var r=[],n=0;n<v0.length;n++){var a,i,s,o,l=(a=e.get(n,0).valueOf(),i=e.get(n,1).valueOf(),s=n,{y:(o=t).get(a,i,s),x:o.get(a,i,s+v0.length)}),u=l.x,h=l.y;r.push(h),r.push(u)}return pG(r,[v0.length,2])}(c,o);return sp(sl(sf(c.toTensor(),sx(r,"int32")),"float32"),e)})).buffer()];case 2:return h=d.sent(),p=Array.from(function(e,t){for(var r=t.shape[0],n=new Float32Array(r),a=0;a<r;a++){var i=t.get(a,0),s=t.get(a,1);n[a]=e.get(i,s,a)}return n}(s,l)).map(function(e,t){return n+=e,{y:h.get(t,0),x:h.get(t,1),score:e,name:v0[t]}}),a.dispose(),u.dispose(),[2,{keypoints:p,score:n/p.length}]}})})}(c,u,this.outputStride)];case 3:f=[y=w.sent()],w.label=4;case 4:return[3,7];case 5:if(r)throw Error("GPU renderer only supports single pose!");return[4,function(e,t,r,n,a,i,s,o){return void 0===s&&(s=.5),void 0===o&&(o=20),vZ(this,void 0,void 0,function(){var l,u,h,p,d,c,f,m,g,y,b;return vQ(this,function(x){switch(x.label){case 0:return[4,function(e){return vZ(this,void 0,void 0,function(){return vQ(this,function(t){return[2,Promise.all(e.map(function(e){return e.buffer()}))]})})}([e,t,r,n])];case 1:for(u=(l=x.sent())[0],h=l[1],p=l[2],d=l[3],c=[],f=function(e,t,r){for(var n=r.shape,a=n[0],i=n[1],s=n[2],o=new kj(a*i*s,function(e){return e.score}),l=0;l<a;++l)for(var u=0;u<i;++u)for(var h=0;h<s;++h){var p=r.get(l,u,h);p<e||function(e,t,r,n,a,i){for(var s=i.shape,o=s[0],l=s[1],u=!0,h=Math.max(r-1,0),p=Math.min(r+a+1,o),d=h;d<p;++d){for(var c=Math.max(n-a,0),f=Math.min(n+a+1,l),m=c;m<f;++m)if(i.get(d,m,e)>t){u=!1;break}if(!u)break}return u}(h,p,l,u,1,r)&&o.enqueue({score:p,part:{heatmapY:l,heatmapX:u,id:h}})}return o}(s,0,u),m=o*o;c.length<i&&!f.empty();)kX(c,m,kq((g=f.dequeue()).part,a,h),g.part.id)||(b=function(e,t,r){return r.reduce(function(r,n,a){var i=n.y,s=n.x,o=n.score;return kX(e,t,{y:i,x:s},a)||(r+=o),r},0)/r.length}(c,m,y=function(e,t,r,n,a,i){var s=t.shape[2],o=kQ.length,l=Array(s),u=e.part,h=e.score,p=kq(u,n,r);l[u.id]={score:h,name:v0[u.id],y:p.y,x:p.x};for(var d=o-1;d>=0;--d){var c=kQ[d],f=kJ[d];l[c]&&!l[f]&&(l[f]=k2(d,l[c],f,t,r,n,i))}for(d=0;d<o;++d)c=kJ[d],f=kQ[d],l[c]&&!l[f]&&(l[f]=k2(d,l[c],f,t,r,n,a));return l}(g,u,h,a,p,d)),c.push({keypoints:y,score:b}));return[2,c]}})})}(c,u,p,d,this.outputStride,this.maxPoses,n.scoreThreshold,n.nmsRadius)];case 6:f=w.sent(),w.label=7;case 7:if(r){if(!0===n.flipHorizontal)throw Error("flipHorizontal is not supported!");b=this.getCanvasInfo(wa(e),this.inputResolution,s)}else v=wa(e),x=function(e,t,r,n){var a=t.height,i=t.width,s=a/(r.height*(1-n.top-n.bottom)),o=i/(r.width*(1-n.left-n.right)),l=-n.top*r.height,u=-n.left*r.width;if(1===o&&1===s&&0===l&&0===u)return e;for(var h=0;h<e.length;h++)for(var p=0,d=e[h].keypoints;p<d.length;p++){var c=d[p];c.x=(c.x+u)*o,c.y=(c.y+l)*s}return e}(f,v,this.inputResolution,s),n.flipHorizontal&&(x=function(e,t){for(var r=0;r<e.length;r++)for(var n=0,a=e[r].keypoints;n<a.length;n++){var i=a[n];i.x=t.width-1-i.x}return e}(x,v));return i.dispose(),o.dispose(),aj(l),u.dispose(),h.dispose(),p.dispose(),d.dispose(),c.dispose(),[2,r?[f,b]:x]}})})},e.prototype.getCanvasInfo=function(e,t,r){var n=e.height,a=e.width,i=n/(t.height*(1-r.top-r.bottom)),s=a/(t.width*(1-r.left-r.right)),o=-r.top*t.height;return[-r.left*t.width,o,s,i,e.width,e.height]},e.prototype.dispose=function(){this.posenetModel.dispose()},e.prototype.reset=function(){},e}();const St={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(e,ok(sl(r,"float32"),-1))}}},Sr=aP({avgPool3dGrad_:function(e,t,r,n,a,i){let s=aO(e,"dy","avgPool3dGrad"),o=aO(t,"input","avgPool3dGrad"),l=s,u=o,h=!1;4===o.rank&&(h=!0,l=s9(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]]),u=s9(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),H(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),H(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),s7("avgPool3dGrad",a,i);let p={dy:l,input:u},d=aN.runKernel(e8,p,{filterSize:r,strides:n,pad:a,dimRoundingMode:i});return h?s9(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Sn=aP({avgPoolGrad_:function(e,t,r,n,a){let i=aO(e,"dy","avgPoolGrad"),s=aO(t,"input","avgPoolGrad");H(s.rank===i.rank,()=>`Rank of input (${s.rank}) does not match rank of dy (${i.rank})`);let o=s,l=i,u=!1;3===s.rank&&(u=!0,o=s9(s,[1,s.shape[0],s.shape[1],s.shape[2]]),l=s9(i,[1,i.shape[0],i.shape[1],i.shape[2]])),H(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),H(4===o.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`);let h={dy:l,input:o},p=aN.runKernel(e6,h,{filterSize:r,strides:n,pad:a});return u?s9(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Sa={kernelName:to,inputsToSave:["x"],gradFunc:St.gradFunc},Si=aP({conv3DBackpropFilter_:function(e,t,r,n,a){let i=e;4===e.rank&&(i=s9(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let s=t;4===s.rank&&(s=s9(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),H(5===i.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${i.shape}.`),H(5===s.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${s.shape}.`),H(5===r.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${r}.`),H(i.shape[4]===r[3],()=>`Error in conv3dDerFilter: depth of input ${i.shape[4]}) must match input depth in filter (${r[3]}.`),H(s.shape[4]===r[4],()=>`Error in conv3dDerFilter: depth of dy (${s.shape[4]}) must match output depth for filter (${r[4]}).`);let o={x:i,dy:s};return aN.runKernel(tc,o,{strides:n,pad:a,filterShape:r})}});function Ss(e,t){let r=[];for(let n=e;n<t;++n)r.push(n);return r}function So(e){let t=[];for(let r=0;r<e.length;++r)for(let n=0;n<e[r].length;++n)t.push(e[r][n]);return t}const Sl=aP({localResponseNormalizationBackprop_:function(e,t,r,n=5,a=1,i=1,s=.5){return aN.runKernel(t4,{x:e,y:t,dy:r},{depthRadius:n,bias:a,alpha:i,beta:s})}});function Su(e,t,r,n){return t.rank<r.rank&&(t=s9(t,oo(t.shape,n))),e.rank<r.rank&&(e=s9(e,oo(e.shape,n))),{x:()=>sf(e,sl(uF(r,t),e.dtype))}}const Sh={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let{reductionIndices:n}=r,a=t[0],i=t[1],s=ei(n,a.shape),o=Su(e,i,a,s);return{x:()=>o.x()}}},Sp=aP({maxPool3dGrad_:function(e,t,r,n,a,i,s){let o=aO(e,"dy","maxPool3dGrad"),l=aO(t,"input","maxPool3dGrad"),u=aO(r,"output","maxPool3dGrad"),h=o,p=l,d=u,c=!1;4===l.rank&&(c=!0,h=s9(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),p=s9(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=s9(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),H(5===h.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`),H(5===p.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`),H(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),s7("maxPool3dGrad",i,s);let f={dy:h,input:p,output:d},m=aN.runKernel(t9,f,{filterSize:n,strides:a,pad:i,dimRoundingMode:s});return c?s9(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),Sd=aP({maxPoolGrad_:function(e,t,r,n,a,i,s){let o=aO(e,"dy","maxPoolGrad"),l=aO(t,"input","maxPoolGrad"),u=aO(r,"output","maxPoolGrad");return H(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),H(4===o.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`),H(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),s7("maxPoolGrad",i,s),aN.runKernel(t8,{dy:o,input:l,output:u},{filterSize:n,strides:a,pad:i,dimRoundingMode:s})}}),Sc={kernelName:rc,inputsToSave:["x"],gradFunc:(e,t,r)=>{let n=t[0],{paddings:a}=r,i=a.map(e=>e[0]);return{x:()=>u6(e,i,n.shape)}}},Sf={kernelName:rV,gradFunc:(e,t,r)=>{let{blockShape:n,paddings:a}=r;return{x:()=>u7(e,n,a)}}},Sm={kernelName:rG,gradFunc:(e,t,r)=>{let{axis:n}=r;return{x:()=>un(e,n)}}};for(const e of[St,{kernelName:eq,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>{let t=sg(sl(r,"float32"));return hA(sc(e,sm(sF(sx(1),t))))}}}},{kernelName:eX,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,sm(sF(sg(sl(r,"float32")),1)))}}},{kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t,a=sP(r.shape,n.shape);return{a:()=>{let t=e,n=sz(r.shape,a);return n.length>0&&(t=oS(t,n)),s9(t,r.shape)},b:()=>{let t=e,r=sz(n.shape,a);return r.length>0&&(t=oS(t,r)),s9(t,n.shape)}}}},{kernelName:eY,saveAllInputs:!0,gradFunc:(e,t)=>{let r={};return t.forEach((t,n)=>{r[n]=()=>e.clone()}),r}},{kernelName:eZ,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sy(r)}}},{kernelName:eQ,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sy(r)}}},{kernelName:eJ,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,sm(sF(sx(1),sg(sl(r,"float32")))))}}},{kernelName:e0,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,sm(sp(sx(1),sg(sl(r,"float32")))))}}},{kernelName:e3,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t,a=sP(r.shape,n.shape);return{a:()=>{let t=sp(sg(r),sg(n)),i=sf(e,sc(n,t)),s=sz(r.shape,a);return s.length>0&&(i=oS(i,s)),s9(i,r.shape)},b:()=>{let t=sp(sg(r),sg(n)),i=hA(sf(e,sc(r,t))),s=sz(n.shape,a);return s.length>0&&(i=oS(i,s)),s9(i,n.shape)}}}},{kernelName:e1,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,sp(sg(sl(r,"float32")),1))}}},{kernelName:e2,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,sF(sx(1),sg(sl(r,"float32"))))}}},{kernelName:e5,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,{filterSize:a,strides:i,pad:s,dimRoundingMode:o}=r;return{x:()=>Sr(e,n,a,i,s,o)}}},{kernelName:e4,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,{filterSize:a,strides:i,pad:s}=r;return{x:()=>Sn(e,n,a,i,s)}}},{kernelName:e7,inputsToSave:["a","b"],gradFunc:(e,t,r)=>{let[n,a]=t,{transposeA:i,transposeB:s}=r;return i||s?!i&&s?{a:()=>uG(e,a,!1,!1),b:()=>uG(e,n,!0,!1)}:i&&!s?{a:()=>uG(a,e,!1,!0),b:()=>uG(n,e,!1,!1)}:{a:()=>uG(a,e,!0,!0),b:()=>uG(e,n,!0,!0)}:{a:()=>uG(e,a,!1,!0),b:()=>uG(n,e,!0,!1)}}},{kernelName:e9,gradFunc:(e,t,r)=>{let{blockShape:n,crops:a}=r;return{x:()=>pt(e,n,a)}}},{kernelName:"BroadcastTo",gradFunc:(e,t,r)=>{let n=r.inputShape,a=r.shape,i=Array.from(a);for(let e=n.length-1;e>=0;e--)if(n[e]===a[e])i[e]=1;else if(1!==n[e])throw Error(`broadcastTo(): [${n}] cannot be broadcast to [${a}].`);let s=[];for(let e=0;e<i.length;e++)i[e]>1&&s.push(e);return{x:()=>oS(e,s,!0)}}},{kernelName:tn,gradFunc:e=>({x:()=>e.clone()})},{kernelName:ta,gradFunc:e=>({x:()=>sy(e)})},{kernelName:ti,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,{clipValueMin:a,clipValueMax:i}=r;return{x:()=>hh(hM(uq(n,a),hN(n,i)),e,sy(e))}}},Sa,{kernelName:tl,saveAllInputs:!0,gradFunc:(e,t,r)=>{let n=t.map(e=>e.shape),{axis:a}=r,i=ei(a,t[0].shape)[0];return pM(e,n.map(e=>e[i]),i).map(e=>()=>e)}},{kernelName:tp,inputsToSave:["dy","filter"],gradFunc:(e,t,r)=>{let[n,a]=t,{strides:i,pad:s,dataFormat:o,dimRoundingMode:l}=r;return{dy:()=>ul(e,a,i,s,o,1,l),filter:()=>uL(e,n,a.shape,i,s,o,l)}}},{kernelName:tu,inputsToSave:["x","filter"],gradFunc:(e,t,r)=>{let[n,a]=t,{dilations:i,strides:s,pad:o,dataFormat:l}=r;return H(s4(i),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`),{x:()=>uh(n.shape,e,a,s,o,l),filter:()=>uL(n,e,a.shape,s,o,l)}}},{kernelName:td,inputsToSave:["x","filter"],gradFunc:(e,t,r)=>{let{dilations:n,strides:a,pad:i}=r;H(s4(n),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${n}'`);let[s,o]=t;return{x:()=>uc(s.shape,e,o,a,i),filter:()=>Si(s,e,o.shape,a,i)}}},{kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(hA(pN(sl(r,"float32"))),e)}}},{kernelName:tm,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(pT(sl(r,"float32")),e)}}},{kernelName:ty,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,{axis:a,exclusive:i,reverse:s}=r;return{x:()=>{let t=ou([a],n.rank),r=hs(e,a,i,!s);return null!=t&&(r=p8(r,t)),r}}}},{kernelName:tw,inputsToSave:["x","filter"],gradFunc:(e,t,r)=>{let{dilations:n,strides:a,pad:i,dimRoundingMode:s}=r,o=null==n?[1,1]:n;H(s4(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);let[l,u]=t;return H(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),H(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),H(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),H(s6(a,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${o}'.`),s7("depthwiseConv2d",i,s),{x:()=>uU(l.shape,e,u,a,i,o,s),filter:()=>uW(l,e,u.shape,a,i,o,s)}}},{kernelName:tC,inputsToSave:["x","filter"],gradFunc:(e,t,r)=>{let[n,a]=t,i={x:n,filter:a,dy:e},s={x:n,filter:a,dy:e};return{x:()=>aN.runKernel(tN,i,r),filter:()=>aN.runKernel(tT,s,r)}}},{kernelName:tE,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t,a=sP(r.shape,n.shape);return{a:()=>{let t=sc(e,sl(n,"float32")),i=sz(r.shape,a);return i.length>0?s9(oS(t,i),r.shape):t},b:()=>{let t=sf(e,sl(r,"float32")),i=sz(n.shape,a);return i.length>0&&(t=s9(oS(t,i),n.shape)),hA(sc(t,sl(sg(n),"float32")))}}}},{kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{let[r]=t,n={dy:e,y:r};return{x:()=>aN.runKernel(tA,n)}}},{kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t,n=sf(uD(hA(sg(r))),2/Math.sqrt(Math.PI));return{x:()=>sf(e,n)}}},{kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(e,r)}}},{kernelName:t_,inputsToSave:["input"],gradFunc:(e,t)=>{let[r]=t;return{input:()=>s9(e,r.shape)}}},{kernelName:tD,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(e,uD(r))}}},{kernelName:tP,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t,a=sP(r.shape,n.shape);return{a:()=>{let t=sc(e,sl(n,"float32")),i=sz(r.shape,a);return i.length>0?s9(oS(t,i),r.shape):t},b:()=>{let t=sf(e,sl(r,"float32")),i=sz(n.shape,a);return i.length>0&&(t=s9(oS(t,i),n.shape)),hA(sc(t,sl(sg(n),"float32")))}}}},{kernelName:tz,gradFunc:e=>({x:()=>sy(e)})},{kernelName:tL,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,r)=>{let{varianceEpsilon:n}=r,[a,i,s,o]=t,l=null==o?sx(1):o,u=sz(i.shape,a.shape),h=[];if(1===i.rank){for(let e=0;e<a.shape.length-1;++e)h.push(a.shape[e]);h.push(1)}let p=sF(a,i),d=sf(e,l),c=pw(sp(s,sx(n))),f=sf(sf(sf(c,c),c),sx(-.5));return{x:()=>1===i.rank?s9(sf(sf(e,uM(s9(c,[1,1,1,i.shape[0]]),h)),l),a.shape):s9(sf(sf(e,c),l),a.shape),mean:()=>{let e=sf(sf(c,sx(-1)),d);return 1===i.rank&&(e=oS(e,u)),s9(e,i.shape)},variance:()=>{let e=sf(sf(f,p),d);return 1===i.rank&&(e=oS(e,u)),s9(e,i.shape)},scale:()=>{let t=sf(p,c),r=sf(e,t);return 1===i.rank&&(r=oS(r,u)),s9(r,i.shape)},offset:()=>{let t=e;return 1===i.rank&&(t=oS(t,u)),s9(t,i.shape)}}}},{kernelName:tB,inputsToSave:["x","indices"],gradFunc:(e,t,r)=>{let[n,a]=t,{axis:i,batchDims:s}=r,o=ei(i,n.shape)[0],l=(e,t,r)=>()=>{let n=e.shape,a=t.size,s=n.slice(0,o),l=s.length,u=n.slice(i,n.length).slice(1),h=u.length,p=Ss(0,l),d=Ss(l+1,l+1+h),c=s9(r,So([s,[a],u])),f=s9(t,[a]),m=So([[l],p,d]),g=pQ(p8(c,m),f,e.shape[o]);return p8(g,oh(m))};if(1!==s)return{x:l(n,a,e),indices:()=>a};{let t=n.shape[0],r=n.split(t,0);return{x:()=>pB(r.map((t,r)=>l(t,a.slice(r,1),e.slice(r,1))())).reshape(n.shape),indices:()=>a}}}},{kernelName:tV,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t;return{a:()=>sy(r),b:()=>sy(n)}}},{kernelName:tG,gradFunc:e=>({x:()=>sl(e,"float32")})},{kernelName:tK,gradFunc:e=>({x:()=>sy(e)})},{kernelName:tq,gradFunc:e=>({x:()=>sy(e)})},{kernelName:tX,gradFunc:e=>({x:()=>sy(e)})},{kernelName:tY,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,{alpha:a}=r,i=uK(n,0);return{x:()=>hh(i,e,sf(e,a))}}},{kernelName:t0,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,sp(r,1))}}},{kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,sl(r,"float32"))}}},{kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,r)=>{let[n]=t,{axis:a}=r;return{logits:()=>{let t=uD(n);return sF(e,sf(oS(e,a,!0),t))}}}},{kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let[n,a]=t,{depthRadius:i,bias:s,alpha:o,beta:l}=r;return{x:()=>Sl(n,a,e,i,s,o,l)}}},Sh,Sh,{kernelName:t6,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t;return{a:()=>sf(e,sl(uq(r,n),"float32")),b:()=>sf(e,sl(hC(r,n),"float32"))}}},{kernelName:t7,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let[n,a]=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=r;return{x:()=>Sp(e,n,a,i,s,o,l)}}},{kernelName:t5,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let[n,a]=t,{filterSize:i,strides:s,pad:o}=r;return{x:()=>Sd(e,n,a,i,s,o)}}},{kernelName:rt,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,{axis:a}=r,i=ei(a,n.shape),s=q(os(n.shape,i)[1]);return{x:()=>{let t=n.shape.slice();return i.forEach(e=>{t[e]=1}),sc(sf(s9(e,t),hq(n.shape,"float32")),s)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,r)=>{let{axis:n}=r,[a,i]=t,s=ei(n,a.shape),o=Su(e,i,a,s);return{x:()=>o.x()}}},{kernelName:rr,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t;return{a:()=>sf(e,sl(hN(r,n),"float32")),b:()=>sf(e,sl(uK(r,n),"float32"))}}},{kernelName:rn,inputsToSave:["x"],gradFunc:(e,t,r)=>{let n=t[0],{paddings:a}=r,i=a.map(e=>e[0]);return{x:()=>u6(e,i,n.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t,a=sP(r.shape,n.shape);return{a:()=>{let t=sz(r.shape,a);return t.length>0?s9(oS(e,t),r.shape):e},b:()=>{let t=sf(e,hA(ub(sc(r,n)))),i=sz(n.shape,a);return i.length>0?s9(oS(t,i),n.shape):t}}}},{kernelName:ri,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t,a=sP(r.shape,n.shape);return{a:()=>{let t=sf(e,sl(n,"float32")),i=sz(r.shape,a);return i.length>0?s9(oS(t,i),r.shape):t},b:()=>{let t=sf(e,sl(r,"float32")),i=sz(n.shape,a);return i.length>0?s9(oS(t,i),n.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>hA(e)})},{kernelName:rp,inputsToSave:["indices"],gradFunc:(e,t)=>{let r=t[0];return{indices:()=>hK(r.shape,"float32")}}},{kernelName:rh,gradFunc:e=>({x:()=>sy(e)})},{kernelName:rd,saveAllInputs:!0,gradFunc:(e,t,r)=>{let{axis:n}=r;return pJ(e,n).map(e=>()=>e)}},Sc,Sc,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{let[r,n,a]=t,i=sP(r.shape,n.shape);return{a:()=>{let t=sl(n,"float32"),a=sf(e,sf(t,sA(r,sF(t,sx(1))))),s=sz(r.shape,i);return s.length>0&&(a=oS(a,s)),s9(a,r.shape)},b:()=>{let t=sf(e,sf(a,hh(uK(r,0),hE(r),sy(r)))),s=sz(n.shape,i);return s.length>0&&(t=oS(t,s)),s9(t,n.shape)}}}},{kernelName:rf,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{let[r,n]=t,a=uK(r,0);return{x:()=>hh(a,e,sf(e,n)),alpha:()=>{let t=hh(a,sy(e),sf(e,r)),i=sz(n.shape,e.shape);return i.length>0&&(t=oS(t,i)),s9(t,n.shape)}}}},{kernelName:rm,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,{axis:a}=r,i=[];return i=null==a?n.shape.map((e,t)=>t):"number"==typeof a?[a]:a,{x:()=>(function(e,t,r){let n=e.shape.length,a=n-r.length,i=or.getAxesPermutation(r,n),s=e;null!=i&&(s=p8(e,i));let o=s.shape.slice(),l=o.splice(n-r.length,r.length).reduce((e,t)=>e*t,1);o.push(l);let u=function(e,t,r){let n=e.shape.slice();n[r]=1;let a=s9(t,n),i=sf(hi(e,r,!0,!1),hi(e,r,!0,!0));return sf(a,i)}(s.reshape(o),t,a);return u=u.reshape(s.shape),null!=i&&(u=p8(u,or.getUndoAxesPermutation(i))),u})(n,e,i)}}},{kernelName:rw,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,hA(sg(r)))}}},{kernelName:r$,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t,n=sf(hN(r,6),ok(r));return{x:()=>sf(e,sl(n,"float32"))}}},{kernelName:rk,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(e,sl(ok(r),"float32"))}}},{kernelName:rS,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>s9(e,r.shape)}}},{kernelName:rN,inputsToSave:["images"],gradFunc:(e,t,r)=>{let[n]=t,a={dy:e,images:n};return{images:()=>aN.runKernel(rT,a,r)}}},{kernelName:rI,inputsToSave:["images"],gradFunc:(e,t,r)=>{let[n]=t,a={dy:e,images:n};return{images:()=>aN.runKernel(rC,a,r)}}},{kernelName:rE,gradFunc:(e,t,r)=>{let{dims:n}=r,a=ei(n,e.shape);return{x:()=>pm(e,a)}}},{kernelName:rR,gradFunc:e=>({x:()=>sy(e)})},{kernelName:rA,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>hA(sc(e,sf(sA(r,1.5),2)))}}},{kernelName:rO,inputsToSave:["condition"],gradFunc:(e,t)=>{let[r]=t;return{condition:()=>sl(sy(r),"float32"),t:()=>sf(e,sl(r,e.dtype)),e:()=>sf(e,sl(hz(r),e.dtype))}}},{kernelName:rM,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>{let t=uK(r,sx(0)),n=sx(la);return hh(t,sf(e,sx(li)),sf(sf(e,n),uD(sl(r,"float32"))))}}}},{kernelName:rB,outputsToSave:[!0],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(e,sf(r,sF(sx(1),r)))}}},{kernelName:rL,gradFunc:e=>({x:()=>sy(e)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(hn(sl(r,"float32")),e)}}},{kernelName:rP,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(ha(sl(r,"float32")),e)}}},{kernelName:rz,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,{begin:a,size:i}=r,s=n.shape,[o,l]=oY(n,a,i),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],s[t]-o[t]-l[t]]);return{x:()=>h5(e,u)}}},{kernelName:rH,outputsToSave:[!0],gradFunc:(e,t,r)=>{let[n]=t,{dim:a}=r,i=sf(e,n);return{logits:()=>sF(i,sf(oS(i,[a],!0),n))}}},{kernelName:rW,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(e,ow(r))}}},Sf,Sf,Sm,Sm,{kernelName:rU,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,sf(sm(sl(r,"float32")),2))}}},{kernelName:rZ,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t,a=sx(2);return{a:()=>sf(e,sf(a,sF(r,n))),b:()=>sf(e,sf(a,sF(n,r)))}}},{kernelName:rQ,inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(e,sf(sl(r,"float32"),2))}}},{kernelName:nn,gradFunc:e=>({x:()=>sy(e)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{let[r,n]=t,a=sP(r.shape,n.shape);return{a:()=>{let t=e,n=sz(r.shape,a);return n.length>0&&(t=oS(t,n)),s9(t,r.shape)},b:()=>{let t=e,r=sz(n.shape,a);return r.length>0&&(t=oS(t,r)),s9(hA(t),n.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,a=n.shape.slice(),{axis:i}=r;ei(i,n.shape).forEach(e=>{a[e]=1});let s=sf(s9(e,a),hq(n.shape,"float32"));return{x:()=>s}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sc(e,sg(hn(r)))}}},{kernelName:r4,outputsToSave:[!0],gradFunc:(e,t)=>{let[r]=t;return{x:()=>sf(sF(sx(1),sg(r)),e)}}},{kernelName:r6,inputsToSave:["x"],gradFunc:(e,t,r)=>{let[n]=t,{reps:a}=r;return{x:()=>{let t=sy(n);if(1===n.rank)for(let r=0;r<a[0];++r)t=sp(t,u6(e,[r*n.shape[0]],[n.shape[0]]));else if(2===n.rank)for(let r=0;r<a[0];++r)for(let i=0;i<a[1];++i)t=sp(t,u6(e,[r*n.shape[0],i*n.shape[1]],[n.shape[0],n.shape[1]]));else if(3===n.rank)for(let r=0;r<a[0];++r)for(let i=0;i<a[1];++i)for(let s=0;s<a[2];++s)t=sp(t,u6(e,[r*n.shape[0],i*n.shape[1],s*n.shape[2]],[n.shape[0],n.shape[1],n.shape[2]]));else if(4===n.rank)for(let r=0;r<a[0];++r)for(let i=0;i<a[1];++i)for(let s=0;s<a[2];++s)for(let o=0;o<a[3];++o)t=sp(t,u6(e,[r*n.shape[0],i*n.shape[1],s*n.shape[2],o*n.shape[3]],[n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));else throw Error(`Gradient for tile operation is not implemented for rank-${n.rank} tensors yet.`);return t}}}},{kernelName:r7,gradFunc:(e,t,r)=>{let{perm:n}=r,a=oh(n);return{x:()=>p8(e,a)}}},{kernelName:ne,gradFunc:(e,t,r)=>{let{axis:n}=r;return{value:()=>pB(e,n)}}},{kernelName:nt,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{let[r]=t;return{x:()=>(function(e,t){let r=uj(e,sL(t,sy(t))),n=uq(t,sx(0,"int32")),a=r.rank-n.rank;for(let e=0;e<a;++e)n=uO(n,e+1);n=hM(n,hq(r.shape,"bool"));let i=sy(r);return hh(n,r,i)})(e,r)}}},{kernelName:nr,gradFunc:e=>({x:()=>sy(e)})}]){let{kernelName:t}=e;nc.has(t)&&e_.getBool("DEBUG")&&nh(`Overriding the gradient for '${t}'`),nc.set(t,e)}ah().prototype.abs=function(){return this.throwIfDisposed(),sD(this)},ah().prototype.acos=function(){return this.throwIfDisposed(),uY(this)},ah().prototype.acosh=function(){return this.throwIfDisposed(),uZ(this)},ah().prototype.add=function(e){return this.throwIfDisposed(),sp(this,e)},ah().prototype.all=function(e,t){return this.throwIfDisposed(),sG(this,e,t)},ah().prototype.any=function(e,t){return this.throwIfDisposed(),sH(this,e,t)},ah().prototype.argMax=function(e){return this.throwIfDisposed(),sj(this,e)},ah().prototype.argMin=function(e){return this.throwIfDisposed(),uJ(this,e)},ah().prototype.asScalar=function(){return this.throwIfDisposed(),H(1===this.size,()=>"The array must have only 1 element."),s9(this,[])},ah().prototype.asType=function(e){return this.throwIfDisposed(),sl(this,e)},ah().prototype.as1D=function(){return this.throwIfDisposed(),s9(this,[this.size])},ah().prototype.as2D=function(e,t){return this.throwIfDisposed(),s9(this,[e,t])},ah().prototype.as3D=function(e,t,r){return this.throwIfDisposed(),s9(this,[e,t,r])},ah().prototype.as4D=function(e,t,r,n){return this.throwIfDisposed(),s9(this,[e,t,r,n])},ah().prototype.as5D=function(e,t,r,n,a){return this.throwIfDisposed(),s9(this,[e,t,r,n,a])},ah().prototype.asin=function(){return this.throwIfDisposed(),u0(this)},ah().prototype.asinh=function(){return this.throwIfDisposed(),u1(this)},ah().prototype.atan=function(){return this.throwIfDisposed(),u2(this)},ah().prototype.atan2=function(e){return this.throwIfDisposed(),u3(this,e)},ah().prototype.atanh=function(){return this.throwIfDisposed(),u4(this)},ah().prototype.avgPool=function(e,t,r,n){return this.throwIfDisposed(),oe(this,e,t,r,n)},ah().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),u7(this,e,t)},ah().prototype.batchNorm=function(e,t,r,n,a){return this.throwIfDisposed(),lQ(this,e,t,r,n,a)},ah().prototype.broadcastTo=function(e){return this.throwIfDisposed(),l2(this,e)},ah().prototype.cast=function(e){return this.throwIfDisposed(),sl(this,e)},ah().prototype.ceil=function(){return this.throwIfDisposed(),hr(this)},ah().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),ur(this,e,t)},ah().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof au&&(e=[e]),un([this,...e],t)},ah().prototype.conv1d=function(e,t,r,n,a,i){return this.throwIfDisposed(),uu(this,e,t,r,n,a,i)},ah().prototype.conv2dTranspose=function(e,t,r,n,a){return this.throwIfDisposed(),up(this,e,t,r,n,a)},ah().prototype.conv2d=function(e,t,r,n,a,i){return this.throwIfDisposed(),ul(this,e,t,r,n,a,i)},ah().prototype.cos=function(){return this.throwIfDisposed(),hn(this)},ah().prototype.cosh=function(){return this.throwIfDisposed(),ha(this)},ah().prototype.cumprod=function(e,t,r){return this.throwIfDisposed(),hi(this,e,t,r)},ah().prototype.cumsum=function(e,t,r){return this.throwIfDisposed(),hs(this,e,t,r)},ah().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),ho(this,e,t)},ah().prototype.depthwiseConv2d=function(e,t,r,n,a,i){return this.throwIfDisposed(),ug(this,e,t,r,n,a,i)},ah().prototype.dilation2d=function(e,t,r,n,a){return this.throwIfDisposed(),hu(this,e,t,r,n,a)},ah().prototype.divNoNan=function(e){return this.throwIfDisposed(),hp(this,e)},ah().prototype.div=function(e){return this.throwIfDisposed(),sc(this,e)},ah().prototype.dot=function(e){return this.throwIfDisposed(),hd(this,e)},ah().prototype.elu=function(){return this.throwIfDisposed(),og(this)},ah().prototype.equal=function(e){return this.throwIfDisposed(),uF(this,e)},ah().prototype.erf=function(){return this.throwIfDisposed(),u_(this)},ah().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),hx(this,e,t)},ah().prototype.exp=function(){return this.throwIfDisposed(),uD(this)},ah().prototype.expandDims=function(e){return this.throwIfDisposed(),uO(this,e)},ah().prototype.expm1=function(){return this.throwIfDisposed(),hv(this)},ah().prototype.fft=function(){return this.throwIfDisposed(),p_(this)},ah().prototype.flatten=function(){return this.throwIfDisposed(),s9(this,[this.size])},ah().prototype.floor=function(){return this.throwIfDisposed(),ub(this)},ah().prototype.floorDiv=function(e){return this.throwIfDisposed(),sd(this,e)},ah().prototype.gather=function(e,t,r){return this.throwIfDisposed(),uj(this,e,t,r)},ah().prototype.greaterEqual=function(e){return this.throwIfDisposed(),uq(this,e)},ah().prototype.greater=function(e){return this.throwIfDisposed(),uK(this,e)},ah().prototype.ifft=function(){return this.throwIfDisposed(),pD(this)},ah().prototype.irfft=function(){return this.throwIfDisposed(),pO(this)},ah().prototype.isFinite=function(){return this.throwIfDisposed(),hk(this)},ah().prototype.isInf=function(){return this.throwIfDisposed(),hS(this)},ah().prototype.isNaN=function(){return this.throwIfDisposed(),hI(this)},ah().prototype.leakyRelu=function(e){return this.throwIfDisposed(),oy(this,e)},ah().prototype.lessEqual=function(e){return this.throwIfDisposed(),hN(this,e)},ah().prototype.less=function(e){return this.throwIfDisposed(),hC(this,e)},ah().prototype.localResponseNormalization=function(e,t,r,n){return this.throwIfDisposed(),h$(this,e,t,r,n)},ah().prototype.logSigmoid=function(){return this.throwIfDisposed(),h_(this)},ah().prototype.logSoftmax=function(e){return this.throwIfDisposed(),hD(this,e)},ah().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),hO(this,e,t)},ah().prototype.log=function(){return this.throwIfDisposed(),hE(this)},ah().prototype.log1p=function(){return this.throwIfDisposed(),hR(this)},ah().prototype.logicalAnd=function(e){return this.throwIfDisposed(),hM(this,e)},ah().prototype.logicalNot=function(){return this.throwIfDisposed(),hz(this)},ah().prototype.logicalOr=function(e){return this.throwIfDisposed(),hP(this,e)},ah().prototype.logicalXor=function(e){return this.throwIfDisposed(),hL(this,e)},ah().prototype.matMul=function(e,t,r){return this.throwIfDisposed(),uG(this,e,t,r)},ah().prototype.maxPool=function(e,t,r,n){return this.throwIfDisposed(),hV(this,e,t,r,n)},ah().prototype.max=function(e,t){return this.throwIfDisposed(),hg(this,e,t)},ah().prototype.maximum=function(e){return this.throwIfDisposed(),sL(this,e)},ah().prototype.mean=function(e,t){return this.throwIfDisposed(),hj(this,e,t)},ah().prototype.min=function(e,t){return this.throwIfDisposed(),hy(this,e,t)},ah().prototype.minimum=function(e){return this.throwIfDisposed(),hY(this,e)},ah().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),hZ(this,e,t)},ah().prototype.mod=function(e){return this.throwIfDisposed(),hQ(this,e)},ah().prototype.mul=function(e){return this.throwIfDisposed(),sf(this,e)},ah().prototype.neg=function(){return this.throwIfDisposed(),hA(this)},ah().prototype.norm=function(e,t,r){return this.throwIfDisposed(),hb(this,e,t,r)},ah().prototype.notEqual=function(e){return this.throwIfDisposed(),h2(this,e)},ah().prototype.oneHot=function(e,t=1,r=0){return this.throwIfDisposed(),h3(this,e,t,r)},ah().prototype.onesLike=function(){return this.throwIfDisposed(),h4(this)},ah().prototype.pad=function(e,t){return this.throwIfDisposed(),h5(this,e,t)},ah().prototype.pool=function(e,t,r,n,a,i){return this.throwIfDisposed(),pr(this,e,t,r,n,a,i)},ah().prototype.pow=function(e){return this.throwIfDisposed(),sA(this,e)},ah().prototype.prelu=function(e){return this.throwIfDisposed(),ob(this,e)},ah().prototype.prod=function(e,t){return this.throwIfDisposed(),pn(this,e,t)},ah().prototype.reciprocal=function(){return this.throwIfDisposed(),pf(this)},ah().prototype.relu=function(){return this.throwIfDisposed(),ox(this)},ah().prototype.relu6=function(){return this.throwIfDisposed(),ov(this)},ah().prototype.reshapeAs=function(e){return this.throwIfDisposed(),s9(this,e.shape)},ah().prototype.reshape=function(e){return this.throwIfDisposed(),s9(this,e)},ah().prototype.resizeBilinear=function(e,t,r){return this.throwIfDisposed(),dD(this,e,t,r)},ah().prototype.resizeNearestNeighbor=function(e,t,r){return this.throwIfDisposed(),dO(this,e,t,r)},ah().prototype.reverse=function(e){return this.throwIfDisposed(),pm(this,e)},ah().prototype.rfft=function(){return this.throwIfDisposed(),pz(this)},ah().prototype.round=function(){return this.throwIfDisposed(),pv(this)},ah().prototype.rsqrt=function(){return this.throwIfDisposed(),pw(this)},ah().prototype.selu=function(){return this.throwIfDisposed(),pk(this)},ah().prototype.separableConv2d=function(e,t,r,n,a,i){return this.throwIfDisposed(),pS(this,e,t,r,n,a,i)},ah().prototype.sigmoid=function(){return this.throwIfDisposed(),ow(this)},ah().prototype.sign=function(){return this.throwIfDisposed(),pC(this)},ah().prototype.sin=function(){return this.throwIfDisposed(),pN(this)},ah().prototype.sinh=function(){return this.throwIfDisposed(),pT(this)},ah().prototype.slice=function(e,t){return this.throwIfDisposed(),u6(this,e,t)},ah().prototype.softmax=function(e){return this.throwIfDisposed(),pF(this,e)},ah().prototype.softplus=function(){return this.throwIfDisposed(),hF(this)},ah().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),pt(this,e,t)},ah().prototype.split=function(e,t){return this.throwIfDisposed(),pM(this,e,t)},ah().prototype.sqrt=function(){return this.throwIfDisposed(),sm(this)},ah().prototype.square=function(){return this.throwIfDisposed(),sg(this)},ah().prototype.squaredDifference=function(e){return this.throwIfDisposed(),pP(this,e)},ah().prototype.squeeze=function(e){return this.throwIfDisposed(),pL(this,e)},ah().prototype.stack=function(e,t){return this.throwIfDisposed(),pB(e instanceof au?[this,e]:[this,...e],t)},ah().prototype.step=function(e){return this.throwIfDisposed(),ok(this,e)},ah().prototype.stridedSlice=function(e,t,r,n,a,i,s,o){return this.throwIfDisposed(),pW(this,e,t,r,n,a,i,s,o)},ah().prototype.sub=function(e){return this.throwIfDisposed(),sF(this,e)},ah().prototype.sum=function(e,t){return this.throwIfDisposed(),oS(this,e,t)},ah().prototype.tan=function(){return this.throwIfDisposed(),pU(this)},ah().prototype.tanh=function(){return this.throwIfDisposed(),u5(this)},ah().prototype.tile=function(e){return this.throwIfDisposed(),uM(this,e)},ah().prototype.toBool=function(){return this.throwIfDisposed(),sl(this,"bool")},ah().prototype.toFloat=function(){return this.throwIfDisposed(),sl(this,"float32")},ah().prototype.toInt=function(){return this.throwIfDisposed(),sl(this,"int32")},ah().prototype.topk=function(e,t){return this.throwIfDisposed(),pX(this,e,t)},ah().prototype.transpose=function(e){return this.throwIfDisposed(),p8(this,e)},ah().prototype.unique=function(e){return this.throwIfDisposed(),pZ(this,e)},ah().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),pQ(this,e,t)},ah().prototype.unstack=function(e){return this.throwIfDisposed(),pJ(this,e)},ah().prototype.where=function(e,t){return this.throwIfDisposed(),hh(e,this,t)},ah().prototype.zerosLike=function(){return this.throwIfDisposed(),sy(this)};class Sg extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Sg.prototype)}}class Sy extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Sy.prototype)}}class Sb extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Sb.prototype)}}class Sx extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Sx.prototype)}}class Sv extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Sv.prototype)}}class Sw{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){let e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){let e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function Sk(e,t){if(Array.isArray(e)){let r=[];for(let n=0;n<t;n++)r=r.concat(e);return r}{let r=Array(t);return r.fill(e),r}}function SS(e,t){if(!e)throw new Sv(t)}function SI(e,t){let r=0;for(let n of e)n===t&&r++;return r}function SC(e){return 1===e.length?e[0]:e}function SN(e){return Array.isArray(e)?e:[e]}function ST(e){let t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function S$(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let SE={};function SR(e){if(null==e)return null;let t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function SA(e,t={},r={},n="object",a=!1){if("string"==typeof e){let a;if(e in r)a=r[e];else if(e in SE)a=SE[e];else if(null==(a=t[e]))throw new Sb(`Unknown ${n}: ${e}. This may be due to one of the following reasons:
1. The ${n} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${n} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{let i,s;if(null==e.className||null==e.config)throw new Sb(`${n}: Improper config format: ${JSON.stringify(e)}.
'className' and 'config' must set.`);let o=e.className;if(o in r?[i,s]=r[o]:o in SE?[i,s]=SE.className:o in t&&([i,s]=t[o]),null==i)throw new Sb(`Unknown ${n}: ${o}. This may be due to one of the following reasons:
1. The ${n} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${n} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=s){let t={};for(let e of Object.keys(SE))t[e]=SE[e];for(let e of Object.keys(r))t[e]=r[e];e.config.customObjects=t;let n=Object.assign({},SE);for(let e of Object.keys(r))SE[e]=r[e];!function e(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach(t=>e(t));else for(let r of Object.keys(t)){let n=t[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?e(n):t[r]=n.value)}}(e.config);let o=s(i,e.config,r,a);return SE=Object.assign({},n),o}{let t=Object.assign({},SE);for(let e of Object.keys(r))SE[e]=r[e];let n=new i(e.config);return SE=Object.assign({},t),n}}}function SF(e,t){return -1*(e<t?-1:+(e>t))}function S_(e){if(null==e)return e;let t=[];for(let r of e)-1===t.indexOf(r)&&t.push(r);return t}function SD(e,t,r){if(null!=r&&0>e.indexOf(r))throw new Sb(`${r} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function SO(e,t,r=0,n=1/0){return SS(r>=0),SS(n>=r),Array.isArray(e)&&e.length>=r&&e.length<=n&&e.every(e=>typeof e===t)}function SM(e,t){Array.isArray(e)?(ny.assert(e.length>0,()=>`${t} is unexpectedly an empty array.`),e.forEach((e,r)=>SM(e,`element ${r+1} of ${t}`))):ny.assert(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got ${function e(t){return null===t?"null":Array.isArray(t)?"["+t.map(t=>e(t)).join(",")+"]":"string"==typeof t?`"${t}"`:`${t}`}(e)}.`)}function Sz(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let SP=0;const SL={};function SB(e=""){return e in SL||(SL[e]=0),SL[e]+=1,e+SL[e].toString()}const SW=["channelsFirst","channelsLast"],SU=["nearest","bilinear"],SV=["valid","same","causal"],SG=["max","avg"],SH=["sum","mul","concat","ave"],Sj=new Map;function SK(e){SD(SW,"DataFormat",e)}function Sq(e){SD(SV,"PaddingMode",e)}function SX(e){SD(SG,"PoolMode",e)}const SY=[];function SZ(e,t){SY.push(e);try{let e=t();return SY.pop(),e}catch(e){throw SY.pop(),e}}function SQ(e){if(!S1(e))throw Error("Not a valid tensor name: '"+e+"'");return(0===SY.length?"":SY.join("/")+"/")+e}function SJ(e){if(!S1(e))throw Error("Not a valid tensor name: '"+e+"'");Sj.has(e)||Sj.set(e,0);let t=Sj.get(e);if(Sj.set(e,Sj.get(e)+1),!(t>0))return e;{let r=`${e}_${t}`;return Sj.set(r,1),r}}const S0=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function S1(e){return!!e.match(S0)}function S2(e,t,r){null==t&&(t=0),null==r&&(r=e.length);let n=1;for(let a=t;a<r;++a)n*=e[a];return n}function S3(e){if(0===e.length)return NaN;let t=1/0;for(let r=0;r<e.length;r++){let n=e[r];n<t&&(t=n)}return t}function S4(e){if(0===e.length)return NaN;let t=-1/0;for(let r=0;r<e.length;r++){let n=e[r];n>t&&(t=n)}return t}function S6(e,t){if(t<e)throw new Sb(`end (${t}) < begin (${e}) is forbidden.`);let r=[];for(let n=e;n<t;++n)r.push(n);return r}function S5(){return null==i&&(i=aY().epsilon()),i}function S8(){return"channelsLast"}function S7(e,t=-1){let r=e.shape.slice();return t<0&&(t=r.length+t+1),r.splice(t,0,1),s9(e,r)}function S9(e,t,r){return aH(()=>{switch(e.rank){case 1:return p$(e,t,r);case 2:return pE(e,[t,0],[r,e.shape[1]]);case 3:return pR(e,[t,0,0],[r,e.shape[1],e.shape[2]]);case 4:return pA(e,[t,0,0,0],[r,e.shape[1],e.shape[2],e.shape[3]]);case 5:return u6(e,[t,0,0,0,0],[r,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return u6(e,[t,0,0,0,0,0],[r,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Sb(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}})}function Ie(e,t,r){return aH(()=>{switch(e.rank){case 1:return p$(e,t,r);case 2:return pE(e,[0,t],[e.shape[0],r]);case 3:return pR(e,[0,0,t],[e.shape[0],e.shape[1],r]);case 4:return pA(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],r]);default:throw new Sb(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function It(e,t,r,n){return aH(()=>{switch(e.rank){case 1:return p$(e,t,r);case 2:switch(n){case 1:return S9(e,t,r);case 2:return Ie(e,t,r);default:throw new Sb(`The axis is not within the rank of the tensor ${n}`)}case 3:switch(n){case 1:return S9(e,t,r);case 2:return pR(e,[0,t,0],[e.shape[0],r,e.shape[2]]);case 3:return Ie(e,t,r);default:throw new Sb(`The axis is not within the rank of the tensor ${n}`)}case 4:switch(n){case 1:return S9(e,t,r);case 2:return pA(e,[0,t,0,0],[e.shape[0],r,e.shape[2],e.shape[3]]);case 3:return pA(e,[0,0,t,0],[e.shape[0],e.shape[1],r,e.shape[3]]);case 4:return Ie(e,t,r);default:throw new Sb(`The axis is not within the rank of the tensor ${n}`)}default:throw new Sb(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function Ir(e,t=-1){let r;return t<0&&(t=0!==(r=e[0].rank)?r:0),t===e[0].rank&&(t=-1),un(e,t)}function In(e,t){switch(e.rank){case 1:return ua([e,t]);case 2:return ui([e,t],0);case 3:return us([e,t],0);case 4:return uo([e,t],0);default:throw new Sb(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function Ia(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Sb(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return uM(e,t)}function Ii(e,t=0,r=1,n,a){return pu(e,t,r,n,a)}function Is(e,t,r,n){if(e.rank<2||t.rank<2)throw new Sx(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Sx(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return uP.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:n?Il(e.rank,n,S8()):null,activation:r});{let a=e.shape.slice();e=s9(e,[-1,a.pop()]);let i=t.shape.slice(),s=i.pop(),o=i.pop(),l=[...i,s],u=Array.from({length:t.rank},(e,r)=>0===r?t.rank-2:r<=t.rank-2?r-1:r);t=s9(p8(t,u),[o,-1]);let h=[...a,...l];return s9(uP.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:n?Il(e.rank,n,S8()):null,activation:r}),h)}}function Io(e,t,r){return aH(()=>uj(e,t=Array.isArray(t)?pV(t,"int32"):sl(t,"int32"),r))}function Il(e,t,r){let n=t.shape;if(1!==t.rank&&t.rank!==e)throw new Sb(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===r)if(1===n.length)return s9(t,[1,n[0],1,1,1]);else return s9(t,[1,n[3],n[0],n[1],n[2]]);else if("channelsLast"===r)if(1===n.length)return s9(t,[1,1,1,1,n[0]]);else return s9(t,[1].concat(n))}else if(4===e){if("channelsFirst"===r)if(1===n.length)return s9(t,[1,n[0],1,1]);else return s9(t,[1,n[2],n[0],n[1]]);else if("channelsLast"===r)if(1===n.length)return s9(t,[1,1,1,n[0]]);else return s9(t,[1].concat(n))}else if(3===e){if("channelsFirst"===r)if(1===n.length)return s9(t,[1,n[0],1]);else return s9(t,[1,n[1],n[0]]);else if("channelsLast"===r)if(1===n.length)return s9(t,[1,1,n[0]]);else return s9(t,[1].concat(n))}else if(e<3)return t;throw new Sb(`Unsupported input rank by biasAdd: ${t.rank}`)}function Iu(e,t,r){return aH(()=>(null==r&&(r=S8()),SK(r),sp(e,Il(e.rank,t,r))))}function Ih(e,t,r=!1){return r?e():t()}const Ip=["fanIn","fanOut","fanAvg"],Id=["normal","uniform","truncatedNormal"];class Ic extends sv.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class If extends Ic{apply(e,t){return hK(e,t)}}If.className="Zeros",sv.registerClass(If);class Im extends Ic{apply(e,t){return hq(e,t)}}Im.className="Ones",sv.registerClass(Im);class Ig extends Ic{constructor(e){if(super(),"object"!=typeof e)throw new Sb(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Sb(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return aH(()=>sf(sx(this.value),hq(e,t)))}getConfig(){return{value:this.value}}}Ig.className="Constant",sv.registerClass(Ig);class Iy extends Ic{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return uR(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Iy.className="RandomUniform",sv.registerClass(Iy);class Ib extends Ic{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Sx(`randomNormal does not support dType ${t}.`);return Ii(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ib.className="RandomNormal",sv.registerClass(Ib);class Ix extends Ic{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Sx(`truncatedNormal does not support dType ${t}.`);return pY(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ix.className="TruncatedNormal",sv.registerClass(Ix);class Iv extends Ic{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return aH(()=>{if(2===e.length&&e[0]===e[1])return sf(this.gain,uz(e[0]));throw new Sb("Identity matrix initializer can only be used for 2D square matrices.")})}getConfig(){return{gain:this.gain}}}Iv.className="Identity",sv.registerClass(Iv);class Iw extends Ic{constructor(e){if(super(),e.scale<0)throw new Sb(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,SD(Ip,"FanMode",this.mode),this.distribution=null==e.distribution?"normal":e.distribution,SD(Id,"Distribution",this.distribution),this.seed=e.seed}apply(e,t){let r=function(e,t="channelsLast"){let r,n;if(SK(t),2===e.length)r=e[0],n=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){let t=S2(e,2);r=e[1]*t,n=e[0]*t}else if("channelsLast"===t){let t=S2(e,0,e.length-2);r=e[e.length-2]*t,n=e[e.length-1]*t}}else{let t=S2(e);r=Math.sqrt(t),n=Math.sqrt(t)}return[r,n]}(e),n=r[0],a=r[1],i=this.scale;if("fanIn"===this.mode?i/=Math.max(1,n):"fanOut"===this.mode?i/=Math.max(1,a):i/=Math.max(1,(n+a)/2),"normal"===this.distribution){let r=Math.sqrt(i);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Sx(`${this.getClassName()} does not support dType ${t}.`);return pY(e,0,r,t,this.seed)}{let r=Math.sqrt(3*i);return uR(e,-r,r,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Iw.className="VarianceScaling",sv.registerClass(Iw);class Ik extends Iw{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Iw.className}}Ik.className="GlorotUniform",sv.registerClass(Ik);class IS extends Iw{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Iw.className}}IS.className="GlorotNormal",sv.registerClass(IS);class II extends Iw{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Iw.className}}II.className="HeNormal",sv.registerClass(II);class IC extends Iw{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Iw.className}}IC.className="HeUniform",sv.registerClass(IC);class IN extends Iw{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Iw.className}}IN.className="LeCunNormal",sv.registerClass(IN);class IT extends Iw{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Iw.className}}IT.className="LeCunUniform",sv.registerClass(IT);class I$ extends Ic{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return aH(()=>{if(e.length<2)throw new Sx("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw TypeError(`Unsupported data type ${t}.`);let r=ny.sizeFromShape(e.slice(0,-1)),n=e[e.length-1],a=r*n;a>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${a}) elements: Slowness may result.`);let i=Ii([Math.max(n,r),Math.min(n,r)],0,1,t,this.seed),s=d7.qr(i,!1),o=s[0];return o=sf(o,s[1].flatten().stridedSlice([0],[Math.min(n,r)*Math.min(n,r)],[Math.min(n,r)+1]).sign()),r<n&&(o=o.transpose()),sf(sx(this.gain),o.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}I$.className="Orthogonal",sv.registerClass(I$);const IE={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function IR(e,t={}){return SA(e,sv.SerializationMap.getMap().classNameMap,t,"initializer")}function IA(e){if("string"==typeof e){let t=e in IE?IE[e]:e;if("GlorotNormal"===t)return new IS;{if("GlorotUniform"===t)return new Ik;if("HeNormal"===t)return new II;if("HeUniform"===t)return new IC;if("LeCunNormal"===t)return new IN;if("LeCunUniform"===t)return new IT;let e={};return e.className=t,e.config={},IR(e)}}return e instanceof Ic?e:IR(e)}function IF(e){return Array.isArray(e)&&Array.isArray(e[0])}function I_(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function ID(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Sb(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function IO(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))return e;if(1===e.length)return e[0];throw new Sb(`Expected exactly 1 Shape; got ${e.length}`)}function IM(e){let t=0;for(let r of e)0===r.shape.length?t+=1:t+=r.shape.reduce((e,t)=>e*t);return t}const Iz="Variable";class IP{constructor(e,t="float32",r=Iz,n=!0,a=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=SP++,r=null==r?Iz:r,this.originalName=SQ(r),this.name=SJ(this.originalName),this.trainable_=n,this.constraint=a,this.val=p1(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function IL(e){return e.map(e=>e.read())}function IB(e){e.forEach(e=>{e[0].write(e[1])})}class IW{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class IU{constructor(e,t,r,n,a,i,s){this.dtype=e,this.shape=t,this.sourceLayer=r,this.inputs=n,this.callArgs=a,this.outputTensorIndex=s,this.id=SP++,null!=i&&(this.originalName=SQ(i),this.name=SJ(this.originalName)),this.rank=t.length}}let IV=0;class IG{constructor(e,t){for(let r of(this.callArgs=t,this.id=IV++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes,e.inboundLayers))null!=r&&r.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){let e=[];for(let t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let IH=0;class Ij extends sv.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=IH++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){let e=this.getClassName();t=ST(e)+"_"+SB(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let r=null;null!=e.batchSize&&(r=e.batchSize),t=[r].concat(e.inputShape)}this.batchInputShape=t;let r=e.dtype;null==r&&(r=e.inputDType),null==r&&(r="float32"),this.dtype=r}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Sy(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Sb(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return SC(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return SC(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Sg(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Sg(`Layer ${this.name} is not connected, no input to return.`);return SC(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Sg(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Sg(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return SC(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){let t=SN(e);if(null==this.inputSpec||0===this.inputSpec.length)return;let r=SN(this.inputSpec);if(t.length!==r.length)throw new Sb(`Layer ${this.name} expects ${r.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let e=0;e<t.length;e++){let n=t[e],a=r[e];if(null==a)continue;let i=n.rank;if(null!=a.ndim&&i!==a.ndim)throw new Sb(`Input ${e} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${i}`);if(null!=a.maxNDim&&i>a.maxNDim)throw new Sb(`Input ${e} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${i}`);if(null!=a.minNDim&&i<a.minNDim)throw new Sb(`Input ${e} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${i}.`);if(null!=a.dtype&&n.dtype!==a.dtype)throw new Sb(`Input ${e} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${n.dtype}.`);if(a.axes){let t=n.shape;for(let r in a.axes){let n=Number(r),i=a.axes[r],s=n>=0?t[n]:t[t.length+n];if(null!=i&&-1===[i,null].indexOf(s))throw new Sb(`Input ${e} is incompatible with layer ${this.name}: expected axis ${n} of input shape to have value ${i} but got shape ${t}.`)}}if(null!=a.shape)for(let t=0;t<a.shape.length;++t){let r=a.shape[t],i=n.shape[t];if(null!=r&&null!=i&&r!==i)throw new Sb(`Input ${e} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${n.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();let r=SN(e),n=function(e){let t=!0;for(let r of SN(e))if(!(r instanceof IU)){t=!1;break}return t}(e),a=function(e){let t=!0;for(let r of SN(e))if(r instanceof IU){t=!1;break}return t}(e);if(n===a)throw new Sb("Arguments to apply() must be all SymbolicTensors or all Tensors");return SZ(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);let t=[];for(let r of SN(e))t.push(r.shape);this.build(SC(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let n=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,n);let a=SN(n),i=[];for(let e of a)-1!==r.indexOf(e)&&(e=e.clone()),i.push(e);if(n=SC(i),null!=this.activityRegularizer)throw new Sx("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return n}{let r,n=function(e){e=SN(e);let t=[];for(let r of e)t.push(r.shape);return SC(t)}(e),a=this.computeOutputShape(n),i="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=a&&a.length>0&&Array.isArray(a[0])?a.map((r,n)=>new IU(i,r,this,SN(e),t,this.name,n)):new IU(i,a,this,SN(e),t,this.name),this.addInboundNode(e,r,null,null,n,a,t),this._refCount++,null!=this.activityRegularizer)throw new Sx("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((r,n)=>{null!=r&&null!=e[n]&&e[n]!==r&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Sg(`The layer ${this.name} has never been called and thus has no defined output shape.`);let e=[];for(let t of this.inboundNodes){let r=JSON.stringify(t.outputShapes);-1===e.indexOf(r)&&e.push(r)}if(1===e.length){let e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Sg(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Sy(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return IM(this.weights)}build(e){this.built=!0}getWeights(e=!1){return IL(e?this.trainableWeights:this.weights)}setWeights(e){aH(()=>{let t=this.weights;if(t.length!==e.length)throw new Sb(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;let r=[],n=IL(t);for(let a=0;a<n.length;++a){let i=n[a],s=t[a],o=e[a];if(!ny.arraysEqual(i.shape,o.shape))throw new Sb(`Layer weight shape ${i.shape} not compatible with provided weight shape ${o.shape}`);r.push([s,o])}IB(r)})}addWeight(e,t,r,n,a,i,s,o){if(-1!==this._addedWeightNames.indexOf(e))throw new Sb(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==r&&(r="float32"),this.fastWeightInitDuringBuild&&(n=null!=o?o():IA("zeros"));let l=n.apply(t,r),u=new IP(l,r,e,i,s);return l.dispose(),null!=a&&this.addLoss(()=>a.apply(u.read())),null==i&&(i=!0),i?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=SN(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t)if(Array.isArray(t))t.forEach(e=>{if(null!=e)throw TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return t}setMaskMetadata(e,t,r){if(!this.supportsMasking)return;let n=this.computeMask(e,r),a=SN(t),i=SN(n);if(a.length!==i.length)throw Error(`${this.name} outputs ${a.length} tensors but ${a.length} masks for those tensors`);for(let e=0;e<a.length;e++)a[e].kerasMask=i[e]}addInboundNode(e,t,r,n,a,i,s=null){let o=SN(e);t=SN(t),r=SN(r),n=SN(n),a=I_(a),i=I_(i);let l=[],u=[],h=[];for(let e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),h.push(e.tensorIndex);new IG({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:h,inputTensors:o,outputTensors:t,inputMasks:r,outputMasks:n,inputShapes:a,outputShapes:i},s);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){let e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}class IK extends Ij{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:SB("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Sb("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t)if(null==e.inputShape)throw new Sb("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");else t=[e.batchSize].concat(e.inputShape);else if(null!=e.batchSize)throw new Sb("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let r=e.dtype||"float32";this.batchInputShape=t,this.dtype=r,this.inputSpec=[{shape:t}];let n=new IU(this.dtype,this.batchInputShape,this,[],{},this.name);n.nodeIndex=0,n.tensorIndex=0,new IG({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[n],outputTensors:[n],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Sb(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}IK.className="InputLayer",sv.registerClass(IK);class Iq{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Iq)for(let t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(let t of e)this.add(t.key,t.value)}}add(e,t,r){if(null==this.id2Value[e.id])this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return sl(t,e.dtype)}catch(r){throw new Sb(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=r&&(this.id2Mask[e.id]=r);else throw new Sb(`Duplicate key: name=${e.name}, id=${e.id}`);return this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof IU)if(null!=this.id2Value[e.id])return this.id2Value[e.id];else throw new Sb(`Nonexistent key: ${e.name}`);{let t=this.name2Id[e];if(null==t)throw new Sb(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof IU)if(null!=this.id2Value[e.id])return this.id2Mask[e.id];else throw new Sb(`Nonexistent key: ${e.name}`);{let t=this.name2Id[e];if(null==t)throw new Sb(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&aj(this.id2Mask)}}const IX=new Sw,IY=new Sw;function IZ(e,t,r,n){let a,i=null!=r&&r.training,s=Array.isArray(e),o=s?e:[e],l=o.map(e=>e.name),u=[],h=t.names();for(let e of l)-1!==h.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=n&&(n.maxNumTensors=-1/0,n.minNumTensors=1/0);let p=l.join(",")+"|"+t.names().sort().join(","),d=IX.get(p);if(null==d){let e=function(e,t){ny.assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let r=[],n={};if(1===e.length){let a=IQ(e[0],t);r=a.sorted,n=a.recipientMap}else{let a=new Set;for(let i of e){let{sorted:e,recipientMap:s}=IQ(i,t);for(let t of e)a.has(t.name)||(r.push(t),a.add(t.name));for(let e in s)null==n[e]&&(n[e]=new Set),s[e].forEach(t=>n[e].add(t))}}return{sorted:r,recipientCounts:function(e){let t={};for(let r in e)t[r]=e[r].size;return t}(n)}}(o,t);d=e.sorted,a=e.recipientCounts,IX.put(p,d),IY.put(p,a)}a={},i||Object.assign(a,IY.get(p));let c=new Iq(t);for(let e=0;e<d.length;++e){if(null!=n){let e=aG().numTensors;e>n.maxNumTensors&&(n.maxNumTensors=e),e<n.minNumTensors&&(n.minNumTensors=e)}let s=d[e],o=s.sourceLayer;if(o instanceof IK)continue;let h=[],p=[],f=[],m=!1;for(let e of s.inputs){let r=c.getValue(e),n=c.getMask(e);h.push(r),p.push(n),null!=n&&(m=!0),!i&&(a[e.name]--,0!==a[e.name]||t.hasKey(e)||-1!==l.indexOf(e.name)||r.isDisposed||!0===e.sourceLayer.stateful||f.push(r))}m&&((r=r||{}).mask=p[0]);let g=SN(o.apply(h,r)),y=null;o.supportsMasking&&(y=o.computeMask(h,p));let b=function(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let r=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(let n of e.sourceLayer.inboundNodes[t].outputTensors)if(n.id===e.id){r=t;break}t=e.sourceLayer.getOutputAt(r)}return t}(s),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){c.hasKey(x[e])||c.add(x[e],g[e],Array.isArray(y)?y[0]:y);let t=l.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}i||aj(f)}return c.disposeMasks(),s?u:u[0]}function IQ(e,t){let r=new Set,n=[],a={};for(let e of t.names())r.add(e);let i=[],s=[];for(i.push(e);i.length>0;){let e=i[i.length-1];if(r.has(e.name)){i.pop();continue}let t=s[s.length-1]===i.length-1;if(0===e.inputs.length||t)i.pop(),n.push(e),r.add(e.name),t&&s.pop();else for(let t of(s.push(i.length-1),e.inputs))null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),r.has(t.name)||i.push(t)}return{sorted:n,recipientMap:a}}function IJ(e,t){return aH(()=>sm(oS(sf(e,e),t,!0)))}e_.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function(e){null!=IX&&IX.setMaxEntries(e),null!=IY&&IY.setMaxEntries(e)});class I0 extends sv.Serializable{getConfig(){return{}}}class I1 extends I0{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return aH(()=>{let t=IJ(e,this.axis);return sf(e,sc(ur(t,0,this.maxValue),sp(S5(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}I1.className="MaxNorm",sv.registerClass(I1);class I2 extends I0{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return aH(()=>sc(e,sp(S5(),IJ(e,this.axis))))}getConfig(){return{axis:this.axis}}}I2.className="UnitNorm",sv.registerClass(I2);class I3 extends I0{apply(e){return ox(e)}}I3.className="NonNeg",sv.registerClass(I3);class I4 extends I0{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return aH(()=>{let t=IJ(e,this.axis),r=sp(sf(this.rate,ur(t,this.minValue,this.maxValue)),sf(1-this.rate,t));return sf(e,sc(r,sp(S5(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}I4.className="MinMaxNorm",sv.registerClass(I4);const I6={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function I5(e,t={}){return SA(e,sv.SerializationMap.getMap().classNameMap,t,"constraint")}function I8(e){return null==e?null:"string"==typeof e?I5({className:e in I6?I6[e]:e,config:{}}):e instanceof I0?e:I5(e)}async function I7(e){if(null==e)return;let t=[],r=[],n=[];for(let a in e){let i=e[a];"number"!=typeof i&&(t.push(i.data()),r.push(a),n.push(i))}if(t.length>0){let a=await Promise.all(t);for(let t=0;t<a.length;++t)e[r[t]]=a[t][0];aj(n)}}function I9(e){if(null!=e)for(let t in e){let r=e[t];"number"!=typeof r&&r.dispose()}}(c=x||(x={}))[c.SILENT=0]="SILENT",c[c.VERBOSE=1]="VERBOSE";class Ce{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Ct{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(let t of this.callbacks)t.setParams(e)}setModel(e){for(let t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){for(let r of(null==t&&(t={}),this.callbacks))await r.onEpochBegin(e,t)}async onEpochEnd(e,t){for(let r of(null==t&&(t={}),this.callbacks))await r.onEpochEnd(e,t)}async onBatchBegin(e,t){for(let r of(null==t&&(t={}),this.callbacks))await r.onBatchBegin(e,t)}async onBatchEnd(e,t){for(let r of(null==t&&(t={}),this.callbacks))await r.onBatchEnd(e,t)}async onTrainBegin(e){for(let t of(null==e&&(e={}),this.callbacks))await t.onTrainBegin(e)}async onTrainEnd(e){for(let t of(null==e&&(e={}),this.callbacks))await t.onTrainEnd(e)}}class Cr extends Ce{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});let r=null==t.size?0:t.size;for(let e in this.seen+=r,t){let n=t[e];if("number"==typeof n)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+n*r;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;let a=aH(()=>sp(this.totals[e],sf(n,r)));this.totals[e]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(let e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:aH(()=>{let r=sf(sc(1,this.seen),this.totals[e]);t[e]=r,this.totals[e].dispose(),aK(t[e])}))}}class Cn extends Ce{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){for(let r in null==t&&(t={}),this.epoch.push(e),t)null==this.history[r]&&(this.history[r]=[]),this.history[r].push(t[r])}async syncData(){let e=[],t=[],r=[];for(let n in this.history){let a=this.history[n];for(let i=0;i<a.length;++i)if("number"!=typeof a[i]){let s=a[i];e.push(s.data()),t.push(n),r.push(i)}}let n=await Promise.all(e);for(let e=0;e<n.length;++e)this.history[t[e]][r[e]].dispose(),this.history[t[e]][r[e]]=n[e][0]}}class Ca extends Ce{constructor(e,t){var r,n,a;let i,s;if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||cC,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");ny.isNumber(this.yieldEvery)&&(this.maybeWait=(r=this.maybeWait.bind(this),n=this.yieldEvery,s=null!=(a=this.nowFunc)?a():ny.now(),(...e)=>{let t=null!=a?a():ny.now();return t-s<n?i:(s=t,i=r(...e))})),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,r){let n=[];null!=this.yield&&(await I7(r),n.push(this.yield(e,t,r))),n.push(this.nextFrameFunc()),await Promise.all(n)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await I7(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){let r=[];null!=this.epochEnd&&(await I7(t),r.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&r.push(this.nextFrameFunc()),await Promise.all(r)}async onBatchBegin(e,t){null!=this.batchBegin&&(await I7(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){let r=[];null!=this.batchEnd&&(await I7(t),r.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?r.push(this.nextFrameFunc()):ny.isNumber(this.yieldEvery)&&r.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(r)}async onTrainBegin(e){null!=this.trainBegin&&(await I7(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await I7(e),await this.trainEnd(e))}}function Ci(e,t){return(null==e&&(e={}),e instanceof Ce)?[e]:Array.isArray(e)&&e[0]instanceof Ce?e:SN(e).map(e=>new Ca(e,t))}class Cs{constructor(){}static registerCallbackConstructor(e,t){ny.assert(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),Cs.checkForDuplicate(t),null==Cs.constructors[e]&&(Cs.constructors[e]=[]),Cs.constructors[e].push(t)}static checkForDuplicate(e){for(let t in Cs.constructors)Cs.constructors[+t].forEach(t=>{if(t===e)throw new Sb("Duplicate callback constructor.")})}static clear(){Cs.constructors={}}static createCallbacks(e){let t=[];for(let r in Cs.constructors){let n=+r;e>=n&&t.push(...Cs.constructors[n])}return t.map(e=>new e)}}function Co(e,t,r,n,a,i,s,o,l){let u=new Cn,h=[new Cr,...Cs.createCallbacks(t)];null!=e&&h.push(...e),h.push(u);let p=new Ct(h);return p.setParams({epochs:r,initialEpoch:n,samples:a,steps:i,batchSize:s,verbose:t,doValidation:o,metrics:l}),{callbackList:p,history:u}}function Cl(e,t={},r=!1){return SA(e,sv.SerializationMap.getMap().classNameMap,t,"layer",r)}function Cu(e,t){return aH(()=>{var r;"float32"!==e.dtype&&(e=sl(e,"float32"));let n=oS(sf(r=e,r),t,!0),a=sE(n.shape,S5()),i=sm(sL(n,a));return sc(e,i)})}function Ch(e,t){return aH(()=>{var r;return hj(sf(r=sF(t,e),r),-1)})}function Cp(e,t){return aH(()=>hj(sD(sF(t,e)),-1))}function Cd(e,t){return aH(()=>{let r=sF(e,t),n=ur(sD(e),S5(),Number.MAX_VALUE);return sf(100,hj(sD(sc(r,n)),-1))})}function Cc(e,t,r=!1){return aH(()=>{if(r)t=pF(t);else{let e=oS(t,t.shape.length-1,!0);t=sc(t,e)}return t=ur(t,S5(),1-S5()),hA(oS(sf(sl(e,"float32"),hE(t)),t.shape.length-1))})}function Cf(e,t,r=!1){return aH(()=>{let n=sl(ub(function(e){let t=[S2(e.shape)];return s9(e,t)}(e)),"int32"),a=(t=ur(t,S5(),1-S5())).shape;return Cc(s9(h3(n,a[a.length-1]),a),t,r)})}function Cm(e,t){return aH(()=>{let r;return hj(function(e,t){if(!ny.arraysEqual(e.shape,t.shape))throw new Sb(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return aH(()=>{let r=ox(t),n=hA(sD(t));return sp(sF(r,sf(t,e)),hR(uD(n)))})}(e,r=hE(sc(r=ur(t,S5(),1-S5()),sF(1,r)))),-1)})}function Cg(e,t){return aH(()=>hA(oS(sf(Cu(e,-1),Cu(t,-1)),-1)))}Cs.constructors={};const Cy={meanSquaredError:Ch,meanAbsoluteError:Cp,meanAbsolutePercentageError:Cd,meanSquaredLogarithmicError:function(e,t){return aH(()=>{var r;return hj(sf(r=sF(hE(sp(1,ur(t,S5(),Number.MAX_VALUE))),hE(sp(1,ur(e,S5(),Number.MAX_VALUE)))),r),-1)})},squaredHinge:function(e,t){return aH(()=>{let r=sL(0,sF(1,sf(e,t)));return hj(sf(r,r),-1)})},hinge:function(e,t){return aH(()=>hj(sL(0,sF(1,sf(e,t))),-1))},categoricalHinge:function(e,t){return aH(()=>{let r=oS(sf(e,t),-1),n=hg(sf(sF(1,e),t),-1);return sL(0,sp(1,sF(n,r)))})},logcosh:function(e,t){return aH(()=>{let r=Math.log(2),n=sF(t,e);return hj(sF(sp(n,hF(sf(-2,n))),r),-1)})},categoricalCrossentropy:Cc,sparseCategoricalCrossentropy:Cf,binaryCrossentropy:Cm,kullbackLeiblerDivergence:function(e,t){return aH(()=>{let r=ur(e,S5(),1);return oS(sf(e,hE(sc(r,ur(t,S5(),1)))),-1)})},poisson:function(e,t){return aH(()=>{let r=hE(sp(S5(),t));return hj(sF(t,sf(e,r)),-1)})},cosineProximity:Cg};function Cb(e){if("string"!=typeof e)return e;{if(e in Cy)return Cy[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Sb(t)}}function Cx(e,t){return aH(()=>{let r=sf(.5,h4(t)),n=sl(uK(t,r),e.dtype);return hj(uF(e,n),-1)})}function Cv(e,t){return aH(()=>sl(uF(sj(e,-1),sj(t,-1)),"float32"))}function Cw(e,t){return Cm(e,t)}function Ck(e,t){return e.rank===t.rank&&(e=pL(e,[e.rank-1])),(t=sj(t,-1)).dtype!==e.dtype&&(t=sl(t,e.dtype)),sl(uF(e,t),"float32")}const CS={binaryAccuracy:Cx,categoricalAccuracy:Cv,precision:function(e,t){return aH(()=>{let r=aH(()=>sl(oS(hM(uF(e,1),uF(t,1))),"float32")),n=sp(r,aH(()=>sl(oS(hM(uF(e,0),uF(t,1))),"float32")));return sl(hh(uK(n,0),sc(r,n),0),"float32")})},categoricalCrossentropy:Cc,sparseCategoricalCrossentropy:Cf,mse:Ch,MSE:Ch,mae:Cp,MAE:Cp,mape:Cd,MAPE:Cd,cosine:Cg};function CI(e){if(SS(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(let r of Object.keys(Cy))if(Cy[r]===e){t=r;break}if(void 0!==t)return t;for(let r of Object.keys(CS))if(CS[r]===e){t=r;break}return void 0!==t?t:e.name}}function CC(e,t,r=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!function e(t){if(null===t)return!0;if("object"==typeof t)if(Object.getPrototypeOf(t)===Object.prototype){for(let r of Object.keys(t))if("string"!=typeof r||!e(t[r]))return!1;return!0}else{if(!Array.isArray(t))return!1;for(let r of t)if(!e(r))return!1;return!0}{let e=typeof t;return"string"===e||"number"===e||"boolean"===e}}(e))throw Error("User-defined metadata is expected to be a JSON object, but is not.");if(r){let r=JSON.stringify(e);r.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${r.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function CN(e,t,r=console.log){let n="";for(let r=0;r<e.length;++r)r>0&&(n=n.slice(0,n.length-1)+" "),n+=e[r],n=n.slice(0,t[r]),n+=" ".repeat(t[r]-n.length);r(n)}function CT(e,t,r){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof r}const C$="4.22.0";class CE extends Ij{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){let e=this.getClassName().toLowerCase();this.name=SB(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],S_(this.inputs).length!==this.inputs.length)throw new Sb(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(e=>e.name)}`);for(let e of(S_(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(e=>e.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[],this.outputs)){let t=e.sourceLayer,r=e.nodeIndex,n=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(r),this.outputLayersTensorIndices.push(n)}for(let e of this.inputs){let t=e.sourceLayer,r=e.nodeIndex,n=e.tensorIndex;SS(0===r,"input layer has >1 nodes"),SS(0===n,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(r),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){let r=this.inputLayers[t];if(!(r instanceof IK))throw TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${r.getClassName()}.`);this.inputNames.push(r.name),this.feedInputShapes.push(r.batchInputShape),this.feedInputNames.push(r.name)}for(let e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);let t={},r={},n={},a={},i={},s=[],o=(e,t,r,n,a,l)=>{(null==n||null==a||null==l)&&(n=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);let u=n.inboundNodes[a];if(-1!==r.indexOf(u))throw new Sy(`The tensor ${e.name} at layer "${n.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(CE.nodeKey(n,a)),n.id in i||(i[n.id]=Object.keys(i).length),-1===r.indexOf(u)&&r.push(u);let h=u.inboundLayers.length;for(let e=0;e<h;e++){let n=u.inputTensors[e],a=u.inboundLayers[e];o(n,t,r,a,u.nodeIndices[e],u.tensorIndices[e])}for(t.push(u);r.indexOf(u)>=0;)r.splice(r.indexOf(u),1);s.push(u)},l=[],u=[];for(let e of this.outputs)o(e,l,u);for(let e of s.slice().reverse()){r[e.id]=e,e.id in t||(t[e.id]=0);let i=t[e.id];i=Math.max(i,null==n[e.outboundLayer.id]?0:n[e.outboundLayer.id]),n[e.outboundLayer.id]=i,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=i;for(let n=0;n<e.inboundLayers.length;n++){let a=e.inboundLayers[n],s=e.nodeIndices[n],o=a.inboundNodes[s],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(i+1,l),r[o.id]=o}}let h={};for(let e in t){let n=t[e];n in h||(h[n]=[]),h[n].push(r[e])}let p={};for(let e in n){let t=n[e];t in p||(p[t]=[]),p[t].push(a[e])}let d=Object.keys(p).map(e=>parseInt(e,10)).sort(SF);for(let e of(this.layers=[],d)){let t=p[e];for(let e of(t.sort((e,t)=>{let r=i[e.id],n=i[t.id];return r<n?-1:+(r>n)}),t))e instanceof CE&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map(e=>parseInt(e,10)).sort(SF);let c=this.inputs.slice(),f=[];for(let e of d)for(let t of h[e]){let e=t.outboundLayer;if(null!=e){for(let r of t.inputTensors)if(-1===c.indexOf(r))throw new Sy(`Graph disconnected: cannot obtain value for tensor ${r} at layer "${e.name}". The following previous layers were accessed without issue: ${f}`);for(let e of t.outputTensors)c.push(e);f.push(e.name)}}this.nodesByDepth=h;let m=this.layers.map(e=>e.name);for(let e of m){let t=m.filter(t=>t===e).length;if(1!==t)throw new Sy(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(m))}this.outboundNodes=[],this.inboundNodes=[],new IG({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();let e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(let t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(let t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Sb("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(let t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){let r={},n=0,a=(e=>{let t=Object.keys(e);if(0===t.length)return!1;let r=t[0].split("/");return!isNaN(parseInt(r[r.length-1],10))})(e);for(let t of(a&&this.parseWeights(e),this.layers))for(let[e,i]of t.weights.entries()){let t=a?`${i.name.split("/").slice(0,-1).join("/")+"/"}${e}`:i.originalName;if(null!=r[t])throw new Sb(`Duplicate weight name: ${t}`);r[t]=i,n++}let i=[];for(let n in e){let a=n;if(null==r[n]){let e=n.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=r[a])i.push([r[a],e[n]]);else if(t)throw new Sb(`Provided weight data has no target variable: ${n}`);delete r[a]}if(t){let e=[];for(let t in r)e.push(t);if(e.length>0)throw new Sb(`${e.length} of ${n} weights are not set: ${e}`)}IB(i)}parseWeights(e){for(let t in Object.keys(e)){let r=t.split("/"),n=["vars","layer_checkpoint_dependencies"],a=r.map(e=>e.startsWith("_")?e.slice(1):e).filter(e=>!n.includes(e)).join("/");a!==t&&(e[a]=e[t],delete e[t])}}updatedConfig(){let e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${C$}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){let r=function e(t,r){if(null==t)return null;if("string"==typeof t)return ST(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){let n=[],a=t.length;for(let i=0;i<a;++i){let a=t[i];CT(r,i,a)?n.push(a):n.push(e(a,r))}return n}{let r={};for(let n of Object.keys(t)){let a=t[n],i=ST(n);("name"===n||"className"===n)&&"string"==typeof a?r[i]=a:r[i]=e(a,n)}return r}}(this.updatedConfig());return t?JSON.stringify(r):r}call(e,t){return aH(()=>{e=SN(e);let r=new Iq;for(let t=0;t<this.inputs.length;++t)r.add(this.inputs[t],e[t]);return IZ(this.outputs,r,t)})}computeMask(e,t){return aH(()=>{let r;return e=SN(e),r=null==t?Sk(null,e.length):SN(t),this.runInternalGraph(e,r)[1]})}computeOutputShape(e){let t=I_(e);if(t.length!==this.inputLayers.length)throw new Sb(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);let r={};for(let e=0;e<t.length;e++){let n=this.inputLayers[e],a=t[e];r[n.name+"_0_0"]=a}let n=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(SF);if(n.length>1)for(let e of n)for(let t of this.nodesByDepth[e]){let e=t.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(e.id))continue;let n=[];for(let e=0;e<t.inboundLayers.length;e++){let a=t.inboundLayers[e],i=t.nodeIndices[e],s=t.tensorIndices[e],o=r[`${a.name}_${i}_${s}`];n.push(o)}let a=I_(e.computeOutputShape(SC(n))),i=e.inboundNodes.indexOf(t);for(let t=0;t<a.length;t++)r[`${e.name}_${i}_${t}`]=a[t]}let a=[],i=[];for(let e=0;e<this.outputLayers.length;e++){let t=this.outputLayers[e],r=this.outputLayersNodeIndices[e],n=this.outputLayersTensorIndices[e],a=`${t.name}_${r}_${n}`;i.push(a)}for(let e=0;e<i.length;e++){let t=i[e];SS(t in r),a.push(r[t])}return SC(a)}runInternalGraph(e,t){null==t&&(t=Sk(null,e.length));let r={};for(let n=0;n<this.inputs.length;++n){let a=this.inputs[n],i=e[n],s=t[n];r[a.id]=[i,s]}for(let e of Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(SF))for(let t of this.nodesByDepth[e]){let e=t.outboundLayer,n=t.inputTensors,a=t.outputTensors,i=[];for(let e of n)e.id in r&&i.push(r[e.id]);if(i.length===n.length){let n,s,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===i.length){let[t,r]=i[0];null==u.mask&&(u.mask=r),o=SN(e.call(t,u)),l=SN(e.computeMask(t,r)),n=[t],s=[r]}else n=i.map(e=>e[0]),s=i.map(e=>e[1]),null==u.mask&&(u.mask=s),o=SN(e.call(n,u)),l=SN(e.computeMask(n,s));if(e.activityRegularizer)throw new Sx("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){let t=a[e],n=o[e],i=l[e];r[t.id]=[n,i]}}}let n=[],a=[],i=[];for(let e of this.outputs){SS(e.id in r,`Could not compute output ${e.name} : ${e.id}`);let[t,s]=r[e.id];i.push(t.shape),n.push(t),a.push(s)}return[n,a,i]}buildNodeConversionMap(e){let t,r={};for(let e of this.layers){t=+(e instanceof CE);for(let n=0;n<e.inboundNodes.length;n++){let a=CE.nodeKey(e,n);this.containerNodes.has(a)&&(r[a]=t,t+=1)}}return r}getLayer(e,t){if(null!=t)return this.findLayer(t);if(null==e)throw new Sb("Provide either a layer name or layer index");if("number"==typeof e)return this.findLayer(e);for(let t of this.layers)if(t.name===e)return t;throw new Sb(`No such layer: ${e}`)}findLayer(e){if(!(this.layers.length<=e))return this.layers[e];throw new Sb(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`)}calculateLosses(){return aH(()=>{let e=[];for(let t of this.layers)for(let r=0;r<t.inboundNodes.length;++r){let n=CE.nodeKey(t,r);this.containerNodes.has(n)&&e.push(...t.calculateLosses())}return e})}getConfig(){let e={name:this.name},t=this.buildNodeConversionMap(this.layers),r=[];for(let e of this.layers){let n=e.getClassName(),a=e.getConfig(),i=[];for(let r=0;r<e.inboundNodes.length;r++){let n=e.inboundNodes[r],a=CE.nodeKey(e,r),s={};if(this.containerNodes.has(a)){if(n.callArgs)try{JSON.stringify(n.callArgs),s=n.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${n.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),s={}}if(n.inboundLayers.length>0){let e=[];for(let r=0;r<n.inboundLayers.length;r++){let a=n.inboundLayers[r],i=n.nodeIndices[r],o=n.tensorIndices[r],l=t[CE.nodeKey(a,i)];null==l&&(l=0),e.push([a.name,l,o,s])}i.push(e)}}}let s={};s.name=e.name,s.className=n,s.config=a,s.inboundNodes=i,r.push(s)}e.layers=r;let n=[];for(let e=0;e<this.inputLayers.length;e++){let r=this.inputLayers[e],a=this.inputLayersNodeIndices[e],i=CE.nodeKey(r,a);if(!this.containerNodes.has(i))continue;let s=t[i];null==s&&(s=0);let o=this.inputLayersTensorIndices[e];n.push([r.name,s,o])}e.inputLayers=n;let a=[];for(let e=0;e<this.outputLayers.length;e++){let r=this.outputLayers[e],n=this.outputLayersNodeIndices[e],i=CE.nodeKey(r,n);if(!this.containerNodes.has(i))continue;let s=t[i];null==s&&(s=0);let o=this.outputLayersTensorIndices[e];a.push([r.name,s,o])}return e.outputLayers=a,e}static fromConfig(e,t,r={},n=!1){let a={},i={};function s(e,t){e.name in i?i[e.name].push(t):i[e.name]=[t]}let o=t.name,l=t.layers;for(let e of l){let r=e.name,i=Cl(e,null!=t.customObjects?t.customObjects:{});i.setFastWeightInitDuringBuild(n),a[r]=i,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new Sb(`Corrupted configuration, expected array for nodeData: ${e}`);s(i,e)})}for(;!function(e){if(null==e)throw new Sb(`Invalid value in obj: ${JSON.stringify(e)}`);for(let t in e)if(e.hasOwnProperty(t))return!1;return!0}(i);)for(let e of l){let t=a[e.name];if(t.name in i){let e=i[t.name];for(let r of(delete i[t.name],e))!function(e,t){let r,n=[];for(let i of t){let o=i[0],l=i[1],u=i[2];if(r=null==i[3]?{}:i[3],!(o in a))return void s(e,t);let h=a[o];if(h.inboundNodes.length<=l)return void s(e,t);let p=h.inboundNodes[l];n.push(p.outputTensors[u])}n.length>0&&e.apply(SC(n),r)}(t,r)}}let u=[],h=[];for(let e of t.inputLayers){let t=e[0],r=e[1],n=e[2];SS(t in a);let i=a[t].inboundNodes[r].outputTensors;u.push(i[n])}for(let e of t.outputLayers){let t=e[0],r=e[1],n=e[2];SS(t in a);let i=a[t].inboundNodes[r].outputTensors;h.push(i[n])}return new e({inputs:u,outputs:h,name:o})}get stateful(){if(this._stateful)throw new Sb("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let e of this.layers)if(e.stateful)return!0;return!1}resetStates(){aH(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function CR(e,t){var r="classWeight";let n=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===n)if(Array.isArray(e)&&1===e.length)return e;else if("object"==typeof e&&t[0]in e)return[e[t[0]]];else return[e];if(Array.isArray(e)){if(e.length!==n)throw Error(`Provided ${r} is an array of ${e.length} element(s), but the model has ${n} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){let r=[];return t.forEach(t=>{t in e?r.push(e[t]):r.push(null)}),r}throw Error(`The model has multiple (${n}) outputs, so ${r} must be either an array with ${n} elements or an object with ${t} keys. Provided ${r} not understood: ${JSON.stringify(e)}`)}async function CA(e,t,r,n){if(null!=t||null!=n)throw Error("Support sampleWeight is not implemented yet");if(null==r)return null;{let t=aH(()=>{if(1===e.shape.length)return su(e);if(2===e.shape.length)if(e.shape[1]>1)return sj(e,1);else if(1===e.shape[1])return s9(e,[e.shape[0]]);else throw Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);throw Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),n=Array.from(await t.data());aj(t);let a=[];return n.forEach(e=>{if(null==r[e])throw Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(r[e])}),pV(a,"float32")}}function CF(e,t){let r,n;r=t.xs,n=t.ys,ny.assert(null!=r&&null!=n,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);let a=C_("input",e.inputNames,r),i=C_("output",e.outputNames,n),s=a[0].shape[0];ny.assert(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`),ny.assert(i.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`);for(let t=0;t<a.length;t++)ny.assert(a[t].shape[0]===s,()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${s} based on input ${e.inputNames[0]}.`);for(let t=0;t<i.length;t++)ny.assert(i[t].shape[0]===s,()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${s} based on input ${e.inputNames[0]}.`);return{xs:a,ys:i}}function C_(e,t,r){if(r instanceof au)return[r];if(Array.isArray(r))return ny.assert(r.length===t.length,()=>`Received an array of ${r.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),r;{let n=[];for(let a of t){if(null==r[a])throw new Sb(`The feature data generated by the dataset lacks the required ${e} key '${a}'.`);n.push(r[a])}return n}}async function CD(e,t,r){let n=null!=r.batchesPerEpoch;if(ny.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),ny.assert(null!=r,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),ny.assert(null!=r.epochs&&r.epochs>0&&Number.isInteger(r.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${r.epochs}`),ny.assert(!n||r.batchesPerEpoch>0&&Number.isInteger(r.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${r.batchesPerEpoch}`),ny.assert(null==r.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{var a,i;let s,o,l,u,h=null!=r.validationData;if(h)if(CO(r.validationData))ny.assert(null==r.validationBatches||r.validationBatches>0&&Number.isInteger(r.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${r.validationBatches}`);else{let e=function(e){if(3===e.length)throw new Sx("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(r.validationData);s=e.xs,o=e.ys}let p=e.makeTrainFunction(),d=e.getDedupedMetricsNames();l=h?d.slice().concat(d.map(e=>"val_"+e)):d.slice();let c=Ci(r.callbacks,r.yieldEvery),f=null==r.verbose?1:r.verbose,{callbackList:m,history:g}=Co(c,f,r.epochs,null,null,(a=t,i=r,u=null,null!=i.batchesPerEpoch?u=i.batchesPerEpoch:Number.isFinite(a.size)&&(u=a.size),u),null,h,l);m.setModel(e),e.history=g,await m.onTrainBegin(),e.stopTraining_=!1;let y=null==r.initialEpoch?0:r.initialEpoch,b=await t.iterator();for(;y<r.epochs;){let a={};await m.onEpochBegin(y);let i=0,l=0;for(n||(b=await t.iterator());!n||i<r.batchesPerEpoch;){let t=await b.next();if(n&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${r.batchesPerEpoch}, but your dataset iterator ran out of data after ${i} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${r.batchesPerEpoch*r.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=t.value){let{xs:n,ys:a}=CF(e,t.value),s={};s.batch=l,s.size=n[0].shape[0],await m.onBatchBegin(l,s);let o=[];if(null!=r.classWeight){let t=CR(r.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await CA(a[e],null,t[e]))}let u=n.concat(a).concat(o),h=p(u);aj(u);for(let e=0;e<d.length;++e){let t=d[e],r=h[e];s[t]=r,aK(r)}await m.onBatchEnd(l,s),I9(s),l++,i++}if(n?i>=r.batchesPerEpoch:t.done){if(h){let t;t=CO(r.validationData)?SN(await e.evaluateDataset(r.validationData,{batches:r.validationBatches})):SN(e.evaluate(s,o,{batchSize:null==r.validationBatchSize?32:r.validationBatchSize,verbose:0}));for(let r=0;r<e.metricsNames.length;++r)a[`val_${e.metricsNames[r]}`]=t[r]}break}if(e.stopTraining_)break}if(await m.onEpochEnd(y,a),y++,e.stopTraining_)break}return await m.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function CO(e){return"function"==typeof e.iterator}async function CM(e,t,r){let n=null!=(r=r||{}).batches,a=e.testFunction,i=[];if(r.verbose>0)throw new Sx("Verbose mode is not implemented yet.");ny.assert(!n||r.batches>0&&Number.isInteger(r.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(r.batches)}`);let s="function"==typeof t.next?t:await t.iterator(),o=0,l=0;for(;!n||l<r.batches;){let t=await s.next();if(i=aH(()=>{if(t.value){let{xs:r,ys:n}=CF(e,t.value),s=r.concat(n),u=aH(()=>a(s));if(aj(s),0===l)for(let e=0;e<u.length;++e)i.push(sx(0));let h=s[0].shape[0];for(let e=0;e<u.length;++e){let t=u[e],r=i[e];i[e]=aH(()=>sp(i[e],sf(h,t))),l>0&&aj(r)}aj(u),o+=h,++l}return i}),t.done){n&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${r.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<i.length;++e){let t=i[e];i[e]=sc(i[e],o),aj(t)}return SC(i)}function Cz(e){ny.assert(e>0&&Number.isInteger(e),()=>`batchSize is required to be a positive integer, but got ${e}`)}function CP(e,t,r){return null==e?[null]:Array.isArray(e)?e.map(e=>S9(e,t,r-t)):S9(e,t,r-t)}function CL(e,t){return aH(()=>null==e?null:Array.isArray(e)?e.map(e=>CL(e,t)):Io(e,"int32"===t.dtype?t:sl(t,"int32")))}function CB(e,t){let r=[],n=0,a=null;for(;n<e;)(a=n+t)>=e&&(a=e),r.push([n,a]),n=a;return r}function CW(e){let t=[];e instanceof au&&(e=[e]);for(let r=0;r<e.length;++r){let n=e[r];if(1===n.rank)t.push(S7(n,1));else if(0===n.rank)throw Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");else t.push(n)}return t}function CU(e,t){if(null==e)return;let r=[];if(t instanceof au)r.push(t.id);else if(Array.isArray(t))t.forEach(e=>r.push(e.id));else if(null!=t)for(let e in t){let n=t[e];r.push(n.id)}let n=[];if(e instanceof au)-1===r.indexOf(e.id)&&n.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===r.indexOf(e.id)&&n.push(e)});else if(null!=e)for(let t in e){let a=e[t];-1===r.indexOf(a.id)&&n.push(a)}n.forEach(e=>{e.isDisposed||e.dispose()})}function CV(e){return Array.isArray(e)}function CG(e){return!(e instanceof au)&&!CV(e)}function CH(e,t,r,n=!0,a=""){let i;if(null==t||0===t.length){if(null!=e){let t=!1;if(CV(e)&&e.length>0)t=!0;else if(CG(e)){for(let r in e)if(e.hasOwnProperty(r)){t=!0;break}}else t=!0;if(t)throw new Sb(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map(e=>null);if(CG(e))for(let r of(i=[],t)){if(null==e[r])throw new Sb(`No data provided for "${r}". Need data for each key in: ${t}`);i.push(e[r])}else if(CV(e)){if(e.length!==t.length)throw new Sb(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);i=e}else{if(t.length>1)throw new Sb(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);i=[e]}if(i=CW(i),null!=r)for(let e=0;e<t.length;++e){if(null==r[e])continue;let s=i[e];if(s.shape.length!==r[e].length)throw new Sb(`Error when checking ${a}: expected ${t[e]} to have ${r[e].length} dimension(s). but got array with shape ${s.shape}`);for(let t=0;t<r[e].length;++t){if(0===t&&!n)continue;let i=s.shape[t],o=r[e][t];if(null!=o&&o>=0&&i!==o)throw new Sb(`${a} expected a batch of elements where each example has shape [${r[e].slice(1,r[e].length)}] (i.e.,tensor shape [*,${r[e].slice(1,r[e].length)}]) but the ${a} received an input with ${s.shape[0]} examples, each with shape [${s.shape.slice(1,s.shape.length)}] (tensor shape [${s.shape}])`)}}return i}function Cj(e,t,r,n=!0,a=""){let i;if(Array.isArray(e)){if(e.length!==t.length)throw new Sb(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);i=e}else{if(t.length>1)throw new Sb(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);i=[e]}if(null!=r)for(let e=0;e<t.length;++e){if(null==r[e])continue;let s=i[e];if(s.shape.length!==r[e].length)throw new Sb(`Error when checking ${a}: expected ${t[e]} to have ${r[e].length} dimension(s), but got array with shape ${JSON.stringify(s.shape)}`);for(let i=0;i<r[e].length;++i){if(0===i&&!n)continue;let o=s.shape[i],l=r[e][i];if(null!=l&&l!==o)throw new Sb(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(r[e])} but got array with shape ${JSON.stringify(s.shape)}.`)}}}class CK extends CE{constructor(e){super(e),this.isTraining=!1}summary(e,t,r=console.log){if(!this.built)throw new Sb("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,r,n=console.log){var a;let i,s=function(e){let t=!0,r=[],n=[];for(let t in e.nodesByDepth)r.push(e.nodesByDepth[t]);for(let e of r){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}n.push(...e)}if(t)for(let r of e.layers){let e=!1;for(let a of r.inboundNodes)if(-1!==n.indexOf(a))if(e){t=!1;break}else e=!0;if(!t)break}return t}(e),o=["Layer (type)","Input Shape","Output shape","Param #"];if(s?(t=t||90,r=r||[.32,.61,.89,1]):(t=t||115,r=r||[.24,.48,.7,.8,1]),r[r.length-1]<=1&&(r=r.map(e=>Math.floor(t*e))),!s)for(let t in o.push("Receives inputs"),i=[],e.nodesByDepth)i.push(...e.nodesByDepth[t]);n("_".repeat(t)),CN(o,r,n),n("=".repeat(t));let l=e.layers;for(let e=0;e<l.length;++e)s?function(e,t,r){let n,a;try{a=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){a="multiple"}try{n=JSON.stringify(e.outputShape)}catch(e){n="multiple"}let i=e.name,s=e.getClassName();CN([`${i} (${s})`,a,n,e.countParams().toString()],t,r)}(l[e],r,n):function(e,t,r,n){let a,i;try{i=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){i="multiple"}try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}let s=[];for(let t of e.inboundNodes)if(null==r||!(r.length>0)||-1!==r.indexOf(t))for(let e=0;e<t.inboundLayers.length;++e){let r=t.inboundLayers[e].name,n=t.nodeIndices[e],a=t.tensorIndices[e];s.push(`${r}[${n}][${a}]`)}let o=e.name,l=e.getClassName(),u=0===s.length?"":s[0];CN([`${o} (${l})`,i,a,e.countParams().toString(),u],t,n);for(let e=1;e<s.length;++e)CN(["","","","",s[e]],t,n)}(l[e],r,i,n),n((e===l.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();let u=null!=(a=e).collectedTrainableWeights?IM(a.collectedTrainableWeights):IM(a.trainableWeights),h=IM(e.nonTrainableWeights);n(`Total params: ${u+h}`),n(`Trainable params: ${u}`),n(`Non-trainable params: ${h}`),n("_".repeat(t))}(this,e,t,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){let t={Adagrad:()=>cN.adagrad(.01),Adadelta:()=>cN.adadelta(1,.95,S5()),Adam:()=>cN.adam(.001,.9,.999,S5()),Adamax:()=>cN.adamax(.002,.9,.999,S5(),0),RMSProp:()=>cN.rmsprop(.001,.9,0,S5()),SGD:()=>cN.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Sb(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof sT))throw new Sb("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Sb(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(e=>Cb(e))}else{let r=Cb(e.loss);this.outputs.forEach(e=>{t.push(r)})}else{for(let t in e.loss=e.loss,e.loss)if(-1===this.outputNames.indexOf(t))throw new Sb(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(let r of this.outputNames)null==e.loss[r]&&console.warn(`Output "${r}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${r} during training`),t.push(Cb(e.loss[r]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){let t=this.internalOutputShapes[e],r=this.outputNames[e];this.feedOutputNames.push(r),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}let r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],SZ("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==r.indexOf(e))continue;let t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});let n=function(e,t){let r;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);if("string"==typeof e||"function"==typeof e)r=[e];else if(Array.isArray(e)||"object"==typeof e)r=e;else throw TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);if(Array.isArray(r))return t.map(e=>r);{let e=[];for(let n of t){let t=r.hasOwnProperty(n)?r[n]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,r)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([r,e])};SZ("metric",()=>{for(let e=0;e<this.outputs.length;++e){if(-1===r.indexOf(e))(t=>{let r,n,i;for(let s of t){let t;if("string"==typeof s&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(s)){let t,a=this.internalOutputShapes[e];1===a[a.length-1]||this.lossFunctions[e]===Cm?-1!==["accuracy","acc"].indexOf(s)?n=Cx:-1!==["crossentropy","ce"].indexOf(s)&&(n=Cw):this.lossFunctions[e]===Cf?-1!==["accuracy","acc"].indexOf(s)?n=Ck:-1!==["crossentropy","ce"].indexOf(s)&&(n=Cf):-1!==["accuracy","acc"].indexOf(s)?n=Cv:-1!==["crossentropy","ce"].indexOf(s)&&(n=Cc),-1!==["accuracy","acc"].indexOf(s)?t="acc":-1!==["crossentropy","ce"].indexOf(s)&&(t="ce"),i=n,r=""+t}else i=function(e){if("string"==typeof e&&e in CS)return CS[e];if("string"!=typeof e&&null!=e)return e;throw new Sb(`Unknown metric ${e}`)}(s),r=""+CI(s);SZ(r,()=>{t=i}),a(e,r,t)}})(n[e])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,r={}){let n=null==r.batchSize?32:r.batchSize;Cz(n);let a=this.standardizeUserDataXY(e,t,!0,n);try{let e=a[0].concat(a[1]);this.makeTestFunction();let t=this.testFunction,i=this.testLoop(t,e,n,r.verbose,r.steps);return SC(i)}finally{CU(a[0],e),CU(a[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),CM(this,e,t)}checkNumSamples(e,t,r,n="steps"){let a;if(null!=r){if(a=null,null!=t)throw new Sb(`If ${n} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else if(null!=e)a=Array.isArray(e)?e[0].shape[0]:e.shape[0];else throw new Sb(`Either the input data should have a defined shape, or ${n} shoud be specified.`);return a}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Sb("`outputs` is an empty Array, which is not allowed.");let r=Array.isArray(t),n=r?t:[t],a=this.retrieveSymbolicTensors(n),i=new Iq;if(e instanceof au&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Sb(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)i.add(this.inputs[t],e[t])}else for(let t of this.inputs){let r=e[t.name];if(null==r)throw new Sb(`No value is provided for the model's input ${t.name}`);i.add(t,r)}let s=IZ(a,i);return r?s:s[0]}retrieveSymbolicTensors(e){let t=Sk(null,e.length),r=e.length;for(let n of this.layers){let a=Array.isArray(n.output)?n.output:[n.output],i=a.map(e=>e.name);for(let n=0;n<e.length;++n){let s=i.indexOf(e[n]);if(-1!==s&&(t[n]=a[s],r--),0===r)break}if(0===r)break}if(r>0){let r=[];throw t.forEach((t,n)=>{null==t&&r.push(e[n])}),new Sb(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(r)}`)}return t}predictLoop(e,t=32,r=!1){return aH(()=>{let n=this.checkNumSamples(e);if(r)throw new Sx("Verbose predictLoop() is not implemented yet.");let a=CB(n,t),i=this.outputs.map(e=>[]);for(let t=0;t<a.length;++t)aH(()=>{let r=CP(e,a[t][0],a[t][1]),n=[];if(Array.isArray(r))for(let e=0;e<r.length;++e)n.push({key:this.inputs[e],value:r[e]});else n.push({key:this.inputs[0],value:r});let i=new Iq(n);return IZ(this.outputs,i)}).forEach((e,t)=>i[t].push(e));return SC(i.map(e=>un(e,0)))})}predict(e,t={}){let r=CW(e);Cj(r,this.inputNames,this.feedInputShapes,!1);try{let e=null==t.batchSize?32:t.batchSize;return Cz(e),this.predictLoop(r,e)}finally{CU(r,e)}}predictOnBatch(e){Cj(e,this.inputNames,this.feedInputShapes,!0);let t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,r=!0,n){if(null==this.optimizer_)throw new Sy("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let a=[];for(let e=0;e<this.feedOutputShapes.length;++e){let t=this.feedOutputShapes[e];this.feedLossFns[e]===Cf?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}e=CH(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=CH(t,this.feedOutputNames,a,!1,"target");var i=e,s=t;let o=S_(i.map(e=>e.shape[0]));o.sort();let l=S_(s.map(e=>e.shape[0]));if(l.sort(),o.length>1)throw new Sb(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(i.map(e=>e.shape))}`);if(l.length>1)throw new Sb(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(s.map(e=>e.shape))}`);if(o.length>0&&l.length>0&&!ny.arraysEqual(o,l))throw new Sb(`Input Tensors should have the same number of samples as target Tensors. Found ${o[0]} input sample(s) and ${l[0]} target sample(s).`);if(!function(e,t,r){let n=[Ch,Cm,Cc];for(let a=0;a<e.length;++a){let i=e[a],s=t[a],o=r[a];if(null!=s){if(s===Cc&&1===i.shape[i.shape.length-1])throw new Sb(`You are passing a target array of shape ${i.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==n.indexOf(s)){let e=i.shape.slice(1),t=o.slice(1);for(let r=0;r<e.length;++r){let n=e[r],a=t[r];if(null!=a&&n!==a)throw new Sb(`A target Tensor with shape ${i.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=n&&n>0&&e[0].shape[0]%n!=0)throw new Sb(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${n}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,r,n,a=!0,i){let[s,o]=this.standardizeUserDataXY(e,t,a,i);if(null!=r)throw Error("sample weight is not supported yet.");let l=null;if(null!=n){let e=CR(n,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await CA(o[t],null,e[t]))}return[s,o,l]}testLoop(e,t,r,n=0,a){return aH(()=>{let i=this.checkNumSamples(t,r,a,"steps"),s=[];if(n>0)throw new Sx("Verbose mode is not implemented yet.");if(null!=a)throw new Sx("steps mode in testLoop() is not implemented yet");{let n=CB(i,r),a=pV(S6(0,i));for(let r=0;r<n.length;++r){let i=n[r][0],o=n[r][1],l=e(CL(t,S9(a,i,o-i)));if(0===r)for(let e=0;e<l.length;++e)s.push(sx(0));for(let e=0;e<l.length;++e){let t=l[e];s[e]=sp(s[e],sf(o-i,t))}}for(let e=0;e<s.length;++e)s[e]=sc(s[e],i)}return s})}getDedupedMetricsNames(){let e=this.metricsNames,t=[];for(let r=0;r<e.length;++r){let n=e[r],a=n;if(SI(e,n)>1){let t=SI(e.slice(0,r),n);a+=`_${t}`}t.push(a)}return t}makeTrainFunction(){return e=>{let t=[],r=e.slice(0,this.inputs.length),n=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],s=()=>{let e,s=[];for(let e=0;e<this.inputs.length;++e)s.push({key:this.inputs[e],value:r[e]});let o=new Iq(s),l=IZ(this.outputs,o,{training:!0});for(let r=0;r<this.lossFunctions.length;++r){let i=(0,this.lossFunctions[r])(n[r],l[r]);null!=a[r]&&(i=sf(i,a[r]));let s=hj(i);t.push(s),e=0===r?i:sp(e,i)}for(let e=0;e<this.metricsTensors.length;++e){let r;if(this.outputs.length>1&&e<this.outputs.length)r=t[e];else{let t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];r=hj(t(n[a],l[a]))}aK(r),i.push(r)}return e=hj(e),this.calculateLosses().forEach(t=>{e=sp(e,t)}),e},o=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(s,!0,o)].concat(i)}}makeTestFunction(){this.testFunction=e=>aH(()=>{let t,r=[],n=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let e=0;e<this.inputs.length;++e)i.push({key:this.inputs[e],value:n[e]});let s=new Iq(i),o=IZ(this.outputs,s);for(let e=0;e<this.lossFunctions.length;++e){let n=hj((0,this.lossFunctions[e])(a[e],o[e]));t=0===e?n:sp(t,n),r.push(t)}for(let e=0;e<this.metricsTensors.length;++e){let t=this.metricsTensors[e][0],n=this.metricsTensors[e][1],i=hj(t(a[n],o[n]));r.push(i)}return r})}async fit(e,t,r={}){let n,a,i,s,o,l,u,h,p;if(this.isTraining)throw Error("Cannot start training because another fit() call is ongoing.");this.isTraining=!0;try{let d,c,f,m=null==r.batchSize?32:r.batchSize;Cz(m);let g=await this.standardizeUserData(e,t,r.sampleWeight,r.classWeight,!1,m);n=g[0],a=g[1],p=g[2];let y=!1;if(null!=r.validationData&&r.validationData.length>0){if(y=!0,2===r.validationData.length)o=r.validationData[0],l=r.validationData[1];else if(3===r.validationData.length)throw new Sx("validationData including sample weights is not supported yet.");else throw new Sb(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);let e=await this.standardizeUserData(o,l,null,null,!0,m);u=e[0],h=e[1],d=u.concat(h)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){y=!0;let e=Math.floor(n[0].shape[0]*(1-r.validationSplit)),t=n[0].shape[0];u=CP(n,e,t),i=n,n=CP(n,0,e),h=CP(a,e,t),s=a,a=CP(a,0,e),d=u.concat(h)}else null!=r.validationSteps&&(y=!0);let b=n.concat(a).concat(p);this.checkTrainableWeightsConsistency();let x=this.makeTrainFunction(),v=this.getDedupedMetricsNames();y?(this.makeTestFunction(),c=this.testFunction,f=v.slice().concat(v.map(e=>"val_"+e))):(c=null,d=[],f=v.slice());let w=Ci(r.callbacks,r.yieldEvery);return await this.fitLoop(x,b,v,m,r.epochs,r.verbose,w,c,d,r.shuffle,f,r.initialEpoch,null,null)}finally{this.isTraining=!1,CU(n,e),CU(a,t),CU(i,e),CU(s,t),CU(u,o),CU(h,l),null!=p&&aj(p)}}async fitLoop(e,t,r,n,a,i,s,o,l,u,h,p,d,c){let f;null==n&&(n=32),null==a&&(a=1),null==u&&(u=!0),null==p&&(p=0);let m=!1;if(null!=o&&null!=l&&(m=!0),null!=c&&(m=!0,null==d))throw new Sb("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let g=this.checkNumSamples(t,n,d,"steps_per_epoch");null!=g&&(f=S6(0,g)),null==i&&(i=1);let{callbackList:y,history:b}=Co(s,i,a,p,g,d,n,m,h);y.setModel(this),this.history=b,await y.onTrainBegin(),this.stopTraining_=!1;for(let i=p;i<a;++i){await y.onEpochBegin(i);let a={};if(null!=d)throw new Sx("stepsPerEpoch mode is not implemented yet.");{if("batch"===u)throw new Sx("batch shuffling is not implemneted yet");u&&ny.shuffle(f);let i=pV(f),s=CB(g,n);for(let u=0;u<s.length;++u){let h={};if(await y.onBatchBegin(u,h),aH(()=>{let p=s[u][0],d=s[u][1],c=S9(i,p,d-p);h.batch=u,h.size=d-p;let f=e(CL(t,c));for(let e=0;e<r.length;++e){let t=r[e],n=f[e];h[t]=n,aK(n)}if(u===s.length-1&&m){let e=this.testLoop(o,l,n);for(let t=0;t<r.length;++t){let n=r[t],i=e[t];aK(i),a["val_"+n]=i}}}),await y.onBatchEnd(u,h),I9(h),this.stopTraining_)break}i.dispose()}if(await y.onEpochEnd(i,a),this.stopTraining_)break}return await y.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return CD(this,e,t)}async trainOnBatch(e,t){let r=await this.standardizeUserData(e,t),n=r[0],a=r[1],i=this.makeTrainFunction()(n.concat(a)),s=[];for(let e of i){let t=await e.data();s.push(t[0])}return aj(i),CU(r[0],e),CU(r[1],t),SC(s)}getNamedWeights(e){let t=[],r=null!=e&&e.trainableOnly,n=r?this.trainableWeights:this.weights,a=this.getWeights(r);for(let e=0;e<n.length;++e)(!r||n[e].trainable)&&t.push({name:n[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){let e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){let t=aG().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-aG().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=ST(this.loss);else if(Array.isArray(this.loss)){for(let e of this.loss)if("string"!=typeof e)throw Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>ST(e))}else{let t=Object.keys(this.loss);e={};let r=this.loss;for(let n of t)if("string"==typeof r[n])e[n]=ST(r[n]);else throw Error("Serialization of non-string loss is not supported.")}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[ST(CI(this.metrics))];{if(Array.isArray(this.metrics))return this.metrics.map(e=>ST(CI(e)));let e={};for(let t in this.metrics)e[t]=ST(CI(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){let t,r;if(null!=e.weighted_metrics)throw Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw Error("Loading sample_weight_mode is not supported yet.");let n=Cl(function e(t,r){if(null===t)return null;if("string"==typeof t)return S$(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){let n=[],a=t.length;for(let i=0;i<a;++i){let a=t[i];CT(r,i,a)?n.push(a):n.push(e(a,r))}return n}{let r={};for(let n of Object.keys(t)){let a=t[n];if("name"===n&&"string"==typeof a)r[n]=a;else{let t=S$(n);r[t]=e(a,t)}}return r}}(e.optimizer_config));if("string"==typeof e.loss)t=S$(e.loss);else if(Array.isArray(e.loss))t=e.loss.map(e=>S$(e));else if(null!=e.loss)for(let r in t={},e.loss)t[r]=S$(e.loss[r]);if(Array.isArray(e.metrics))r=e.metrics.map(e=>S$(e));else if(null!=e.metrics)for(let t in r={},e.metrics)r[t]=S$(e.metrics[t]);this.compile({loss:t,metrics:r,optimizer:n})}async save(e,t){if("string"==typeof e){let t=cr.getSaveHandlers(e);if(0===t.length)throw new Sb(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Sb(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Sb("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let r=await cr.encodeWeights(this.getNamedWeights(t)),n={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${C$}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){n.trainingConfig=this.getTrainingConfig();let{data:e,specs:t}=await cr.encodeWeights(await this.optimizer.getWeights(),"optimizer");r.specs.push(...t),r.data=cr.concatenateArrayBuffers([r.data,e])}return null!=this.userDefinedMetadata&&(CC(this.userDefinedMetadata,this.name,!0),n.userDefinedMetadata=this.userDefinedMetadata),n.weightData=r.data,n.weightSpecs=r.specs,e.save(n)}setUserDefinedMetadata(e){CC(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}CK.className="Model",sv.registerClass(CK);class Cq extends CK{}Cq.className="Functional",sv.registerClass(Cq);class CX extends CK{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:SB("sequential_"),null!=e.layers)for(let t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new Sb(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){let t,r=e instanceof CX||e instanceof CK;if(r){if(1!==(t=e).outputs.length)throw new Sb("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==t.inputs.length)throw new Sb("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Sb("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");let t=function(e){if(null==e.batchShape&&null==e.shape)throw Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Sb("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let r=e.dtype;return null==r&&(r="float32"),new IK({batchInputShape:t,name:e.name,dtype:r,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(r)this.outputs=t.outputs,this.inputs=t.inputs;else{if(1!==e.inboundNodes.length)throw new Sb(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Sb("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=function e(t,r,n){if((null==r||null!=n&&n>0)&&(r=t.sourceLayer,n=t.nodeIndex),0===r.inboundNodes.length)return[t];{let t=r.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{let r=[];for(let n=0;n<t.inboundLayers.length;n++){let a=t.inputTensors[n];for(let i of e(a,t.inboundLayers[n],t.nodeIndices[n]))-1===r.indexOf(i)&&r.push(i)}return r}}}(this.outputs[0])}this.inboundNodes=[],new IG({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Sk(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{let t=e.apply(this.outputs[0]);if(Array.isArray(t))throw TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(IO(e),0===this.inputs.length||0===this.outputs.length)throw TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new CK({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,r=console.log){this.built||this.build(),super.summary(e,t,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,r={}){if(!this.built)throw new Sy("The model needs to be compiled before being used.");return this.model.evaluate(e,t,r)}async evaluateDataset(e,t){if(!this.built)throw new Sy("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,r={}){if(!this.built)throw new Sy("The model needs to be compiled before being used.");return this.model.fit(e,t,r)}async fitDataset(e,t){if(!this.built)throw new Sy("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,r={},n=!1){let a,i={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Sb("Legacy serialization format not supported yet.");a=t}else ny.assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,i=t;let s=new e(i);if(!(s instanceof CX))throw new Sx(`Sequential.fromConfig called on non-Sequential input: ${s}`);for(let e of a){let t=Cl(e,void 0,n);n&&t.setFastWeightInitDuringBuild(!0),s.add(t)}return s}set stopTraining(e){if(null==this.model)throw new Sb("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Sb("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){let e=[];for(let t of this.layers){let r={};r.className=t.getClassName(),r.config=t.getConfig(),e.push(r)}return{name:this.name,layers:e}}}CX.className="Sequential",sv.registerClass(CX);class CY extends sv.Serializable{getConfig(){return{}}}class CZ extends CY{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Sx(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return og(e)}(e,t)}}CZ.className="elu",sv.registerClass(CZ);class CQ extends CY{apply(e){return pk(e)}}CQ.className="selu",sv.registerClass(CQ);class CJ extends CY{apply(e){return ox(e)}}CJ.className="relu",sv.registerClass(CJ);class C0 extends CY{apply(e){return aH(()=>hY(6,ox(e)))}}C0.className="relu6",sv.registerClass(C0);class C1 extends CY{apply(e){return e}}C1.className="linear",sv.registerClass(C1);class C2 extends CY{apply(e){return ow(e)}}C2.className="sigmoid",sv.registerClass(C2);class C3 extends CY{apply(e){return aH(()=>ur(sp(.5,sf(.2,e)),0,1))}}C3.className="hardSigmoid",sv.registerClass(C3);class C4 extends CY{apply(e){return hF(e)}}C4.className="softplus",sv.registerClass(C4);class C6 extends CY{apply(e){return aH(()=>sc(e,sp(sD(e),1)))}}C6.className="softsign",sv.registerClass(C6);class C5 extends CY{apply(e){return u5(e)}}C5.className="tanh",sv.registerClass(C5);class C8 extends CY{apply(e,t=-1){return pF(e,t)}}C8.className="softmax",sv.registerClass(C8);class C7 extends CY{apply(e,t=-1){return hD(e,t)}}C7.className="logSoftmax",sv.registerClass(C7);class C9 extends CY{apply(e){return aH(()=>aH(()=>{let t=sf(.5,sp(1,u_(sc(e,Math.sqrt(2)))));return sf(e,t)}))}}C9.className="gelu",sv.registerClass(C9);class Ne extends CY{apply(e){return aH(()=>sf(.5,sf(e,sp(1,u5(sf(sm(sc(2,Math.PI)),sp(e,sf(.044715,sA(e,3)))))))))}}Ne.className="gelu_new",sv.registerClass(Ne);class Nt extends CY{apply(e){return aH(()=>sf(e,u5(hF(e))))}}Nt.className="mish",sv.registerClass(Nt);class Nr extends CY{apply(e,t=1){return aH(()=>sf(ow(sf(e,t)),e))}}function Nn(e){return e.getClassName()}function Na(e,t={}){return SA(e,sv.SerializationMap.getMap().classNameMap,t,"activation")}function Ni(e){if(null==e){let e={};return e.className="linear",e.config={},Na(e)}if("string"==typeof e){let t={};return t.className=e,t.config={},Na(t)}return e instanceof CY?e:Na(e)}Nr.className="swish",sv.registerClass(Nr);class Ns extends sv.Serializable{}class No extends Ns{constructor(e){super();if(null!=e&&"object"!=typeof e)throw Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`);this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return aH(()=>{let t=hK([1]);return this.hasL1&&(t=sp(t,oS(sf(this.l1,sD(e))))),this.hasL2&&(t=sp(t,oS(sf(this.l2,sf(e,e))))),s9(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}No.className="L1L2",sv.registerClass(No);const Nl={l1l2:"L1L2"};function Nu(e,t={}){return SA(e,sv.SerializationMap.getMap().classNameMap,t,"regularizer")}function Nh(e){return null==e?null:"string"==typeof e?Nu({className:e in Nl?Nl[e]:e,config:{}}):e instanceof Ns?e:Nu(e)}class Np extends Ij{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){let r=ox(e=ID(e));return null!=this.maxValue&&(r=ur(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){let e={maxValue:this.maxValue};return Object.assign(e,super.getConfig()),e}}Np.className="ReLU",sv.registerClass(Np);class Nd extends Ij{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){return oy(ID(e),this.alpha)}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha};return Object.assign(e,super.getConfig()),e}}Nd.className="LeakyReLU",sv.registerClass(Nd);class Nc extends Ij{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=IA(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Nh(e.alphaRegularizer),this.alphaConstraint=I8(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else if("number"==typeof e.sharedAxes)this.sharedAxes=[e.sharedAxes];else throw new Sb(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`)}build(e){let t=(e=IO(e)).slice(1);if(null!=this.sharedAxes)for(let e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);let r={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)r[t]=e[t];this.inputSpec=[new IW({ndim:e.length,axes:r})],this.built=!0}call(e,t){return ob(e=ID(e),this.alpha.read())}getConfig(){let e={alphaInitializer:SR(this.alphaInitializer),alphaRegularizer:SR(this.alphaRegularizer),alphaConstraint:SR(this.alphaConstraint),sharedAxes:this.sharedAxes};return Object.assign(e,super.getConfig()),e}}Nc.className="PReLU",sv.registerClass(Nc);class Nf extends Ij{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Sx(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){return og(ID(e))}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha};return Object.assign(e,super.getConfig()),e}}Nf.className="ELU",sv.registerClass(Nf);class Nm extends Ij{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){let r=ID(e);return sf(r,sl(uK(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){let e={theta:this.theta};return Object.assign(e,super.getConfig()),e}}Nm.className="ThresholdedReLU",sv.registerClass(Nm);class Ng extends Ij{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=new C8().apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){return aH(()=>{let r=ID(e),n=t.mask;if(null!=n){let e=sf(sF(hq(r.shape),sl(n,r.dtype)),sx(-1e9));r=sp(r,e)}if(this.axis instanceof Array)if(this.axis.length>1)return uD(sF(r,hO(r,this.axis,!0)));else return this.softmax(r,this.axis[0]);return this.softmax(r,this.axis)})}computeOutputShape(e){return e}getConfig(){let e={axis:this.axis};return Object.assign(e,super.getConfig()),e}}function Ny(e,t,r){if("number"==typeof e)return Sk(e,t);if(e.length!==t)throw new Sb(`The ${r} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let n=0;n<t;++n){let a=e[n];if(a!==parseInt(a.toString(),10))throw new Sb(`The ${r} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e}function Nb(e,t,r,n,a=1){return null==e?e:Math.floor((("same"===r?e:e-(t+(t-1)*(a-1))+1)+n-1)/n)}function Nx(e,t,r,n){if(null==e)return null;if("valid"===n)e=e*t+S4([r-t,0]);else if("same"===n)e*=t;else throw new Sb(`Unsupport padding mode: ${n}.`);return e}function Nv(e,t){return aH(()=>(SK(t),"channelsFirst"===t)?p8(e,[0,2,3,1]):e)}function Nw(e,t){return aH(()=>(SK(t),"channelsFirst"===t)?p8(e,[0,2,3,4,1]):e)}function Nk(e,t,r,n=[1,1],a="valid",i,s,o=null){return aH(()=>{if(null==i&&(i=S8()),SK(i),3!==e.rank&&4!==e.rank)throw new Sb(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Sb(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Nv(e,i);if("causal"===a)throw new Sx("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=uP.conv2d({x:l,filter:t,strides:n,pad:"same"===a?"same":"valid",dilations:s,dataFormat:"NHWC",bias:r,activation:o}),"channelsFirst"===i&&(l=p8(l,[0,3,1,2])),l})}Ng.className="Softmax",sv.registerClass(Ng);class NS extends Ij{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",NS.verifyArgs(t),this.rank=e,SM(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Sx(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Ny(t.kernelSize,e,"kernelSize"),this.strides=Ny(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Sq(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,SK(this.dataFormat),this.activation=Ni(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=IA(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=I8(t.biasConstraint),this.biasRegularizer=Nh(t.biasRegularizer),this.activityRegularizer=Nh(t.activityRegularizer),this.dilationRate=Ny(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Sb(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Sb(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Sb(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(e){if(SS("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!SO(e.kernelSize,"number",1,3))throw new Sb(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){let e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Nn(this.activation),useBias:this.useBias,biasInitializer:SR(this.biasInitializer),biasRegularizer:SR(this.biasRegularizer),activityRegularizer:SR(this.activityRegularizer),biasConstraint:SR(this.biasConstraint)};return Object.assign(e,super.getConfig()),e}}class NI extends NS{constructor(e,t){super(e,t),this.kernel=null,NI.verifyArgs(t),this.filters=t.filters,SM(this.filters,"filters"),this.kernelInitializer=IA(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=I8(t.kernelConstraint),this.kernelRegularizer=Nh(t.kernelRegularizer)}build(e){e=IO(e);let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Sb(`The channel dimension of the input should be defined. Found ${e[t]}`);let r=e[t],n=this.kernelSize.concat([r,this.filters]);this.kernel=this.addWeight("kernel",n,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:r}}],this.built=!0}call(e,t){return aH(()=>{let t;e=ID(e);let r=null==this.bias?null:this.bias.read(),n=Sz(this.activation.getClassName());if(null!=n&&2===this.rank)t=Nk(e,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,n);else{if(1===this.rank)t=function(e,t,r,n=1,a="valid",i,s=1){return aH(()=>{if(null==i&&(i=S8()),SK(i),3!==e.shape.length)throw new Sb(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Sb(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=r&&1!==r.shape.length)throw new Sb(`The bias for a conv1dWithBias operation should be 1, but is ${r.shape.length} instead`);if("channelsFirst"===i&&(e=p8(e,[0,2,1])),"causal"===a)throw new Sx("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=uu(e,t,n,"same"===a?"same":"valid","NWC",s);return null!=r&&(o=Iu(o,r)),o})}(e,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Nk(e,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(3===this.rank)t=function(e,t,r,n=[1,1,1],a="valid",i,s){return aH(()=>{if(null==i&&(i=S8()),SK(i),4!==e.rank&&5!==e.rank)throw new Sb(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Sb(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=Nw(e,i);if("causal"===a)throw new Sx("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=ud(o,t,n,"same"===a?"same":"valid","NDHWC",s),null!=r&&(o=Iu(o,r)),"channelsFirst"===i&&(o=p8(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new Sx("convolutions greater than 3D are not implemented yet.");null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=IO(e);let t=[],r="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<r.length;++e){let n=Nb(r[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(n)}let n=[e[0]];return"channelsLast"===this.dataFormat?(n=n.concat(t)).push(this.filters):(n.push(this.filters),n=n.concat(t)),n}getConfig(){let e={filters:this.filters,kernelInitializer:SR(this.kernelInitializer),kernelRegularizer:SR(this.kernelRegularizer),kernelConstraint:SR(this.kernelConstraint)};return Object.assign(e,super.getConfig()),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Sb(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class NC extends NI{constructor(e){super(2,e),NC.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!SO(e.kernelSize,"number",1,2))throw new Sb(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}NC.className="Conv2D",sv.registerClass(NC);class NN extends NI{constructor(e){super(3,e),NN.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!(Array.isArray(e.kernelSize)&&(1===e.kernelSize.length||3===e.kernelSize.length)))throw new Sb(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}NN.className="Conv3D",sv.registerClass(NN);class NT extends NC{constructor(e){if(super(e),this.inputSpec=[new IW({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Sb(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=IO(e)).length)throw new Sb("Input should have rank 4; Received input shape: "+JSON.stringify(e));let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Sb("The channel dimension of the inputs should be defined. Found `None`.");let r=e[t],n=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new IW({ndim:4,axes:{[t]:r}})],this.built=!0}call(e,t){return aH(()=>{let t,r,n=ID(e);if(4!==n.shape.length)throw new Sb(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${n.shape.length}`);let a=n.shape,i=a[0];"channelsFirst"===this.dataFormat?(t=2,r=3):(t=1,r=2);let s=a[t],o=a[r],l=this.kernelSize[0],u=this.kernelSize[1],h=this.strides[0],p=this.strides[1],d=[i,Nx(s,h,l,this.padding),Nx(o,p,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(n=p8(n,[0,2,3,1]));let c=up(n,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(c=p8(c,[0,3,1,2])),null!=this.bias&&(c=Iu(c,this.bias.read(),this.dataFormat)),null!=this.activation&&(c=this.activation.apply(c)),c})}computeOutputShape(e){let t,r,n,a=(e=IO(e)).slice();"channelsFirst"===this.dataFormat?(t=1,r=2,n=3):(t=3,r=1,n=2);let i=this.kernelSize[0],s=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return a[t]=this.filters,a[r]=Nx(a[r],o,i,this.padding),a[n]=Nx(a[n],l,s,this.padding),a}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}}NT.className="Conv2DTranspose",sv.registerClass(NT);class N$ extends NN{constructor(e){if(super(e),this.inputSpec=[new IW({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new Sb(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=IO(e)).length)throw new Sb("Input should have rank 5; Received input shape: "+JSON.stringify(e));let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Sb("The channel dimension of the inputs should be defined. Found `None`.");let r=e[t],n=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new IW({ndim:5,axes:{[t]:r}})],this.built=!0}call(e,t){return aH(()=>{let t,r,n,a=ID(e);if(5!==a.shape.length)throw new Sb(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${a.shape.length}`);let i=a.shape,s=i[0];"channelsFirst"===this.dataFormat?(n=2,t=3,r=4):(n=1,t=2,r=3);let o=i[n],l=i[t],u=i[r],h=this.kernelSize[0],p=this.kernelSize[1],d=this.kernelSize[2],c=this.strides[0],f=this.strides[1],m=this.strides[2],g=Nx(o,c,h,this.padding),y=[s,g,Nx(l,f,p,this.padding),Nx(u,m,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(a=p8(a,[0,2,3,4,1]));let b=uf(a,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=p8(b,[0,4,1,2,3])),null!==this.bias&&(b=Iu(b,this.bias.read(),this.dataFormat)),null!==this.activation&&(b=this.activation.apply(b)),b})}computeOutputShape(e){let t,r,n,a,i=(e=IO(e)).slice();"channelsFirst"===this.dataFormat?(t=1,r=2,n=3,a=4):(t=4,r=1,n=2,a=3);let s=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],h=this.strides[1],p=this.strides[2];return i[t]=this.filters,i[r]=Nx(i[r],u,s,this.padding),i[n]=Nx(i[n],h,o,this.padding),i[a]=Nx(i[a],p,l,this.padding),i}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}}N$.className="Conv3DTranspose",sv.registerClass(N$);class NE extends NI{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Sb("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Sb("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Sb(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=IA(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Nh(t.depthwiseRegularizer),this.depthwiseConstraint=I8(t.depthwiseConstraint),this.pointwiseInitializer=IA(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Nh(t.pointwiseRegularizer),this.pointwiseConstraint=I8(t.pointwiseConstraint)}build(e){if((e=IO(e)).length<this.rank+2)throw new Sb(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Sb(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);let r=e[t],n=this.kernelSize.concat([r,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(r*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",n,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new IW({ndim:this.rank+2,axes:{[t]:r}})],this.built=!0}call(e,t){return aH(()=>{let t;if(e=ID(e),1===this.rank)throw new Sx("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=p8(e,[0,2,3,1])),t=pS(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Iu(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=p8(t,[0,3,1,2])),t})}getConfig(){let e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=SR(this.depthwiseInitializer),e.pointwiseInitializer=SR(this.pointwiseInitializer),e.depthwiseRegularizer=SR(this.depthwiseRegularizer),e.pointwiseRegularizer=SR(this.pointwiseRegularizer),e.depthwiseConstraint=SR(this.depthwiseConstraint),e.pointwiseConstraint=SR(this.pointwiseConstraint),e}}NE.className="SeparableConv";class NR extends NE{constructor(e){super(2,e)}}NR.className="SeparableConv2D",sv.registerClass(NR);class NA extends NI{constructor(e){super(1,e),NA.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){let e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!SO(e.kernelSize,"number",1,1))throw new Sb(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}NA.className="Conv1D",sv.registerClass(NA);class NF extends Ij{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return aH(()=>{if(e=ID(e),"channelsLast"===this.dataFormat){let t=It(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return It(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{let t=It(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return It(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let e={cropping:this.cropping,dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}NF.className="Cropping2D",sv.registerClass(NF);class N_ extends Ij{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,SK(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,SD(SU,"InterpolationFormat",this.interpolation)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){let t=null==e[2]?null:this.size[0]*e[2],r=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,r]}{let t=null==e[1]?null:this.size[0]*e[1],r=null==e[2]?null:this.size[1]*e[2];return[e[0],t,r,e[3]]}}call(e,t){return aH(()=>{let t=ID(e),r=t.shape;if("channelsFirst"===this.dataFormat){t=p8(t,[0,2,3,1]);let e=this.size[0]*r[2],n=this.size[1]*r[3];return p8("nearest"===this.interpolation?d8.resizeNearestNeighbor(t,[e,n]):d8.resizeBilinear(t,[e,n]),[0,3,1,2])}{let e=this.size[0]*r[1],n=this.size[1]*r[2];return"nearest"===this.interpolation?d8.resizeNearestNeighbor(t,[e,n]):d8.resizeBilinear(t,[e,n])}})}getConfig(){let e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation};return Object.assign(e,super.getConfig()),e}}N_.className="UpSampling2D",sv.registerClass(N_);class ND extends NS{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=IA(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=I8(e.depthwiseConstraint),this.depthwiseRegularizer=Nh(e.depthwiseRegularizer)}build(e){if((e=IO(e)).length<4)throw new Sb(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);let t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Sb(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);let r=e[t],n=[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",n,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return aH(()=>{let t=function(e,t,r=[1,1],n="valid",a,i){return aH(()=>{null==a&&(a=S8()),SK(a);let i=Nv(e,a);if(4!==e.rank)throw new Sb(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Sb(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=ug(i,t,r,"same"===n?"same":"valid","NHWC",null),"channelsFirst"===a&&(i=p8(i,[0,3,1,2])),i})}(e=ID(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,0);return this.useBias&&(t=Iu(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=IO(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],r="channelsFirst"===this.dataFormat?e[3]:e[2],n="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Nb(t,this.kernelSize[0],this.padding,this.strides[0]),i=Nb(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],n,a,i]:[e[0],a,i,n]}getConfig(){let e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=SR(this.depthwiseInitializer),e.depthwiseRegularizer=SR(this.depthwiseRegularizer),e.depthwiseConstraint=SR(this.depthwiseRegularizer),e}}function NO(e,t,r,n){if(Array.isArray(e)){if(null!=t||null!=r)throw new Sb("When inputs is an array, neither initialState or constants should be provided");null!=n&&(r=e.slice(e.length-n,e.length),e=e.slice(0,e.length-n)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:r=a(r)}}function NM(e,t,r,n=!1,a,i,s=!1,o=!1){return aH(()=>{let l,u,h,p=t.shape.length;if(p<3)throw new Sb(`Input should be at least 3D, but is ${p}D.`);let d=[1,0].concat(S6(2,p));if(t=p8(t,d),null!=i)throw new Sx("The rnn() functoin of the deeplearn.js backend does not support constants yet.");s&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=sl(sl(a,"bool"),"float32")).rank===p-1&&(a=uO(a,-1)),a=p8(a,d)),n&&(t=pm(t,0),null!=a&&(a=pm(a,0)));let c=[],f=r,m=t.shape[0],g=pJ(t);null!=a&&(u=pJ(a));for(let t=0;t<m;++t){let r=g[t],n=aH(()=>e(r,f));if(null==a)l=n[0],f=n[1];else{let e=aH(()=>{let e=u[t],r=sF(h4(e),e);return{output:sp(sf(n[0],e),sf(f[0],r)),newStates:f.map((t,a)=>sp(sf(n[1][a],e),sf(t,r)))}});l=e.output,f=e.newStates}o&&c.push(l)}return o&&(h=pB(c,1)),[l,h,f]})}ND.className="DepthwiseConv2D",sv.registerClass(ND);class Nz extends Ij{constructor(e){let t;if(super(e),null==e.cell)throw new Sb("cell property is missing for the constructor of RNN.");if(null==(t=Array.isArray(e.cell)?new NH({cells:e.cell}):e.cell).stateSize)throw new Sb("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new IW({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?S6(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){let t;IF(e)&&(e=e[0]);let r=this.cell.stateSize;Array.isArray(r)||(r=[r]);let n=r[0];if(t=this.returnSequences?[e[0],e[1],n]:[e[0],n],!this.returnState)return t;{let n=[];for(let t of r)n.push([e[0],t]);return[t].concat(n)}}computeMask(e,t){return aH(()=>{Array.isArray(t)&&(t=t[0]);let e=this.returnSequences?t:null;return this.returnState?[e].concat(this.states.map(e=>null)):e})}get states(){if(null!=this.states_)return this.states_;{let e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let r=0;r<e;++r)t.push(null);return t}}set states(e){this.states_=e}build(e){let t;if(null!=this.numConstants)throw new Sx("Constants support is not implemented in RNN yet.");IF(e)&&(e=e[0]);let r=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new IW({shape:[r,null,...n]});let a=[e[0]].concat(e.slice(2));if(this.cell.build(a),t=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!ny.arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),t))throw new Sb(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=t.map(e=>new IW({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){aH(()=>{if(!this.stateful)throw new Sg("Cannot call resetStates() on an RNN Layer that is not stateful.");let r=this.inputSpec[0].shape[0];if(null==r)throw new Sb("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>hK([r,e])):this.states_=[hK([r,this.cell.stateSize])];else if(null==e)aj(this.states_),null!=this.keptStates&&(aj(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>hK([r,e])):this.states_[0]=hK([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Sb(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):aj(this.states_);for(let t=0;t<this.states_.length;++t){let n=e[t],a=[r,Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize];if(!ny.arraysEqual(n.shape,a))throw new Sb(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>aK(e.clone()))})}apply(e,t){let r=null==t?null:t.initialState,n=null==t?null:t.constants;null==t&&(t={});let a=NO(e,r,n,this.numConstants);e=a.inputs,r=a.initialState,n=a.constants;let i=[],s=[];if(null!=r){for(let e of(t.initialState=r,i=i.concat(r),this.stateSpec=[],r))this.stateSpec.push(new IW({shape:e.shape}));s=s.concat(this.stateSpec)}if(null!=n&&(t.constants=n,i=i.concat(n),this.numConstants=n.length),!(i[0]instanceof IU))return super.apply(e,t);{let r=[e].concat(i),n=this.inputSpec.concat(s),a=this.inputSpec;this.inputSpec=n;let o=super.apply(r,t);return this.inputSpec=a,o}}call(e,t){return aH(()=>{let r=null==t?null:t.mask,n=null==t?null:t.training,a=null==t?null:t.initialState;e=ID(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));let i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==i)throw new Sb(`RNN Layer has ${i} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let s={training:n},o=NM((e,t)=>{let r=this.cell.call([e].concat(t),s);return[r[0],r.slice(1)]},e,a,this.goBackwards,r,null,this.unroll,this.returnSequences),l=o[0],u=o[1],h=o[2];this.stateful&&this.resetStates(h,n);let p=this.returnSequences?u:l;return this.returnState?[p].concat(h):p})}getInitialState(e){return aH(()=>{let t=hK(e.shape);return(t=S7(t=oS(t,[1,2])),Array.isArray(this.cell.stateSize))?this.cell.stateSize.map(e=>e>1?Ia(t,[1,e]):t):this.cell.stateSize>1?[Ia(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){let e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);let r=this.cell.getConfig();return this.getClassName()===Nz.className&&(t.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),t)}static fromConfig(e,t,r={}){let n=Cl(t.cell,r);return new e(Object.assign(t,{cell:n}))}}Nz.className="RNN",sv.registerClass(Nz);class NP extends Ij{}class NL extends NP{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,SM(this.units,"units"),this.activation=Ni(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=IA(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=IA(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=IA(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Nh(e.kernelRegularizer),this.recurrentRegularizer=Nh(e.recurrentRegularizer),this.biasRegularizer=Nh(e.biasRegularizer),this.kernelConstraint=I8(e.kernelConstraint),this.recurrentConstraint=I8(e.recurrentConstraint),this.biasConstraint=I8(e.biasConstraint),this.dropout=S3([1,S4([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=S3([1,S4([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=IO(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return aH(()=>{let r;if(2!==e.length)throw new Sb(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];let a=null!=t.training&&t.training;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Nj({ones:()=>h4(e),rate:this.dropout,training:a,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Nj({ones:()=>h4(n),rate:this.recurrentDropout,training:a,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,s=this.recurrentDropoutMask;r=null!=i?Is(sf(e,i),this.kernel.read()):Is(e,this.kernel.read()),null!=this.bias&&(r=Iu(r,this.bias.read())),null!=s&&(n=sf(n,s));let o=sp(r,Is(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:Nn(this.activation),useBias:this.useBias,kernelInitializer:SR(this.kernelInitializer),recurrentInitializer:SR(this.recurrentInitializer),biasInitializer:SR(this.biasInitializer),kernelRegularizer:SR(this.kernelRegularizer),recurrentRegularizer:SR(this.recurrentRegularizer),biasRegularizer:SR(this.biasRegularizer),activityRegularizer:SR(this.activityRegularizer),kernelConstraint:SR(this.kernelConstraint),recurrentConstraint:SR(this.recurrentConstraint),biasConstraint:SR(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}NL.className="SimpleRNNCell",sv.registerClass(NL);class NB extends Nz{constructor(e){e.cell=new NL(e),super(e)}call(e,t){return aH(()=>{null!=this.cell.dropoutMask&&(aj(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(aj(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let r=null==t?null:t.mask,n=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:r,training:n,initialState:a})})}static fromConfig(e,t){return new e(t)}}NB.className="SimpleRNN",sv.registerClass(NB);class NW extends NP{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Sb("GRUCell does not support reset_after parameter set to true.");this.units=e.units,SM(this.units,"units"),this.activation=Ni(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ni(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=IA(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=IA(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=IA(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Nh(e.kernelRegularizer),this.recurrentRegularizer=Nh(e.recurrentRegularizer),this.biasRegularizer=Nh(e.biasRegularizer),this.kernelConstraint=I8(e.kernelConstraint),this.recurrentConstraint=I8(e.recurrentConstraint),this.biasConstraint=I8(e.biasConstraint),this.dropout=S3([1,S4([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=S3([1,S4([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){let t=(e=IO(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return aH(()=>{let r,n;if(2!==e.length)throw new Sb(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);let a=null!=t.training&&t.training,i=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Nj({ones:()=>h4(e),rate:this.dropout,training:a,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Nj({ones:()=>h4(i),rate:this.recurrentDropout,training:a,count:3,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,o=this.recurrentDropoutMask;0<this.dropout&&this.dropout<1&&(e=sf(e,s[0]));let l=Is(e,this.kernel.read());this.useBias&&(l=Iu(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(i=sf(i,o[0]));let u=this.recurrentKernel.read(),[h,p]=pM(u,[2*this.units,this.units],u.rank-1),d=Is(i,h),[c,f,m]=pM(l,3,l.rank-1),[g,y]=pM(d,2,d.rank-1);r=this.recurrentActivation.apply(sp(c,g));let b=Is(sf(this.recurrentActivation.apply(sp(f,y)),i),p);n=this.activation.apply(sp(m,b));let x=sp(sf(r,i),sf(sp(1,hA(r)),n));return[x,x]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:Nn(this.activation),recurrentActivation:Nn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:SR(this.kernelInitializer),recurrentInitializer:SR(this.recurrentInitializer),biasInitializer:SR(this.biasInitializer),kernelRegularizer:SR(this.kernelRegularizer),recurrentRegularizer:SR(this.recurrentRegularizer),biasRegularizer:SR(this.biasRegularizer),activityRegularizer:SR(this.activityRegularizer),kernelConstraint:SR(this.kernelConstraint),recurrentConstraint:SR(this.recurrentConstraint),biasConstraint:SR(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}NW.className="GRUCell",sv.registerClass(NW);class NU extends Nz{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new NW(e),super(e)}call(e,t){return aH(()=>{null!=this.cell.dropoutMask&&(aj(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(aj(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let r=null==t?null:t.mask,n=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:r,training:n,initialState:a})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}NU.className="GRU",sv.registerClass(NU);class NV extends NP{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,SM(this.units,"units"),this.activation=Ni(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ni(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=IA(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=IA(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=IA(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Nh(e.kernelRegularizer),this.recurrentRegularizer=Nh(e.recurrentRegularizer),this.biasRegularizer=Nh(e.biasRegularizer),this.kernelConstraint=I8(e.kernelConstraint),this.recurrentConstraint=I8(e.recurrentConstraint),this.biasConstraint=I8(e.biasConstraint),this.dropout=S3([1,S4([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=S3([1,S4([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;let r,n=(e=IO(e))[e.length-1];if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){let e=this.biasInitializer,n=this.units;r=new((t=class extends Ic{apply(t,r){let a=e.apply([n]),i=new Im().apply([n]),s=e.apply([2*n]);return In(In(a,i),s)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return aH(()=>{let r,n,a=null!=t.training&&t.training;if(3!==e.length)throw new Sb(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let i=e[1],s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Nj({ones:()=>h4(e),rate:this.dropout,training:a,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Nj({ones:()=>h4(i),rate:this.recurrentDropout,training:a,count:4,dropoutFunc:this.dropoutFunc}));let o=this.dropoutMask,l=this.recurrentDropoutMask;0<this.dropout&&this.dropout<1&&(e=sf(e,o[0]));let u=Is(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(i=sf(i,l[0])),u=sp(u,Is(i,this.recurrentKernel.read())),this.useBias&&(u=Iu(u,this.bias.read()));let[h,p,d,c]=pM(u,4,u.rank-1);r=this.recurrentActivation.apply(h),n=sp(sf(this.recurrentActivation.apply(p),s),sf(r,this.activation.apply(d)));let f=sf(this.recurrentActivation.apply(c),this.activation.apply(n));return[f,f,n]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:Nn(this.activation),recurrentActivation:Nn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:SR(this.kernelInitializer),recurrentInitializer:SR(this.recurrentInitializer),biasInitializer:SR(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:SR(this.kernelRegularizer),recurrentRegularizer:SR(this.recurrentRegularizer),biasRegularizer:SR(this.biasRegularizer),activityRegularizer:SR(this.activityRegularizer),kernelConstraint:SR(this.kernelConstraint),recurrentConstraint:SR(this.recurrentConstraint),biasConstraint:SR(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}NV.className="LSTMCell",sv.registerClass(NV);class NG extends Nz{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new NV(e),super(e)}call(e,t){return aH(()=>{null!=this.cell.dropoutMask&&(aj(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(aj(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let r=null==t?null:t.mask,n=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:r,training:n,initialState:a})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}NG.className="LSTM",sv.registerClass(NG);class NH extends NP{constructor(e){super(e),this.cells=e.cells}get stateSize(){let e=[];for(let t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return aH(()=>{let r,n=e.slice(1),a=[];for(let e of this.cells.slice().reverse())Array.isArray(e.stateSize)?a.push(n.splice(0,e.stateSize.length)):a.push(n.splice(0,1));a.reverse();let i=[];for(let s=0;s<this.cells.length;++s){let o=this.cells[s];n=a[s],r=0===s?[e[0]].concat(n):[r[0]].concat(n),r=o.call(r,t),i.push(r.slice(1))}for(let e of(n=[],i.slice().reverse()))n.push(...e);return[r[0]].concat(n)})}build(e){let t;IF(e)&&(e=e[0]),this.cells.forEach((r,n)=>{SZ(`RNNCell_${n}`,()=>{r.build(e),t=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){let e=super.getConfig(),t=this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}));return Object.assign(Object.assign({},e),{cells:t})}static fromConfig(e,t,r={}){let n=[];for(let e of t.cells)n.push(Cl(e,r));return new e({cells:n})}get trainableWeights(){if(!this.trainable)return[];let e=[];for(let t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){let e=[];for(let t of this.cells)e.push(...t.weights);return IL(e)}setWeights(e){let t=[];for(let r of this.cells){let n=r.weights.length,a=e.splice(n);for(let e=0;e<r.weights.length;++e)t.push([r.weights[e],a[e]])}IB(t)}}function Nj(e){let{ones:t,rate:r,training:n=!1,count:a=1,dropoutFunc:i}=e,s=()=>{var e;return null!=i?i(t(),r):(e=t(),aH(()=>uA(e,r,void 0,void 0)))},o=()=>Ih(s,t,n);return!a||a<=1?aK(o().clone()):Array(a).fill(void 0).map(o).map(e=>aK(e.clone()))}NH.className="StackedRNNCells",sv.registerClass(NH);var NK=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&0>t.indexOf(n)&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var a=0,n=Object.getOwnPropertySymbols(e);a<n.length;a++)0>t.indexOf(n[a])&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(r[n[a]]=e[n[a]]);return r};class Nq extends Nz{constructor(e){if(e.unroll)throw new Sx("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Sx("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new IW({ndim:5})]}call(e,t){return aH(()=>{if(null!=this.cell.dropoutMask&&(aj(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(aj(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Sb("ConvRNN2D cell does not support constants");let r=null==t?null:t.mask,n=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:r,training:n,initialState:a})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...[,,].fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return aH(()=>{let{stateSize:t}=this.cell,r=e.shape,n=this.computeSingleOutputShape(r),a=hK([n[0],...n.slice(2)]);return Array.isArray(t)?Array(t.length).fill(a):[a]})}resetStates(e,t=!1){aH(()=>{if(!this.stateful)throw new Sg("Cannot call resetStates() on an RNN Layer that is not stateful.");let r=this.inputSpec[0].shape,n=this.computeSingleOutputShape(r),a=[n[0],...n.slice(2)];if(null==r[0])throw new Sb("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>hK(a)):this.states_=[hK(a)];else if(null==e)aj(this.states_),null!=this.keptStates&&(aj(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>hK(a)):this.states_[0]=hK(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Sb(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):aj(this.states_);for(let t=0;t<this.states_.length;++t){let r=e[t];if(!ny.arraysEqual(r.shape,a))throw new Sb(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map(e=>aK(e.clone()))})}computeSingleOutputShape(e){let{dataFormat:t,filters:r,kernelSize:n,padding:a,strides:i,dilationRate:s}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],h=Nb(l,n[0],a,i[0],s[0]),p=Nb(u,n[1],a,i[1],s[1]);return[...e.slice(0,2),...o?[r,h,p]:[h,p,r]]}}Nq.className="ConvRNN2D";class NX extends NV{constructor(e){let{filters:t,kernelSize:r,strides:n,padding:a,dataFormat:i,dilationRate:s}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,SM(this.filters,"filters"),this.kernelSize=Ny(r,2,"kernelSize"),this.kernelSize.forEach(e=>SM(e,"kernelSize")),this.strides=Ny(n||1,2,"strides"),this.strides.forEach(e=>SM(e,"strides")),this.padding=a||"valid",Sq(this.padding),this.dataFormat=i||"channelsLast",SK(this.dataFormat),this.dilationRate=Ny(s||1,2,"dilationRate"),this.dilationRate.forEach(e=>SM(e,"dilationRate"))}build(e){var t;e=IO(e);let r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new Sb(`The channel dimension of the input should be defined. Found ${e[r]}`);let n=e[r],a=this.kernelSize.concat([n,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let i=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",i,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){let r=this.biasInitializer,n=this.filters;e=new((t=class extends Ic{apply(e,t){let a=r.apply([n]);return Ir([a,hq([n]),r.apply([2*n])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return aH(()=>{if(3!==e.length)throw new Sb(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=t.training||!1,n=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Nj({ones:()=>h4(n),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,o=(e,t,r)=>t&&t[r]?sf(t[r],e):e,l=o(n,s,0),u=o(n,s,1),h=o(n,s,2),p=o(n,s,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Nj({ones:()=>h4(a),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));let d=this.recurrentDropoutMask,c=o(a,d,0),f=o(a,d,1),m=o(a,d,2),g=o(a,d,3),[y,b,x,v]=pM(this.kernel.read(),4,3),[w,k,S,I]=this.useBias?pM(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,w,this.padding),u=this.inputConv(u,b,k,this.padding),h=this.inputConv(h,x,S,this.padding),p=this.inputConv(p,v,I,this.padding);let[C,N,T,$]=pM(this.recurrentKernel.read(),4,3);c=this.recurrentConv(c,C),f=this.recurrentConv(f,N),m=this.recurrentConv(m,T),g=this.recurrentConv(g,$);let E=this.recurrentActivation.apply(sp(l,c)),R=this.recurrentActivation.apply(sp(u,f)),A=sp(sf(R,i),sf(E,this.activation.apply(sp(h,m)))),F=sf(this.recurrentActivation.apply(sp(p,g)),this.activation.apply(A));return[F,F,A]})}getConfig(){let e=super.getConfig(),{units:t}=e,r=NK(e,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},r),n)}inputConv(e,t,r,n){let a=ul(e,t,this.strides,n||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?Iu(a,r,this.dataFormat):a}recurrentConv(e,t){return ul(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}NX.className="ConvLSTM2DCell",sv.registerClass(NX);class NY extends Nq{constructor(e){super(Object.assign(Object.assign({},e),{cell:new NX(e)}))}static fromConfig(e,t){return new e(t)}}NY.className="ConvLSTM2D",sv.registerClass(NY);class NZ extends Ij{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;let t=e.shape,r=[];for(let e=0;e<this.noiseShape.length;++e)r.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return r}call(e,t){return aH(()=>{this.invokeCallHook(e,t);let r=ID(e);if(0<this.rate&&this.rate<1){let e=null!=t.training&&t.training,n=this.getNoiseShape(r);return Ih(()=>{var e,t;return e=this.rate,t=this.seed,aH(()=>uA(r,e,n,t))},()=>r,e)}return e})}getConfig(){let e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed};return Object.assign(e,super.getConfig()),e}dispose(){return super.dispose()}}NZ.className="Dropout",sv.registerClass(NZ);class NQ extends NZ{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){let t=e.shape;return[t[0],1,t[2]]}}NQ.className="SpatialDropout1D",sv.registerClass(NQ);class NJ extends Ij{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,SM(this.units,"units"),this.activation=Ni(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=IA(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=IA(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=I8(e.kernelConstraint),this.biasConstraint=I8(e.biasConstraint),this.kernelRegularizer=Nh(e.kernelRegularizer),this.biasRegularizer=Nh(e.biasRegularizer),this.activityRegularizer=Nh(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){let t=(e=IO(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){let t=(e=IO(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return aH(()=>{let r;this.invokeCallHook(e,t);let n=ID(e),a=Sz(this.activation.getClassName());return null!=a?r=Is(n,this.kernel.read(),a,this.bias?this.bias.read():null):(r=Is(n,this.kernel.read()),null!=this.bias&&(r=Iu(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r})}getConfig(){let e={units:this.units,activation:Nn(this.activation),useBias:this.useBias,kernelInitializer:SR(this.kernelInitializer),biasInitializer:SR(this.biasInitializer),kernelRegularizer:SR(this.kernelRegularizer),biasRegularizer:SR(this.biasRegularizer),activityRegularizer:SR(this.activityRegularizer),kernelConstraint:SR(this.kernelConstraint),biasConstraint:SR(this.biasConstraint)};return Object.assign(e,super.getConfig()),e}}NJ.className="Dense",sv.registerClass(NJ);class N0 extends Ij{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){for(let t of(e=IO(e)).slice(1))if(null==t)throw new Sb(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],S2(e,1)]}call(e,t){return aH(()=>{this.invokeCallHook(e,t);let r=ID(e);if("channelsFirst"===this.dataFormat&&r.rank>1){let e=[0];for(let t=2;t<r.rank;++t)e.push(t);e.push(1),r=p8(r,e)}var n=r;if(n.rank<=1)throw new Sb(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);let a=[n.shape[0],S2(n.shape,1)];return s9(n,a)})}getConfig(){let e={};return null!=this.dataFormat&&(e.dataFormat=this.dataFormat),Object.assign(e,super.getConfig()),e}}N0.className="Flatten",sv.registerClass(N0);class N1 extends Ij{constructor(e){super(e),this.supportsMasking=!0,this.activation=Ni(e.activation)}call(e,t){return aH(()=>{this.invokeCallHook(e,t);let r=ID(e);return this.activation.apply(r)})}getConfig(){let e={activation:Nn(this.activation)};return Object.assign(e,super.getConfig()),e}}N1.className="Activation",sv.registerClass(N1);class N2 extends Ij{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return aH(()=>{var t,r;return t=e=ID(e),r=this.n,aH(()=>{if(2!==t.shape.length)throw new Sb(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Ia(S7(t,1),[1,r,1])})})}getConfig(){let e={n:this.n};return Object.assign(e,super.getConfig()),e}}N2.className="RepeatVector",sv.registerClass(N2);class N3 extends Ij{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){let r="Total size of new array must be unchanged.",n=t.slice(),a=1,i=null;for(let e=0;e<n.length;++e){let t=n[e];if(this.isUnknown(t))if(null===i)i=e;else throw new Sb("Can only specifiy one unknown dimension.");else a*=t}let s=S2(e);if(null!==i){if(0===a||s%a!=0)throw new Sb(r);n[i]=s/a}else if(s!==a)throw new Sb(r);return n}computeOutputShape(e){let t=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return aH(()=>{this.invokeCallHook(e,t);let r=ID(e),n=r.shape;return s9(r,n.slice(0,1).concat(this.fixUnknownDimension(n.slice(1),this.targetShape)))})}getConfig(){let e={targetShape:this.targetShape};return Object.assign(e,super.getConfig()),e}}N3.className="Reshape",sv.registerClass(N3);class N4 extends Ij{constructor(e){if(super(e),null==e.dims)throw Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);let t=S6(1,e.dims.length+1);if(!ny.arraysEqual(e.dims.slice().sort(),t))throw Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new IW({ndim:this.dims.length+1})]}computeOutputShape(e){let t=(e=IO(e)).slice();return this.dims.forEach((r,n)=>{t[n+1]=e[r]}),t}call(e,t){return p8(ID(e),this.dimsIncludingBatch)}getConfig(){let e={dims:this.dims};return Object.assign(e,super.getConfig()),e}}N4.className="Permute",sv.registerClass(N4);class N6 extends Ij{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e?this.maskValue=null==e.maskValue?0:e.maskValue:this.maskValue=0}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){return sH(h2(ID(e),this.maskValue),-1)}call(e,t){return aH(()=>{this.invokeCallHook(e,t);let r=ID(e),n=sH(h2(r,this.maskValue),-1,!0);return sf(r,sl(n,r.dtype))})}}N6.className="Masking",sv.registerClass(N6);class N5 extends Ij{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(SN(e.inputLength))}this.inputDim=e.inputDim,SM(this.inputDim,"inputDim"),this.outputDim=e.outputDim,SM(this.outputDim,"outputDim"),this.embeddingsInitializer=IA(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Nh(e.embeddingsRegularizer),this.activityRegularizer=Nh(e.activityRegularizer),this.embeddingsConstraint=I8(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return aH(()=>this.maskZero?h2(e=ID(e),sy(e)):null)}computeOutputShape(e){if(e=IO(e),null==this.inputLength)return[...e,this.outputDim];let t=SN(this.inputLength);if(t.length!==e.length-1)throw new Sb(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let n=0;n<t.length;++n){let a=t[n],i=e[n+1];if(null!=a&&null!=i&&a!==i)throw new Sb(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[r]=i),r++}}return[e[0],...t,this.outputDim]}call(e,t){return aH(()=>{this.invokeCallHook(e,t);let r=ID(e);"int32"!==r.dtype&&(r=sl(r,"int32"));let n=Io(this.embeddings.read(),s9(r,[r.size]));return s9(n,IO(this.computeOutputShape(r.shape)))})}getConfig(){let e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:SR(this.embeddingsInitializer),embeddingsRegularizer:SR(this.embeddingsRegularizer),activityRegularizer:SR(this.activityRegularizer),embeddingsConstraint:SR(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength};return Object.assign(e,super.getConfig()),e}}N5.className="Embedding",sv.registerClass(N5);class N8 extends Ij{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Sx}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;let r=e.slice(0,e.length-t.length);for(let n=0;n<t.length;++n){let a=e[e.length-t.length+n],i=t[n];if(null==a||null==i||a<0||i<0)r.push(null);else if(1===a)r.push(i);else if(1===i)r.push(a);else{if(a!==i)throw new Sb("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));r.push(a)}}return r}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[IO(e)]),e.length<2)throw new Sb(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(let r of e)null!=r&&null!==r[0]&&t.push(r[0]);if((t=S_(t)).length>1)throw new Sb(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let r=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){let n=null==e[t]?null:e[t].slice(1);r=this.computeElementwiseOpOutputShape(r,n)}let n=e.map(e=>e.length);-1===e.indexOf(null)&&1===S_(n).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return aH(()=>{if(!this.reshapeRequired)return this.mergeFunction(e);{let t=[],r=e.map(e=>e.rank);if(-1===r.indexOf(null)){let n=S4(r);for(let r of e){let e=r.rank;for(let t=0;t<n-e;++t)r=S7(r,1);t.push(r)}return this.mergeFunction(t)}{let r=!1;for(let n of e){let e=n.rank;if(null==e){let e=n.shape,a=e[0],i=e.slice(1).concat([a]),s=s9(n,[a].concat(S2(e.slice(1))));s=s9(s=p8(s,[1,0]),i),t.push(s),r=!0}else if(e>1){let a=S6(1,e).concat([0]);t.push(p8(n,a)),r=!0}else t.push(n)}let n=this.mergeFunction(t),a=n.rank;if(r)if(null==a){let e=n.shape,t=e.length,r=e[t-1],a=[r].concat(e.slice(0,e.length-1));n=s9(p8(s9(n,[-1,r]),[1,0]),a)}else a>1&&(n=p8(n,[a-1].concat(S6(0,a-1))));return n}}})}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){let n=null==e[r]?null:e[r].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let r=[];for(let t of e)null!=t&&null!==t[0]&&r.push(t[0]);return 1===(r=S_(r)).length?r.concat(t):[null].concat(t)}computeMask(e,t){return aH(()=>{if(null==t)return null;if(!Array.isArray(t))throw new Sb("`mask` should be an Array");if(!Array.isArray(e))throw new Sb("`inputs` should be an Array");if(t.length!==e.length)throw new Sb(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let r=(t=t.map(e=>null==e?e:uO(e,0)))[0];for(let e=1;e<t.length-1;++e)r=hM(r,t[e]);return r})}}class N7 extends N8{constructor(e){super(e)}mergeFunction(e){return aH(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=sp(t,e[r]);return t})}}N7.className="Add",sv.registerClass(N7);class N9 extends N8{constructor(e){super(e)}mergeFunction(e){return aH(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=sf(t,e[r]);return t})}}N9.className="Multiply",sv.registerClass(N9);class Te extends N8{constructor(e){super(e)}mergeFunction(e){return aH(()=>{let t=e[0].clone();for(let r=1;r<e.length;++r)t=sp(t,e[r]);return sf(1/e.length,t)})}}Te.className="Average",sv.registerClass(Te);class Tt extends N8{constructor(e){super(e)}mergeFunction(e){return aH(()=>{let t=e[0];for(let r=1;r<e.length;++r)t=sL(t,e[r]);return t})}}Tt.className="Maximum",sv.registerClass(Tt);class Tr extends N8{constructor(e){super(e)}mergeFunction(e){return aH(()=>{let t=e[0];for(let r=1;r<e.length;++r)t=hY(t,e[r]);return t})}}Tr.className="Minimum",sv.registerClass(Tr);class Tn extends N8{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!(Array.isArray(e)&&Array.isArray(e[0]))||1===e.length)throw new Sb("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(let r of e)if(null!=r){t=!1;break}if(t)return;let r=[];for(let t=0;t<e.length;++t){let n=e[t].slice();n.splice(this.axis,1);let a=!1;for(let e of r)if(ny.arraysEqual(e,n)){a=!0;break}a||r.push(n)}if(r.length>1)throw new Sb("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return aH(()=>Ir(e,this.axis))}computeOutputShape(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))throw new Sb("A `Concatenate` layer should be called on a list of inputs.");let t=e[0].slice(),r=this.axis<0?t.length+this.axis:this.axis;for(let n of e.slice(1)){if(null==t[r]||null==n[r]){t[r]=null;break}t[r]+=n[r]}return t}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Sb("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Sb("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Sb(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return aH(()=>{let r=!0;if(t.forEach(e=>{if(null!=e){r=!1;return}}),r)return null;let n=[];for(let r=0;r<e.length;++r)null==t[r]?n.push(sl(h4(e[r]),"bool")):t[r].rank<e[r].rank?n.push(uO(t[r],-1)):n.push(t[r]);return sG(un(n,this.axis),-1,!1)})}getConfig(){let e={axis:this.axis};return Object.assign(e,super.getConfig()),e}}function Ta(e,t){for(;e<0;)e+=t;return e}Tn.className="Concatenate",sv.registerClass(Tn);class Ti extends N8{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){ny.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0],r=e[1];if(t.length>3||r.length>3)throw new Sx("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(t,r);if(t[n[0]]!==r[n[1]])throw new Sb(`Dimension incompatibility: ${t[n[0]]} !== ${r[n[1]]}`)}mergeFunction(e){let t;if(2!==e.length)throw new Sb(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let r=e[0],n=e[1];t=Array.isArray(this.axes)?this.axes.map((t,r)=>Ta(t,e[r].shape.length)):[Ta(this.axes,r.shape.length),Ta(this.axes,n.shape.length)],this.normalize&&(r=Cu(r,t[0]),n=Cu(n,t[1]));var a=r,i=n,s=t;if(a.shape.length>3||i.shape.length>3)throw new Sx("batchDot is not implemented for tensors of 4D or higher rank yet");if(ny.assert(a.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${a.shape.length}`),ny.assert(a.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${i.shape.length}`),"number"==typeof s&&(s=[s,s]),"complex64"===a.dtype||"complex64"===i.dtype)throw new Sx("batchDot is not implemented for complex64-type Tensors yet.");let o=a.shape.length,l=i.shape.length;null==s&&(s=[o-1,l-2]);let u=s;return aH(()=>{let e,t;if(o>l){e=o-l;let t=[];for(let r=0;r<e;++r)t.push(1);i=s9(i,i.shape.concat(t))}else if(l>o){e=l-o;let t=[];for(let r=0;r<e;++r)t.push(1);a=s9(a,a.shape.concat(t))}else e=0;if(2===a.shape.length&&2===i.shape.length)t=u[0]===u[1]?oS(sf(a,i),u[0]):oS(sf(p8(a,[1,0]),i),u[1]);else{let e=u[0]!==a.shape.length-1,r=u[1]===i.shape.length-1;t=uG(a,i,e,r)}if(e>0){let r;r=o>l?o+l-3:o-1;let n=[];for(let t=r;t<r+e;++t)n.push(t);t=pL(t,n)}return 1===t.shape.length&&(t=uO(t,1)),t})}interpretAxes(e,t){return Array.isArray(this.axes)?this.axes:[Ta(this.axes,e.length),Ta(this.axes,t.length)]}computeOutputShape(e){ny.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0].slice(),r=e[1].slice();if(t.length>3||r.length>3)throw new Sx("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(t,r);t.splice(n[0],1),r.splice(n[1],1),r.splice(0,1);let a=t.concat(r);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){let e={axes:this.axes,normalize:this.normalize};return Object.assign(e,super.getConfig()),e}}Ti.className="Dot",sv.registerClass(Ti);class Ts extends Ij{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return aH(()=>{this.invokeCallHook(e,t);let r=ID(e);return Ih(()=>sp(Ii(r.shape,0,this.stddev),r),()=>r,t.training||!1)})}}Ts.className="GaussianNoise",sv.registerClass(Ts);class To extends Ij{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return aH(()=>{this.invokeCallHook(e,t);let r=ID(e);return this.rate>0&&this.rate<1?Ih(()=>{let e=Math.sqrt(this.rate/(1-this.rate));return sf(r,Ii(r.shape,1,e))},()=>r,t.training||!1):r})}}To.className="GaussianDropout",sv.registerClass(To);class Tl extends Ij{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||ID(e).shape}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return aH(()=>{if(this.rate<1&&this.rate>0){let r=this._getNoiseShape(e);return Ih(()=>{let t=ID(e),n=uq(uR(r),this.rate);n=sl(n,"float32");let a=((1-this.rate)*(1+3.09091329228798*this.rate))**-.5,i=-(-1.7580993408473766*a)*this.rate,s=sp(sf(t,n),sf(sp(n,-1),-1.7580993408473766));return sp(sf(s,a),i)},()=>ID(e),t.training||!1)}return e})}}function Tu(e,t,r,n,a,i=.001){let s;if(2===e.rank)s=lJ(e,t,r,n,a,i);else if(3===e.rank)s=l0(e,t,r,n,a,i);else if(4===e.rank)s=l1(e,t,r,n,a,i);else throw new Sx(`batchNormalization is not implemented for array of rank ${e.rank} yet`);return s}Tl.className="AlphaDropout",sv.registerClass(Tl);class Th extends Ij{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=IA(e.betaInitializer||"zeros"),this.gammaInitializer=IA(e.gammaInitializer||"ones"),this.movingMeanInitializer=IA(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=IA(e.movingVarianceInitializer||"ones"),this.betaConstraint=I8(e.betaConstraint),this.gammaConstraint=I8(e.gammaConstraint),this.betaRegularizer=Nh(e.betaRegularizer),this.gammaRegularizer=Nh(e.gammaRegularizer)}build(e){e=IO(e);let t=this.axis>=0?this.axis:this.axis+e.length,r=e[t];if(null==r)throw new Sb(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new IW({ndim:e.length,axes:{[t]:r}})];let n=[r];this.scale&&(this.gamma=this.addWeight("gamma",n,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",n,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",n,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",n,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return aH(()=>{let r=null!=t.training&&t.training,n=ID(e),a=n.shape,i=a.length,s=S6(0,i),o=this.axis>=0?this.axis:this.axis+i;s.splice(o,1);let l=Sk(1,i);l[o]=a[o];let u=s.slice();u.sort();let h=!ny.arraysEqual(u,S6(0,i).slice(0,i-1)),p=()=>{if(!h)return Tu(n,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon);{let e=s9(this.movingMean.read(),l),t=s9(this.movingVariance.read(),l);return Tu(n,e,t,this.center?s9(this.beta.read(),l):null,this.scale?s9(this.gamma.read(),l):null,this.epsilon)}};if(!r)return p();let[d,c,f]=function(e,t,r,n,a=.001){return ny.arraysEqual(n.slice().sort(),S6(0,e.rank-1))?function(e,t,r,n,a=.001){return aH(()=>{let i=hJ(e,n),s=i.mean,o=i.variance;return[Tu(e,s,o,r,t,a),s,o]})}(e,t,r,n,a):function(e,t,r,n,a=.001){return aH(()=>{let i=hJ(e,n),s=i.mean,o=i.variance,l=[];for(let t of S6(0,e.rank))-1!==n.indexOf(t)?l.push(1):l.push(e.shape[t]);let u=s9(s,l),h=s9(o,l),p=null==t?null:s9(t,l);return[Tu(e,u,h,null==r?null:s9(r,l),p,a),s,o]})}(e,t,r,n,a)}(n,this.gamma.read(),this.beta.read(),s,this.epsilon),m=(e,t,r)=>{aH(()=>{let n=e.read(),a=sf(sF(n,t),1-r);e.write(sF(n,a))})};return m(this.movingMean,c,this.momentum),m(this.movingVariance,f,this.momentum),d})}getConfig(){let e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:SR(this.betaInitializer),gammaInitializer:SR(this.gammaInitializer),movingMeanInitializer:SR(this.movingMeanInitializer),movingVarianceInitializer:SR(this.movingVarianceInitializer),betaRegularizer:SR(this.betaRegularizer),gammaRegularizer:SR(this.gammaRegularizer),betaConstraint:SR(this.betaConstraint),gammaConstraint:SR(this.gammaConstraint)};return Object.assign(e,super.getConfig()),e}}Th.className="BatchNormalization",sv.registerClass(Th);class Tp extends Ij{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let e of this.axis)if(!Number.isInteger(e))throw Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=IA(e.betaInitializer||"zeros"),this.gammaInitializer=IA(e.gammaInitializer||"ones"),this.betaRegularizer=Nh(e.betaRegularizer),this.gammaRegularizer=Nh(e.gammaRegularizer),this.supportsMasking=!0}build(e){let t=(e=IO(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(let e of this.axis)if(e<0||e>=t)throw Error(`Invalid axis: ${e}`);if(this.axis.length!==S_(this.axis).length)throw Error(`Found duplicate axes in: ${this.axis}`);let r=this.axis.map(t=>e[t]);this.scale?this.gamma=this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){let r=ID(e),n=r.shape,a=n.length;return aH(()=>{let{mean:e,variance:t}=hJ(r,this.axis,!0),i=Sk(1,a);for(let e of this.axis)i[e]=n[e];let s=e=>null!=e&&e.shape.length!==a?s9(e,i):e,o=this.scale?s(this.gamma.read()):null,l=this.center?s(this.beta.read()):null,u=[],h=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(u.push(n[e]),h.push(1)):(u.push(1),h.push(n[e]));return e=uM(e,u),t=uM(t,u),null!=o&&(o=uM(o,h)),null!=l&&(l=uM(l,h)),Tu(r,e,t,l,o,this.epsilon)})}getConfig(){let e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:SR(this.betaInitializer),gammaInitializer:SR(this.gammaInitializer),betaRegularizer:SR(this.betaRegularizer),gammaRegularizer:SR(this.gammaRegularizer)};return Object.assign(e,super.getConfig()),e}}Tp.className="LayerNormalization",sv.registerClass(Tp);class Td extends Ij{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?S8():e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{let t,r;if(e.padding=e.padding,2!==e.padding.length)throw new Sb(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Sb(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Sb(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[t,r]}this.inputSpec=[new IW({ndim:4})]}computeOutputShape(e){let t,r;return(e=IO(e),"channelsFirst"===this.dataFormat)?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,r]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,r,e[3]])}call(e,t){return aH(()=>{var t,r,n;return t=ID(e),r=this.padding,n=this.dataFormat,aH(()=>{if(4!==t.rank)throw new Sb(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==r&&(r=[[1,1],[1,1]]),2!==r.length||2!==r[0].length||2!==r[1].length)throw new Sb("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==n&&(n=S8()),"channelsLast"!==n&&"channelsFirst"!==n)throw new Sb(`Unknown data format: ${n}. Supported data formats are 'channelsLast' and 'channelsFirst.`);return h5(t,"channelsFirst"===n?[[0,0],[0,0],r[0],r[1]]:[[0,0],r[0],r[1],[0,0]])})})}getConfig(){let e={padding:this.padding,dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}function Tc(e,t,r,n,a,i){return aH(()=>{let s;SK(a),SX(i),Sq(n),null==r&&(r=[1,1]),null==n&&(n="valid"),null==a&&(a=S8()),null==i&&(i="max"),e=Nv(e,a);let o="same"===n?"same":"valid";return s="max"===i?hV(e,t,r,o):oe(e,t,r,o),"channelsFirst"===a&&(s=p8(s,[0,3,1,2])),s})}function Tf(e,t,r,n,a,i){return aH(()=>{let s;SK(a),SX(i),Sq(n),null==r&&(r=[1,1,1]),null==n&&(n="valid"),null==a&&(a=S8()),null==i&&(i="max"),e=Nw(e,a);let o="same"===n?"same":"valid";return s="max"===i?hG(e,t,r,o):ot(e,t,r,o),"channelsFirst"===a&&(s=p8(s,[0,4,1,2,3])),s})}Td.className="ZeroPadding2D",sv.registerClass(Td);class Tm extends Ij{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else if(Array.isArray(e.poolSize)&&1===e.poolSize.length&&"number"==typeof e.poolSize[0])this.poolSize=e.poolSize;else throw new Sb(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);if(SM(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else if(Array.isArray(e.strides)&&1===e.strides.length&&"number"==typeof e.strides[0])this.strides=e.strides;else throw new Sb(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);SM(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Sq(this.padding),this.inputSpec=[new IW({ndim:3})]}computeOutputShape(e){let t=Nb((e=IO(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return aH(()=>(this.invokeCallHook(e,t),e=S7(ID(e),2),pL(this.poolingFunction(ID(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast"),[2])))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides};return Object.assign(e,super.getConfig()),e}}class Tg extends Tm{constructor(e){super(e)}poolingFunction(e,t,r,n,a){return SK(a),Sq(n),Tc(e,t,r,n,a,"max")}}Tg.className="MaxPooling1D",sv.registerClass(Tg);class Ty extends Tm{constructor(e){super(e)}poolingFunction(e,t,r,n,a){return SK(a),Sq(n),Tc(e,t,r,n,a,"avg")}}Ty.className="AveragePooling1D",sv.registerClass(Ty);class Tb extends Ij{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Sb(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];SM(this.poolSize,"poolSize"),SM(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,SK(this.dataFormat),Sq(this.padding),this.inputSpec=[new IW({ndim:4})]}computeOutputShape(e){e=IO(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],r="channelsFirst"===this.dataFormat?e[3]:e[2];return(t=Nb(t,this.poolSize[0],this.padding,this.strides[0]),r=Nb(r,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat)?[e[0],e[1],t,r]:[e[0],t,r,e[3]]}call(e,t){return aH(()=>(this.invokeCallHook(e,t),this.poolingFunction(ID(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}class Tx extends Tb{constructor(e){super(e)}poolingFunction(e,t,r,n,a){return SK(a),Sq(n),Tc(e,t,r,n,a,"max")}}Tx.className="MaxPooling2D",sv.registerClass(Tx);class Tv extends Tb{constructor(e){super(e)}poolingFunction(e,t,r,n,a){return SK(a),Sq(n),Tc(e,t,r,n,a,"avg")}}Tv.className="AveragePooling2D",sv.registerClass(Tv);class Tw extends Ij{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Sb(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];SM(this.poolSize,"poolSize"),SM(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,SK(this.dataFormat),Sq(this.padding),this.inputSpec=[new IW({ndim:5})]}computeOutputShape(e){e=IO(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],r="channelsFirst"===this.dataFormat?e[3]:e[2],n="channelsFirst"===this.dataFormat?e[4]:e[3];return(t=Nb(t,this.poolSize[0],this.padding,this.strides[0]),r=Nb(r,this.poolSize[1],this.padding,this.strides[1]),n=Nb(n,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat)?[e[0],e[1],t,r,n]:[e[0],t,r,n,e[4]]}call(e,t){return aH(()=>(this.invokeCallHook(e,t),this.poolingFunction(ID(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}class Tk extends Tw{constructor(e){super(e)}poolingFunction(e,t,r,n,a){return SK(a),Sq(n),Tf(e,t,r,n,a,"max")}}Tk.className="MaxPooling3D",sv.registerClass(Tk);class TS extends Tw{constructor(e){super(e)}poolingFunction(e,t,r,n,a){return SK(a),Sq(n),Tf(e,t,r,n,a,"avg")}}TS.className="AveragePooling3D",sv.registerClass(TS);class TI extends Ij{constructor(e){super(e),this.inputSpec=[new IW({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Sx}}class TC extends TI{constructor(e){super(e||{})}call(e,t){return aH(()=>hj(ID(e),1))}}TC.className="GlobalAveragePooling1D",sv.registerClass(TC);class TN extends TI{constructor(e){super(e||{})}call(e,t){return aH(()=>hg(ID(e),1))}}TN.className="GlobalMaxPooling1D",sv.registerClass(TN);class TT extends Ij{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,SK(this.dataFormat),this.inputSpec=[new IW({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Sx}getConfig(){let e={dataFormat:this.dataFormat};return Object.assign(e,super.getConfig()),e}}class T$ extends TT{call(e,t){return aH(()=>{let t=ID(e);return"channelsLast"===this.dataFormat?hj(t,[1,2]):hj(t,[2,3])})}}T$.className="GlobalAveragePooling2D",sv.registerClass(T$);class TE extends TT{call(e,t){return aH(()=>{let t=ID(e);return"channelsLast"===this.dataFormat?hg(t,[1,2]):hg(t,[2,3])})}}TE.className="GlobalMaxPooling2D",sv.registerClass(TE);class TR extends Ij{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){let e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}};return Object.assign(e,super.getConfig()),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,r={}){let n=Cl(t.layer,r);delete t.layer;let a={layer:n};return Object.assign(a,t),new e(a)}}class TA extends TR{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=IO(e)).length<3)throw new Sb(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];let t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){let t=[(e=IO(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(t),n=e[1];return[r[0],n].concat(r.slice(1))}call(e,t){return aH(()=>NM((e,r)=>[ID(this.layer.call(e,t)),[]],e=ID(e),[],!1,null,null,!1,!0)[1])}}TA.className="TimeDistributed",sv.registerClass(TA);class TF extends TR{constructor(e){super(e);let t=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=t,this.forwardLayer=Cl(r),t.goBackwards=!0!==t.goBackwards;let n={};if(n.className=e.layer.getClassName(),n.config=t,this.backwardLayer=Cl(n),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,SD(SH,"BidirectionalMergeMode",this.mergeMode),e.weights)throw new Sx("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){let t=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,t)),this.backwardLayer.setWeights(e.slice(t))}computeOutputShape(e){let t,r,n,a=this.forwardLayer.computeOutputShape(e);return(Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),this.returnState&&(n=a.slice(1)),t=a[0],"concat"===this.mergeMode?(t[t.length-1]*=2,r=[t]):r=null==this.mergeMode?[t,t.slice()]:[t],this.returnState)?null==this.mergeMode?r.concat(n).concat(n.slice()):[t].concat(n).concat(n.slice()):SC(r)}apply(e,t){let r=null==t?null:t.initialState,n=null==t?null:t.constants;null==t&&(t={});let a=NO(e,r,n,this.numConstants);if(e=a.inputs,r=a.initialState,n=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==n)return super.apply(e,t);let i=[],s=[];if(null!=r){let e=r.length;if(e%2>0)throw new Sb("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=r,i.push(...r);let n=r.map(e=>new IW({shape:e.shape}));this.forwardLayer.stateSpec=n.slice(0,e/2),this.backwardLayer.stateSpec=n.slice(e/2),s.push(...n)}if(null!=n)throw new Sx("Support for constants in Bidirectional layers is not implemented yet.");let o=i[0]instanceof IU;for(let e of i)if(e instanceof IU!==o)throw new Sb("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(!o)return super.apply(e,t);{let r=[e].concat(i),n=this.inputSpec.concat(s),a=this.inputSpec;this.inputSpec=n;let o=super.apply(r,t);return this.inputSpec=a,o}}call(e,t){return aH(()=>{let r,n,a,i,s=t.initialState;if(null==s)r=this.forwardLayer.call(e,t),n=this.backwardLayer.call(e,t);else{let a=s.slice(0,s.length/2),i=s.slice(s.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),n=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return(this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(n.slice(1))),r=r[0],n=n[0]),this.returnSequences&&(n=pm(n,1)),"concat"===this.mergeMode?i=Ir([r,n]):"sum"===this.mergeMode?i=sp(r,n):"ave"===this.mergeMode?i=sf(.5,sp(r,n)):"mul"===this.mergeMode?i=sf(r,n):null==this.mergeMode&&(i=[r,n]),this.returnState)?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){SZ(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),SZ(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let r;if(Array.isArray(t)&&(t=t[0]),r=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,!this.returnState)return r;{let e=this.forwardLayer.states.map(e=>null);return Array.isArray(r)?r.concat(e).concat(e):[r].concat(e).concat(e)}}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){let e={mergeMode:this.mergeMode};return Object.assign(e,super.getConfig()),e}static fromConfig(e,t){let r=Cl(t.layer);if(delete t.layer,null!=t.numConstants)throw new Sx("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");return t.layer=r,new e(t)}}TF.className="Bidirectional",sv.registerClass(TF);class T_ extends Ij{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){let e={scale:this.scale,offset:this.offset};return Object.assign(e,super.getConfig()),e}call(e,t){return aH(()=>("float32"!==(e=ID(e)).dtype&&(e=sl(e,"float32")),sp(sf(e,this.scale),this.offset)))}}T_.className="Rescaling",sv.registerClass(T_);const{resizeBilinear:TD,cropAndResize:TO}=d8;class TM extends Ij{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,r,n,a,i,s,o){return aH(()=>{let l,u=!1,h=[t/i,r/s,(n+t)/i,(a+r)/s],p=[];3===e.rank?(u=!0,l=pB([e])):l=e;for(let e=0;e<l.shape[0];e++)p.push(h);let d=aW(p,[p.length,4]),c=TO(l,d,pd(0,p.length,1,"int32"),[n,a],"nearest");if(u)return sl(ID(pJ(c)),o);return sl(c,o)})}upsize(e,t,r,n){return aH(()=>sl(TD(e,[t,r]),n))}call(e,t){return aH(()=>{let t=ID(e),r=t.dtype,n=t.shape,a=n[n.length-3],i=n[n.length-2],s=0;a!==this.height&&(s=Math.floor((a-this.height)/2));let o=0;return(i!==this.width&&0===(o=Math.floor((i-this.width)/2))&&(o=1),s>=0&&o>=0)?this.centerCrop(t,s,o,this.height,this.width,a,i,r):this.upsize(e,this.height,this.width,r)})}getConfig(){let e={height:this.height,width:this.width};return Object.assign(e,super.getConfig()),e}computeOutputShape(e){let t=(e=IO(e)).length-3,r=e.length-2;return e[t]=this.height,e[r]=this.width,e}}TM.className="CenterCrop",sv.registerClass(TM);class Tz extends Ij{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){let e={numTokens:this.numTokens,outputMode:this.outputMode};return Object.assign(e,super.getConfig()),e}computeOutputShape(e){return null==(e=IO(e))?[this.numTokens]:("oneHot"===this.outputMode&&1!==e[e.length-1]?e.push(this.numTokens):e[e.length-1]=this.numTokens,e)}call(e,t){return aH(()=>{let r;if("int32"!==(e=ID(e)).dtype&&(e=sl(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new Sb(`countWeights is not used when outputMode !== count.
              Received countWeights=${t.countWeights}`);r=ID(t.countWeights)}let n=hg(e),a=hy(e),i=uK(this.numTokens,n).bufferSync().get(0),s=uq(a,0).bufferSync().get(0);if(!(i&&s))throw new Sb(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,r,n){let a,i=ID(e);if("int32"!==i.dtype&&(i=sl(i,"int32")),"int"===t)return i;let s=i.shape;if(0===i.rank&&(i=uO(i,-1)),"oneHot"===t&&1!==i.shape[i.shape.length-1]&&(i=uO(i,-1)),i.rank>2)throw new Sb(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${s} which would result in output rank ${i.rank}.`);let o=["multiHot","oneHot"].includes(t),l=i;if(a=void 0!==n&&"count"===t?um(l,n,r,o):um(l,[],r,o),"tfIdf"!==t)return a;if(n)return sf(a,n);throw new Sb("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,r)})}}Tz.className="CategoryEncoding",sv.registerClass(Tz);const TP=new Set(["bilinear","nearest"]);class TL extends Ij{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation)if(TP.has(e.interpolation))this.interpolation=e.interpolation;else throw new Sb(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){let t=(e=IO(e))[2];return[this.height,this.width,t]}getConfig(){let e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio};return Object.assign(e,super.getConfig()),e}call(e,t){return aH(()=>{let t=[this.height,this.width];if("bilinear"===this.interpolation)return d8.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return d8.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw Error(`Interpolation is ${this.interpolation} but only ${[...TP]} are supported`)})}}TL.className="Resizing",sv.registerClass(TL);class TB{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}TB.className="RandomSeed";class TW extends Ij{constructor(e){super(e),this.randomGenerator=new TB(e.seed)}getConfig(){let e={seed:this.randomGenerator.seed};return Object.assign(e,super.getConfig()),e}}TW.className="BaseRandomLayer";const TU=new Set(["bilinear","nearest"]);class TV extends TW{constructor(e){super(e);let{factor:t,interpolation:r="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else if(!Array.isArray(this.factor)&&this.factor>0)this.widthLower=-this.factor,this.widthUpper=this.factor;else throw new Sb(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);if(this.widthLower<-1||this.widthUpper<-1)throw new Sb(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new Sb(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);if(r)if(TU.has(r))this.interpolation=r;else throw new Sb(`Invalid interpolation parameter: ${r} is not implemented`)}getConfig(){let e={factor:this.factor,interpolation:this.interpolation};return Object.assign(e,super.getConfig()),e}computeOutputShape(e){let t=(e=IO(e))[2];return[this.imgHeight,-1,t]}call(e,t){return aH(()=>{let t=ID(e);this.imgHeight=t.shape[t.shape.length-3];let r=t.shape[t.shape.length-2];this.widthFactor=uR([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let n=this.widthFactor.dataSync()[0]*r;n=Math.round(n);let a=[this.imgHeight,n];switch(this.interpolation){case"bilinear":return d8.resizeBilinear(e,a);case"nearest":return d8.resizeNearestNeighbor(e,a);default:throw Error(`Interpolation is ${this.interpolation}
          but only ${[...TU]} are supported`)}})}}function TG(e){return null===e?null:TH(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function TH(e){let t=!1;if(e_.get("IS_BROWSER"))t=e instanceof TextDecoder;else{let{StringDecoder:r}=R("kjyEk");t=e instanceof r}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof au)&&!(e instanceof Promise)&&!t)}function Tj(e){return e instanceof au?{value:e.clone(),recurse:!1}:TH(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}TV.className="RandomWidth",sv.registerClass(TV);class TK{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw RangeError("Can't create ring buffer of capacity < 1.");this.data=Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(let t of e)this.push(t)}pop(){if(this.isEmpty())throw RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);let e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw RangeError("Ring buffer is empty.");let e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw RangeError("Ring buffer is empty.");let t=this.wrap(this.begin+e),r=this.get(t);return this.set(t,this.pop()),r}}class Tq extends TK{constructor(){super(Tq.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){let e=2*this.capacity,t=Array(e),r=this.length();for(let e=0;e<r;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=r}}Tq.INITIAL_CAPACITY=32;class TX{async toArray(){let e=[],t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){let e=this.prefetch(100),t=[],r=await e.next();for(;!r.done;)t.push(r.value),r=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),r=e(t.value);for(;!t.done&&r;)r=e((t=await this.next()).value)}handleErrors(e){return new T4(this,e)}filter(e){return new T2(this,e)}map(e){return new T3(this,e)}mapAsync(e){return new T6(this,e)}serialMapAsync(e){return new T6(this,e).serial()}flatmap(e){return new T8(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(e=>!0===e)}rowMajorBatch(e,t=!0){return new T1(this,e,t)}columnMajorBatch(e,t=!0,r=TG){return this.rowMajorBatch(e,t).map(e=>(function(e,t=TG){return function e(t,r,n=new Set){let a=t[0];if(n.has(a))throw Error("Circular references are not supported.");let i=r(t);if(i.recurse&&null!==i.value)throw Error("A deep zip function may not return both a value and recurse=true.");if(!i.recurse)return i.value;if(TH(a)){let i=Array.isArray(a)?[]:{};for(let s in n.add(a),a){let a=e(t.map(e=>e[s]),r,n);i[s]=a}return n.delete(a),i}throw Error(`Can't recurse into non-iterable type: ${a}`)}(e,t)})(e,r))}concatenate(e,t){return new T7(new TY([this,e]),t)}take(e){return e<0||null==e?this:new T0(this,e)}skip(e){return e<0||null==e?this:new TJ(this,e)}prefetch(e){return new T9(this,e)}shuffle(e,t){return new $e(this,e,t)}serial(){return new TQ(this)}}class TY extends TX{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};let e=this.items[this.trav];return this.trav++,{value:function e(t,r,n=new Map,a=new Set){if(null==t)return null;if("function"==typeof Blob&&t instanceof Blob)return t.slice();if(a.has(t))throw Error("Circular references are not supported.");if(n.has(t))return n.get(t);let i=r(t);if(i.recurse&&null!==i.value)throw Error("A deep map function may not return both a value and recurse=true.");if(!i.recurse)return n.set(t,i.value),i.value;if(TH(t)){let i=Array.isArray(t)?[]:{};for(let s in a.add(t),t){let o=e(t[s],r,n,a);i[s]=o}return a.delete(t),t.__proto__&&(i.__proto__=t.__proto__),i}throw Error(`Can't recurse into non-iterable type: ${t}`)}(e,Tj),done:!1}}}class TZ extends TX{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class TQ extends TX{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class TJ extends TX{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){let e=await this.upstream.next();if(e.done)return e;aj(e.value)}return this.upstream.next()}}class T0 extends TX{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class T1 extends TX{constructor(e,t,r=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=r,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){let e=[];for(;e.length<this.batchSize;){let t=await this.upstream.next();if(t.done){if(this.enableSmallLastBatch&&e.length>0)return{value:e,done:!1};return{value:null,done:!0}}e.push(t.value)}return{value:e,done:!1}}}class T2 extends TX{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){let e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;aj(e.value)}}}class T3 extends TX{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){let e=await this.upstream.next();if(e.done)return{value:null,done:!0};let t=ad.getTensorsInContainer(e.value),r=this.transform(e.value),n=ad.getTensorsInContainer(r);for(let e of t)ad.isTensorInList(e,n)||e.dispose();return{value:r,done:!1}}}class T4 extends TX{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class T6 extends TX{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){let e=await this.upstream.next();if(e.done)return{value:null,done:!0};let t=ad.getTensorsInContainer(e.value),r=await this.transform(e.value),n=ad.getTensorsInContainer(r);for(let e of t)ad.isTensorInList(e,n)||e.dispose();return{value:r,done:!1}}}class T5 extends TX{constructor(){super(),this.outputQueue=new Tq,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class T8 extends T5{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){let e=await this.upstream.next();if(e.done)return!1;let t=ad.getTensorsInContainer(e.value),r=this.transform(e.value),n=ad.getTensorsInContainer(r);for(let e of(this.outputQueue.pushAll(r),t))ad.isTensorInList(e,n)||e.dispose();return!0}}class T7 extends TX{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){let e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}let t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}(f=v||(v={}))[f.FAIL=0]="FAIL",f[f.SHORTEST=1]="SHORTEST",f[f.LONGEST=2]="LONGEST";class T9 extends TX{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new TK(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){let e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class $e extends T9{constructor(e,t,r){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=ux.alea(r||ny.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){let e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class $t{constructor(){this.size=null}batch(e,t=!0){let r=this;return ny.assert(e>0,()=>`batchSize needs to be positive, but it is
      ${e}`),$r(async()=>(await r.iterator()).columnMajorBatch(e,t,$n),this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e))}concatenate(e){let t=this;return $r(async()=>(await t.iterator()).concatenate(await e.iterator()),this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null)}filter(e){let t=this;return $r(async()=>(await t.iterator()).filter(t=>aH(()=>e(t))),this.size===1/0?1/0:null)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){let t=this;return $r(async()=>(await t.iterator()).map(t=>aH(()=>e(t))),this.size)}mapAsync(e){let t=this;return $r(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(null==e)throw RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");let t=this;return $r(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){let t=this;return $r(async()=>new T7(new TZ(async()=>({value:await t.iterator(),done:!1})).take(e),void 0),null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null)}skip(e){let t=this;return $r(async()=>(await t.iterator()).skip(e),null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null)}shuffle(e,t,r=!0){if(null==e||e<0)if(null==this.size)throw RangeError("`Dataset.shuffle()` requires bufferSize to be specified.");else throw RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);let n=this,a=ux.alea(t||ny.now().toString());return $r(async()=>{let t=a.int32();return r&&(t+=a.int32()),(await n.iterator()).shuffle(e,t.toString())},this.size)}take(e){let t=this;return $r(async()=>(await t.iterator()).take(e),null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null)}async toArray(){if(this.size===1/0)throw Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function $r(e,t=null){return new class extends $t{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function $n(e){var t,r;if(null===e)return null;return null==(t=e[0])||null===(r=t)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(t)||"object"==typeof t&&t instanceof au||ny.isTypedArray(t)?{value:function(e){if(0===e.length)throw Error("Can't make a batch of zero elements.");return e[0]instanceof au?pB(e):aW(e)}(e),recurse:!1}:{value:null,recurse:!0}}$t.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");class $a extends TX{split(e){return new $i(this,e)}}class $i extends $a{constructor(e,t){super(),this.upstream=e,this.impl=new $s(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class $s extends T5{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){let e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);let t=e.value.split(this.separator);for(let e of(t[0]=this.carryover+t[0],t.slice(0,-1)))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}const $o=cS.whereImpl;class $l extends D{nextDataId(){return $l.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new _(this,aN)}write(e,t,r){this.firstUse&&(this.firstUse=!1,e_.get("IS_NODE")&&or.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));let n={id:this.nextDataId()};return this.data.set(n,{values:e,dtype:r,refCount:1}),n}makeTensorInfo(e,t,r){let n;if("string"===t&&null!=r&&r.length>0&&ny.isString(r[0])){let a=r.map(e=>ny.encodeString(e));n=this.write(a,e,t)}else n=this.write(r,e,t);return{dataId:n,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){let t=this.data.get(e);t.refCount++}decRef(e){if(this.data.has(e)){let t=this.data.get(e);t.refCount--}}move(e,t,r,n,a){this.data.set(e,{values:t,dtype:n,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){let{dtype:t,complexTensorInfos:r}=this.data.get(e);if("complex64"===t){let e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);return or.mergeRealAndImagArrays(e,t)}return ny.convertBackendValuesAndArrayBuffer(this.data.get(e).values,t)}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let r=t.map(e=>ny.decodeString(e));return so(e.shape,e.dtype,r)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return so(e.shape,e.dtype,t)}makeOutput(e,t,r){return aN.makeTensorFromTensorInfo(this.makeTensorInfo(t,r,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;let{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){let t=ny.now();return e(),{kernelMs:ny.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){gd([e],"where");let t=this.readSync(e.dataId);return $o(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}$l.nextDataId=0,aX("cpu",()=>new $l,1);const $u=gR("Elu",e=>e>=0?e:Math.exp(e)-1);function $h(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{alpha:i}=n;gd([a],"leakyRelu");let s=ny.sizeFromShape(a.shape),o=r.data.get(a.dataId).values,l=ny.getTypedArrayFromDType("float32",s);for(let e=0;e<o.length;e++)l[e]=o[e]<0?i*o[e]:o[e];return r.makeTensorInfo(a.shape,"float32",l)}const $p=gf((e,t)=>e<0?t*e:e);function $d(e){let{inputs:t,backend:r}=e,{x:n,alpha:a}=t;gd([n,a],"prelu");let i=r.data.get(n.dataId).values,s=r.data.get(a.dataId).values,[o,l]=$p(n.shape,a.shape,i,s,"float32");return r.makeTensorInfo(l,"float32",o)}const $c=gR(rk,e=>Math.max(0,e)),$f=gR(r$,e=>Math.min(Math.max(0,e),6));function $m(e,t,r,n,a){if("linear"===r)return gy({inputs:{x:t},backend:e});if("relu"===r)return $c({inputs:{x:t},backend:e});if("elu"===r)return $u({inputs:{x:t},backend:e});if("relu6"===r)return $f({inputs:{x:t},backend:e});if("prelu"===r)return $d({inputs:{x:t,alpha:n},backend:e});else if("leakyrelu"===r)return $h({inputs:{x:t},backend:e,attrs:{alpha:a}});else if("sigmoid"===r)return yv({inputs:{x:t},backend:e});throw Error(`Activation ${r} has not been implemented for the CPU backend.`)}function $g(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{shape:i}=n,s=ny.sizeFromShape(a.shape),o=ny.inferFromImplicitShape(i,s),l=ny.sizeFromShape(o);ny.assert(s===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${a.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`),r.incRef(a.dataId);let u=r.data.get(a.dataId);if(null!=u.complexTensorInfos){let e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:a.dataId,shape:o,dtype:a.dtype}}function $y(e){let{inputs:t,backend:r,attrs:n}=e,{a:a,b:i}=t,{transposeA:s,transposeB:o}=n;gd([a,i],"matMul");let l=a.shape.length,u=i.shape.length,h=s?a.shape[l-2]:a.shape[l-1],p=o?i.shape[u-1]:i.shape[u-2],d=s?a.shape[l-1]:a.shape[l-2],c=o?i.shape[u-2]:i.shape[u-1],f=a.shape.slice(0,-2),m=i.shape.slice(0,-2),g=ny.sizeFromShape(f),y=ny.sizeFromShape(m),b=sO.assertAndGetBroadcastShape(a.shape.slice(0,-2),i.shape.slice(0,-2)).concat([d,c]);ny.assert(h===p,()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${a.shape} and ${i.shape} and transposeA=${s} and transposeB=${o} must match.`);let x=$g({inputs:{x:a},backend:r,attrs:{shape:s?[g,h,d]:[g,d,h]}}),v=$g({inputs:{x:i},backend:r,attrs:{shape:o?[y,c,p]:[y,p,c]}}),w=s?x.shape[1]:x.shape[2],k=s?x.shape[2]:x.shape[1],S=o?v.shape[1]:v.shape[2],I=Math.max(g,y),C=r.data.get(x.dataId).values,N=r.data.get(v.dataId).values,T=ny.computeStrides(x.shape),$=ny.computeStrides(v.shape),[E,R,A]=s?[T[0],1,T[1]]:[T[0],T[1],1],[F,_,D]=o?[1,$[1],$[0]]:[$[1],1,$[0]],O=k*S,M=so([I,k,S],x.dtype),z=M.values,P=r.blockSize;for(let e=0;e<I;e++){let t=e%g,r=e%y;for(let n=0;n<k;n+=P){let a=Math.min(n+P,k);for(let i=0;i<S;i+=P){let s=Math.min(i+P,S);for(let o=0;o<w;o+=P){let l=Math.min(o+P,w);for(let u=n;u<a;u++)for(let n=i;n<s;n++){let a=0;for(let e=o;e<l;e++)a+=C[t*E+u*R+e*A]*N[e*F+n*_+r*D];z[e*O+(u*S+n)]+=a}}}}}return r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(v),r.makeTensorInfo(b,M.dtype,M.values)}const $b=gR(eq,e=>Math.acos(e)),$x=gR(eX,e=>Math.acosh(e)),$v=gR(eJ,e=>Math.asin(e)),$w=gR(e0,e=>Math.asinh(e)),$k=gR(e1,e=>Math.atan(e)),$S=gw(e3,gf((e,t)=>Math.atan2(e,t))),$I=gR(e2,e=>Math.atanh(e));function $C(e,t,r,n,a,i){let s=a.strideHeight,o=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,h=a.effectiveFilterHeight,p=a.effectiveFilterWidth,d=a.padInfo.top,c=a.padInfo.left,f="max"===i?-1/0:1/0,m=so(a.outShape,r),g=m.values,y=a.outShape[1]*a.outShape[2]*a.outShape[3],b=a.outShape[2]*a.outShape[3],x=a.outShape[3];for(let t=0;t<a.batchSize;++t){let r=t*y,m=t*n[0];for(let t=0;t<a.inChannels;++t)for(let y=0;y<a.outHeight;++y){let v=y*s-d,w=Math.max(0,v),k=Math.min(a.inHeight,h+v),S=r+y*b;for(let r=0;r<a.outWidth;++r){let s=r*o-c,h=Math.max(0,s),d=Math.min(a.inWidth,p+s),y=f,b=0,v=0;for(let r=w;r<k;r+=l){let a=m+r*n[1];for(let r=h;r<d;r+=u){let s=e[a+r*n[2]+t];"max"===i&&s>y?y=s:"avg"===i&&(b+=s,v++)}if(isNaN(y))break}g[S+r*x+t]="avg"===i?b/v:y}}}return m}function $N(e,t,r,n,a=!1,i=!1){let s=so(n.outShape,"int32"),o=n.strideHeight,l=n.strideWidth,u=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterHeight,d=n.effectiveFilterWidth,c=n.padInfo.top,f=n.padInfo.left,m=so(t,r,e);for(let e=0;e<n.batchSize;++e)for(let t=0;t<n.inChannels;++t)for(let r=0;r<n.outHeight;++r){let g=r*o-c,y=g;for(;y<0;)y+=u;let b=Math.min(n.inHeight,p+g);for(let o=0;o<n.outWidth;++o){let p=o*l-f,c=p;for(;c<0;)c+=h;let x=Math.min(n.inWidth,d+p),v=-1/0,w=-1;for(let r=y;r<b;r+=u){let s=r-g;for(let o=c;o<x;o+=h){let l=o-p,u=m.get(e,r,o,t);u>v&&(v=u,w=a?i?((e*n.inHeight+r)*n.inWidth+o)*n.inChannels+t:(r*n.inWidth+o)*n.inChannels+t:s*d+l)}}s.set(w,e,r,o,t)}}return s}function $T(e,t,r,n,a,i){let s=a.strideDepth,o=a.strideHeight,l=a.strideWidth,u=a.dilationDepth,h=a.dilationHeight,p=a.dilationWidth,d=a.effectiveFilterDepth,c=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.front,g=a.padInfo.top,y=a.padInfo.left,b="max"===i?-1/0:1/0,x=so(a.outShape,r),v=x.values,w=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],k=a.outShape[2]*a.outShape[3]*a.outShape[4],S=a.outShape[3]*a.outShape[4],I=a.outShape[4];for(let t=0;t<a.batchSize;++t){let r=t*w,x=t*n[0];for(let t=0;t<a.inChannels;++t)for(let w=0;w<a.outDepth;++w){let C=w*s-m,N=C;for(;N<0;)N+=u;let T=Math.min(a.inDepth,d+C),$=r+w*k;for(let r=0;r<a.outHeight;++r){let s=r*o-g,d=s;for(;d<0;)d+=h;let m=Math.min(a.inHeight,c+s),w=$+r*S;for(let r=0;r<a.outWidth;++r){let s=r*l-y,o=s;for(;o<0;)o+=p;let c=Math.min(a.inWidth,f+s),g=w+r*I,k=b,S=0,C=0;for(let r=N;r<T;r+=u){let a=x+r*n[1];for(let r=d;r<m;r+=h){let s=a+r*n[2];for(let r=o;r<c;r+=p){let a=e[s+r*n[3]+t];if("max"===i&&a>k?k=a:"avg"===i&&(S+=a,C++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}v[g+t]="avg"===i?S/Math.max(C,1):k}}}}return x}const $$=gR(ti,(e,t)=>e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e);function $E(e){let{inputs:t,backend:r}=e,{input:n}=t,a=r.data.get(n.dataId).complexTensorInfos.imag,i=r.data.get(a.dataId).values;return r.makeTensorInfo(a.shape,a.dtype,i)}function $R(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n,i=ny.parseAxisParam(a,t[0].shape)[0],s=t.map(e=>e.shape);or.assertParamsConsistent(s,i);let o=or.computeOutShape(t.map(e=>e.shape),i);if(0===ny.sizeFromShape(o))return r.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter(e=>ny.sizeFromShape(e.shape)>0);if(1===l.length)return gy({inputs:{x:l[0]},backend:r});if("complex64"===l[0].dtype){let e=l.map(e=>gb({inputs:{input:e},backend:r})),t=l.map(e=>$E({inputs:{input:e},backend:r})),n=$R({inputs:e,backend:r,attrs:{axis:i}}),a=$R({inputs:t,backend:r,attrs:{axis:i}}),s=gm({inputs:{real:n,imag:a},backend:r});return e.forEach(e=>r.disposeIntermediateTensorInfo(e)),t.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),s}let u=l.map(e=>{let t=ny.sizeFromShape(e.shape.slice(i));return $g({inputs:{x:e},backend:r,attrs:{shape:[-1,t]}})}),h=u.map(e=>({vals:r.data.get(e.dataId).values,shape:e.shape}));o=or.computeOutShape(u.map(e=>e.shape),1);let p=1===u[0].shape[0],d=gD(h,o,t[0].dtype,p),c=or.computeOutShape(l.map(e=>e.shape),i),f=r.makeTensorInfo(c,t[0].dtype,d);return u.forEach(e=>r.disposeIntermediateTensorInfo(e)),f}function $A(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dataFormat:l,dilations:u,dimRoundingMode:h}=n;gd([a,i],"conv2d");let p=or.convertConv2DDataFormat(l),d=or.computeConv2DInfo(a.shape,i.shape,s,u,o,h,!1,p),c=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,y=d.padInfo.left,b=d.padInfo.top,x="channelsLast"===d.dataFormat,v=new as(d.outShape,a.dtype),w=ny.computeStrides(a.shape),k=ny.computeStrides(i.shape),S=w[0],I=x?w[1]:w[2],C=x?w[2]:1,N=x?1:w[1],T=v.strides[0],$=x?v.strides[1]:v.strides[2],E=x?v.strides[2]:1,R=x?1:v.strides[1],A=r.data.get(a.dataId).values,F=r.data.get(i.dataId).values,_=v.values;for(let e=0;e<d.batchSize;++e){let t=e*S,r=e*T;for(let e=0;e<d.outHeight;++e){let n=r+e*$,a=e*d.strideHeight-b;for(let e=0;e<c;++e){let r=a+e*m;if(r<0||r>=d.inHeight)continue;let i=e*k[0],s=t+r*I;for(let e=0;e<d.outWidth;++e){let t=n+e*E,r=e*d.strideWidth-y;for(let e=0;e<f;++e){let n=r+e*g;if(n<0||n>=d.inWidth)continue;let a=i+e*k[1],o=s+n*C,l=a;for(let e=0;e<d.inChannels;++e){let r=A[o+e*N];for(let e=0;e<d.outChannels;++e)_[t+e*R]+=r*F[l+e];l+=d.outChannels}}}}}}return r.makeTensorInfo(v.shape,v.dtype,_)}const $F=gR("Cos",e=>Math.cos(e)),$_=gR(tm,e=>Math.cosh(e));function $D(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dilations:l,dimRoundingMode:u}=n;gd([a,i],"depthwiseConv2DNative");let h=ny.computeStrides(a.shape),p=ny.computeStrides(i.shape),d=l;null==d&&(d=[1,1]),ny.assert(or.eitherStridesOrDilationsAreOne(s,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${s} and dilations '${d}'`);let c=or.computeConv2DInfo(a.shape,i.shape,s,d,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=c,x=b.left,v=b.top,w=c.outChannels/c.inChannels,k=new as(c.outShape,a.dtype),S=r.data.get(a.dataId).values,I=r.data.get(i.dataId).values,C=k.values;for(let e=0;e<c.batchSize;++e){let t=e*h[0],r=e*k.strides[0];for(let e=0;e<c.outHeight;++e){let n=r+e*k.strides[1],a=e*c.strideHeight-v;for(let e=0;e<f;++e){let r=a+e*g;if(r<0||r>=c.inHeight)continue;let i=e*p[0],s=t+r*h[1];for(let e=0;e<c.outWidth;++e){let t=n+e*k.strides[2],r=e*c.strideWidth-x;for(let e=0;e<m;++e){let n=r+e*y;if(n<0||n>=c.inWidth)continue;let a=i+e*p[1],o=s+n*c.inChannels,l=t,u=a;for(let e=0;e<c.inChannels;++e){let t=S[o+e];for(let e=0;e<w;++e)C[l+e]+=t*I[u+e];l+=w,u+=w}}}}}}return r.makeTensorInfo(k.shape,k.dtype,k.values)}function $O(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{axis:s,keepDims:o}=a;gd(i,"sum");let l=(t="bool"===i.dtype?gv({inputs:{x:i},backend:n,attrs:{dtype:"int32"}}):gy({inputs:{x:i},backend:n})).shape.length,u=ny.parseAxisParam(s,t.shape),h=or.getAxesPermutation(u,l),p=u,d=t;null!=h&&(d=yi({inputs:{x:t},backend:n,attrs:{perm:h}}),p=or.getInnerMostAxes(p.length,l)),or.assertAxesAreInnerMostDims("sum",p,d.shape.length);let[c,f]=or.computeOutAndReduceShapes(d.shape,p),m=gg(n,c,or.upcastType(d.dtype,"int32")),g=ny.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(d.dataId).values;for(let e=0;e<y.length;++e){let t=e*g,r=0;for(let e=0;e<g;++e)r+=b[t+e];y[e]=r}if(o){let e=or.expandShapeToKeepDim(m.shape,u),t=m;m=$g({inputs:{x:m},backend:n,attrs:{shape:e}}),n.disposeIntermediateTensorInfo(t)}return n.disposeIntermediateTensorInfo(t),null!=h&&n.disposeIntermediateTensorInfo(d),m}const $M=or.ERF_P,$z=or.ERF_A1,$P=or.ERF_A2,$L=or.ERF_A3,$B=or.ERF_A4,$W=or.ERF_A5,$U=gR("Erf",e=>{let t=Math.sign(e),r=Math.abs(e),n=1/(1+$M*r);return t*(1-(((($W*n+$B)*n+$L)*n+$P)*n+$z)*n*Math.exp(-r*r))});function $V(e){let{inputs:t,backend:r,attrs:n}=e,{input:a}=t,{dim:i}=n,s=a.shape.length,o=a.shape.slice(),l=i;return i<0&&(ny.assert(-(s+1)<=i,()=>`Axis must be in the interval [${-(s+1)}, ${s}]`),l=s+i+1),o.splice(l,0,1),$g({inputs:{x:a},backend:r,attrs:{shape:o}})}const $G=gw(tE,gf((e,t)=>e/t)),$H={kernelName:tE,backendName:"cpu",kernelFunc:$G};function $j(e,t,r){let n=e.shape,a=n[0],i=n[1],s=r.data.get(e.dataId),o=s.complexTensorInfos.real,l=s.complexTensorInfos.imag,u=[a,i],h=ny.sizeFromShape(u),p=ny.getTypedArrayFromDType("float32",h),d=ny.getTypedArrayFromDType("float32",h);for(let e=0;e<a;e++){let n=yk({inputs:{x:o},backend:r,attrs:{begin:[e,0],size:[1,i]}}),a=yk({inputs:{x:l},backend:r,attrs:{begin:[e,0],size:[1,i]}}),s=gm({inputs:{real:n,imag:a},backend:r}),{real:u,imag:h}=function(e,t,r){var n;let a=ny.sizeFromShape(e.shape),i=r.data.get(e.dataId),s=r.data.get(i.complexTensorInfos.real.dataId).values,o=r.data.get(i.complexTensorInfos.imag.dataId).values;if(((n=a)&n-1)==0){let n=function e(t,r,n,a,i){if(1===n)return{real:t,imag:r};let s=or.mergeRealAndImagArrays(t,r),o=n/2,l=or.complexWithEvenIndex(s),u=l.real,h=l.imag,p=[u.length],d=i.makeTensorInfo(p,"float32",u),c=i.makeTensorInfo(p,"float32",h),f=gm({inputs:{real:d,imag:c},backend:i}),m=or.complexWithOddIndex(s),g=m.real,y=m.imag,b=[g.length],x=i.makeTensorInfo(b,"float32",g),v=i.makeTensorInfo(b,"float32",y),w=gm({inputs:{real:x,imag:v},backend:i}),k=e(u,h,o,a,i),S=k.real,I=k.imag,C=[S.length],N=i.makeTensorInfo(C,"float32",S),T=i.makeTensorInfo(C,"float32",I),$=gm({inputs:{real:N,imag:T},backend:i}),E=e(g,y,o,a,i),R=E.real,A=E.imag,F=[R.length],_=i.makeTensorInfo(F,"float32",R),D=i.makeTensorInfo(F,"float32",A),O=gm({inputs:{real:_,imag:D},backend:i}),M=or.exponents(n,a),z=[M.real.length],P=i.makeTensorInfo(z,"float32",M.real),L=i.makeTensorInfo(z,"float32",M.imag),B=gm({inputs:{real:P,imag:L},backend:i}),W=ye({inputs:{a:B,b:O},backend:i}),U=gI({inputs:{a:$,b:W},backend:i}),V=yP({inputs:{a:$,b:W},backend:i}),G=gb({inputs:{input:U},backend:i}),H=gb({inputs:{input:V},backend:i}),j=$E({inputs:{input:U},backend:i}),K=$E({inputs:{input:V},backend:i}),q=$R({inputs:[G,H],backend:i,attrs:{axis:0}}),X=$R({inputs:[j,K],backend:i,attrs:{axis:0}}),Y=i.data.get(q.dataId).values,Z=i.data.get(X.dataId).values;return i.disposeIntermediateTensorInfo(d),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(f),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(v),i.disposeIntermediateTensorInfo(w),i.disposeIntermediateTensorInfo(N),i.disposeIntermediateTensorInfo(T),i.disposeIntermediateTensorInfo($),i.disposeIntermediateTensorInfo(_),i.disposeIntermediateTensorInfo(D),i.disposeIntermediateTensorInfo(O),i.disposeIntermediateTensorInfo(P),i.disposeIntermediateTensorInfo(L),i.disposeIntermediateTensorInfo(B),i.disposeIntermediateTensorInfo(W),i.disposeIntermediateTensorInfo(U),i.disposeIntermediateTensorInfo(V),i.disposeIntermediateTensorInfo(G),i.disposeIntermediateTensorInfo(j),i.disposeIntermediateTensorInfo(H),i.disposeIntermediateTensorInfo(K),i.disposeIntermediateTensorInfo(q),i.disposeIntermediateTensorInfo(X),{real:Y,imag:Z}}(s,o,a,t,r),i=[e.shape[0],e.shape[1]];if(t){let e=r.makeTensorInfo(i,"float32",n.real),t=r.makeTensorInfo(i,"float32",n.imag),s=r.makeTensorInfo([],"float32",ny.createScalarValue(a,"float32")),o=gy({inputs:{x:s},backend:r}),l=$H.kernelFunc({inputs:{a:e,b:s},backend:r}),u=$H.kernelFunc({inputs:{a:t,b:o},backend:r}),h=r.data.get(l.dataId).values,p=r.data.get(u.dataId).values;return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(l),r.disposeIntermediateTensorInfo(u),{real:h,imag:p}}return n}{let e=function(e,t,r){let n=new Float32Array(2*t);for(let a=0;a<t;a++){let i=0,s=0;for(let n=0;n<t;n++){let o=or.exponent(a*n,t,r),l=or.getComplexWithIndex(e,n);i+=l.real*o.real-l.imag*o.imag,s+=l.real*o.imag+l.imag*o.real}r&&(i/=t,s/=t),or.assignToTypedArray(n,i,s,a)}return n}(or.mergeRealAndImagArrays(s,o),a,t);return or.splitRealAndImagArrays(e)}}(s,t,r),c=or.mergeRealAndImagArrays(u,h);for(let t=0;t<i;t++){let r=or.getComplexWithIndex(c,t);p[e*i+t]=r.real,d[e*i+t]=r.imag}r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(s)}let c=r.makeTensorInfo(u,"float32",p),f=r.makeTensorInfo(u,"float32",d),m=gm({inputs:{real:c,imag:f},backend:r});return r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(f),m}function $K(e){var t,r;let{backend:n,attrs:a}=e,{shape:i,value:s,dtype:o}=a,l=o||ny.inferDtype(s),u=ny.getArrayFromDType(l,ny.sizeFromShape(i));return t=u,r=s,t.fill(r),n.makeTensorInfo(i,l,u)}const $q=gR(tK,e=>+!!Number.isFinite(e),"bool"),$X=gR(tq,e=>+(Math.abs(e)===1/0),"bool"),$Y=gR(tX,e=>+!!Number.isNaN(e),"bool"),$Z=gR(t0,e=>Math.log1p(e)),$Q=gw(t1,gf((e,t)=>e&&t),null,"bool"),$J=gR(t2,e=>+!e,"bool"),$0=gw(t3,gf((e,t)=>e||t),null,"bool");function $1(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{reductionIndices:i,keepDims:s}=n,o=a.shape,l=o.length,u=ny.parseAxisParam(i,o),h=u,p=or.getAxesPermutation(h,l),d=r.data.get(a.dataId).values;if(null!=p){let e=Array(l);for(let t=0;t<e.length;t++)e[t]=o[p[t]];d=ya(d,o,a.dtype,p,e),h=or.getInnerMostAxes(h.length,l),o=e}gd(a,"max"),or.assertAxesAreInnerMostDims("max",h,l);let[c,f]=or.computeOutAndReduceShapes(o,h),m=g4(d,ny.sizeFromShape(f),c,a.dtype),g=r.write(m,c,a.dtype),y=c;return s&&(y=or.expandShapeToKeepDim(c,u)),{dataId:g,shape:y,dtype:a.dtype}}const $2=gw("Mod",gf((e,t)=>{let r=e%t;return e<0&&t<0||e>=0&&t>=0?r:(r+t)%t}));function $3(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{dim:i}=n,s=a.shape.length,o=i;if(-1===o&&(o=s-1),o!==s-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${s} and dim was ${o}`);let l=ny.parseAxisParam([o],a.shape),u=$1({inputs:{x:a},backend:r,attrs:{reductionIndices:l,keepDims:!1}}),h=or.expandShapeToKeepDim(u.shape,l),p=$g({inputs:{x:u},backend:r,attrs:{shape:h}}),d=yP({inputs:{a:a,b:p},backend:r}),c=gP({inputs:{x:d},backend:r}),f=$O({inputs:{x:c},backend:r,attrs:{axis:l,keepDims:!1}}),m=$g({inputs:{x:f},backend:r,attrs:{shape:h}}),g=$G({inputs:{a:c,b:m},backend:r});return r.disposeIntermediateTensorInfo(u),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(m),g}const $4=cS.nonMaxSuppressionV3Impl,$6=cS.nonMaxSuppressionV4Impl,$5=cS.nonMaxSuppressionV5Impl;function $8(e){let{inputs:t,backend:r}=e,{x:n}=t;if("string"===n.dtype)throw Error("zerosLike is not supported for string tensors");if("complex64"!==n.dtype)return $K({backend:r,attrs:{shape:n.shape,value:0,dtype:n.dtype}});{let e=gb({inputs:{input:n},backend:r}),t=$8({inputs:{x:e},backend:r}),a=$E({inputs:{input:n},backend:r}),i=$8({inputs:{x:a},backend:r}),s=gm({inputs:{real:t,imag:i},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),s}}function $7(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n;if(1===t.length)return $V({inputs:{input:t[0]},backend:r,attrs:{dim:a}});let i=t[0].shape,s=t[0].dtype;t.forEach(e=>{ny.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),ny.assert(s===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let o=[],l=$R({inputs:t.map(e=>{let t=$V({inputs:{input:e},backend:r,attrs:{dim:a}});return o.push(t),t}),backend:r,attrs:{axis:a}});return o.forEach(e=>r.disposeIntermediateTensorInfo(e)),l}const $9={kernelName:rc,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{paddings:i,constantValue:s}=n;gd(a,"pad");let o=i.map((e,t)=>e[0]+a.shape[t]+e[1]),l=i.map(e=>e[0]),u=r.data.get(a.dataId).values,h=ny.sizeFromShape(a.shape),p=a.shape.length,d=ny.computeStrides(a.shape),c=ny.sizeFromShape(o),f=o.length,m=ny.computeStrides(o),g=ny.getTypedArrayFromDType(a.dtype,c);0!==s&&g.fill(s);for(let e=0;e<h;e++){let t=ny.indexToLoc(e,p,d).map((e,t)=>e+l[t]);g[ny.locToIndex(t,f,m)]=u[e]}return{dataId:r.write(g,o,a.dtype),shape:o,dtype:a.dtype}}},Ee=gw("Pow",gf((e,t)=>Math.pow(e,t))),Et=gR(rw,e=>1/e),Er=gR(rR,e=>{let t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),En=or.SELU_SCALEALPHA,Ea=or.SELU_SCALE,Ei=gR(rM,e=>e>=0?Ea*e:En*(Math.exp(e)-1)),Es=gR(rL,e=>e<0?-1:+(e>0)),Eo=gR("Sin",e=>Math.sin(e)),El=gR(rP,e=>Math.sinh(e)),Eu=Math.log(11920928955078125e-23)+2,Eh=gR(rW,e=>{let t=Math.exp(e);return e<Eu?t:e>-Eu?e:Math.log(1+t)}),Ep=gR(nn,(e,t)=>isNaN(e)?NaN:e>0?1:t.alpha),Ed=gR("Tan",e=>Math.tan(e)),Ec=gR(r4,e=>Math.tanh(e));function Ef(e,t,r){switch(r){case"reflect":var n,a,i,s,o=e,l=t;let u=o;if(u<0)if(l<=1)u=0;else{let e=2*l;u<e&&(u=e*Math.trunc(-u/e)+u),u=u<-l?u+e:-u-1}else if(u>l-1)if(l<=1)u=0;else{let e=2*l;(u-=e*Math.trunc(u/e))>=l&&(u=e-u-1)}return ny.clamp(0,u,l-1);case"wrap":let h;return n=e,a=t,(h=n)<0?a<=1?h=0:h+=a*(Math.trunc(-h/(a-1))+1):h>a-1&&(a<=1?h=0:h-=a*Math.trunc(h/(a-1))),ny.clamp(0,h,a-1);case"nearest":return i=e,s=t,ny.clamp(0,i,s-1);default:return e}}function Em(e,t,r,n,a,i,s,o,l,u,h){return 0<=o&&o<t&&0<=l&&l<r?e[s*n+o*a+l*i+u]:h}for(const e of[{kernelName:ns,backendName:"cpu",kernelFunc:function(e){let t,r,n,{inputs:a,backend:i,attrs:s}=e,{a:o,b:l,bias:u,preluActivationWeights:h}=a,{transposeA:p,transposeB:d,activation:c,leakyreluAlpha:f}=s,m=[];for(let e of(t=$y({inputs:{a:o,b:l},attrs:{transposeA:p,transposeB:d},backend:i}),u&&(r=gI({inputs:{a:t,b:u},backend:i}),m.push(t),t=r),c&&(n=$m(i,t,c,h,f),m.push(t),t=n),m))i.disposeIntermediateTensorInfo(e);return t}},{kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{let{x:t}=e.inputs,r=e.backend;gd(t,"abs");let n=new Float32Array(ny.sizeFromShape(t.shape));return n=gc(r.data.get(t.dataId).values),r.makeOutput(n,t.shape,t.dtype)}},{kernelName:eq,backendName:"cpu",kernelFunc:$b},{kernelName:eX,backendName:"cpu",kernelFunc:$x},{kernelName:"Add",backendName:"cpu",kernelFunc:gI},{kernelName:eY,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e;gd(t,"addN");let n=t.map(e=>r.data.get(e.dataId).values),a=so(t[0].shape,t[0].dtype),i=a.values;for(let e=0;e<t.length;e++){let t=n[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return r.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:"All",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;gd(a,"all");let o=ny.parseAxisParam(i,a.shape),l=o,u=or.getAxesPermutation(l,a.shape.length),h=a;null!=u&&(h=yi({inputs:{x:a},backend:r,attrs:{perm:u}}),l=or.getInnerMostAxes(l.length,a.shape.length)),or.assertAxesAreInnerMostDims("all",l,h.shape.length);let[p,d]=or.computeOutAndReduceShapes(h.shape,l),c=ny.sizeFromShape(d),f=ny.makeZerosTypedArray(ny.sizeFromShape(p),h.dtype),m=r.data.get(h.dataId).values;for(let e=0;e<f.length;++e){let t=e*c,r=m[t];for(let e=0;e<c;++e){let n=m[t+e];r=r&&n}f[e]=r}null!=u&&r.disposeIntermediateTensorInfo(h);let g=r.makeTensorInfo(p,h.dtype,f);if(s){let e=$g({inputs:{x:g},backend:r,attrs:{shape:or.expandShapeToKeepDim(p,o)}});return r.disposeIntermediateTensorInfo(g),e}return g}},{kernelName:"Any",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;gd(a,"any");let o=ny.parseAxisParam(i,a.shape),l=o,u=or.getAxesPermutation(l,a.shape.length),h=a;null!=u&&(h=yi({inputs:{x:a},backend:r,attrs:{perm:u}}),l=or.getInnerMostAxes(l.length,a.shape.length)),or.assertAxesAreInnerMostDims("any",l,h.shape.length);let[p,d]=or.computeOutAndReduceShapes(h.shape,l),c=ny.sizeFromShape(d),f=ny.makeZerosTypedArray(ny.sizeFromShape(p),h.dtype),m=r.data.get(h.dataId).values;for(let e=0;e<f.length;++e){let t=e*c,r=m[t];for(let e=0;e<c;++e){let n=m[t+e];r=r||n}f[e]=r}null!=u&&r.disposeIntermediateTensorInfo(h);let g=r.makeTensorInfo(p,h.dtype,f);if(s){let e=$g({inputs:{x:g},backend:r,attrs:{shape:or.expandShapeToKeepDim(p,o)}});return r.disposeIntermediateTensorInfo(g),e}return g}},{kernelName:eZ,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n;gd(a,"argMax");let s=ny.parseAxisParam(i,a.shape),o=or.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=yi({inputs:{x:a},backend:r,attrs:{perm:o}})),s=or.getInnerMostAxes(s.length,l.shape.length)),s=[s[0]],or.assertAxesAreInnerMostDims("argMax",s,l.shape.length);let[h,p]=or.computeOutAndReduceShapes(l.shape,s),d=ny.sizeFromShape(h),c=ny.makeZerosTypedArray(d,"int32"),f=ny.sizeFromShape(p),m=r.data.get(l.dataId).values;for(let e=0;e<c.length;++e){let t=e*f,r=m[t],n=0;for(let e=0;e<f;++e){let a=m[t+e];a>r&&(r=a,n=e)}c[e]=n}return u.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.makeTensorInfo(h,"int32",c)}},{kernelName:eQ,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n;gd(a,"argMin");let s=ny.parseAxisParam(i,a.shape),o=or.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=yi({inputs:{x:a},backend:r,attrs:{perm:o}})),s=or.getInnerMostAxes(s.length,l.shape.length)),s=[s[0]],or.assertAxesAreInnerMostDims("argMin",s,l.shape.length);let[h,p]=or.computeOutAndReduceShapes(l.shape,s),d=ny.sizeFromShape(h),c=ny.makeZerosTypedArray(d,"int32"),f=ny.sizeFromShape(p),m=r.data.get(l.dataId).values;for(let e=0;e<c.length;++e){let t=e*f,r=m[t],n=0;for(let e=0;e<f;++e){let a=m[t+e];a<r&&(r=a,n=e)}c[e]=n}return u.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.makeTensorInfo(h,"int32",c)}},{kernelName:eJ,backendName:"cpu",kernelFunc:$v},{kernelName:e0,backendName:"cpu",kernelFunc:$w},{kernelName:e1,backendName:"cpu",kernelFunc:$k},{kernelName:e3,backendName:"cpu",kernelFunc:$S},{kernelName:e2,backendName:"cpu",kernelFunc:$I},{kernelName:e4,backendName:"cpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r;gd(i,"avgPool");let{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=a;ny.assert(or.eitherStridesOrDilationsAreOne(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);let h=or.computePool2DInfo(i.shape,s,o,1,l,u);if(1===h.filterWidth&&1===h.filterHeight&&ny.arraysEqual(h.inShape,h.outShape))t=gy({inputs:{x:i},backend:n});else{let e=n.data.get(i.dataId).values,r=ny.computeStrides(i.shape),a=$C(e,i.shape,i.dtype,r,h,"avg");t=n.makeTensorInfo(h.outShape,i.dtype,a.values)}return t}},{kernelName:e5,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l,dataFormat:u}=n;gd(a,"avgPool3d");let h=or.computePool3DInfo(a.shape,i,s,1,o,l,u),p=$T(r.data.get(a.dataId).values,a.shape,a.dtype,ny.computeStrides(a.shape),h,"avg");return r.makeTensorInfo(p.shape,"float32",p.values)}},{kernelName:e8,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n;gd([a,i],"avgPool3DGrad");let h=or.computePool3DInfo(i.shape,s,o,1,l,u),p=h.strideDepth,d=h.strideHeight,c=h.strideWidth,f=h.filterDepth,m=h.filterHeight,g=h.filterWidth,y=h.dilationDepth,b=h.dilationHeight,x=h.dilationWidth,v=h.effectiveFilterDepth,w=h.effectiveFilterHeight,k=h.effectiveFilterWidth,S=v-1-h.padInfo.front,I=k-1-h.padInfo.left,C=w-1-h.padInfo.top,N=so(i.shape,"float32"),T=1/(f*m*g),$=r.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let r=0;r<h.inDepth;++r)for(let n=0;n<h.inHeight;++n)for(let a=0;a<h.inWidth;++a){let i=r-S,s=n-C,o=a-I,l=0;for(let r=0;r<v;r+=y){let n=(i+r)/p;if(!(n<0)&&!(n>=h.outDepth)&&Math.floor(n)===n)for(let r=0;r<w;r+=b){let a=(s+r)/d;if(!(a<0)&&!(a>=h.outHeight)&&Math.floor(a)===a)for(let r=0;r<k;r+=x){let i=(o+r)/c;i<0||i>=h.outWidth||Math.floor(i)!==i||(l+=$.get(e,n,a,i,t))}}}N.set(l*T,e,r,n,a,t)}return r.makeTensorInfo(N.shape,N.dtype,N.values)}},{kernelName:e6,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t;gd([a,i],"avgPoolGrad");let{filterSize:s,strides:o,pad:l}=n,u=or.computePool2DInfo(i.shape,s,o,1,l),h=u.strideHeight,p=u.strideWidth,d=u.filterHeight,c=u.filterWidth,f=u.dilationHeight,m=u.dilationWidth,g=u.effectiveFilterHeight,y=u.effectiveFilterWidth,b=y-1-u.padInfo.left,x=g-1-u.padInfo.top,v=so(i.shape,"float32"),w=1/(d*c),k=r.data.get(a.dataId).values,S=so(a.shape,"float32",k);for(let e=0;e<u.batchSize;++e)for(let t=0;t<u.inChannels;++t)for(let r=0;r<u.inHeight;++r)for(let n=0;n<u.inWidth;++n){let a=r-x,i=n-b,s=0;for(let r=0;r<g;r+=f){let n=(a+r)/h;if(!(n<0)&&!(n>=u.outHeight)&&Math.floor(n)===n)for(let r=0;r<y;r+=m){let a=(i+r)/p;a<0||a>=u.outWidth||Math.floor(a)!==a||(s+=S.get(e,n,a,t))}}v.set(s*w,e,r,n,t)}return r.makeTensorInfo(v.shape,v.dtype,v.values)}},{kernelName:e7,backendName:"cpu",kernelFunc:$y},{kernelName:tL,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,scale:i,offset:s,mean:o,variance:l}=t;ny.assert(o.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),ny.assert(null==s||o.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),ny.assert(null==i||o.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),gd([a,o,l,i,s],"batchNorm");let{varianceEpsilon:u}=n;null==u&&(u=.001);let h=r.data.get(a.dataId).values,p=r.data.get(o.dataId).values,d=r.data.get(l.dataId).values,c=i?r.data.get(i.dataId).values:new Float32Array([1]),f=s?r.data.get(s.dataId).values:new Float32Array([0]),m=new Float32Array(h.length),g=f.length,y=c.length,b=d.length,x=p.length,v=0,w=0,k=0,S=0;for(let e=0;e<h.length;++e)m[e]=f[v++]+(h[e]-p[w++])*c[k++]/Math.sqrt(d[S++]+u),v>=g&&(v=0),w>=x&&(w=0),k>=y&&(k=0),S>=b&&(S=0);return r.makeTensorInfo(a.shape,a.dtype,m)}},{kernelName:e9,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,crops:s}=n;gd([a],"batchToSpaceND");let o=i.reduce((e,t)=>e*t),l=or.getReshaped(a.shape,i,o),u=or.getPermuted(l.length,i.length),h=or.getReshapedPermuted(a.shape,i,o),p=or.getSliceBeginCoords(s,i.length),d=or.getSliceSize(h,s,i.length),c=$g({inputs:{x:a},backend:r,attrs:{shape:l}}),f=yi({inputs:{x:c},backend:r,attrs:{perm:u}}),m=$g({inputs:{x:f},backend:r,attrs:{shape:h}}),g=yk({inputs:{x:m},backend:r,attrs:{begin:p,size:d}});return r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(m),g}},{kernelName:te,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s}=n,o=gC(r.data.get(a.dataId).values,r.data.get(i.dataId).values,i.dtype,i.shape,s);return r.makeTensorInfo([s],i.dtype,o)}},{kernelName:tt,backendName:"cpu",kernelFunc:g$},{kernelName:tr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{s0:n,s1:a}=t,i=r.data.get(n.dataId).values,s=r.data.get(a.dataId).values,o=or.assertAndGetBroadcastShape(Array.from(i),Array.from(s));return r.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},{kernelName:tn,backendName:"cpu",kernelFunc:gv},{kernelName:ta,backendName:"cpu",kernelFunc:g_},{kernelName:ti,backendName:"cpu",kernelFunc:$$},{kernelName:ts,backendName:"cpu",kernelFunc:gm},{kernelName:to,backendName:"cpu",kernelFunc:e=>{let{x:t}=e.inputs,r=e.backend,n=new Float32Array(ny.sizeFromShape(t.shape)),a=r.data.get(t.dataId),i=a.complexTensorInfos.real,s=a.complexTensorInfos.imag,o=r.data.get(i.dataId).values,l=r.data.get(s.dataId).values;for(let e=0;e<o.length;e++){let t=o[e],r=l[e];n[e]=Math.hypot(t,r)}return r.makeOutput(n,t.shape,"float32")}},{kernelName:tl,backendName:"cpu",kernelFunc:$R},{kernelName:tu,backendName:"cpu",kernelFunc:$A},{kernelName:th,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:h}=n;gd([a,i],"conv2dBackpropFilter");let p=or.convertConv2DDataFormat(l),d=or.computeConv2DInfo(a.shape,h,s,1,o,u,!1,p),{strideHeight:c,strideWidth:f,filterHeight:m,filterWidth:g}=d,y="channelsLast"===d.dataFormat,b=new as(d.filterShape,"float32"),x=d.padInfo.left,v=d.padInfo.top,w=r.data.get(a.dataId).values,k=r.data.get(i.dataId).values,S=new as(a.shape,a.dtype,w),I=new as(i.shape,i.dtype,k);for(let e=0;e<m;++e){let t=Math.max(0,Math.ceil((v-e)/c)),r=Math.min(d.outHeight,(d.inHeight+v-e)/c);for(let n=0;n<g;++n){let a=Math.max(0,Math.ceil((x-n)/f)),i=Math.min(d.outWidth,(d.inWidth+x-n)/f);for(let s=0;s<d.inChannels;++s)for(let o=0;o<d.outChannels;++o){let l=0;for(let u=0;u<d.batchSize;++u)for(let h=t;h<r;++h){let t=e+h*c-v;for(let e=a;e<i;++e){let r=n+e*f-x;y?l+=S.get(u,t,r,s)*I.get(u,h,e,o):l+=S.get(u,s,t,r)*I.get(u,o,h,e)}}b.set(l,e,n,s,o)}}}return r.makeTensorInfo(b.shape,b.dtype,b.values)}},{kernelName:tp,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{inputShape:s,strides:o,pad:l,dataFormat:u,dimRoundingMode:h}=n;gd([a,i],"conv2dBackpropInput");let p=ny.computeStrides(i.shape),d=ny.computeStrides(a.shape),c=or.convertConv2DDataFormat(u),f=or.computeConv2DInfo(s,i.shape,o,1,l,h,!1,c),m=new as(f.inShape,"float32"),g=m.values,y=r.data.get(a.dataId).values,b=r.data.get(i.dataId).values,[x,v,w]=p,{batchSize:k,filterHeight:S,filterWidth:I,inChannels:C,inHeight:N,inWidth:T,outChannels:$,outHeight:E,outWidth:R,strideHeight:A,strideWidth:F}=f;c=f.dataFormat;let _=S-1-f.padInfo.top,D=I-1-f.padInfo.left,O="channelsLast"===c,M=m.strides[0],z=O?m.strides[1]:m.strides[2],P=O?m.strides[2]:1,L=O?1:m.strides[1],B=d[0],W=O?d[1]:d[2],U=O?d[2]:1,V=O?1:d[1];for(let e=0;e<k;++e)for(let t=0;t<C;++t)for(let r=0;r<N;++r){let n=r-_,a=Math.max(0,Math.ceil(n/A)),i=Math.min(E,(S+n)/A);for(let s=0;s<T;++s){let o=s-D,l=Math.max(0,Math.ceil(o/F)),u=Math.min(R,(I+o)/F),h=0;for(let r=a;r<i;++r){let a=r*A-n;for(let n=l;n<u;++n){let i=n*F-o,s=B*e+W*r+U*n,l=x*(S-1-a)+v*(I-1-i)+w*t;for(let e=0;e<$;++e)h+=y[s+V*e]*b[l+e]}}g[M*e+z*r+P*s+L*t]=h}}return r.makeTensorInfo(m.shape,m.dtype,m.values)}},{kernelName:td,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dilations:l}=n;gd([a,i],"conv3d");let u=or.computeConv3DInfo(a.shape,i.shape,s,l,o),{filterDepth:h,filterHeight:p,filterWidth:d,dilationDepth:c,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,v=new as(u.outShape,a.dtype),w=r.data.get(a.dataId).values,k=r.data.get(i.dataId).values,S=v.values,I=ny.computeStrides(a.shape),C=ny.computeStrides(i.shape);for(let e=0;e<u.batchSize;++e){let t=e*I[0],r=e*v.strides[0];for(let e=0;e<u.outDepth;++e){let n=r+e*v.strides[1],a=e*u.strideDepth-y;for(let e=0;e<h;++e){let r=a+e*c;if(r<0||r>=u.inDepth)continue;let i=e*C[0],s=t+r*I[1];for(let e=0;e<u.outHeight;++e){let t=n+e*v.strides[2],r=e*u.strideHeight-x;for(let e=0;e<p;++e){let n=r+e*f;if(n<0||n>=u.inHeight)continue;let a=i+e*C[1],o=s+n*I[2];for(let e=0;e<u.outWidth;++e){let r=t+e*u.outChannels,n=e*u.strideWidth-b;for(let e=0;e<d;++e){let t=n+e*m;if(t<0||t>=u.inWidth)continue;let i=a+e*C[2],s=o+t*u.inChannels,l=i;for(let e=0;e<u.inChannels;++e){let t=w[s+e];for(let e=0;e<u.outChannels;++e)S[r+e]+=t*k[l+e];l+=u.outChannels}}}}}}}}return r.makeTensorInfo(v.shape,v.dtype,v.values)}},{kernelName:tc,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,filterShape:l}=n;gd([a,i],"conv3dBackpropFilterV2");let u=ny.computeStrides(a.shape),h=ny.computeStrides(i.shape),p=or.computeConv3DInfo(a.shape,l,s,1,o),d=p.strideDepth,c=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new as(p.filterShape,"float32"),x=b.values,[v,w,k,S]=b.strides,I=r.data.get(i.dataId).values,[C,N,T,$]=h,E=r.data.get(a.dataId).values,[R,A,F,_]=u,D=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){let t=Math.max(0,Math.ceil((D-e)/d)),r=Math.min(p.outDepth,(p.inDepth+D-e)/d),n=e*v;for(let a=0;a<g;++a){let i=Math.max(0,Math.ceil((M-a)/c)),s=Math.min(p.outHeight,(p.inHeight+M-a)/c),o=a*w+n;for(let n=0;n<y;++n){let l=Math.max(0,Math.ceil((O-n)/f)),u=Math.min(p.outWidth,(p.inWidth+O-n)/f),h=n*k+o;for(let o=0;o<p.inChannels;++o){let m=o*S+h;for(let h=0;h<p.outChannels;++h){let g=0;for(let m=0;m<p.batchSize;++m){let p=m*R,y=m*C;for(let m=t;m<r;++m){let t=(e+m*d-D)*A+p,r=m*N+y;for(let e=i;e<s;++e){let i=(a+e*c-M)*F+t,s=e*T+r;for(let e=l;e<u;++e){let t=(n+e*f-O)*_+i,r=e*$+s;g+=E[t+o]*I[r+h]}}}}x[m+h]=g}}}}}return r.makeTensorInfo(b.shape,b.dtype,b.values)}},{kernelName:tf,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{pad:s,strides:o,inputShape:l}=n;gd([a],"conv3dBackpropInputV2");let u=ny.computeStrides(a.shape),h=ny.computeStrides(i.shape),p=or.computeConv3DInfo(l,i.shape,o,1,s),d=new as(p.inShape,"float32"),c=d.values,[f,m,g,y]=d.strides,b=r.data.get(a.dataId).values,[x,v,w,k]=u,S=r.data.get(i.dataId).values,[I,C,N,T]=h,{batchSize:$,filterDepth:E,filterHeight:R,filterWidth:A,inChannels:F,inDepth:_,inHeight:D,inWidth:O,outChannels:M,outDepth:z,outHeight:P,outWidth:L,strideDepth:B,strideHeight:W,strideWidth:U}=p,V=E-1-p.padInfo.front,G=R-1-p.padInfo.top,H=A-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<F;++t)for(let r=0;r<_;++r){let n=r-V,a=Math.max(0,Math.ceil(n/B)),i=Math.min(z,(E+n)/B);for(let s=0;s<D;++s){let o=s-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(P,(R+o)/W);for(let h=0;h<O;++h){let p=h-H,d=Math.max(0,Math.ceil(p/U)),$=Math.min(L,(A+p)/U),F=0;for(let r=a;r<i;++r){let a=r*B-n;for(let n=l;n<u;++n){let i=n*W-o;for(let s=d;s<$;++s){let o=s*U-p,l=x*e+v*r+w*n+k*s,u=I*(E-1-a)+C*(R-1-i)+N*(A-1-o)+T*t;for(let e=0;e<M;++e)F+=b[l+e]*S[u+e]}}}c[f*e+m*r+g*s+y*h+t]=F}}}return r.makeTensorInfo(d.shape,d.dtype,d.values)}},{kernelName:"Cos",backendName:"cpu",kernelFunc:$F},{kernelName:tm,backendName:"cpu",kernelFunc:$_},{kernelName:tb,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{image:a,boxes:i,boxInd:s}=t,{cropSize:o,method:l,extrapolationValue:u}=n,[h,p,d,c]=a.shape,f=i.shape[0],[m,g]=o,y=so([f,m,g,c],"float32"),b=r.data.get(i.dataId).values,x=r.data.get(s.dataId).values,v=r.data.get(a.dataId).values,w=ny.computeStrides(a.shape),k=ny.computeStrides(y.shape);for(let e=0;e<f;e++){let t=4*e,r=b[t],n=b[t+1],a=b[t+2],i=b[t+3],s=x[e];if(s>=h)continue;let o=m>1?(a-r)*(p-1)/(m-1):0,f=g>1?(i-n)*(d-1)/(g-1):0;for(let t=0;t<m;t++){let h=m>1?r*(p-1)+t*o:.5*(r+a)*(p-1);if(h<0||h>p-1){for(let r=0;r<g;r++)for(let n=0;n<c;n++){let a=n+r*k[2]+t*k[1]+e*k[0];y.values[a]=u}continue}if("bilinear"===l){let r=Math.floor(h),a=Math.ceil(h),o=h-r;for(let l=0;l<g;l++){let h=g>1?n*(d-1)+l*f:.5*(n+i)*(d-1);if(h<0||h>d-1){for(let r=0;r<c;r++){let n=r+l*k[2]+t*k[1]+e*k[0];y.values[n]=u}continue}let p=Math.floor(h),m=Math.ceil(h),b=h-p;for(let n=0;n<c;n++){let i=n+p*w[2]+r*w[1]+s*w[0],u=v[i],h=v[i=n+m*w[2]+r*w[1]+s*w[0]],d=v[i=n+p*w[2]+a*w[1]+s*w[0]],c=v[i=n+m*w[2]+a*w[1]+s*w[0]],f=u+(h-u)*b,g=d+(c-d)*b;i=n+l*k[2]+t*k[1]+e*k[0],y.values[i]=f+(g-f)*o}}}else for(let r=0;r<g;++r){let a=g>1?n*(d-1)+r*f:.5*(n+i)*(d-1);if(a<0||a>d-1){for(let n=0;n<c;n++){let a=n+r*k[2]+t*k[1]+e*k[0];y.values[a]=u}continue}let o=Math.round(a),l=Math.round(h);for(let n=0;n<c;n++){let a=n+o*w[2]+l*w[1]+s*w[0],i=n+r*k[2]+t*k[1]+e*k[0];y.values[i]=v[a]}}}}return r.makeTensorInfo(y.shape,y.dtype,y.values)}},{kernelName:tg,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;gd(a,"cumprod");let l=or.getAxesPermutation([i],a.shape.length),u=a;null!=l&&(u=yi({inputs:{x:a},backend:r,attrs:{perm:l}}));let h=or.getInnerMostAxes(1,a.shape.length)[0];if(h!==u.shape.length-1)throw Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${h}`);let p=af(u.dtype,"int32"),d=ny.makeOnesTypedArray(ny.sizeFromShape(u.shape),p),c=r.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<c.length;e+=f)for(let t=0;t<f;t++){let r=m(e,t);if(0===t)d[r]=s?1:c[r];else{let n=m(e,t-1);d[r]=s?c[n]*d[n]:c[r]*d[n]}}let g=r.makeTensorInfo(u.shape,p,d);if(null!=l){let e=yi({inputs:{x:g},backend:r,attrs:{perm:or.getUndoAxesPermutation(l)}});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(u),e}return g}},{kernelName:ty,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;gd(a,"cumsum");let l=or.getAxesPermutation([i],a.shape.length),u=a;null!=l&&(u=yi({inputs:{x:a},backend:r,attrs:{perm:l}}));let h=or.getInnerMostAxes(1,a.shape.length)[0];if(h!==u.shape.length-1)throw Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${h}`);let p=af(u.dtype,"int32"),d=ny.makeZerosTypedArray(ny.sizeFromShape(u.shape),p),c=r.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<c.length;e+=f)for(let t=0;t<f;t++){let r=m(e,t);if(0===t)d[r]=s?0:c[r];else{let n=m(e,t-1);d[r]=s?c[n]+d[n]:c[r]+d[n]}}let g=r.makeTensorInfo(u.shape,p,d);if(null!=l){let e=yi({inputs:{x:g},backend:r,attrs:{perm:or.getUndoAxesPermutation(l)}});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(u),e}return g}},{kernelName:tx,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s,binaryOutput:o}=n;if(1===a.shape.length){let e=gC(r.data.get(a.dataId).values,r.data.get(i.dataId).values,i.dtype,i.shape,s);return r.makeTensorInfo([s],i.dtype,e)}if(2===a.shape.length){let e=gN(r.bufferSync(a),r.bufferSync(i),s,o);return r.makeTensorInfo(e.shape,i.dtype,e.values)}throw Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},{kernelName:tv,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockSize:i,dataFormat:s}=n;ny.assert("NHWC"===s,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${s}`);let o=a.shape[0],l=a.shape[1],u=a.shape[2],h=a.shape[3],p=l*i,d=u*i,c=h/(i*i),f=r.data.get(a.dataId).values,m=new Float32Array(o*p*d*c),g=0;for(let e=0;e<o;++e)for(let t=0;t<p;++t){let r=Math.floor(t/i),n=t%i;for(let t=0;t<d;++t){let a=Math.floor(t/i),s=t%i,o=(n*i+s)*c;for(let t=0;t<c;++t){let n=t+o+h*(a+u*(r+l*e));m[g++]=f[n]}}}return r.makeTensorInfo([o,p,d,c],a.dtype,m)}},{kernelName:tw,backendName:"cpu",kernelFunc:$D},{kernelName:tk,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,filterShape:h}=n;gd([a,i],"depthwiseConv2dNativeBackpropFilter");let p=or.computeConv2DInfo(a.shape,h,s,o,l,u,!0),{strideHeight:d,strideWidth:c,filterHeight:f,filterWidth:m}=p,g=new as(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,v=r.data.get(a.dataId).values,w=new as(a.shape,a.dtype,v),k=r.data.get(i.dataId).values,S=new as(i.shape,i.dtype,k);for(let e=0;e<f;++e){let t=Math.max(0,Math.ceil((b-e)/d)),r=Math.min(p.outHeight,(p.inHeight+b-e)/d);for(let n=0;n<m;++n){let a=Math.max(0,Math.ceil((y-n)/c)),i=Math.min(p.outWidth,(p.inWidth+y-n)/c);for(let s=0;s<p.outChannels;++s){let o=Math.trunc(s/x),l=s%x,u=0;for(let l=0;l<p.batchSize;++l)for(let h=t;h<r;++h){let t=e+h*d-b;for(let e=a;e<i;++e){let r=n+e*c-y;u+=w.get(l,t,r,o)*S.get(l,h,e,s)}}g.set(u,e,n,o,l)}}}return r.makeTensorInfo(g.shape,g.dtype,g.values)}},{kernelName:tS,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,inputShape:h}=n;gd([a,i],"depthwiseConv2DNativeBackpropInput");let p=ny.computeStrides(a.shape),d=ny.computeStrides(i.shape),c=or.computeConv2DInfo(h,i.shape,s,o,l,u,!0),f=new as(c.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=r.data.get(a.dataId).values,[v,w,k]=p,S=r.data.get(i.dataId).values,[I,C,N]=d,{batchSize:T,filterHeight:$,filterWidth:E,inChannels:R,inHeight:A,inWidth:F,outChannels:_,outHeight:D,outWidth:O,strideHeight:M,strideWidth:z}=c,P=$-1-c.padInfo.top,L=E-1-c.padInfo.left,B=_/R;for(let e=0;e<T;++e)for(let t=0;t<R;++t)for(let r=0;r<A;++r){let n=r-P,a=Math.max(0,Math.ceil(n/M)),i=Math.min(D,($+n)/M);for(let s=0;s<F;++s){let o=s-L,l=Math.max(0,Math.ceil(o/z)),u=Math.min(O,(E+o)/z),h=0;for(let r=a;r<i;++r){let a=r*M-n;for(let n=l;n<u;++n){let i=n*z-o,s=v*e+w*r+k*n,l=I*($-1-a)+C*(E-1-i)+N*t;for(let e=0;e<B;++e)h+=x[s+(t*B+e)]*S[l+e]}}m[g*e+y*r+b*s+t]=h}}return r.makeTensorInfo(f.shape,f.dtype,f.values)}},{kernelName:tI,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t,a=ny.sizeFromShape(n.shape),i=r.data.get(n.dataId).values,s=so([a,a],n.dtype),o=s.values;for(let e=0;e<i.length;e++)o[e*a+e]=i[e];let l=[...n.shape,...n.shape];return r.makeTensorInfo(l,s.dtype,s.values)}},{kernelName:tC,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:n,filter:a}=e,{strides:i,pad:s,dilations:o}=r,l=t.data.get(n.dataId).values,u=n.shape.length,h=t.data.get(a.dataId).values,p=a.shape.length,{batchSize:d,inHeight:c,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:v,filterHeight:w,filterWidth:k,dilationHeight:S,dilationWidth:I,outShape:C}=or.computeDilation2DInfo(n.shape,a.shape,i,s,"NHWC",o),N=ny.sizeFromShape(C),T=C.length,$=ny.getArrayFromDType(n.dtype,N);for(let e=0;e<d;++e)for(let t=0;t<g;++t){let r=t*x-b.top;for(let i=0;i<y;++i){let s=i*v-b.left;for(let o=0;o<m;++o){let d=Number.MIN_SAFE_INTEGER;for(let t=0;t<w;++t){let i=r+t*S;if(i>=0&&i<c)for(let r=0;r<k;++r){let c=s+r*I;if(c>=0&&c<f){let s=ny.locToIndex([e,i,c,o],u,ny.computeStrides(n.shape)),f=ny.locToIndex([t,r,o],p,ny.computeStrides(a.shape)),m=l[s]+h[f];m>d&&(d=m)}}}$[ny.locToIndex([e,t,i,o],T,ny.computeStrides(C))]=d}}}return{dataId:t.write(ny.toTypedArray($,n.dtype),C,n.dtype),shape:C,dtype:n.dtype}}},{kernelName:tT,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:n,filter:a,dy:i}=e,{strides:s,pad:o,dilations:l}=r,u=ny.toNestedArray(n.shape,t.data.get(n.dataId).values),h=ny.toNestedArray(a.shape,t.data.get(a.dataId).values),{batchSize:p,inHeight:d,inWidth:c,inChannels:f,outHeight:m,outWidth:g,padInfo:y,strideHeight:b,strideWidth:x,filterHeight:v,filterWidth:w,dilationHeight:k,dilationWidth:S,outShape:I}=or.computeDilation2DInfo(n.shape,a.shape,s,o,"NHWC",l);ny.assert(i.rank===I.length,()=>`Error in ${tT}, dy must have the same rank as output ${I.length}, but got ${i.rank}`);let C=ny.toNestedArray(I,t.data.get(i.dataId).values),N=ny.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<p;++e)for(let t=0;t<m;++t){let r=t*b-y.top;for(let n=0;n<g;++n){let a=n*x-y.left;for(let i=0;i<f;++i){let s=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){let n=r+t*k;if(n>=0&&n<d)for(let r=0;r<w;++r){let p=a+r*S;if(p>=0&&p<c){let a=u[e][n][p][i]+h[t][r][i];a>s&&(s=a,o=t,l=r)}}}N[o][l][i]+=C[e][t][n][i]}}}return{dataId:t.write(ny.toTypedArray(N,n.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},{kernelName:tN,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:n,filter:a,dy:i}=e,{strides:s,pad:o,dilations:l}=r,u=ny.toNestedArray(n.shape,t.data.get(n.dataId).values),h=ny.toNestedArray(a.shape,t.data.get(a.dataId).values),{batchSize:p,inHeight:d,inWidth:c,inChannels:f,outHeight:m,outWidth:g,padInfo:y,strideHeight:b,strideWidth:x,filterHeight:v,filterWidth:w,dilationHeight:k,dilationWidth:S,outShape:I}=or.computeDilation2DInfo(n.shape,a.shape,s,o,"NHWC",l);ny.assert(i.rank===I.length,()=>`Error in ${tN}, dy must have the same rank as output ${I.length}, but got ${i.rank}`);let C=ny.toNestedArray(I,t.data.get(i.dataId).values),N=ny.makeZerosNestedTypedArray(n.shape,n.dtype);for(let e=0;e<p;++e)for(let t=0;t<m;++t){let r=t*b-y.top;for(let n=0;n<g;++n){let a=n*x-y.left;for(let i=0;i<f;++i){let s=Number.MIN_SAFE_INTEGER,o=r<0?0:r,l=a<0?0:a;for(let t=0;t<v;++t){let n=r+t*k;if(n>=0&&n<d)for(let r=0;r<w;++r){let p=a+r*S;if(p>=0&&p<c){let a=u[e][n][p][i]+h[t][r][i];a>s&&(s=a,o=n,l=p)}}}N[e][o][l][i]+=C[e][t][n][i]}}}return{dataId:t.write(ny.toTypedArray(N,n.dtype),n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},{kernelName:t$,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{image:a}=t,{canvas:i,options:s}=n,{contextOptions:o,imageOptions:l}=s||{},u=(null==l?void 0:l.alpha)||1,h=(null==o?void 0:o.contextType)||"2d";if("2d"!==h)throw Error(`Context type ${o.contextType} is not supported by the CPU backend.`);let p=i.getContext(h,(null==o?void 0:o.contextAttributes)||{});if(null==p)throw Error(`Could not get the context with ${h} type.`);let[d,c]=a.shape.slice(0,2),f=2===a.shape.length?1:a.shape[2],m=r.data.get(a.dataId).values,g="float32"===a.dtype?255:1,y=new Uint8ClampedArray(c*d*4);for(let e=0;e<d*c;++e){let t=[0,0,0,255*u];for(let r=0;r<f;r++){let n=m[e*f+r];if("float32"===a.dtype){if(n<0||n>1)throw Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${n}.`)}else if("int32"===a.dtype&&(n<0||n>255))throw Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${n}.`);1===f?(t[0]=n*g,t[1]=n*g,t[2]=n*g):t[r]=n*g}let r=4*e;y[r+0]=Math.round(t[0]),y[r+1]=Math.round(t[1]),y[r+2]=Math.round(t[2]),y[r+3]=Math.round(t[3])}i.width=c,i.height=d;let b=new ImageData(y,c,d);return p.putImageData(b,0,0),a}},{kernelName:tR,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{equation:a}=n,{allDims:i,summedDims:s,idDims:o}=or.decodeEinsumEquation(a,t.length);or.checkEinsumDimSizes(i.length,o,t);let{path:l,steps:u}=or.getEinsumComputePath(s,o),h=u.length,p=null,d=i.length,c=[];for(let e=0;e<h;++e){for(let n of u[e]){let e,{permutationIndices:a,expandDims:i}=or.getEinsumPermutation(d,o[n]);or.isIdentityPermutation(a)?e=t[n]:(e=yi({inputs:{x:t[n]},backend:r,attrs:{perm:a}}),c.push(e));let s=e.shape.slice();for(let e=0;e<i.length;++e)s.splice(i[e],0,1);ny.arraysEqual(e.shape,s)||(e=$g({inputs:{x:e},backend:r,attrs:{shape:s}}),c.push(e)),null===p?p=e:(p=ye({inputs:{a:e,b:p},backend:r}),c.push(p))}e<h-1&&(l[e]>=0&&(p=$O({inputs:{x:p},backend:r,attrs:{axis:l[e]-(i.length-d),keepDims:!1}}),c.push(p)),d--)}for(let e of c)e!==p&&r.disposeIntermediateTensorInfo(e);return p}},{kernelName:"Elu",backendName:"cpu",kernelFunc:$u},{kernelName:tA,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{dy:n,y:a}=t;gd([n,a],"eluGrad");let i=new Float32Array(ny.sizeFromShape(a.shape)),s=r.data.get(a.dataId).values,o=r.data.get(n.dataId).values;for(let e=0;e<s.length;++e){let t=s[e];t>=0?i[e]=o[e]:i[e]=o[e]*(t+1)}return r.makeTensorInfo(a.shape,"float32",i)}},{kernelName:tF,backendName:"cpu",kernelFunc:gM},{kernelName:"Erf",backendName:"cpu",kernelFunc:$U},{kernelName:"Exp",backendName:"cpu",kernelFunc:gP},{kernelName:t_,backendName:"cpu",kernelFunc:$V},{kernelName:tD,backendName:"cpu",kernelFunc:gB},{kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t,a=ny.sizeFromShape(n.shape),i=n.shape[n.shape.length-1],s=$g({inputs:{x:n},backend:r,attrs:{shape:[a/i,i]}}),o=$j(s,!1,r),l=$g({inputs:{x:o},backend:r,attrs:{shape:n.shape}});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),l}},{kernelName:tO,backendName:"cpu",kernelFunc:$K},{kernelName:tM,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{image:n}=e,a=ny.getTypedArrayFromDType(n.dtype,ny.sizeFromShape(n.shape)),[i,s,o,l]=n.shape,u=r.data.get(n.dataId).values;for(let e=0;e<i;e++){let t=e*o*s*l;for(let e=0;e<s;e++){let r=o*l*e;for(let e=0;e<o;e++){let n=e*l;for(let i=0;i<l;i++){let s=Math.round(o-e-1),h=t+r+n+i,p=u[h];s>=0&&s<o&&(p=u[t+r+s*l+i]),a[h]=p}}}}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},{kernelName:tz,backendName:"cpu",kernelFunc:gU},{kernelName:tP,backendName:"cpu",kernelFunc:gG},{kernelName:no,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=n,m=$A({inputs:{x:a,filter:i},backend:r,attrs:{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d}});if(s){let e=m;if("NCHW"===h&&1===s.shape.length&&1!==s.shape[0]){let e=$g({inputs:{x:s},backend:r,attrs:{shape:[s.shape[0],1,1]}});m=gI({inputs:{a:m,b:e},backend:r}),r.disposeIntermediateTensorInfo(e)}else m=gI({inputs:{a:m,b:s},backend:r});r.disposeIntermediateTensorInfo(e)}if(c){let e=m;if("NCHW"===h&&"prelu"===c&&1===o.shape.length&&1!==o.shape[0]){let e=$g({inputs:{x:o},backend:r,attrs:{shape:[o.shape[0],1,1]}});m=$m(r,m,c,e,f),r.disposeIntermediateTensorInfo(e)}else m=$m(r,m,c,o,f);r.disposeIntermediateTensorInfo(e)}return m}},{kernelName:nl,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i,bias:s,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=n,m=$D({inputs:{x:a,filter:i},backend:r,attrs:{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d}});if(s){let e=m;m=gI({inputs:{a:m,b:s},backend:r}),r.disposeIntermediateTensorInfo(e)}if(c){let e=m;m=$m(r,m,c,o,f),r.disposeIntermediateTensorInfo(e)}return m}},{kernelName:tW,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{params:n,indices:a}=t,i=ny.sizeFromShape(n.shape),s=a.shape,o=s[s.length-1],[l,u,h,p]=or.prepareAndValidate(n,a);if(0===u)return r.makeTensorInfo(l,n.dtype,[]);let d=gH(r.data.get(a.dataId).values,r.bufferSync(n),n.dtype,u,o,h,p,n.shape,i);return r.makeTensorInfo(l,n.dtype,d.values)}},{kernelName:tB,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,indices:i}=t,{axis:s,batchDims:o}=n;gd([a,i],"gatherV2");let l=ny.parseAxisParam(s,a.shape)[0],u=r.data.get(i.dataId).values,h=a.shape[l];for(let e=0;e<u.length;++e){let t=u[e];ny.assert(t<=h-1&&t>=0,()=>`GatherV2: the index value ${t} is not in [0, ${h-1}]`)}let p=o;null==o&&(p=0);let d=ny.sizeFromShape(i.shape),c=or.segment_util.collectGatherOpShapeInfo(a,i,l,p),f=$g({inputs:{x:a},backend:r,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),m=$g({inputs:{x:i},backend:r,attrs:{shape:[c.batchSize,d/c.batchSize]}}),g=[c.batchSize,c.outerSize,d/c.batchSize,c.sliceSize],y=r.bufferSync(m),b=gj(r.bufferSync(f),y,g);return r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(m),r.makeTensorInfo(c.outputShape,b.dtype,b.values)}},{kernelName:tU,backendName:"cpu",kernelFunc:gq},{kernelName:tV,backendName:"cpu",kernelFunc:gY},{kernelName:tG,backendName:"cpu",kernelFunc:gy},{kernelName:tH,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t,a=ny.sizeFromShape(n.shape),i=n.shape[n.shape.length-1],s=$g({inputs:{x:n},backend:r,attrs:{shape:[a/i,i]}}),o=$j(s,!0,r),l=$g({inputs:{x:o},backend:r,attrs:{shape:n.shape}});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),l}},{kernelName:tj,backendName:"cpu",kernelFunc:$E},{kernelName:tK,backendName:"cpu",kernelFunc:$q},{kernelName:tq,backendName:"cpu",kernelFunc:$X},{kernelName:tX,backendName:"cpu",kernelFunc:$Y},{kernelName:tY,backendName:"cpu",kernelFunc:$h},{kernelName:tZ,backendName:"cpu",kernelFunc:gQ},{kernelName:tQ,backendName:"cpu",kernelFunc:g0},{kernelName:tJ,backendName:"cpu",kernelFunc:function(e){let{backend:t,attrs:r}=e,{start:n,stop:a,num:i}=r,s=g1(n,a,i);return t.makeTensorInfo([s.length],"float32",s)}},{kernelName:"Log",backendName:"cpu",kernelFunc:g3},{kernelName:t0,backendName:"cpu",kernelFunc:$Z},{kernelName:t1,backendName:"cpu",kernelFunc:$Q},{kernelName:t2,backendName:"cpu",kernelFunc:$J},{kernelName:t3,backendName:"cpu",kernelFunc:$0},{kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{depthRadius:i,bias:s,alpha:o,beta:l}=n;gd(a,"LRN");let u=a.shape[3],h=u-1,p=r.data.get(a.dataId).values,d=ny.sizeFromShape(a.shape),c=new Float32Array(d);for(let e=0;e<d;e++){let t=function(e){let t=e%u,r=e-t+Math.max(0,t-i),n=e-t+Math.min(t+i,h),a=0;for(;r<=n;r++){let e=p[r];a+=e*e}return a}(e),r=p[e]*Math.pow(s+o*t,-l);c[e]=r}return r.makeTensorInfo(a.shape,a.dtype,c)}},{kernelName:t4,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,y:i,dy:s}=t,{depthRadius:o,bias:l,alpha:u,beta:h}=n;gd(s,"LRNGrad");let p=ny.sizeFromShape(s.shape),d=s.shape[3],c=r.data.get(s.dataId).values,f=r.data.get(a.dataId).values,m=r.data.get(i.dataId).values,g=new Float32Array(p);for(let e=0;e<p;e++){let t=e%d,r=e-t+Math.max(0,t-o),n=e-t+Math.min(d,t+o+1),a=0;for(let e=r;e<n;e++)a+=Math.pow(f[e],2);a=u*a+l;for(let t=r;t<n;t++){let r=-2*u*h*f[t]*m[e]/a;e===t&&(r+=Math.pow(a,-h)),r*=c[e],g[t]+=r}}return r.makeTensorInfo(s.shape,a.dtype,g)}},{kernelName:"Max",backendName:"cpu",kernelFunc:$1},{kernelName:t6,backendName:"cpu",kernelFunc:g5},{kernelName:t5,backendName:"cpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r;gd(i,"maxPool");let{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=a;ny.assert(or.eitherStridesOrDilationsAreOne(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);let h=or.computePool2DInfo(i.shape,s,o,1,l,u);if(1===h.filterWidth&&1===h.filterHeight&&ny.arraysEqual(h.inShape,h.outShape))t=gy({inputs:{x:i},backend:n});else{let e=n.data.get(i.dataId).values,r=ny.computeStrides(i.shape),a=$C(e,i.shape,i.dtype,r,h,"max");t=n.makeTensorInfo(h.outShape,i.dtype,a.values)}return t}},{kernelName:t7,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l,dataFormat:u}=n;gd(a,"maxPool3d");let h=or.computePool3DInfo(a.shape,i,s,1,o,l,u),p=$T(r.data.get(a.dataId).values,a.shape,a.dtype,ny.computeStrides(a.shape),h,"max");return r.makeTensorInfo(p.shape,"float32",p.values)}},{kernelName:t9,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n;gd([a,i],"maxPool3DGrad");let h=or.computePool3DInfo(i.shape,s,o,1,l,u),p=function(e,t){let r=so(t.outShape,"int32"),n=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=t.padInfo.front,c=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){let b=y*n-d,x=b;for(;x<0;)x+=s;let v=Math.min(t.inDepth,u+b);for(let n=0;n<t.outHeight;++n){let u=n*a-c,d=u;for(;d<0;)d+=o;let w=Math.min(t.inHeight,h+u);for(let a=0;a<t.outWidth;++a){let c=a*i-f,k=c;for(;k<0;)k+=l;let S=Math.min(t.inWidth,p+c),I=-1/0,C=-1;for(let t=x;t<v;t+=s){let r=t-b;for(let n=d;n<w;n+=o){let a=n-u;for(let i=k;i<S;i+=l){let s=i-c,o=e.get(m,t,n,i,g);o>=I&&(I=o,C=r*h*p+a*h+s)}}}r.set(C,m,y,n,a,g)}}}return r}(r.bufferSync(i),h),d=h.strideDepth,c=h.strideHeight,f=h.strideWidth,m=h.dilationDepth,g=h.dilationHeight,y=h.dilationWidth,b=h.effectiveFilterDepth,x=h.effectiveFilterHeight,v=h.effectiveFilterWidth,w=b-1-h.padInfo.front,k=v-1-h.padInfo.left,S=x-1-h.padInfo.top,I=so(i.shape,"float32"),C=r.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let r=0;r<h.inDepth;++r)for(let n=0;n<h.inHeight;++n)for(let a=0;a<h.inWidth;++a){let i=r-w,s=n-S,o=a-k,l=0;for(let r=0;r<b;r+=m){let n=(i+r)/d;if(!(n<0)&&!(n>=h.outDepth)&&Math.floor(n)===n)for(let a=0;a<x;a+=g){let i=(s+a)/c;if(!(i<0)&&!(i>=h.outHeight)&&Math.floor(i)===i)for(let s=0;s<v;s+=y){let u=(o+s)/f;if(u<0||u>=h.outWidth||Math.floor(u)!==u)continue;let d=+(b*x*v-1-p.get(e,n,i,u,t)===r*x*v+a*v+s);0!==d&&(l+=C.get(e,n,i,u,t)*d)}}}I.set(l,e,r,n,a,t)}return r.makeTensorInfo(I.shape,I.dtype,I.values)}},{kernelName:t8,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i,output:s}=t;gd([i,s],"maxPoolGrad");let{filterSize:o,strides:l,pad:u,dimRoundingMode:h}=n,p=or.computePool2DInfo(i.shape,o,l,1,u,h),d=r.data.get(i.dataId).values,c=so(p.outShape,i.dtype,$N(d,i.shape,i.dtype,p).values),f=p.strideHeight,m=p.strideWidth,g=p.dilationHeight,y=p.dilationWidth,b=p.effectiveFilterHeight,x=p.effectiveFilterWidth,v=x-1-p.padInfo.left,w=b-1-p.padInfo.top,k=so(i.shape,"float32"),S=r.data.get(a.dataId).values,I=so(a.shape,"float32",S);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let r=0;r<p.inHeight;++r)for(let n=0;n<p.inWidth;++n){let a=r-w,i=n-v,s=0;for(let r=0;r<b;r+=g){let n=(a+r)/f;if(!(n<0)&&!(n>=p.outHeight)&&Math.floor(n)===n)for(let a=0;a<x;a+=y){let o=(i+a)/m;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;let l=+(b*x-1-c.get(e,n,o,t)===r*x+a);0!==l&&(s+=I.get(e,n,o,t)*l)}}k.set(s,e,r,n,t)}return r.makeTensorInfo(k.shape,k.dtype,k.values)}},{kernelName:re,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:n}=e,{filterSize:a,strides:i,pad:s,includeBatchInIndex:o}=t;gd(n,"MaxPoolWithArgmax");let l=r.data.get(n.dataId).values,u=or.computePool2DInfo(n.shape,a,i,[1,1],s),[h,p]=function(e,t,r,n,a){let i=ny.computeStrides(t),s=$C(e,t,r,i,a,"max"),o=$N(e,t,r,a,!0,n);return[s.values,o.values]}(l,n.shape,n.dtype,o,u),d=r.write(h,u.outShape,n.dtype),c=r.write(p,u.outShape,n.dtype);return[{dataId:d,shape:u.outShape,dtype:n.dtype},{dataId:c,shape:u.outShape,dtype:"int32"}]}},{kernelName:rt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n,o=ny.parseAxisParam(i,a.shape),l=or.computeOutAndReduceShapes(a.shape,o)[1],u=ny.sizeFromShape(l),h=[],p=r.makeTensorInfo([],"float32",new Float32Array([u]));h.push(p);let d=gv({inputs:{x:a},backend:r,attrs:{dtype:"float32"}});h.push(d);let c=$G({inputs:{a:d,b:p},backend:r});h.push(c);let f=$O({inputs:{x:c},backend:r,attrs:{axis:i,keepDims:s}});return h.forEach(e=>r.disposeIntermediateTensorInfo(e)),f}},{kernelName:"Min",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;gd(a,"min");let o=ny.parseAxisParam(i,a.shape),l=o,u=or.getAxesPermutation(l,a.shape.length),h=a;null!=u&&(h=yi({inputs:{x:a},backend:r,attrs:{perm:u}}),l=or.getInnerMostAxes(l.length,a.shape.length)),or.assertAxesAreInnerMostDims("min",l,h.shape.length);let[p,d]=or.computeOutAndReduceShapes(h.shape,l),c=ny.sizeFromShape(d),f=ny.makeZerosTypedArray(ny.sizeFromShape(p),h.dtype),m=r.data.get(h.dataId).values;for(let e=0;e<f.length;++e){let t=e*c,r=m[t];for(let e=0;e<c;++e){let n=m[t+e];(Number.isNaN(n)||n<r)&&(r=n)}f[e]=r}null!=u&&r.disposeIntermediateTensorInfo(h);let g=r.makeTensorInfo(p,h.dtype,f);if(s){let e=$g({inputs:{x:g},backend:r,attrs:{shape:or.expandShapeToKeepDim(p,o)}});return r.disposeIntermediateTensorInfo(g),e}return g}},{kernelName:rr,backendName:"cpu",kernelFunc:g7},{kernelName:rn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{paddings:i,mode:s}=n;gd(a,"mirrorPad");let o=i.map((e,t)=>e[0]+a.shape[t]+e[1]),l=i.map(e=>e[0]),u=i.map((e,t)=>e[0]+a.shape[t]),h=+("reflect"!==s),p=r.data.get(a.dataId).values,d=a.shape.length,c=ny.computeStrides(a.shape),f=ny.sizeFromShape(o),m=o.length,g=ny.computeStrides(o),y=ny.getTypedArrayFromDType(a.dtype,f);for(let e=0;e<f;e++){let t=ny.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-h:t[e]>=u[e]&&(t[e]=(u[e]-1)*2-t[e]+h);t=t.map((e,t)=>e-l[t]);let r=ny.locToIndex(t,d,c);y[e]=p[r]}return{dataId:r.write(y,o,a.dtype),shape:o,dtype:a.dtype}}},{kernelName:"Mod",backendName:"cpu",kernelFunc:$2},{kernelName:ra,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{numSamples:i,seed:s,normalized:o}=n;gd(a,"multinomial");let l=o?a:$3({inputs:{logits:a},backend:r,attrs:{dim:-1}}),u=l.shape[0],h=l.shape[1],p=r.data.get(l.dataId).values,d=[u,i],c=ny.makeZerosTypedArray(ny.sizeFromShape(d),"int32");for(let e=0;e<u;++e){let t=e*h,r=new Float32Array(h-1);r[0]=p[t];for(let e=1;e<r.length;++e)r[e]=r[e-1]+p[t+e];let n=ux.alea(s.toString()),a=e*i;for(let e=0;e<i;++e){let t=n();c[a+e]=r.length;for(let n=0;n<r.length;n++)if(t<r[n]){c[a+e]=n;break}}}return o||r.disposeIntermediateTensorInfo(l),r.makeTensorInfo(d,"int32",c)}},{kernelName:ri,backendName:"cpu",kernelFunc:ye},{kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t;gd(n,"neg");let[a,i]=yt(r.data.get(n.dataId).values,n.shape,n.dtype);return r.makeTensorInfo(i,n.dtype,a)}},{kernelName:ro,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=n;gd(a,"NonMaxSuppression");let{selectedIndices:u}=$4(r.data.get(a.dataId).values,r.data.get(i.dataId).values,s,o,l);return r.makeTensorInfo([u.length],"int32",new Int32Array(u))}},{kernelName:rl,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=n;gd(a,"NonMaxSuppressionPadded");let{selectedIndices:h,validOutputs:p}=$6(r.data.get(a.dataId).values,r.data.get(i.dataId).values,s,o,l,u);return[r.makeTensorInfo([h.length],"int32",new Int32Array(h)),r.makeTensorInfo([],"int32",new Int32Array([p]))]}},{kernelName:ru,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=n;gd(a,"NonMaxSuppressionWithScore");let h=r.data.get(a.dataId).values,{selectedIndices:p,selectedScores:d}=$5(h,r.data.get(i.dataId).values,s,o,l,u);return[r.makeTensorInfo([p.length],"int32",new Int32Array(p)),r.makeTensorInfo([d.length],"float32",new Float32Array(d))]}},{kernelName:rs,backendName:"cpu",kernelFunc:yn},{kernelName:rp,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{indices:a}=t,{dtype:i,depth:s,onValue:o,offValue:l}=n;gd(a,"oneHot");let u=ny.sizeFromShape(a.shape),h=new Float32Array(u*s);h.fill(l);let p=r.data.get(a.dataId).values;for(let e=0;e<u;++e)p[e]>=0&&p[e]<s&&(h[e*s+p[e]]=o);return r.makeTensorInfo([...a.shape,s],i,h)}},{kernelName:rh,backendName:"cpu",kernelFunc:function e(t){let{inputs:r,backend:n}=t,{x:a}=r;if("string"===a.dtype)throw Error("onesLike is not supported for string tensors");if("complex64"!==a.dtype)return $K({backend:n,attrs:{shape:a.shape,value:1,dtype:a.dtype}});{let t=gb({inputs:{input:a},backend:n}),r=e({inputs:{x:t},backend:n}),i=$E({inputs:{input:a},backend:n}),s=$8({inputs:{x:i},backend:n}),o=gm({inputs:{real:r,imag:s},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(s),o}}},{kernelName:rd,backendName:"cpu",kernelFunc:$7},$9,{kernelName:"Pow",backendName:"cpu",kernelFunc:Ee},{kernelName:rf,backendName:"cpu",kernelFunc:$d},{kernelName:rm,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;gd(a,"prod");let o=a.shape.length,l=ny.parseAxisParam(i,a.shape),u=or.getAxesPermutation(l,o),h=l,p=a,d=[];null!=u&&(d.push(p=yi({inputs:{x:a},backend:r,attrs:{perm:u}})),h=or.getInnerMostAxes(h.length,o));let c=r.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=ys(p.shape,p.dtype,c,h),y=m;return s&&(y=or.expandShapeToKeepDim(m,l)),d.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.makeTensorInfo(y,g,f)}},{kernelName:rg,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{paramsNestedSplits:a,paramsDenseValues:i,indices:s}=t,{outputRaggedRank:o}=n,l=a.map(e=>r.data.get(e.dataId).values),u=a.map(e=>e.shape),h=r.data.get(i.dataId).values,p=r.data.get(s.dataId).values,[d,c,f]=yl(l,u,h,i.shape,i.dtype,p,s.shape,o),m=d.map(e=>r.makeTensorInfo([e.length],"int32",e)),g=r.makeTensorInfo(f,i.dtype,c);return m.concat([g])}},{kernelName:ry,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{starts:n,limits:a,deltas:i}=t,s=r.data.get(n.dataId).values,o=r.data.get(a.dataId).values,l=r.data.get(i.dataId).values,[u,h]=yu(s,n.shape,n.dtype,o,a.shape,l,i.shape);return[r.makeTensorInfo([u.length],"int32",u),r.makeTensorInfo([h.length],n.dtype,h)]}},{kernelName:rb,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{shape:a,values:i,defaultValue:s,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=n,u=r.data.get(a.dataId).values,h=r.data.get(i.dataId).values,p=r.data.get(s.dataId).values,d=o.map(e=>r.data.get(e.dataId).values),c=o.map(e=>e.shape),[f,m]=yf(u,a.shape,h,i.shape,i.dtype,p,s.shape,d,c,l);return r.makeTensorInfo(f,i.dtype,m)}},{kernelName:rx,backendName:"cpu",kernelFunc:function(e){let{backend:t,attrs:r}=e,{start:n,stop:a,dtype:i,step:s}=r,o=ym(n,a,s,i);return t.makeTensorInfo([o.length],i,o)}},{kernelName:rv,backendName:"cpu",kernelFunc:gb},$H,{kernelName:rw,backendName:"cpu",kernelFunc:Et},{kernelName:rk,backendName:"cpu",kernelFunc:$c},{kernelName:r$,backendName:"cpu",kernelFunc:$f},{kernelName:rS,backendName:"cpu",kernelFunc:$g},{kernelName:rN,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:s,size:o}=n;gd(a,"resizeBilinear");let l=ny.computeStrides(a.shape),[u,h]=o,[p,d,c,f]=a.shape,m=r.data.get(a.dataId).values,g=new Float32Array(ny.sizeFromShape([p,u,h,f])),y=[i&&u>1?d-1:d,i&&h>1?c-1:c],b=[i&&u>1?u-1:u,i&&h>1?h-1:h],x=0,v=y[0]/b[0],w=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let r,n=Math.max(0,Math.floor(r=s?v*(t+.5)-.5:v*t)),a=r-n,i=Math.min(d-1,Math.ceil(r)),o=e*l[0]+n*l[1],u=e*l[0]+i*l[1];for(let e=0;e<h;e++){let t,r=Math.max(0,Math.floor(t=s?w*(e+.5)-.5:w*e)),n=t-r,i=Math.min(c-1,Math.ceil(t)),h=o+r*l[2],p=u+r*l[2],d=o+i*l[2],y=u+i*l[2];for(let e=0;e<f;e++){let t=m[h+e],r=m[p+e],i=m[d+e],s=m[y+e],o=t+(i-t)*n,l=o+(r+(s-r)*n-o)*a;g[x++]=l}}}return r.makeTensorInfo([p,u,h,f],"float32",g)}},{kernelName:rT,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n;gd([i,a],"resizeBilinearGrad");let o=ny.computeStrides(a.shape),[l,u,h,p]=a.shape,[,d,c]=i.shape,f=new Float32Array(l*u*h*p),m=[s&&d>1?u-1:u,s&&c>1?h-1:h],g=[s&&d>1?d-1:d,s&&c>1?c-1:c],y=m[0]/g[0],b=m[1]/g[1],x=r.data.get(i.dataId).values,v=0;for(let e=0;e<l;e++){let t=e*o[0];for(let e=0;e<d;e++){let r=e*y,n=Math.floor(r),a=Math.min(Math.ceil(r),u-1),i=t+n*o[1],s=t+a*o[1],l=r-n,d=1-l;for(let e=0;e<c;e++){let t=e*b,r=Math.floor(t),n=Math.min(Math.ceil(t),h-1),a=t-r,u=1-a,c=i+r*o[2],m=i+n*o[2],g=s+r*o[2],y=s+n*o[2],w=d*u,k=d*a,S=l*u,I=l*a;for(let e=0;e<p;e++){let t=x[v++];f[c+e]+=t*w,f[m+e]+=t*k,f[g+e]+=t*S,f[y+e]+=t*I}}}}return r.makeTensorInfo([l,h,u,p],"float32",f)}},{kernelName:rI,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:s,size:o}=n;gd(a,"resizeNearestNeighbor");let l=ny.computeStrides(a.shape),[u,h]=o,[p,d,c,f]=a.shape,m=r.data.get(a.dataId).values,g=new Float32Array(p*u*h*f),y=[i&&u>1?d-1:d,i&&h>1?c-1:c],b=[i&&u>1?u-1:u,i&&h>1?h-1:h],x=y[0]/b[0],v=y[1]/b[1],w=0;for(let e=0;e<p;e++){let t=e*l[0];for(let e=0;e<u;e++){let r=s?x*(e+.5):x*e,n=Math.min(d-1,i?Math.round(r):Math.floor(r));s&&(n=Math.max(0,n));let a=t+n*l[1];for(let e=0;e<h;e++){let t=s?v*(e+.5):v*e,r=Math.min(c-1,i?Math.round(t):Math.floor(t));s&&(r=Math.max(0,r));let n=a+r*l[2];for(let e=0;e<f;e++){let t=m[n+e];g[w++]=t}}}}return r.makeTensorInfo([p,u,h,f],a.dtype,g)}},{kernelName:rC,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n;gd([i,a],"resizeNearestNeighborGrad");let o=ny.computeStrides(a.shape),l=ny.computeStrides(i.shape),[u,h,p,d]=a.shape,[,c,f]=i.shape,m=new Float32Array(u*h*p*d),g=r.data.get(i.dataId).values,y=[s&&c>1?h-1:h,s&&f>1?p-1:p],b=[s&&c>1?c-1:c,s&&f>1?f-1:f],x=y[0]/b[0],v=y[1]/b[1],w=1/x,k=1/v,S=2*Math.ceil(w)+2,I=2*Math.ceil(k)+2;for(let e=0;e<u;e++){let t=e*o[0];for(let e=0;e<h;e++){let r=t+e*o[1],n=Math.floor(Math.floor(e*w)-S/2);for(let a=0;a<p;a++){let i=r+a*o[2],u=Math.floor(Math.floor(a*k)-I/2);for(let r=0;r<d;r++){let o=0;for(let i=0;i<S;i++){let d=i+n;if(d<0||d>=c)continue;let m=t+d*l[1],y=d*x;if(e===Math.min(h-1,s?Math.round(y):Math.floor(y)))for(let e=0;e<I;e++){let t=e+u;if(t<0||t>=f)continue;let n=m+t*l[2],i=t*v;a===Math.min(p-1,s?Math.round(i):Math.floor(i))&&(o+=g[n+r])}}m[i+r]=o}}}}return r.makeTensorInfo(a.shape,a.dtype,m)}},{kernelName:rE,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{dims:i}=n;gd(a,"reverse");let s=a.shape.length,o=ny.parseAxisParam(i,a.shape);if(0===s)return gy({inputs:{x:a},backend:r});let l=new as(a.shape,a.dtype),u=r.bufferSync(a);for(let e=0;e<l.size;e++){let t=l.indexToLoc(e),r=t.slice();o.forEach(e=>r[e]=a.shape[e]-1-r[e]),l.set(u.get(...r),...t)}return r.makeTensorInfo(l.shape,l.dtype,l.values)}},{kernelName:ni,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{image:n}=e,{radians:a,fillValue:i,center:s}=t,o=ny.getTypedArrayFromDType(n.dtype,ny.sizeFromShape(n.shape)),[l,u,h,p]=n.shape,[d,c]=or.getImageCenter(s,u,h),f=Math.sin(a),m=Math.cos(a),g=r.data.get(n.dataId).values;for(let e=0;e<l;e++){let t=e*h*u*p;for(let e=0;e<u;e++){let r=h*p*e;for(let n=0;n<h;n++){let a=n*p;for(let s=0;s<p;s++){let y=[l,e,n,s],b=y[2],x=y[1],v=(b-d)*m-(x-c)*f,w=(b-d)*f+(x-c)*m;v=Math.round(v+d),w=Math.round(w+c);let k=i;"number"!=typeof i&&(k=3===s?255:i[s]),v>=0&&v<h&&w>=0&&w<u&&(k=g[t+h*p*w+v*p+s]),o[t+r+a+s]=k}}}}return{dataId:r.write(o,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},{kernelName:rR,backendName:"cpu",kernelFunc:Er},{kernelName:rA,backendName:"cpu",kernelFunc:yy},{kernelName:rF,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{indices:a,updates:i}=t,{shape:s}=n,{sliceRank:o,numUpdates:l,sliceSize:u,strides:h,outputSize:p}=or.calculateShapes(i,a,s),d=yb(r.bufferSync(a),r.bufferSync(i),s,p,u,l,o,h,0,!0);return r.makeTensorInfo(s,d.dtype,d.values)}},{kernelName:rD,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{sortedSequence:a,values:i}=t,{side:s}=n,o=function(e,t,r,n,a,i){let s=ny.getArrayFromDType("int32",r*a);for(let o=0;o<r;++o){let r=e.slice(o*n,(o+1)*n),l=o*a;for(let e=0;e<a;++e)s[l+e]="left"===i?function(e,t){let r=0,n=e.length,a=0;for(;r<n;)e[a=Math.floor((r+n)/2)]<t?r=a+1:n=a;return n}(r,t[e+l]):function(e,t){let r=0,n=e.length,a=0;for(;r<n;)e[a=Math.floor((r+n)/2)]<=t?r=a+1:n=a;return n}(r,t[e+l])}return s}(r.data.get(a.dataId).values,r.data.get(i.dataId).values,a.shape[0],a.shape[1],i.shape[1],s);return r.makeTensorInfo(i.shape,"int32",o)}},{kernelName:rO,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{condition:n,t:a,e:i}=t;gd([n,a,i],"select");let s=n.shape.length,o=r.data.get(n.dataId).values,l=r.data.get(a.dataId).values,u=r.data.get(i.dataId).values,h=af(a.dtype,i.dtype),p=ny.makeZerosTypedArray(ny.sizeFromShape(a.shape),h),d=0,c=0===s||s>1||1===a.shape.length?1:ny.sizeFromShape(a.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<c;t++)1===o[e]?p[d++]=l[e]:p[d++]=u[e];return r.makeTensorInfo(a.shape,h,p)}},{kernelName:rM,backendName:"cpu",kernelFunc:Ei},{kernelName:rB,backendName:"cpu",kernelFunc:yv},{kernelName:rL,backendName:"cpu",kernelFunc:Es},{kernelName:"Sin",backendName:"cpu",kernelFunc:Eo},{kernelName:rP,backendName:"cpu",kernelFunc:El},{kernelName:rz,backendName:"cpu",kernelFunc:yk},{kernelName:rH,backendName:"cpu",kernelFunc:$3},{kernelName:rW,backendName:"cpu",kernelFunc:Eh},{kernelName:rV,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,paddings:s}=n;gd([a],"spaceToBatchND");let o=ny.sizeFromShape(i),l=[[0,0]];l.push(...s);for(let e=1+i.length;e<a.shape.length;++e)l.push([0,0]);let u=$9.kernelFunc({inputs:{x:a},backend:r,attrs:{paddings:l,constantValue:0}}),h=or.getReshaped(u.shape,i,o,!1),p=or.getPermuted(h.length,i.length,!1),d=or.getReshapedPermuted(u.shape,i,o,!1),c=$g({inputs:{x:u},backend:r,attrs:{shape:h}}),f=yi({inputs:{x:c},backend:r,attrs:{perm:p}}),m=$g({inputs:{x:f},backend:r,attrs:{shape:d}});return r.disposeIntermediateTensorInfo(u),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(f),m}},{kernelName:rj,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{indices:n,values:a,denseShape:i,defaultValue:s}=t;if(1!==i.shape.length)throw Error(`Dense shape must be a vector, saw:
        ${i.shape}`);if(2!==n.shape.length)throw Error(`Indices must be a matrix, saw:
        ${n.shape}`);if(1!==a.shape.length)throw Error(`Values must be a vector, saw:
        ${a.shape}`);if(0!==s.shape.length)throw Error(`Default value must be a scalar, saw:
        ${s.shape}`);let o=r.data.get(n.dataId).values,l=r.data.get(a.dataId).values,u=r.data.get(i.dataId).values,h=r.data.get(s.dataId).values[0],[p,d,c,f,m]=yS(o,n.shape,n.dtype,l,a.dtype,u,h);return[r.makeTensorInfo(d,n.dtype,p),r.makeTensorInfo([d[0]],a.dtype,c),r.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),r.makeTensorInfo([m.length],n.dtype,new Int32Array(m))]}},{kernelName:rK,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{inputIndices:n,inputShape:a,newShape:i}=t;if(2!==n.shape.length)throw Error(`Input indices should be a matrix but received shape
        ${n.shape}`);if(1!==a.shape.length)throw Error(`Input shape should be a vector but received shape
        ${a.shape}`);if(1!==i.shape.length)throw Error(`Target shape should be a vector but received shape ${i.shape}`);let s=Array.from(r.data.get(a.dataId).values),o=r.data.get(n.dataId).values,l=Array.from(r.data.get(i.dataId).values),[u,h,p]=yI(o,n.shape,n.dtype,s,l);return[r.makeTensorInfo(h,n.dtype,u),r.makeTensorInfo([p.length],i.dtype,new Int32Array(p))]}},{kernelName:rq,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;if(n.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
          ${a.shape}`);if(1!==i.shape.length)throw Error(`Segment ids should be a vector but received shape
          ${i.shape}`);if(a.shape[0]!==i.shape[0])throw Error("segmentIds and indices should have same size.");let s=r.data.get(n.dataId).values,o=r.data.get(a.dataId).values,l=r.data.get(i.dataId).values,[u,h]=yC(s,n.shape,n.dtype,o,l,!0);return r.makeTensorInfo(h,n.dtype,u)}},{kernelName:rX,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;if(n.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
         ${a.shape}`);if(1!==i.shape.length)throw Error(`Segment ids should be a vector but received shape
         ${i.shape}`);if(a.shape[0]!==i.shape[0])throw Error("segmentIds and indices should have same size.");let s=r.data.get(n.dataId).values,o=r.data.get(a.dataId).values,l=r.data.get(i.dataId).values,[u,h]=yC(s,n.shape,n.dtype,o,l);return r.makeTensorInfo(h,n.dtype,u)}},{kernelName:rY,backendName:"cpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{sparseIndices:i,sparseValues:s,defaultValue:o}=r,{outputShape:l}=a,{sliceRank:u,numUpdates:h,sliceSize:p,strides:d,outputSize:c}=or.calculateShapes(s,i,l),f=n.bufferSync(i);switch(s.dtype){case"bool":t=yb(f,n.bufferSync(s),l,c,p,h,u,d,!!n.data.get(o.dataId).values[0],!1);break;case"float32":case"int32":t=yb(f,n.bufferSync(s),l,c,p,h,u,d,n.data.get(o.dataId).values[0],!1);break;case"string":t=yb(f,n.bufferSync(s),l,c,p,h,u,d,ny.decodeString(n.data.get(o.dataId).values[0]),!1);break;default:throw Error(`Unsupported type ${s.dtype}`)}return n.makeTensorInfo(l,t.dtype,t.values)}},{kernelName:rG,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{numOrSizeSplits:i,axis:s}=n,o=ny.parseAxisParam(s,a.shape)[0],l=or.prepareSplitSize(a,i,o),u=Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{let t=[...h];t[o]=e;let n=yk({inputs:{x:a},backend:r,attrs:{begin:u,size:t}});return u[o]+=e,n})}},{kernelName:rU,backendName:"cpu",kernelFunc:yT},{kernelName:rQ,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{let{x:r}=e;gd(r,"square");let n=t.data.get(r.dataId).values,a=new Float32Array(n.length);for(let e=0;e<n.length;++e){let t=n[e];a[e]=t*t}return{dataId:t.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:rZ,backendName:"cpu",kernelFunc:yE},{kernelName:rJ,backendName:"cpu",kernelFunc:yA},{kernelName:nn,backendName:"cpu",kernelFunc:Ep},{kernelName:r0,backendName:"cpu",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{begin:s,end:o,strides:l,beginMask:u,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:c}=a;gd(i,"stridedSlice");let{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:w}=oM.sliceInfo(i.shape,s,o,l,u,h,p,d,c);if(g)t=$g({inputs:{x:i},backend:n,attrs:{shape:m}});else if(y||b){ny.assert(i.shape.length>=1,()=>`Input must have rank at least 1, got: ${i.shape.length}`);let e=oM.computeOutShape(x,v,w),r=yk({inputs:{x:i},backend:n,attrs:{begin:x,size:e}});t=$g({inputs:{x:r},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(r)}else{let e=yF(f,n.bufferSync(i),w,x);t=n.makeTensorInfo(m,e.dtype,e.values)}return t}},{kernelName:r1,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{separator:a,nGramWidths:i,leftPad:s,rightPad:o,padWidth:l,preserveShortSequences:u}=n,{data:h,dataSplits:p}=t,[d,c]=yD(r.data.get(h.dataId).values,r.data.get(p.dataId).values,a,i,s,o,l,u);return[r.makeTensorInfo([d.length],"string",d),r.makeTensorInfo(p.shape,"int32",c)]}},{kernelName:r2,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{skipEmpty:a}=n,{input:i,delimiter:s}=t;if("string"!==i.dtype)throw Error("Input must be of datatype string");if(1!==i.shape.length)throw Error(`Input must be a vector, got shape: ${i.shape}`);if(0!==s.shape.length)throw Error(`Delimiter must be a scalar, got shape: ${s.shape}`);let[o,l,u]=yO(r.data.get(i.dataId).values,r.data.get(s.dataId).values[0],a),h=l.length;return[r.makeTensorInfo([h,2],"int32",o),r.makeTensorInfo([h],"string",l),r.makeTensorInfo([2],"int32",new Int32Array(u))]}},{kernelName:r3,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{numBuckets:a}=n,{input:i}=t;if("string"!==i.dtype)throw Error("Input must be of datatype string");if(a<=0)throw Error("Number of buckets must be at least 1");let s=yM(r.data.get(i.dataId).values,a);return r.makeTensorInfo(i.shape,"int32",s)}},{kernelName:"Sub",backendName:"cpu",kernelFunc:yP},{kernelName:"Sum",backendName:"cpu",kernelFunc:$O},{kernelName:"Tan",backendName:"cpu",kernelFunc:Ed},{kernelName:r4,backendName:"cpu",kernelFunc:Ec},{kernelName:r_,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r}=e,{tensor:n,indices:a,updates:i}=t,{sliceRank:s,numUpdates:o,sliceSize:l,strides:u,outputSize:h}=or.calculateShapes(i,a,n.shape),p=r.bufferSync(a),d=r.bufferSync(i),c=r.bufferSync(n),f=yb(p,d,n.shape,h,l,o,s,u,c,!1);return r.makeTensorInfo(n.shape,f.dtype,f.values)}},{kernelName:r6,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{reps:i}=n;gd(a,"tile");let s=yL(r.bufferSync(a),i);return r.makeTensorInfo(s.shape,s.dtype,s.values)}},{kernelName:r5,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{k:i,sorted:s}=n;gd(a,"topk");let[o,l]=yW(r.data.get(a.dataId).values,a.shape,a.dtype,i,s);return[r.makeTensorInfo(o.shape,o.dtype,o.values),r.makeTensorInfo(l.shape,l.dtype,l.values)]}},{kernelName:r8,backendName:"cpu",kernelFunc:function(e){let{inputs:t,attrs:r,backend:n}=e,{image:a,transforms:i}=t,{interpolation:s,fillMode:o,fillValue:l,outputShape:u}=r,[h,p,d,c]=a.shape,[f,m]=null!=u?u:[p,d],g=[h,f,m,c],y=ny.computeStrides(a.shape),b=y[0],x=y[1],v=y[2],w=ny.computeStrides(g),k=w[0],S=w[1],I=w[2],C=ny.getTypedArrayFromDType(a.dtype,ny.sizeFromShape(g));C.fill(l);let N=n.data.get(a.dataId).values,T=n.data.get(i.dataId).values;for(let e=0;e<h;++e){let t=1===i.shape[0]?T:T.subarray(8*e,8*e+8);for(let r=0;r<f;++r)for(let n=0;n<m;++n)for(let a=0;a<c;++a){let i,u=t[6]*n+t[7]*r+1;if(0===u)continue;let h=(t[0]*n+t[1]*r+t[2])/u,c=(t[3]*n+t[4]*r+t[5])/u,f=Ef(h,d,o),m=Ef(c,p,o);switch(s){case"nearest":i=Em(N,p,d,b,x,v,e,Math.round(m),Math.round(f),a,l);break;case"bilinear":i=function(e,t,r,n,a,i,s,o,l,u,h){let p=Math.floor(o),d=Math.floor(l),c=p+1,f=d+1,m=(f-l)*Em(e,t,r,n,a,i,s,p,d,u,h)+(l-d)*Em(e,t,r,n,a,i,s,p,f,u,h),g=(f-l)*Em(e,t,r,n,a,i,s,c,d,u,h)+(l-d)*Em(e,t,r,n,a,i,s,c,f,u,h);return(c-o)*m+(o-p)*g}(N,p,d,b,x,v,e,m,f,a,l);break;default:throw Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${s}`)}C[e*k+r*S+n*I+a]=i}return n.makeTensorInfo(g,a.dtype,C)}return{dataId:n.write(C,g,a.dtype),shape:a.shape,dtype:a.dtype}}},{kernelName:r7,backendName:"cpu",kernelFunc:yi},{kernelName:r9,backendName:"cpu",kernelFunc:function(e){let{inputs:t,attrs:r,backend:n}=e,{axis:a}=r,{x:i}=t;gd(i,"unique");let{outputValues:s,outputShape:o,indices:l}=yU(n.data.get(i.dataId).values,a,i.shape,i.dtype);return[n.makeTensorInfo(o,i.dtype,s),n.makeTensorInfo([l.length],"int32",l)]}},{kernelName:ne,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{value:a}=t,{axis:i}=n;i<0&&(i+=a.shape.length);let s=a.shape.length,o=a.shape[i],l=Array(s-1),u=0;for(let e=0;e<s;e++)e!==i&&(l[u++]=a.shape[e]);let h=Array(s).fill(0),p=a.shape.slice();p[i]=1;let d=Array(o);for(let e=0;e<d.length;e++){h[i]=e;let t=yk({inputs:{x:a},backend:r,attrs:{begin:h,size:p}});d[e]=$g({inputs:{x:t},backend:r,attrs:{shape:l}}),r.disposeIntermediateTensorInfo(t)}return d}},{kernelName:nt,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,segmentIds:i}=t,{numSegments:s}=n;gd(a,"unsortedSegmentSum");let o=a.shape.length,l=i.shape.length,u=[],h=[],p=o-l,d=i;for(let e=0;e<p;++e){let t=$V({inputs:{input:d},backend:r,attrs:{dim:e+1}});d=t,h.push(t)}for(let e=0;e<s;++e){let t=ny.createScalarValue(e,"int32"),n=r.makeTensorInfo([],"int32",t),i=gM({inputs:{a:n,b:d},backend:r}),s=gv({inputs:{x:i},backend:r,attrs:{dtype:"float32"}}),o=ye({inputs:{a:s,b:a},backend:r}),l=$O({inputs:{x:o},backend:r,attrs:{axis:0,keepDims:!1}});u.push(l),h.push(n),h.push(i),h.push(s),h.push(o),h.push(l)}let c=$7({inputs:u,backend:r,attrs:{axis:0}});return h.forEach(e=>r.disposeIntermediateTensorInfo(e)),c}},{kernelName:nr,backendName:"cpu",kernelFunc:$8}])ng(e);const Eg={},Ey={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Eb(e,t){if(!(e in Eg)||null!=t){let r=function(e,t){if(1!==e&&2!==e)throw Error("Cannot get WebGL rendering context, WebGL is disabled.");let r=null==t?function(e){if(!e_.getBool("IS_SAFARI")&&"undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw Error("Cannot create a canvas in this context")}(e):t;return(r.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete Eg[e]},!1),e_.getBool("SOFTWARE_WEBGL_ENABLED")&&(Ey.failIfMajorPerformanceCaveat=!1),1===e)?r.getContext("webgl",Ey)||r.getContext("experimental-webgl",Ey):r.getContext("webgl2",Ey)}(e,t);if(null===r)return console.log("Could not get context for WebGL version",e),null;Eg[e]=r}let r=Eg[e];return null==r||r.isContextLost()?(delete Eg[e],Eb(e)):(r.disable(r.DEPTH_TEST),r.disable(r.STENCIL_TEST),r.disable(r.BLEND),r.disable(r.DITHER),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SAMPLE_COVERAGE),r.enable(r.SCISSOR_TEST),r.enable(r.CULL_FACE),r.cullFace(r.BACK),Eg[e])}function Ex(e){let t=Math.ceil(ny.sizeFromShape(e)/4);return ny.sizeToSquarishShape(t)}function Ev(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function Ew(e,t){let r,n,a,i,s,o,l,u,h,p;return 2===e_.getNumber("WEBGL_VERSION")?(r=e.R32F,n=e.R16F,a=e.RGBA16F,i=e.RGBA32F,s=e.RED,l=4,u=1,h=e.HALF_FLOAT,p=e.FLOAT,o=e.RGBA8):(r=e.RGBA,n=e.RGBA,a=e.RGBA,i=e.RGBA,s=e.RGBA,l=4,u=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,o=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:s,downloadTextureFormat:o,downloadUnpackNumChannels:l,defaultNumChannels:u,textureTypeHalfFloat:h,textureTypeFloat:p}}function Ek(e,t){let r=t();return e_.getBool("DEBUG")&&function(e){let t=e.getError();if(t!==e.NO_ERROR)throw Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),r}function ES(e,t){return EA(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}(m=w||(w={}))[m.DENSE=0]="DENSE",m[m.SHARED_BATCH=1]="SHARED_BATCH",(g=k||(k={}))[g.RENDER=0]="RENDER",g[g.UPLOAD=1]="UPLOAD",g[g.PIXELS=2]="PIXELS",g[g.DOWNLOAD=3]="DOWNLOAD",(y=S||(S={}))[y.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",y[y.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",y[y.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",y[y.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",y[y.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";const EI=/ERROR: [0-9]+:([0-9]+):/g;function EC(e,t){let r=EI.exec(t);if(null==r){console.log(`Couldn't parse line number in error: ${t}`),console.log(e);return}let n=+r[1],a=e.split("\n"),i=a.length.toString().length+2,s=a.map((e,t)=>ny.rightPad((t+1).toString(),i)+e),o=0;for(let e=0;e<s.length;e++)o=Math.max(s[e].length,o);let l=s.slice(0,n-1),u=s.slice(n-1,n),h=s.slice(n);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${ny.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}function EN(e,t){if(Ek(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),Error("Shader program validation failed.")}function ET(e,t,r,n,a,i,s){let o=e.getAttribLocation(t,r);return -1!==o&&(Ek(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),Ek(e,()=>e.vertexAttribPointer(o,a,e.FLOAT,!1,i,s)),Ek(e,()=>e.enableVertexAttribArray(o)),!0)}function E$(e,t,r){Ek(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,r)),Ek(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function EE(e,t){Ek(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),Ek(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function ER(e){let t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function EA(e,t,r){let n=Ek(e,()=>t());if(null==n)throw Error(r);return n}function EF(e,t=2){return ny.sizeFromShape(e.slice(0,e.length-t))}function E_(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function ED(e){let t=[1,1,1];return 0!==e.length&&(1!==e.length||1!==e[0])&&(t=[EF(e),...E_(e)]),t}function EO(e,t){if(e=e.slice(-2),t=t.slice(-2),ny.arraysEqual(e,t)||!e.length||!t.length||0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){let r=e[e.length-1],n=t[t.length-1];if(r===n||r%2==0&&n%2==0&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&e[0]%2==0&&t[0]%2==0}function EM(e,t){return null!=e.getExtension(t)}function Ez(e){try{let t=Eb(e);if(null!=t)return!0}catch(e){console.log("Error when getting WebGL context: ",e)}return!1}function EP(e){let t=Ew(e),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);let n=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,n),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);let a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(n),a}function EL(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&ny.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const EB=e_;function EW(){let e,t,r,n,a,i,s,o,l,u;return 2===e_.getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",r="out",n="in",a="texture",i="outputColor",s="out vec4 outputColor;",o=e_.getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(e="",t="attribute",r="varying",n="varying",a="texture2D",i="gl_FragColor",s="",o=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:e,attribute:t,varyingVs:r,varyingFs:n,texture2D:a,output:i,defineOutput:s,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function EU(e,t,r="index"){let n=ny.computeStrides(t);return n.map((t,a)=>{let i=`int ${e[a]} = ${r} / ${t}`,s=a===n.length-1?`int ${e[a+1]} = ${r} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`;return`${i}; ${s};`}).join("")}function EV(e,t,r="index"){let n=ny.computeStrides(t);return n.map((t,a)=>{let i=`int ${e[a]} = ${r} / outShapeStrides[${a}]`,s=a===n.length-1?`int ${e[a+1]} = ${r} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`;return`${i}; ${s};`}).join("")}function EG(e){let t=ny.computeStrides(e).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function EH(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}EB.registerFlag("HAS_WEBGL",()=>EB.getNumber("WEBGL_VERSION")>0),EB.registerFlag("WEBGL_VERSION",()=>Ez(2)?2:+!!Ez(1)),EB.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),EB.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===EB.get("WEBGL_VERSION")),EB.registerFlag("WEBGL_CPU_FORWARD",()=>!0),EB.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),EB.registerFlag("WEBGL_PACK",()=>EB.getBool("HAS_WEBGL")),EB.registerFlag("WEBGL_PACK_NORMALIZATION",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_PACK_CLIP",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_PACK_REDUCE",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_LAZILY_UNPACK",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_CONV_IM2COL",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>EB.getBool("WEBGL_PACK")),EB.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>(function(e){if(null==s){let t=Eb(e);s=t.getParameter(t.MAX_TEXTURE_SIZE)}return s})(EB.getNumber("WEBGL_VERSION"))),EB.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>(function(e){if(null==o){let t=Eb(e);o=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,o)})(EB.getNumber("WEBGL_VERSION"))),EB.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let e=EB.getNumber("WEBGL_VERSION");if(0===e)return 0;if(0===e)return 0;let t=Eb(e);return EM(t,"EXT_disjoint_timer_query_webgl2")&&2===e?2:+!!EM(t,"EXT_disjoint_timer_query")}),EB.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>EB.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a$.isMobile()),EB.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>(function(e){if(0===e)return!1;let t=Eb(e);if(1===e){if(!EM(t,"OES_texture_float"))return!1}else if(!EM(t,"EXT_color_buffer_float"))return!1;return EP(t)})(EB.getNumber("WEBGL_VERSION"))),EB.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!EB.getBool("WEBGL_FORCE_F16_TEXTURES")&&EB.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),EB.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>(function(e){if(0===e)return!1;let t=Eb(e);if(1===e){if(!EM(t,"OES_texture_float")||!EM(t,"WEBGL_color_buffer_float"))return!1}else{if(EM(t,"EXT_color_buffer_float"))return EP(t);let e="EXT_color_buffer_half_float";if(EM(t,e)){let a=t.getExtension(e);var r=t,n=a;let i=Ew(r,n),s=r.createTexture();r.bindTexture(r.TEXTURE_2D,s),r.texImage2D(r.TEXTURE_2D,0,i.internalFormatHalfFloat,1,1,0,i.textureFormatFloat,i.textureTypeHalfFloat,null);let o=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,o),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,s,0);let l=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(s),r.deleteFramebuffer(o),l}return!1}return EP(t)})(EB.getNumber("WEBGL_VERSION"))),EB.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{var e;return 2===(e=EB.getNumber("WEBGL_VERSION"))&&null!=Eb(e).fenceSync}),EB.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>4*!!EB.getBool("WEBGL_RENDER_FLOAT32_ENABLED")),EB.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if("number"!=typeof e)throw Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),EB.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>a$.isMobile()?1:-1,e=>{if("number"!=typeof e)throw Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),EB.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),EB.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),EB.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),EB.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),EB.registerFlag("WEBGL_EXP_CONV",()=>!1),EB.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>EB.getBool("IS_TEST")),EB.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),EB.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),EB.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),EB.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const Ej=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`,{getBroadcastDims:EK}=or,Eq=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,EX=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,EY=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,EZ=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function EQ(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function EJ(e){return`offset${e}`}function E0(e){let t=e.name,r=ny.sizeFromShape(e.shapeInfo.logicalShape);return r<2?`return ${t};`:`
    for (int i = 0; i < ${r}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function E1(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";else if(6===e)return"ivec6";else throw Error(`GPU for rank ${e} is not yet supported`)}function E2(e,t,r){let{newShape:n,keptDims:a}=ny.squeezeShape(t),i=t.length,s=e&&3===i&&1===t[0],o=s?t.slice(1):n,l=!e&&i>1&&!ny.arraysEqual(t,r)&&n.length<i||s,u=l?o:t;return{useSqueezeShape:l,uniformShape:u,keptDims:a}}function E3(e,t){let r=JSON.parse(JSON.stringify(e));return r.shapeInfo.logicalShape=t,r}function E4(e,t){return t.map(t=>e[t]).join(", ")}function E6(e,t,r){let n,a,i,s=[],o=[],l=null,u=null;for(let n of(u=e.getUniformLocation(r,"NAN",!1),1===e_.getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(r,"INFINITY",!1)),t.variableNames)){let a={name:n,uniform:e.getUniformLocation(r,n,!1),offset:e.getUniformLocation(r,`offset${n}`,!1)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(r,`${n}Shape`,!1),a.texShape=e.getUniformLocation(r,`${n}TexShape`,!1)),s.push(a)}if(t.enableShapeUniforms&&(n=e.getUniformLocation(r,"outShape",!1),i=e.getUniformLocation(r,"outShapeStrides",!1),a=e.getUniformLocation(r,"outTexShape",!1)),t.customUniforms)for(let n of t.customUniforms)o.push(e.getUniformLocation(r,n.name,!1));return{variablesLocations:s,customUniformLocations:o,infLoc:l,nanLoc:u,outShapeLocation:n,outShapeStridesLocation:i,outTexShapeLocation:a}}function E5(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,r)=>{let n=e.logicalShape,a=t[r],i=a.shape;if(!ny.arraysEqual(n,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${i} must match`);if(e.isUniform&&a.isUniform)return;let s=e.texShape,o=a.isUniform?null:a.texData.texShape;if(!ny.arraysEqual(s,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${s} and ${o} must match`)})}function E8(e){return e_.getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class E7{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=w.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=EW();this.outputShape=e,this.enableShapeUniforms=E8(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?EV(["r","c","d"],e):EU(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}}class E9{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=w.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=EW();this.outputShape=e,this.enableShapeUniforms=E8(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?EV(["r","c","d"],e):EU(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}}class Re{constructor(e){this.variableNames=["A"],this.outTexUsage=k.DOWNLOAD;let t=EW();this.outputShape=e,this.userCode=`
      ${Ej}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}}class Rt{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=k.DOWNLOAD;let t=EW();this.outputShape=e,this.userCode=`
      ${Ej}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}}const Rr={R:0,G:1,B:2,A:3};class Rn{constructor(e,t=!1,r="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=EW();this.outputShape=e,this.enableShapeUniforms=E8(this.outputShape.length);let a="result";t&&(a="floor(result * 255. + 0.5)");let i="";for(let e=0;e<r.length;e++){let t=r[e];i+=`
          if(offset == ${e}) {
            result = values[${Rr[t]}];
          }`}this.userCode=`
      ${this.enableShapeUniforms?EH():EG(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${r.length});

        flatIndex = idiv(flatIndex, ${r.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${n.texture2D}(A, uv);
          ${i}
        }
        ${n.output} = vec4(${a}, 0., 0., 0.);
      }
    `}}class Ra{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let r=EW();this.outputShape=e,this.enableShapeUniforms=E8(this.outputShape.length);let n="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){let i=2*t+a;n+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${t};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${r.texture2D}(A, uv);

            if (offset == 0) {
              result[${i}] = values[0];
            } else if (offset == 1) {
              result[${i}] = values[1];
            } else if (offset == 2) {
              result[${i}] = values[2];
            } else {
              result[${i}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?EH():EG(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${r.output} = ${a};
        }
    `}}function Ri(e,t,r,n,a,i){let s=e_.getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||r<=0)throw Error(`Requested texture size [${t}x${r}] is invalid.`);if(t>s||r>s)throw Error(`Requested texture size [${t}x${r}] greater than WebGL maximum on this browser / GPU [${s}x${s}].`);let o=EA(e,()=>e.createTexture(),"Unable to create WebGLTexture."),l=e.TEXTURE_2D;return Ek(e,()=>e.bindTexture(l,o)),Ek(e,()=>e.texParameteri(l,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),Ek(e,()=>e.texParameteri(l,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),Ek(e,()=>e.texParameteri(l,e.TEXTURE_MIN_FILTER,e.NEAREST)),Ek(e,()=>e.texParameteri(l,e.TEXTURE_MAG_FILTER,e.NEAREST)),1===e_.getNumber("WEBGL_VERSION")?Ek(e,()=>e.texImage2D(l,0,n,t,r,0,a,i,null)):Ek(e,()=>e.texStorage2D(l,1,n,t,r)),Ek(e,()=>e.bindTexture(e.TEXTURE_2D,null)),{texture:o,texShape:[r,t]}}function Rs(e){return e.internalFormatFloat}function Ro(e){return e.internalFormatHalfFloat}function Rl(e){return e.downloadTextureFormat}function Ru(e){return e.internalFormatPackedFloat}function Rh(e){return e.internalFormatPackedHalfFloat}class Rp{constructor(e){var t,r;this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];let n=e_.getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,t=e,Eg[n]=t):this.gl=Eb(n),e=this.gl,2===e_.getNumber("WEBGL_VERSION")){let t=e;this.createVertexArray=()=>Ek(t,()=>t.createVertexArray()),this.bindVertexArray=e=>Ek(t,()=>t.bindVertexArray(e)),this.deleteVertexArray=e=>Ek(t,()=>t.deleteVertexArray(e)),this.getVertexArray=()=>Ek(t,()=>t.getParameter(t.VERTEX_ARRAY_BINDING))}else if(null!=e){let t=e.getExtension("OES_vertex_array_object");if(null==t)throw Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>Ek(e,()=>t.createVertexArrayOES()),this.bindVertexArray=r=>Ek(e,()=>t.bindVertexArrayOES(r)),this.deleteVertexArray=r=>Ek(e,()=>t.deleteVertexArrayOES(r)),this.getVertexArray=()=>Ek(e,()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES))}let a="WEBGL_color_buffer_float",i="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===e_.getNumber("WEBGL_VERSION")){let e="OES_texture_half_float";if(this.textureFloatExtension=ES(this.gl,"OES_texture_float"),EM(this.gl,e))this.textureHalfFloatExtension=ES(this.gl,e);else if(e_.get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(a),EM(this.gl,i))this.colorBufferHalfFloatExtension=ES(this.gl,i);else if(e_.get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(a="EXT_color_buffer_float",EM(this.gl,a))this.colorBufferFloatExtension=this.gl.getExtension(a);else if(EM(this.gl,i))this.colorBufferHalfFloatExtension=this.gl.getExtension(i);else throw Error("GL context does not support color renderable floats");this.vertexBuffer=function(e){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]),r=EA(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return Ek(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),Ek(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),r}(this.gl),this.indexBuffer=function(e){let t=new Uint16Array([0,1,2,2,1,3]),r=EA(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return Ek(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r)),Ek(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),r}(this.gl),this.framebuffer=EA(r=this.gl,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer."),this.textureConfig=Ew(this.gl,this.textureHalfFloatExtension)}get debug(){return e_.getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let e=this.gl;Ek(e,()=>e.finish()),Ek(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),Ek(e,()=>e.deleteFramebuffer(this.framebuffer)),Ek(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),Ek(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),Ek(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=[r,t];return Ri(e,a,i,Rs(n),n.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=[r,t];return Ri(e,a,i,Ro(n),n.textureFormatFloat,n.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=[r,t];return Ri(e,a,i,Rl(n),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){var r;this.throwIfDisposed(),r=this.gl,Ek(r,()=>r.bindTexture(r.TEXTURE_2D,e)),t.data instanceof Uint8Array?2===e_.getNumber("WEBGL_VERSION")?Ek(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,t.width,t.height,r.RGBA,r.UNSIGNED_BYTE,t.data)):Ek(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,t.width,t.height,0,r.RGBA,r.UNSIGNED_BYTE,t.data)):2===e_.getNumber("WEBGL_VERSION")?Ek(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,t)):Ek(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,t)),Ek(r,()=>r.bindTexture(r.TEXTURE_2D,null))}uploadDenseMatrixToTexture(e,t,r,n){var a,i;let s,o,l;this.throwIfDisposed(),a=this.gl,i=this.textureConfig,Ek(a,()=>a.bindTexture(a.TEXTURE_2D,e)),n instanceof Uint8Array?(s=new Uint8Array(t*r*4),o=a.UNSIGNED_BYTE,l=a.RGBA):(s=new Float32Array(t*r*4),o=a.FLOAT,l=i.internalFormatPackedFloat),s.set(n),2===e_.getNumber("WEBGL_VERSION")?Ek(a,()=>a.texSubImage2D(a.TEXTURE_2D,0,0,0,t,r,a.RGBA,o,s)):Ek(a,()=>a.texImage2D(a.TEXTURE_2D,0,l,t,r,0,a.RGBA,o,s)),Ek(a,()=>a.bindTexture(a.TEXTURE_2D,null))}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=Ev(t,r);return Ri(e,a,i,Rh(n),e.RGBA,n.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,r,n){let[a,i]=Ev(t,r);return Ri(e,a,i,Ru(n),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(EE(this.gl,this.framebuffer),this.outputTexture=null),Ek(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,r){return this.downloadMatrixDriver(e,()=>(function(e,t,r,n){let[a,i]=[r,t],s=new Uint8Array(t*r*4);return Ek(e,()=>e.readPixels(0,0,a,i,n.downloadTextureFormat,e.UNSIGNED_BYTE,s)),new Float32Array(s.buffer)})(this.gl,t,r,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,r,n,a,i){return function(e,t,r,n,a,i,s,o){let l=new Float32Array(function(e,t){let[r,n]=Ev(e,t);return r*n*4}(i,s));return e.bindBuffer(e.PIXEL_PACK_BUFFER,t),e.getBufferSubData(e.PIXEL_PACK_BUFFER,0,l),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,a,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){var r=this.gl;let n=new Float32Array(t);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,n),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),n}createBufferFromTexture(e,t,r){this.bindTextureToFrameBuffer(e);let n=function(e,t,r,n){let a=e.createBuffer();Ek(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a));let i=16*t*r;return Ek(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,i,e.STREAM_READ)),Ek(e,()=>e.readPixels(0,0,r,t,e.RGBA,e.FLOAT,0)),Ek(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),a}(this.gl,t,r,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,r;if(e_.getBool("WEBGL_FENCE_API_ENABLED")){let n=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),r=()=>{let t=e.clientWaitSync(n,0,0);return t===e.ALREADY_SIGNALED||t===e.CONDITION_SATISFIED},t=n}else e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(t,e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):r=()=>!0;return{query:t,isFencePassed:r}}downloadMatrixFromPackedTexture(e,t,r){return this.downloadMatrixDriver(e,()=>(function(e,t,r){let n=new Float32Array(t*r*4);return Ek(e,()=>e.readPixels(0,0,r,t,e.RGBA,e.FLOAT,n)),n})(this.gl,t,r))}createProgram(e){this.throwIfDisposed();let t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){let t=EW(),r=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`,n=EA(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Ek(e,()=>e.shaderSource(n,r)),Ek(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),Error("Failed to compile vertex shader.");return n}(t));let r=EA(t,()=>t.createProgram(),"Unable to create WebGLProgram.");if(Ek(t,()=>t.attachShader(r,this.vertexShader)),Ek(t,()=>t.attachShader(r,e)),Ek(t,()=>t.linkProgram(r)),!e_.get("ENGINE_COMPILE_ONLY")&&!1===t.getProgramParameter(r,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(r)),Error("Failed to link vertex and fragment shaders.");let n=Object.assign(r,{vao:this.createVertexArray()});return this.debug&&EN(t,n),n}buildVao(e){var t;this.setProgram(e),this.bindVertexArray(e.vao);let r=this.gl;Ek(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),t=this.vertexBuffer,Ek(r,()=>r.bindBuffer(r.ARRAY_BUFFER,t)),ET(r,e,"clipSpacePos",t,3,20,0)&&ET(r,e,"uv",t,2,20,12)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(Ek(this.gl,()=>this.gl.deleteProgram(e)),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&EN(this.gl,this.program),Ek(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,r=!0){var n,a,i;return(this.throwIfDisposed(),r)?(n=this.gl,EA(n,()=>n.getUniformLocation(e,a),'uniform "'+(a=t)+'" not present in program.')):(i=this.gl,i.getUniformLocation(e,t))}getAttributeLocation(e,t){return this.throwIfDisposed(),Ek(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,r){var n;this.throwIfDisposed(),this.throwIfNoProgram(),n=this.gl,Ek(n,()=>{(function(e,t){let r=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,n=t+e.TEXTURE0;if(n<e.TEXTURE0||n>r){let e=`[gl.TEXTURE0, gl.TEXTURE${r}]`;throw Error(`textureUnit must be in ${e}.`)}})(n,r),Ek(n,()=>n.activeTexture(n.TEXTURE0+r)),Ek(n,()=>n.bindTexture(n.TEXTURE_2D,e))}),Ek(n,()=>n.uniform1i(t,r))}setOutputMatrixTexture(e,t,r){this.setOutputMatrixTextureDriver(e,r,t)}setOutputPackedMatrixTexture(e,t,r){this.throwIfDisposed();let[n,a]=Ev(t,r);this.setOutputMatrixTextureDriver(e,n,a)}setOutputMatrixWriteRegion(e,t,r,n){this.setOutputMatrixWriteRegionDriver(r,e,n,t)}setOutputPackedMatrixWriteRegion(e,t,r,n){throw Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&EN(this.gl,this.program),ER(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let e=this.gl;this.debug&&(console.assert(this.getVertexArray()===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()),Ek(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Ek(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=ES(this.gl,2===e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2(),r=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,r),r}let e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2();e.endQuery(t.TIME_ELAPSED_EXT);return}let e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await ny.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){let t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{let t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){let t=this.gl,r=this.getQueryTimerExtensionWebGL2(),n=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),n&&!this.disjoint}{let t=this.getQueryTimerExtensionWebGL1(),r=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){let e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){let{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){let r;this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||("setTimeoutCustom"in e_.platform&&(r=e_.platform.setTimeoutCustom.bind(e_.platform)),ny.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,r))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),E$(this.gl,e,this.framebuffer),this.debug&&ER(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(E$(this.gl,this.outputTexture,this.framebuffer),this.debug&&ER(this.gl)):EE(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);let r=t();return this.unbindTextureToFrameBuffer(),r}setOutputMatrixTextureDriver(e,t,r){this.throwIfDisposed();let n=this.gl;E$(n,e,this.framebuffer),this.debug&&ER(n),this.outputTexture=e,Ek(n,()=>n.viewport(0,0,t,r)),Ek(n,()=>n.scissor(0,0,t,r))}setOutputMatrixWriteRegionDriver(e,t,r,n){this.throwIfDisposed(),Ek(this.gl,()=>this.gl.scissor(e,t,r,n))}throwIfDisposed(){if(this.disposed)throw Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw Error("No GPU program is currently set.")}}const{addImpl:Rd,bincountImpl:Rc,bincountReduceImpl:Rf,bitwiseAndImpl:Rm,castImpl:Rg,ceilImpl:Ry,concatImpl:Rb,equalImpl:Rx,expImpl:Rv,expm1Impl:Rw,floorImpl:Rk,gatherNdImpl:RS,gatherV2Impl:RI,greaterImpl:RC,greaterEqualImpl:RN,lessImpl:RT,lessEqualImpl:R$,linSpaceImpl:RE,logImpl:RR,maxImpl:RA,maximumImpl:RF,minimumImpl:R_,multiplyImpl:RD,negImpl:RO,notEqualImpl:RM,prodImpl:Rz,raggedGatherImpl:RP,raggedRangeImpl:RL,raggedTensorToTensorImpl:RB,rangeImpl:RW,rsqrtImpl:RU,scatterImpl:RV,sigmoidImpl:RG,simpleAbsImpl:RH,sliceImpl:Rj,sparseFillEmptyRowsImpl:RK,sparseReshapeImpl:Rq,sparseSegmentReductionImpl:RX,sqrtImpl:RY,staticRegexReplaceImpl:RZ,stridedSliceImpl:RQ,stringNGramsImpl:RJ,stringSplitImpl:R0,stringToHashBucketFastImpl:R1,subImpl:R2,tileImpl:R3,topKImpl:R4,transposeImpl:R6,uniqueImpl:R5}=gp;function R8(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function R7(e,t){return 1===t?[e]:R8(e,t)}class R9{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=E8(this.outputShape.length),0===this.rank)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=R7("rc",this.rank),t=E1(this.rank),r=this.getOutOfBoundsCondition(e),n=this.getSetup(e),a=this.getOutput(e);this.userCode=`
        void main() {
          ${t} rc = getOutputCoords();

          if(${r}) {
            setOutput(vec4(0));
          } else {
            ${n}

            setOutput(vec4(${a}));
          }
        }
      `}}getSourceCoordsArr(e){let t=[];for(let r=0;r<=1;r++)for(let n=0;n<=1;n++){let a=`${0===r?"r":"rp1"}, ${0===n?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let r=this.rank-2;r<this.rank;r++)t+=`${e[r]} >= ${this.enableShapeUniforms?`outShape[${r}]`:this.outputShape[r]}`,r<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";let t=e.slice(-2),r=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${r};
      bool rEdge = rp1 >= ${n};
    `}getOutput(e){let t=this.getSourceCoordsArr(e);if(1===this.rank){let e=this.enableShapeUniforms?"outShape":this.outputShape[0];return`getA(rc), (rc + 1 >= ${e} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}}class Ae{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=E8(this.outputShape.length);let r="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),r+=`
        ${t}
        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${e}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${e>0?"}":""}
      `}this.userCode=`
      ${function(e,t){let r=t?function(e,t,r="index"){let n=function(e,t){let r=e.length,n=e.map(e=>`${t}[${e}]`),a=Array(r-1);a[r-2]=n[r-1];for(let e=r-3;e>=0;--e)a[e]=`(${a[e+1]} * ${n[e+1]})`;return a}(e.map((e,t)=>t),t);return n.map((t,a)=>{let i=`int ${e[a]} = ${r} / ${n[a]}`,s=a===n.length-1?`int ${e[a+1]} = ${r} - ${e[a]} * ${n[a]}`:`index -= ${e[a]} * ${n[a]}`;return`${i}; ${s};`}).join("")}(["r","c","d"],"inputShape"):EU(["r","c","d"],e);return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${r}
      return ivec3(r, c, d);
    }
  `}(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?EH():EG(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${r}

        setOutput(result);
      }
    `}}class At{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,r){let n,a=An(t,r),i=Aa(e,a,r);i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]);let s=Ar(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,r);if(this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();let e=this.freeTextures[i].pop();return this.usedTextures[i].push(e),e}return a===S.PACKED_2X2_FLOAT32?n=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===S.PACKED_2X2_FLOAT16?n=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===S.UNPACKED_FLOAT32?n=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===S.UNPACKED_FLOAT16?n=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===S.PACKED_4X1_UNSIGNED_BYTE&&(n=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[i].push(n),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),n}releaseTexture(e,t,r,n){if(null==this.freeTextures)return;let a=An(r,n),i=Aa(t,a,n);i in this.freeTextures||(this.freeTextures[i]=[]);let s=Ar(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,n),o=e_.getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=s):(this.freeTextures[i].push(e),this.numFreeTextures++,this._numBytesFree+=s),this.numUsedTextures--;let l=this.usedTextures[i],u=l&&l.indexOf(e);if(null==u||u<0)throw Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(let e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Ar(e,t,r,n,a){let i,s=function(e,t){switch(e){case S.PACKED_2X2_FLOAT32:return Ru(t);case S.PACKED_2X2_FLOAT16:return Rh(t);case S.UNPACKED_FLOAT32:return Rs(t);case S.UNPACKED_FLOAT16:return Ro(t);case S.PACKED_4X1_UNSIGNED_BYTE:return Rl(t);default:throw Error(`Unknown physical texture type ${e}`)}}(t,n);if(a){let[t,r]=Ev(e[0],e[1]);i=t*r}else{var o;let[t,r]=(o=e[0],[e[1],o]);i=t*r}return i*function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;else if(t===e.RGBA8)return 4;throw Error(`Unknown internal format ${t}`)}(r,s)}function An(e,t){if(e===k.UPLOAD)return S.PACKED_2X2_FLOAT32;if(e===k.RENDER||null==e)return e_.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?S.PACKED_2X2_FLOAT32:S.UNPACKED_FLOAT32:t?S.PACKED_2X2_FLOAT16:S.UNPACKED_FLOAT16;if(e===k.DOWNLOAD||e===k.PIXELS)return S.PACKED_4X1_UNSIGNED_BYTE;throw Error(`Unknown logical texture type ${e}`)}function Aa(e,t,r){return`${e[0]}_${e[1]}_${t}_${r}`}class Ai{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=E8(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}}const As="if (isnan(x)) return x;",Ao="return abs(x);",Al=As+`
  return (x < 0.0) ? 0.0 : x;
`,Au=As+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,Ah="return x;",Ap=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,Ad=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Ac=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;class Af{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=E8(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}}class Am{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=E8(this.outputShape.length);let t=e.length,r=R7("rc",t),n=E1(t),a=function(e,t){if(1===e)return"rc";let r="";for(let n=0;n<e;n++)r+=t[n],n<e-1&&(r+=",");return r}(t,r),i=r.slice(-2),s=t<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${a});

        setOutput(getChannel(packedInput, ${s}));
      }
    `}}const Ag=cS.whereImpl,Ay={},Ab=e_.getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class Ax extends D{nextDataId(){return Ax.nextDataId++}constructor(e){let t;if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!e_.getBool("HAS_WEBGL"))throw Error("WebGL is not supported on this device");if(null!=e)t=e instanceof Rp?e:new Rp(Eb(e_.getNumber("WEBGL_VERSION"),e)),this.binaryCache={},this.gpgpuCreatedLocally=!1;else{var r;t=new Rp(Eb(e_.getNumber("WEBGL_VERSION"))),this.binaryCache=((r=e_.getNumber("WEBGL_VERSION"))in Ay||(Ay[r]={}),Ay[r]),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new At(this.gpgpu),this.numMBBeforeWarning=null==e_.global.screen?1024:e_.global.screen.height*e_.global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new _(this,aN)}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,r,n,a,i){let s=this.makeTensorInfo(t,r),o=this.texData.get(s.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[n,a]},o.texShape=[n,a];let l=new Rn(ED(t),!1,i),u=this.runWebGLProgram(l,[s],r,[[n,a]]);return u.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(s),u.dataId}write(e,t,r){if((e_.getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||e_.getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:t,dtype:r,values:e,usage:k.UPLOAD,refCount:1}),n}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){let t=this.texData.get(e);t.refCount++}decRef(e){if(this.texData.has(e)){let t=this.texData.get(e);t.refCount--}}move(e,t,r,n,a){if(e_.getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:n,values:t,usage:k.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){let t,r,{values:n,dtype:a,complexTensorInfos:i,slice:s,shape:o,isPacked:l}=this.texData.get(e);if(null!=s){let t;t=l?new Af(o,Ah):new Ai(o,Ah);let r=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:a}],a),n=this.readSync(r.dataId);return this.disposeIntermediateTensorInfo(r),n}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===a)return n;let u=null!=this.activeTimers;if(u&&(t=ny.now()),"complex64"===a){let e=this.readSync(i.real.dataId),t=this.readSync(i.imag.dataId);r=or.mergeRealAndImagArrays(e,t)}else r=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=ny.now()-t),this.convertAndCacheOnCPU(e,r)}async read(e){let t,r;if(this.pendingRead.has(e)){let t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}let{values:n,shape:a,slice:i,dtype:s,complexTensorInfos:o,isPacked:l}=this.texData.get(e);if(null!=i){let t;t=l?new Af(a,Ah):new Ai(a,Ah);let r=this.runWebGLProgram(t,[{dataId:e,shape:a,dtype:s}],s),n=this.read(r.dataId);return this.disposeIntermediateTensorInfo(r),n}if(null!=n)return this.convertAndCacheOnCPU(e);if(e_.getBool("DEBUG")&&!e_.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===e_.getNumber("WEBGL_VERSION"))throw Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null;if("complex64"!==s&&e_.get("WEBGL_BUFFER_SUPPORTED")){t=this.decode(e);let r=this.texData.get(t.dataId);u=this.gpgpu.createBufferFromTexture(r.texture.texture,...Ex(a))}if(this.pendingRead.set(e,[]),"complex64"!==s&&await this.gpgpu.createAndWaitForFence(),"complex64"===s){let e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],n=e[1];r=or.mergeRealAndImagArrays(t,n)}else if(null==u)r=this.getValuesFromTexture(e);else{let e=ny.sizeFromShape(a);r=this.gpgpu.downloadFloat32MatrixFromBuffer(u,e)}if(null!=t&&this.disposeIntermediateTensorInfo(t),null!=u){let e=this.gpgpu.gl;Ek(e,()=>e.deleteBuffer(u))}let h=this.convertAndCacheOnCPU(e,r),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach(e=>e(h)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&aN.removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){let{values:r,shape:n,slice:a,dtype:i,isPacked:s,texture:o}=this.texData.get(e);if("complex64"===i)throw Error("Does not support reading texture for complex64 dtype.");if(null!=a){let r;r=s?new Af(n,Ah):new Ai(n,Ah);let a=this.runWebGLProgram(r,[{dataId:e,shape:n,dtype:i}],i),o=this.readToGPU(a,t);return this.disposeIntermediateTensorInfo(a),o}if(null==o)if(null!=r)throw Error("Data is not on GPU but on CPU.");else throw Error("There is no data on GPU or CPU.");let l=this.decode(e,t.customTexShape);return Object.assign({tensorRef:aN.makeTensorFromTensorInfo(l)},this.texData.get(l.dataId).texture)}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let r=t.map(e=>ny.decodeString(e));return so(e.shape,e.dtype,r)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return so(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){let r=e[t];if(!(e_.getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===r||596e-10<Math.abs(r)&&65504>Math.abs(r))&&1){if(e_.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${r} cannot be represented on this device.`)}}}getValuesFromTexture(e){let{shape:t,dtype:r,isPacked:n}=this.texData.get(e),a=ny.sizeFromShape(t);if(e_.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let r=this.decode(e),n=this.texData.get(r.dataId),i=this.gpgpu.downloadMatrixFromPackedTexture(n.texture.texture,...Ex(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(r),i}let i=e_.getBool("WEBGL_PACK")&&!0===n,s=i?ED(t):t,o=i?new Rt(s):new Re(s),l=this.runWebGLProgram(o,[{shape:s,dtype:r,dataId:e}],"float32"),u=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),h}timerAvailable(){return e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){let t=this.activeTimers,r=[],n=!1;null==this.programTimersStack?(this.programTimersStack=r,n=!0):this.activeTimers.push(r),this.activeTimers=r,e();let a=ny.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),i=ny.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,n&&(this.programTimersStack=null);let s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let e=await Promise.all(a);s.kernelMs=ny.sum(e),s.getExtraProfileInfo=()=>e.map((e,t)=>({name:i[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else s.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,s})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:ny.now(),endMs:null}}endTimer(e){return e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.endQuery():e.endMs=ny.now(),e}async getQueryTime(e){return e_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);let{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,t),this.disposeData(r.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){let{texture:t,dtype:r,texShape:n,usage:a,isPacked:i,slice:s}=this.texData.get(e),o=s&&s.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(n,r),this.textureManager.releaseTexture(t,n,a,i)));let u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=Ab){return e_.getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&ny.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){or.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let t=e.dataSync();return Ag(e.shape,t)}packedUnaryOp(e,t,r){let n=new Af(e.shape,t),a=this.compileAndRun(n,[e],r);return aN.makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){let t=RH(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(e_.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Ao,e.dtype);let t=new Ai(e.shape,Ao),r=this.compileAndRun(t,[e]);return aN.makeTensorFromTensorInfo(r)}makeTensorInfo(e,t,r){let n;if("string"===t&&null!=r&&r.length>0&&ny.isString(r[0])){let a=r.map(e=>ny.encodeString(e));n=this.write(a,e,t)}else n=this.write(r,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}}makeOutput(e,t,r){return aN.makeTensorFromTensorInfo(this.makeTensorInfo(e,t,r),this)}unpackTensor(e){let t=new Am(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){let t=new R9(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){let r=[EF(e.shape),...E_(e.shape)],n={dtype:e.dtype,shape:r,dataId:e.dataId},a=new Ae([EF(t),...E_(t)],r),i=this.runWebGLProgram(a,[n],e.dtype,[r],!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){let r,{isPacked:n,shape:a,dtype:i}=this.texData.get(e);if(null!=t){let e=ny.sizeFromShape(a),r=t[0]*t[1]*4;ny.assert(e<=r,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let s=ED(a);r=n?new E9(s):new E7(s);let o=[null!=t?t:Ex(s)],l=this.runWebGLProgram(r,[{shape:s,dtype:i,dataId:e}],i,o,!0,t);return{dtype:i,shape:a,dataId:l.dataId}}runWebGLProgram(e,t,r,n,a=!1,i){let s,o=this.makeTensorInfo(e.outputShape,r),l=this.texData.get(o.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===w.DENSE&&(l.texShape=(null!=i?i:Ex(e.outputShape)).map(e=>2*e)),null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===ny.sizeFromShape(o.shape))return l.values=ny.getTypedArrayFromDType(o.dtype,0),o;let u=[],h=t.map(t=>{if("complex64"===t.dtype)throw Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let r=this.texData.get(t.dataId);if(null==r.texture){if(!e.packedInputs&&ny.sizeFromShape(t.shape)<=e_.getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:r.values};e.packedInputs&&(r.isPacked=!0,r.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!r.isPacked!=!!e.packedInputs)t=r.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),r=this.texData.get(t.dataId);else if(r.isPacked&&!EO(r.shape,t.shape)){let e=t,n=t.shape;t.shape=r.shape,t=this.packedReshape(t,n),u.push(t),r=this.texData.get(t.dataId),e.shape=n}return{shape:t.shape,texData:r,isUniform:!1}});this.uploadToGPU(o.dataId);let p={shape:o.shape,texData:l,isUniform:!1},d=function(e,t,r){let n="";t.concat(r).forEach(t=>{let a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){let i=t.texData.texShape,{useSqueezeShape:s,uniformShape:o,keptDims:l}=E2(e.packedInputs,t.shape,i),u="",h="",p="";if(1===o.length&&e.packedInputs){let e=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){let e=ny.computeStrides(o);p=`${e[0]===i[1]}_${e[e.length-1]===i[1]}`}}else h=`${o[0]>1}_${o[1]>1}`;let d=t.shape.length,c=2===o.length&&ny.arraysEqual(t.shape,i),f=1===ny.sizeFromShape(t.shape),m=or.getBroadcastDims(t.shape,r.shape),g=!e.packedInputs&&d===r.shape.length&&ny.arraysEqual(i,r.texData.texShape),y=e.packedInputs||o.length>2?"":`${i[0]>1}_${i[1]>1}`;n+=`${d}_${g}_${s?l:""}_${o.length}_${f}_${m}_${c}_${u}_${h}_${p}_${y}_${a}`}else{let e=t.isUniform?"uniform":t.texData.texShape;n+=`${t.shape}_${e}_${a}`}});let a=e.userCode,i=e.constructor.name;return i+("_"+n+"_"+a+`${e_.getNumber("WEBGL_VERSION")}`)}(e,h,p),c=this.getAndSaveBinary(d,()=>(function(e,t,r,n){let a=r.map((e,r)=>{let n={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(n.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[r],shapeInfo:n}}),i=a.map(e=>e.shapeInfo),s={logicalShape:n.shape,texShape:n.texData.texShape,isUniform:!1,isPacked:n.texData.isPacked,flatOffset:null},o=function(e,t,r){var n,a,i,s;let o,l,u=[];if(e.forEach(e=>{let t=ny.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?u.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(u.push(`uniform sampler2D ${e.name};`),u.push(`uniform int offset${e.name};`)),r.enableShapeUniforms){let{uniformShape:t}=E2(r.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:u.push(`uniform int ${e.name}Shape;`);break;case 2:u.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:u.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:u.push(`uniform ivec4 ${e.name}Shape;`)}u.push(`uniform ivec2 ${e.name}TexShape;`)}}),r.enableShapeUniforms){switch(t.logicalShape.length){case 1:u.push("uniform int outShape;");break;case 2:u.push("uniform ivec2 outShape;"),u.push("uniform int outShapeStrides;");break;case 3:u.push("uniform ivec3 outShape;"),u.push("uniform ivec2 outShapeStrides;");break;case 4:u.push("uniform ivec4 outShape;"),u.push("uniform ivec3 outShapeStrides;")}u.push("uniform ivec2 outTexShape;")}r.customUniforms&&r.customUniforms.forEach(e=>{u.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});let h=u.join("\n"),p=e.map(e=>(function(e,t,r=!1,n){let a="";r?a+=function e(t,r){switch(t.shapeInfo.logicalShape.length){case 0:var n=t;let a=n.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=EW();return`
    vec4 ${i}() {
      return ${s.texture2D}(${a}, halfCR);
    }
  `;case 1:return function(e,t){let r=e.name,n="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=EW();if(t)return`
    vec4 ${n}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${i.texture2D}(${r}, uv);
    }
  `;let s=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`
    vec4 ${n}(int index) {
      vec2 uv = packedUVfrom1D(
        ${s[0]}, ${s[1]}, index);
      return ${i.texture2D}(${r}, uv);
    }
  `}(t,r);case 2:return function(e,t){let r=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),i=e.shapeInfo.texShape,s=i[0],o=i[1],l=EW();if(null!=i&&ny.arraysEqual(r,i))return t?`
      vec4 ${a}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${n}TexShape[1], ${n}TexShape[0]);

        return ${l.texture2D}(${n}, uv);
      }
    `:`
      vec4 ${a}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${s}.0);

        return ${l.texture2D}(${n}, uv);
      }
    `;if(t)return`
    vec4 ${a}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${n}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${n}, uv);
    }
  `;let u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],h=Math.ceil(r[1]/2);return`
    vec4 ${a}(int row, int col) {
      vec2 uv = packedUVfrom2D(${h}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${n}, uv);
    }
  `}(t,r);case 3:return function(t,r){let n=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=t.shapeInfo.texShape,o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===n[0]){let a=E3(t,n.slice(1));return`
        ${e(a,r)}
        vec4 ${i}(int b, int row, int col) {
          return ${i}(${E4(["b","row","col"],[1,2])});
        }
      `}let l=EW();if(r)return`
    vec4 ${i}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${a}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `;let u=o[0],h=o[1],p=Math.ceil(n[2]/2),d=p*Math.ceil(n[1]/2);return`
    vec4 ${i}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${u}, ${h}, ${d}, ${p}, b, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `}(t,r);default:return function(e,t){let r=e.name,n="get"+r.charAt(0).toUpperCase()+r.slice(1),a=EW();if(t)return`
    vec4 ${n}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${r}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${r}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${r}, uv);
    }
  `;let i=e.shapeInfo.logicalShape,s=i.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],h=l[1],p=Math.ceil(i[s-1]/2),d=p*Math.ceil(i[s-2]/2),c="int b, int row, int col",f=`b * ${d} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<s-1;e++)c=`int b${e}, `+c,d*=i[s-e-1],f=`b${e} * ${d} + `+f;return`
    vec4 ${n}(${c}) {
      int index = ${f};
      int texR = index / ${h};
      int texC = index - texR * ${h};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}, ${u});
      return ${a.texture2D}(${r}, uv);
    }
  `}(t,r)}}(e,n):a+=function e(t,r=!1){let n=t.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){let r=e.name,n="get"+r.charAt(0).toUpperCase()+r.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${r};}`;let[a,i]=e.shapeInfo.texShape;if(1===a&&1===i)return`
      float ${n}() {
        return sampleTexture(${r}, halfCR);
      }
    `;let s=EJ(r);if(t)return`
    float ${n}() {
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], ${s});
      return sampleTexture(${r}, uv);
    }
  `;let[o,l]=e.shapeInfo.texShape;return`
    float ${n}() {
      vec2 uv = uvFromFlat(${o}, ${l}, ${s});
      return sampleTexture(${r}, uv);
    }
  `}(t,r);case 1:return function(e,t){let r=e.name,n="get"+r.charAt(0).toUpperCase()+r.slice(1);if(e.shapeInfo.isUniform)return`
      float ${n}(int index) {
        ${E0(e)}
      }
    `;let a=e.shapeInfo.texShape,i=a[0],s=a[1];if(1===s&&1===i)return`
      float ${n}(int index) {
        return sampleTexture(${r}, halfCR);
      }
    `;let o=EJ(r);return 1===s?t?`
      float ${n}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${r}TexShape[0]));
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${n}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${i}.0);
        return sampleTexture(${r}, uv);
      }
    `:1===i?t?`
      float ${n}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${r}TexShape[1]), 0.5);
        return sampleTexture(${r}, uv);
      }
    `:`
      float ${n}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${s}.0, 0.5);
        return sampleTexture(${r}, uv);
      }
    `:t?`
    float ${n}(int index) {
      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${o});
      return sampleTexture(${r}, uv);
    }
  `:`
    float ${n}(int index) {
      vec2 uv = uvFromFlat(${i}, ${s}, index + ${o});
      return sampleTexture(${r}, uv);
    }
  `}(t,r);case 2:return function(t,r){let n=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=t.shapeInfo.texShape;if(null!=s&&ny.arraysEqual(n,s)){if(r)return`
      float ${i}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `;let e=s[0],t=s[1];return`
    float ${i}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${t}.0, ${e}.0);
      return sampleTexture(${a}, uv);
    }
  `}let{newShape:o,keptDims:l}=ny.squeezeShape(n);if(o.length<n.length){let n=E3(t,o);return`
      ${e(n,r)}
      float ${i}(int row, int col) {
        return ${i}(${E4(["row","col"],l)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${i}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));
        ${E0(t)}
      }
    `;let u=s[0],h=s[1],p=EJ(a);return 1===h?r?`
      float ${i}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${i}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${a}, uv);
    }
  `:1===u?r?`
      float ${i}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${i}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${h}.0, 0.5);
      return sampleTexture(${a}, uv);
    }
  `:r?`
      float ${i}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
        return sampleTexture(${a}, uv);
      }
    `:`
  float ${i}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${n[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${h}, index);
    return sampleTexture(${a}, uv);
  }
`}(t,r);case 3:return function(t,r){let n=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=n[1]*n[2],o=n[2],{newShape:l,keptDims:u}=ny.squeezeShape(n);if(l.length<n.length){let n=E3(t,l);return`
        ${e(n,r)}
        float ${i}(int row, int col, int depth) {
          return ${i}(${E4(["row","col","depth"],u)});
        }
      `}if(t.shapeInfo.isUniform)return`
      float ${i}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${o}, 1)));
        ${E0(t)}
      }
    `;let h=t.shapeInfo.texShape,p=h[0],d=h[1],c=t.shapeInfo.flatOffset;if(d===s&&null==c)return r?`
      float ${i}(int row, int col, int depth) {
        int stride1 = ${a}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
        float ${i}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${o}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${p}.0);
          return sampleTexture(${a}, uv);
        }
      `;if(d===o&&null==c)return r?`
      float ${i}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${i}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${p}.0);
      return sampleTexture(${a}, uv);
    }
  `;let f=EJ(a);return r?`
    float ${i}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${a}Shape[1] * ${a}Shape[2];
      int stride1 = ${a}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
      return sampleTexture(${a}, uv);
    }
    `:`
      float ${i}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${o} + depth + ${f};
        vec2 uv = uvFromFlat(${p}, ${d}, index);
        return sampleTexture(${a}, uv);
      }
  `}(t,r);case 4:return function(t,r){let n=t.shapeInfo.logicalShape,a=t.name,i="get"+a.charAt(0).toUpperCase()+a.slice(1),s=n[3],o=n[2]*s,l=n[1]*o,{newShape:u,keptDims:h}=ny.squeezeShape(n);if(u.length<n.length){let n=E3(t,u);return`
      ${e(n,r)}
      float ${i}(int row, int col, int depth, int depth2) {
        return ${i}(${E4(["row","col","depth","depth2"],h)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${i}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${l}, ${o}, ${s}, 1)));
        ${E0(t)}
      }
    `;let p=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,c=d[0],f=d[1],m=`int stride2 = ${a}Shape[3];`,g=`int stride1 = ${a}Shape[2] * stride2;`,y=`int stride0 = ${a}Shape[1] * stride1;`;if(f===l&&null==p)return r?`
      float ${i}(int row, int col, int depth, int depth2) {
        ${m}
        ${g}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${i}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${o}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;if(f===s&&null==p)return r?`
      float ${i}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${i}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${n[1]*n[2]}, ${n[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;let b=EJ(a);return r?`
    float ${i}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${m}
      ${g}
      ${y}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${b});
      return sampleTexture(${a}, uv);
    }
  `:`
    float ${i}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${o} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${c}, ${f}, index + ${b});
      return sampleTexture(${a}, uv);
    }
  `}(t,r);case 5:return function(t){let r=t.shapeInfo.logicalShape,n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),i=r[4],s=r[3]*i,o=r[2]*s,l=r[1]*o,{newShape:u,keptDims:h}=ny.squeezeShape(r);if(u.length<r.length){let r=E3(t,u);return`
      ${e(r)}
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        return ${a}(${E4(["row","col","depth","depth2","depth3"],h)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${l}, ${o}, ${s}, ${i})) +
          depth3;
        ${E0(t)}
      }
    `;let p=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,c=d[0],f=d[1];if(f===l&&null==p)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${o}, ${s}, ${i}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${c}.0);
        return sampleTexture(${n}, uv);
      }
    `;if(f===i&&null==p)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${r[1]*r[2]*r[3]},
               ${r[2]*r[3]}, ${r[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${c}.0);
        return sampleTexture(${n}, uv);
      }
    `;let m=EJ(n);return`
    float ${a}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${o} + depth * ${s} +
          depth2 * ${i} + depth3 + ${m};
      vec2 uv = uvFromFlat(${c}, ${f}, index);
      return sampleTexture(${n}, uv);
    }
  `}(t);case 6:return function(t){let r=t.shapeInfo.logicalShape,n=t.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:i,keptDims:s}=ny.squeezeShape(r);if(i.length<r.length){let r=E3(t,i);return`
      ${e(r)}
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${a}(${E4(["row","col","depth","depth2","depth3","depth4"],s)});
      }
    `}let o=r[5],l=r[4]*o,u=r[3]*l,h=r[2]*u,p=r[1]*h;if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${p}, ${h}, ${u}, ${l})) +
          dot(
            vec2(depth3, depth4),
            vec2(${o}, 1)));
        ${E0(t)}
      }
    `;let d=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,f=c[0],m=c[1];if(m===p&&null==d)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${h}, ${u}, ${l}, ${o})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${m}.0, ${f}.0);
        return sampleTexture(${n}, uv);
      }
    `;if(m===o&&null==d)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${r[1]*r[2]*r[3]*r[4]},
               ${r[2]*r[3]*r[4]},
               ${r[3]*r[4]},
               ${r[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${m}.0, ${f}.0);
        return sampleTexture(${n}, uv);
      }
    `;let g=EJ(n);return`
    float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${p} + col * ${h} + depth * ${u} +
          depth2 * ${l} + depth3 * ${o} + depth4 + ${g};
      vec2 uv = uvFromFlat(${f}, ${m}, index);
      return sampleTexture(${n}, uv);
    }
  `}(t);default:throw Error(`${n.length}-D input sampling is not yet supported`)}}(e,n);let i=e.shapeInfo.logicalShape,s=t.logicalShape;return i.length<=s.length&&(r?a+=function(e,t){let r,n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),i=e.shapeInfo.logicalShape.length,s=t.logicalShape.length,o=EK(e.shapeInfo.logicalShape,t.logicalShape),l=E1(s),u=s-i,h=["x","y","z","w","u","v"];r=0===i?"":s<2&&o.length>=1?"coords = 0;":o.map(e=>`coords.${h[e+u]} = 0;`).join("\n");let p="";p=s<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${h[t+u]}`).join(", ");let d="return outputValue;",c=1===ny.sizeFromShape(e.shapeInfo.logicalShape),f=1===ny.sizeFromShape(t.logicalShape);if(1!==i||c||f){if(c&&!f)d=1===s?`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:`
        return vec4(outputValue.x);
      `;else if(o.length){let e=i-2,t=i-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d=`
      return vec4(outputValue.xy, outputValue.xy);
    `;return`
    vec4 ${"get"+a+"AtOutCoords"}() {
      ${l} coords = getOutputCoords();
      ${r}
      vec4 outputValue = get${a}(${p});
      ${d}
    }
  `}(e,t):a+=function(e,t){let r,n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),i="get"+a+"AtOutCoords",s=t.texShape,o=e.shapeInfo.texShape,l=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&l===u&&null==e.shapeInfo.flatOffset&&ny.arraysEqual(o,s))return`
      float ${i}() {
        return sampleTexture(${n}, resultUV);
      }
    `;let h=E1(u),p=EK(e.shapeInfo.logicalShape,t.logicalShape),d=u-l,c=["x","y","z","w","u","v"];r=0===l?"":u<2&&p.length>=1?"coords = 0;":p.map(e=>`coords.${c[e+d]} = 0;`).join("\n");let f="";return f=u<2&&l>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${c[t+d]}`).join(", "),`
    float ${i}() {
      ${h} coords = getOutputCoords();
      ${r}
      return get${a}(${f});
    }
  `}(e,t)),a})(e,t,r.packedInputs,r.enableShapeUniforms)).join("\n"),d=t.texShape,c=EW(),f=(n=c,`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `),m=(a=c,`${a.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${a.varyingFs} vec2 resultUV;
    ${a.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${a.defineSpecialNaN}
    ${a.defineSpecialInf}
    ${a.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${Eq}
    ${EX}
    ${EY}
  `);return t.isPacked?(o=function(e,t,r){switch(e.length){case 0:return EQ();case 1:var n=t,a=r;let i=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return 1===i[0]?a?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${i[1]}.0);
      }
    `:1===i[1]?a?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${i[0]}.0);
      }
    `:a?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${i[0]}, ${i[1]}));
      return 2 * (resTexRC.x * ${i[1]} + resTexRC.y);
    }
  `;case 2:var s=e,o=t,l=r;let u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(ny.arraysEqual(s,o))return l?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${u[0]}, ${u[1]}));
      }
    `;let h=Math.ceil(s[1]/2);return l?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${u[0]}, ${u[1]}));

      int index = resTexRC.x * ${u[1]} + resTexRC.y;
      int r = 2 * (index / ${h});
      int c = imod(index, ${h}) * 2;

      return ivec2(r, c);
    }
  `;case 3:var p=e,d=t,c=r;if(c)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let f=[Math.ceil(d[0]/2),Math.ceil(d[1]/2)],m=Math.ceil(p[2]/2),g=m*Math.ceil(p[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${f[0]}, ${f[1]}));
      int index = resTexRC.x * ${f[1]} + resTexRC.y;

      int b = index / ${g};
      index -= b * ${g};

      int r = 2 * (index / ${m});
      int c = imod(index, ${m}) * 2;

      return ivec3(b, r, c);
    }
  `;default:return function(e,t,r){if(r)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),i=a*Math.ceil(e[e.length-2]/2),s=i,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)s*=e[e.length-t-1],o=`
      int b${t} = index / ${s};
      index -= b${t} * ${s};
    `+o,l=`b${t}, `+l;return`
    ivec${e.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));
      int index = resTexRC.x * ${n[1]} + resTexRC.y;

      ${o}

      int b = index / ${i};
      index -= b * ${i};

      int r = 2 * (index / ${a});
      int c = imod(index, ${a}) * 2;

      return ivec${e.length}(${l});
    }
  `}(e,t,r)}}(t.logicalShape,d,r.enableShapeUniforms),i=c,l=`
    void setOutput(vec4 val) {
      ${i.output} = val;
    }
  `):(o=function(e,t,r){switch(e.length){case 0:return EQ();case 1:return n=t,a=r,1===n[0]?a?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${n[1]}.0);
      }
    `:1===n[1]?a?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${n[0]}.0);
      }
    `:a?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${n[0]}, ${n[1]}));
      return resTexRC.x * ${n[1]} + resTexRC.y;
    }
  `;case 2:return i=e,s=t,o=r,ny.arraysEqual(i,s)?o?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `:1===i[1]?o?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${s[0]}, ${s[1]}));
        int index = resTexRC.x * ${s[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:1===i[0]?o?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${s[0]}, ${s[1]}));
        int index = resTexRC.x * ${s[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:o?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = index / ${i[1]};
      int c = index - r * ${i[1]};
      return ivec2(r, c);
    }
  `;case 3:var n,a,i,s,o,l=e,u=t,h=r;if(h){let e=EV(["r","c","d"],l);return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${e}
    return ivec3(r, c, d);
  }
`}let p=EU(["r","c","d"],l);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${u[0]}, ${u[1]}));
      int index = resTexRC.x * ${u[1]} + resTexRC.y;
      ${p}
      return ivec3(r, c, d);
    }
  `;case 4:var d=e,c=t,f=r;if(f){let e=EV(["r","c","d","d2"],d);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${e}
      return ivec4(r, c, d, d2);
    }
  `}let m=EU(["r","c","d","d2"],d);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${c[0]}, ${c[1]}));
      int index = resTexRC.x * ${c[1]} + resTexRC.y;
      ${m}
      return ivec4(r, c, d, d2);
    }
  `;case 5:var g=e,y=t;let b=EU(["r","c","d","d2","d3"],g);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${y[0]},
                             ${y[1]}));

      int index = resTexRC.x * ${y[1]} + resTexRC.y;

      ${b}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;case 6:var x=e,v=t;let w=EU(["r","c","d","d2","d3","d4"],x);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${v[0]}, ${v[1]}));
      int index = resTexRC.x * ${v[1]} + resTexRC.y;

      ${w}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;default:throw Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,d,r.enableShapeUniforms),s=c,l=`
    void setOutput(float val) {
      ${s.output} = vec4(val, 0, 0, 0);
    }
  `),r.packedInputs&&(m+=EZ),[m,f,l,h,o,p,r.userCode].join("\n")}(a,s,t),l=function(e,t){let r=EA(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Ek(e,()=>e.shaderSource(r,t)),Ek(e,()=>e.compileShader(r)),e_.get("ENGINE_COMPILE_ONLY"))return r;if(!1===e.getShaderParameter(r,e.COMPILE_STATUS))throw EC(t,e.getShaderInfoLog(r)),Error("Failed to compile fragment shader.");return r}(e.gl,o),u=e.createProgram(l);return e_.get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:i,outShapeInfo:s,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:i,outShapeInfo:s},E6(e,t,u)))})(this.gpgpu,e,h,p)),f=null!=this.activeTimers;f&&(s=this.startTimer()),e_.get("ENGINE_COMPILE_ONLY")||function(e,t,r,n,a){t.program.enableShapeUniforms||(E5(t.inShapeInfos,r),E5([t.outShapeInfo],[n]));let i=n.texData.texture,s=n.texData.texShape;n.texData.isPacked?e.setOutputPackedMatrixTexture(i.texture,s[0],s[1]):e.setOutputMatrixTexture(i.texture,s[0],s[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===e_.getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let n=0;n<r.length;++n){let a=r[n],{uniform:i,offset:s,shape:o,texShape:l}=t.variablesLocations[n];if(o){let{uniformShape:r}=E2(t.program.packedInputs,a.shape,a.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(o,new Int32Array(r));break;case 2:e.gl.uniform2iv(o,new Int32Array(r));break;case 3:e.gl.uniform3iv(o,new Int32Array(r));break;case 4:e.gl.uniform4iv(o,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,a.texData.texShape[0],a.texData.texShape[1]),null!=i){if(a.isUniform){if(2>ny.sizeFromShape(a.shape))e.gl.uniform1f(i,a.uniformValues[0]);else{let t=a.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}continue}null!=a.texData.slice&&null!=s&&e.gl.uniform1i(s,a.texData.slice.flatOffset),e.setInputMatrixTexture(a.texData.texture.texture,i,n)}}let o=t.outShapeLocation;if(o)switch(n.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(n.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(n.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(n.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(n.shape))}if(t.outShapeStridesLocation){let r=ny.computeStrides(n.shape);switch(n.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(r));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(r));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(r))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,n.texData.texShape[0],n.texData.texShape[1]),t.program.customUniforms&&a)for(let r=0;r<t.program.customUniforms.length;++r){let n=t.program.customUniforms[r],i=t.customUniformLocations[r],s=a[r];if("float"===n.type)e.gl.uniform1fv(i,s);else if("vec2"===n.type)e.gl.uniform2fv(i,s);else if("vec3"===n.type)e.gl.uniform3fv(i,s);else if("vec4"===n.type)e.gl.uniform4fv(i,s);else if("int"===n.type)e.gl.uniform1iv(i,s);else if("ivec2"===n.type)e.gl.uniform2iv(i,s);else if("ivec3"===n.type)e.gl.uniform3iv(i,s);else if("ivec4"===n.type)e.gl.uniform4iv(i,s);else throw Error(`uniform type ${n.type} is not supported yet.`)}e.executeProgram()}(this.gpgpu,c,h,p,n),u.forEach(e=>this.disposeIntermediateTensorInfo(e)),f&&(s=this.endTimer(s),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(s)}));let m=e_.getNumber("WEBGL_FLUSH_THRESHOLD");if(m>0){let e=ny.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!e_.getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===a){let e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,r,n,a=!1){return r=r||t[0].dtype,this.runWebGLProgram(e,t,r,n,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(e_.getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=aH(()=>{if(!e_.get("WEBGL_RENDER_FLOAT32_ENABLED")){let e=e_.getBool("DEBUG");e_.set("DEBUG",!1);let t=this.abs(sx(1e-8)).dataSync()[0];if(e_.set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){let t,r=this.texData.get(e),{shape:n,dtype:a,values:i,texture:s,usage:o,isPacked:l}=r;if(null!=s)return;let u=null!=this.activeTimers;u&&(t=ny.now());let h=r.texShape;if(null==h&&(r.texShape=h=function(e,t=!1){let r=e_.getNumber("WEBGL_MAX_TEXTURE_SIZE"),n=e_.getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");n===1/0&&e_.getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(n=r/2),t&&(r*=2,n*=2,1===(e=e.map((t,r)=>r>=e.length-2?ny.nearestLargerEven(e[r]):e[r])).length&&(e=[2,e[0]])),2!==e.length&&(e=ny.squeezeShape(e).newShape);let a=ny.sizeFromShape(e),i=null;e.length<=1&&a<=r?i=[1,a]:2===e.length&&e[0]<=r&&e[1]<=r?i=e:3===e.length&&e[0]*e[1]<=r&&e[2]<=r?i=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=r&&e[1]*e[2]<=r?i=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=r&&e[3]<=r?i=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=r&&e[1]*e[2]*e[3]<=r&&(i=[e[0],e[1]*e[2]*e[3]]);let s=null!=i&&Math.max(...i)>n&&Math.min(...i)<=(t?2:1)&&Math.min(...i)>0;if(null==i||s)if(t){let t=EF(e),r=2,n=2;e.length&&([r,n]=E_(e)),a=r/2*t*(n/2),i=ny.sizeToSquarishShape(a).map(e=>2*e)}else i=ny.sizeToSquarishShape(a);return i}(n,l)),null!=i){let e,s=ED(n),o=h[1],p=h[0],d=i instanceof Uint8Array||i instanceof Uint8ClampedArray;(l||!d)&&([o,p]=Ev(h[0],h[1])),e=l?new Ra(s,d):new Rn(s,d);let c=d?[p,o]:h,f=this.makeTensorInfo(c,a),m=this.texData.get(f.dataId);d?m.usage=k.PIXELS:m.usage=k.UPLOAD,m.texShape=c,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,i);let g=[[p,o]],y=this.runWebGLProgram(e,[f],a,g,!0),b=this.texData.get(y.dataId);r.texShape=b.texShape,r.isPacked=b.isPacked,r.usage=b.usage,e_.get("ENGINE_COMPILE_ONLY")?this.disposeData(y.dataId):(r.texture=b.texture,r.values=null,this.texData.delete(y.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=ny.now()-t)}else r.texture=this.acquireTexture(h,o,a,l)}convertAndCacheOnCPU(e,t){let r=this.texData.get(e),{dtype:n}=r;return null!=t&&(r.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){let r="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<r.length;++t)r[t]=Math.round(e[t]);return r}throw Error(`Unknown dtype ${t}`)}(t,n)),r.values}acquireTexture(e,t,r,n){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){let e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,n)}computeBytes(e,t){return e[0]*e[1]*ny.bytesPerElement(t)}checkCompileCompletion(){for(let[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){let e=[];if(this.gpgpu.parallelCompilationExtension){for(let[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(let[,t]of Object.entries(this.binaryCache)){let r=new Promise(e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}});e.push(r)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await cC(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw EC(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),Error("Failed to compile fragment shader.");throw Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(let e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);let{variablesLocations:t,customUniformLocations:r,infLoc:n,nanLoc:a,outShapeLocation:i,outShapeStridesLocation:s,outTexShapeLocation:o}=E6(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=r,e.infLoc=n,e.nanLoc=a,e.outShapeLocation=i,e.outShapeStridesLocation=s,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,r){e.channels=e.channels||"RGBA";let{texture:n,height:a,width:i,channels:s}=e,o=aN.backend;if(!o.gpgpu.gl.isTexture(n))throw Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");let l=o.writeTexture(n,t,r,a,i,s);return aN.makeTensorFromDataId(l,t,r,o)}}Ax.nextDataId=0,a$.isBrowser()&&aX("webgl",()=>new Ax,2);const Av=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;class Aw{constructor(e,t,r){this.variableNames=["A","B"],this.outputShape=or.assertAndGetBroadcastShape(t,r),this.enableShapeUniforms=E8(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}}const Ak=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;class AS{constructor(e,t,r,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=or.assertAndGetBroadcastShape(t,r);let a=this.outputShape.length;this.enableShapeUniforms=E8(a);let i="";if(n)if(0===a||1===ny.sizeFromShape(this.outputShape))i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else{let e=E1(a);if(i=`
          ${e} coords = getOutputCoords();
        `,1===a)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let e=R7("coords",a);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${e[a-2]} + 1) >= outShape[${a} - 2];
            bool nextColOutOfBounds =
              (${e[a-1]} + 1) >= outShape[${a} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};
            bool nextColOutOfBounds =
              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}}function AI(e){let{inputs:t,backend:r}=e,{x:n}=t;return r.incRef(n.dataId),{dataId:n.dataId,shape:n.shape,dtype:n.dtype}}function AC(e){let{inputs:t,backend:r}=e,{real:n,imag:a}=t,i=r.makeTensorInfo(n.shape,"complex64"),s=r.texData.get(i.dataId);return s.complexTensorInfos={real:AI({inputs:{x:n},backend:r}),imag:AI({inputs:{x:a},backend:r})},i}const AN="return (a < 0.) ? b * a : a;",AT=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,A$="return (a < 0.) ? b * a : a;",AE=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,AR="if (isnan(x)) return x;";function AA({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:r,dtype:n}){return({inputs:a,backend:i})=>{let s,{x:o}=a,l=n||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=r){let e=r(i.texData.get(o.dataId).values,l);return i.makeTensorInfo(o.shape,l,e)}return s=e_.getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Af(o.shape,t):new Ai(o.shape,e),i.runWebGLProgram(s,[o],l)}}function AF({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:r=!1,supportsComplex:n=!1,cpuKernelImpl:a,dtype:i}){return({inputs:s,backend:o})=>{let l,{a:u,b:h}=s;if(n&&"complex64"===u.dtype){let t=o.texData.get(u.dataId),r=o.texData.get(h.dataId),[n,a]=[[t.complexTensorInfos.real,r.complexTensorInfos.real],[t.complexTensorInfos.imag,r.complexTensorInfos.imag]].map(t=>{let[r,n]=t,a={dataId:r.dataId,dtype:r.dtype,shape:u.shape},i={dataId:n.dataId,dtype:n.dtype,shape:h.shape},s=new Aw(e,u.shape,h.shape);return o.runWebGLProgram(s,[a,i],af(r.dtype,n.dtype))}),i=AC({inputs:{real:n,imag:a},backend:o});return o.disposeIntermediateTensorInfo(n),o.disposeIntermediateTensorInfo(a),i}let p=i||af(u.dtype,h.dtype);if(("string"===u.dtype||"string"===h.dtype||o.shouldExecuteOnCPU([u,h]))&&null!=a){let e=o.texData.get(u.dataId).values,t=o.texData.get(h.dataId).values,r="string"===u.dtype?or.fromUint8ToStringArray(e):e,n="string"===u.dtype?or.fromUint8ToStringArray(t):t,[i,s]=a(u.shape,h.shape,r,n,p),l=o.makeTensorInfo(s,p);return o.texData.get(l.dataId).values=i,l}return l=e_.getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new AS(t,u.shape,h.shape,r):new Aw(e,u.shape,h.shape),o.runWebGLProgram(l,[u,h],p)}}function A_(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?Ad:Al;if("elu"===e)return t?Ap:"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?Ac:Au;if("prelu"===e)return t?AE:A$;else if("leakyrelu"===e)return t?AT:AN;else if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class AD{constructor(e,t,r,n=!1,a=!1,i=!1,s=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=r,this.enableShapeUniforms=E8(this.outputShape.length);let u=Math.ceil((n?e[1]:e[2])/2),h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],d="",c="";s&&(d=o?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }`:l?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }`:`vec4 activation(vec4 x) {
          ${s}
        }`,c="result = activation(result);"),i&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let f="rc.x",m="rc.x";e[0]<t[0]?f=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(m=`imod(rc.x, ${t[0]})`),this.userCode=`
      ${d}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${u}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${f};
        int batchB = ${m};
        for (int i = 0; i < ${u}; i++) {
          vec4 a = getMatrixA(batchA, ${n?"i * 2, rc.y":"rc.y, i * 2"});
          vec4 b = getMatrixB(batchB, ${a?"rc.z, i * 2":"i * 2, rc.z"});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${p[0]});
          result += (${h[1]} * ${p[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${i?"result += getBiasAtOutCoords();":""}

        ${c}

        setOutput(result);
      }
    `}}class AO{constructor(e,t,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=or.assertAndGetBroadcastShape(t,r),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}}const AM="return a * b;";function Az(e){let t,{inputs:r,backend:n}=e,{a:a,b:i}=r,s=or.upcastType(a.dtype,i.dtype);if("complex64"===a.dtype){let e=n.texData.get(a.dataId),t=n.texData.get(i.dataId),r=new AO("return areal * breal - aimag * bimag;",a.shape,i.shape),s=new AO("return areal * bimag + aimag * breal;",a.shape,i.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:a.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:i.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:i.shape}],l=n.runWebGLProgram(r,o,"float32"),u=n.runWebGLProgram(s,o,"float32"),h=AC({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),h}if(n.shouldExecuteOnCPU([a,i])){let e=n.texData.get(a.dataId),t=n.texData.get(i.dataId),[r,o]=RD(a.shape,i.shape,e.values,t.values,s),l=n.makeTensorInfo(o,s);return n.texData.get(l.dataId).values=r,l}return t=e_.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new AS(AM,a.shape,i.shape):new Aw(AM,a.shape,i.shape),n.runWebGLProgram(t,[a,i],s)}function AP(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{shape:i}=n,s=ny.sizeFromShape(a.shape),o=ny.inferFromImplicitShape(i,s),l=ny.sizeFromShape(o);ny.assert(s===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${a.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`);let u=r.texData.get(a.dataId);return!u.isPacked||EO(a.shape,o)||null!==u.texture&&EO(u.shape,o)?(r.incRef(a.dataId),{dataId:a.dataId,shape:o,dtype:a.dtype}):function(e,t,r){let n=[EF(e.shape),...E_(e.shape)],a={dtype:e.dtype,shape:n,dataId:e.dataId},i=new Ae([EF(t),...E_(t)],n),s=r.runWebGLProgram(i,[a],e.dtype,[n],!0);return{dataId:s.dataId,shape:t,dtype:s.dtype}}(a,o,r)}class AL{constructor(e,t){this.variableNames=["x"];let{windowSize:r,batchSize:n,inSize:a,outSize:i}=e;this.outputShape=[n,i];let s=4*Math.floor(r/4),o=r%4,l="sumValue += dot(values, ones);";if(null!=t){let e=1/t;l=`sumValue += dot(values * ${ny.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";a%r>0&&(u=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        float sumValue = 0.0;

        for (int i = 0; i < ${s}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${l}
        }

        int inIdx = inOffset + ${s};
        if (${1===o}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${l}
        } else if (${2===o}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${l}
        } else if (${3===o}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${l}
        }
        setOutput(sumValue);
      }
    `}}class AB{constructor(e,t){this.variableNames=["x"];let{windowSize:r,batchSize:n,inSize:a,outSize:i}=e;this.outputShape=[n,i];let s="0.0",o="";"prod"===t?s="1.0":"min"===t?(s="1.0 / 1e-20",o="min"):"max"===t&&(s="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");let u=4*Math.floor(r/4),h=r%4,p=`
      if (${"sum"===t}) {
        sumValue += dot(values, ones);
      } else if (${"prod"===t}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${o}(values, minMaxValue);
        if (${"min"===t} || ${"max"===t}) {
          minMaxValue = ${o}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,d="vec4";"all"===t?(s="1.0",p=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,d="bvec4"):"any"===t&&(s="0.0",p=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,d="bvec4");let c="";a%r>0&&(c=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${s};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        vec4 minMaxValue = vec4(${s});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${p}
        }

        int inIdx = inOffset + ${u};
        if (${1===h}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${p}
        } else if (${2===h}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${p}
        } else if (${3===h}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${p}
        }
        setOutput(${l});
      }
    `}}function AW(e,t,r,n){let a=function(e){let t=[];for(;0===t.length||1!==t[t.length-1].outSize;){let r=t.length?t[t.length-1].outSize:e[1],n=or.computeOptimalWindowSize(r);t.push({inSize:r,windowSize:n,outSize:Math.ceil(r/n)})}return t}(e.shape),i=e;for(let s=0;s<a.length;s++){let o,l,{inSize:u,windowSize:h,outSize:p}=a[s];o="mean"===r?0===s?new AL({windowSize:h,inSize:u,batchSize:e.shape[0],outSize:p},u):new AL({windowSize:h,inSize:u,batchSize:e.shape[0],outSize:p}):new AB({windowSize:h,inSize:u,batchSize:e.shape[0],outSize:p},r),l=i,i=n.runWebGLProgram(o,[i],t),l.dataId!==e.dataId&&n.disposeIntermediateTensorInfo(l)}return i}class AU{constructor(e,t){this.variableNames=["A"];let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[t[n]];this.outputShape=r,this.rank=r.length;let n=E1(this.rank),a=function(e){let t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let r=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],n=Array(t);for(let t=0;t<e.length;t++)n[e[t]]=r[t];return n.join()}(t);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${a}));
    }
    `}}class AV{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[t[n]];if(this.outputShape=r,this.rank=r.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=E1(this.rank),a=R8("rc",this.rank),i=Array(this.rank);for(let e=0;e<t.length;e++)i[t[e]]=a[e];let s=`vec2(${i.slice(-2).join()})`,o=`++${a[this.rank-1]} < ${r[this.rank-1]}`,l=`getChannel(getA(${i.join()}), ${s})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${l};
      if(${o}) {
        result[1] = ${l};
      }
      --${a[this.rank-1]};
      if(++${a[this.rank-2]} < ${r[this.rank-2]}) {
        result[2] = ${l};
        if(${o}) {
          result[3] = ${l};
        }
      }
      setOutput(result);
    }
    `}}function AG(e,t,r){let n=e_.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new AV(e.shape,t):new AU(e.shape,t);return r.runWebGLProgram(n,[e],e.dtype)}function AH(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,keepDims:s}=n;return function(e,t,r,n){let a=e.shape.length,i=ny.parseAxisParam(t,e.shape),s=i,o=or.getAxesPermutation(s,a),l=null!=o,u=e;l&&(u=AG(e,o,n),s=or.getInnerMostAxes(s.length,a)),or.assertAxesAreInnerMostDims("sum",s,a);let[h,p]=or.computeOutAndReduceShapes(u.shape,s),d=h;r&&(d=or.expandShapeToKeepDim(h,i));let c=ny.sizeFromShape(p),f=AP({inputs:{x:u},attrs:{shape:[ny.sizeFromShape(e.shape)/c,c]},backend:n}),m=AW(f,am(e.dtype),"sum",n),g=AP({inputs:{x:m},attrs:{shape:d},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),l&&n.disposeIntermediateTensorInfo(u),g}(a,i,s,r)}function Aj(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{perm:s}=a,o=Array(i.shape.length);for(let e=0;e<o.length;e++)o[e]=i.shape[s[e]];if(n.shouldExecuteOnCPU([i])){let e=R6(n.texData.get(i.dataId).values,i.shape,i.dtype,s,o);t=n.makeTensorInfo(o,i.dtype),n.texData.get(t.dataId).values=e}else t=AG(i,s,n);return t}function AK({a:e,b:t,transposeA:r,transposeB:n,backend:a,bias:i=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:l=null}){let u,h=e.shape.length,p=t.shape.length,d=r?e.shape[h-2]:e.shape[h-1],c=n?t.shape[p-1]:t.shape[p-2],f=r?e.shape[h-1]:e.shape[h-2],m=n?t.shape[p-2]:t.shape[p-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=ny.sizeFromShape(g),x=ny.sizeFromShape(y),v=sO.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,m]);ny.assert(d===c,()=>`Error in matMul: inner shapes (${d}) and (${c}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${r} and transposeB=${n} must match.`);let w=r?[b,d,f]:[b,f,d],k=n?[x,m,c]:[x,c,m],S=AP({inputs:{x:e},backend:a,attrs:{shape:w}}),I=AP({inputs:{x:t},backend:a,attrs:{shape:k}}),C=[S,I],N=Math.max(b,x),T=r?S.shape[1]:S.shape[2],$=null!=i,E=null!=s,R="leakyrelu"===l,A=null!=l?A_(l,!0):null,F=$||E||R||null!=A;if((1===f||1===m)&&T>1e3&&!1===F){let e=S,t=I;r&&(e=Aj({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),C.push(e)),n&&(t=Aj({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),C.push(t));let i=1!==m,s=1===m,o=e;i&&(o=AP({inputs:{x:e},backend:a,attrs:{shape:[N,T,1]}}),C.push(o));let l=t;s&&(l=AP({inputs:{x:t},backend:a,attrs:{shape:[N,1,T]}}),C.push(l));let h=Az({inputs:{a:o,b:l},backend:a});u=AH({inputs:{x:h},backend:a,attrs:{axis:1===m?2:1,keepDims:!0}}),C.push(h)}else{let l=af(e.dtype,t.dtype),h=new AD(w,k,[N,f,m],r,n,$,A,E,R),p=[S,I];if(null!=i&&p.push(i),E&&p.push(s),R){let e=a.makeTensorInfo([],"float32",ny.createScalarValue(o,"float32"));p.push(e),C.push(e)}u=a.runWebGLProgram(h,p,l)}let _=AP({inputs:{x:u},backend:a,attrs:{shape:v}});for(let e of(C.push(u),C))a.disposeIntermediateTensorInfo(e);return _}const Aq="return abs(x);",AX=AA({opSnippet:As+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`}),AY=AA({opSnippet:As+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`}),AZ="return a + b;",AQ=AF({opSnippet:AZ,packedOpSnippet:AZ,supportsComplex:!0,cpuKernelImpl:Rd});class AJ{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let r=[];this.variableNames.forEach(e=>{r.push(`float v${e} = get${e}AtOutCoords();`)});let n=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${r.join("\n        ")}

        float result = ${n};
        setOutput(result);
      }
    `}}class A0{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let r=[];this.variableNames.forEach(e=>{r.push(`vec4 v${e} = get${e}AtOutCoords();`)});let n=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${r.join("\n        ")}

        vec4 result = ${n};
        setOutput(result);
      }
    `}}class A1{constructor(e,t,r){this.variableNames=["A"];let{windowSize:n,batchSize:a,outSize:i}=e;r||this.variableNames.push("bestIndicesA"),this.outputShape=[a,i],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${r?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};
          float candidate = getA(batch, inIdx);
          if (candidate ${"max"===t?">":"<"} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}}class A2{constructor(e,t,r,n){let a,i;this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,ny.assert(e.length>2,()=>`Packed arg${r.charAt(0).toUpperCase()+r.slice(1)} supports only inputs with rank above 2.`);let s=Math.ceil(e[e.length-1]/t);this.outputShape=e.slice(0,-1),s>1&&this.outputShape.push(s),n||this.variableNames.push("bestIndicesA");let o=this.outputShape,l=o.length,u=E1(l),h=R7("coords",l);if(1===s){let e=E1(i=l+1);a=`
        ${e} sourceLocR = ${e}(${h.join()}, 0);
        ++${h[l-1]};
        ${e} sourceLocG = ${e}(${h.join()}, 0);
        ++${h[l-2]};
        ${e} sourceLocA = ${e}(${h.join()}, 0);
        --${h[l-1]};
        ${e} sourceLocB = ${e}(${h.join()}, 0);
        --${h[l-2]};`}else i=l,a=`
        ${u} sourceLocR = coords;
        ++${h[l-1]};
        ${u} sourceLocG = coords;
        ++${h[l-2]};
        ${u} sourceLocA = coords;
        --${h[l-1]};
        ${u} sourceLocB = coords;
        --${h[l-2]};`;let p=["x","y","z","w","u","v"].slice(0,i),d="."+p[i-1],c=p.map(e=>"int "+e),f=R7("sourceLocR",i-1).concat("inIdx.r"),m=R7("sourceLocG",i-1).concat("inIdx.g"),g=R7("sourceLocB",i-1).concat("inIdx.b"),y=R7("sourceLocA",i-1).concat("inIdx.a"),b="max"===r?"greaterThan":"lessThan",x=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${f.join()}),
                             getBestIndicesAChannel(${m.join()}),
                             getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()})));`,v=`vec4(
            getAChannel(${f.join()}),
            hasNextCol ? getAChannel(${m.join()}) : 0.,
            hasNextRow ? getAChannel(${g.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,w=n?"":`
      float getBestIndicesAChannel(${c.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${c.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${w}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${h[l-1]} < ${o[l-1]-1};
        bool hasNextRow = ${h[l-2]} < ${o[l-2]-1};
        ${a}
        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},
          sourceLocB${d}, sourceLocA${d}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${v};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${x}
          vec4 candidate = ${v};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${b}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}}function A3(e,t,r,n){let a=[r];if(or.assertAxesAreInnerMostDims("arg"+n.charAt(0).toUpperCase()+n.slice(1),a,t.shape.length),!e_.getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let r=[],i=e.texData.get(t.dataId),s=null!==i&&i.isPacked,o=t;s&&r.push(o=e.unpackTensor(t));let[l,u]=or.computeOutAndReduceShapes(o.shape,a),h=AP({inputs:{x:o},backend:e,attrs:{shape:[-1,ny.sizeFromShape(u)]}});r.push(h);let p=function e(t,r,n,a=null){let i=r.shape[0],s=r.shape[1];null!=a&&(i=a.shape[0],s=a.shape[1]);let o=or.computeOptimalWindowSize(s),l=new A1({windowSize:o,inSize:s,batchSize:i,outSize:Math.ceil(s/o)},n,null==a),u=[r];null!=a&&u.push(a);let h=t.runWebGLProgram(l,u,"int32");if(1===h.shape[1])return h;let p=e(t,r,n,h);return t.disposeIntermediateTensorInfo(h),p}(e,h,n);r.push(p);let d=AP({inputs:{x:p},backend:e,attrs:{shape:l}});return r.forEach(t=>e.disposeIntermediateTensorInfo(t)),d}return function e(t,r,n,a=null){let i=null!=a?a.shape:r.shape,s=i[i.length-1],o=new A2(i,or.computeOptimalWindowSize(s),n,null==a),l=null==a?[r]:[r,a],u=t.runWebGLProgram(o,l,"int32");if(u.shape.length===r.shape.length){let a=e(t,r,n,u);return t.disposeIntermediateTensorInfo(u),a}return u}(e,t,n)}const A4=AA({opSnippet:As+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`}),A6=AA({opSnippet:As+"return log(x + sqrt(x * x + 1.0));"}),A5=AA({opSnippet:As+`
  return atan(x);
`}),A8=AF({opSnippet:Av+`
  return atan(a, b);
`,packedOpSnippet:`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+Ak+`
  return result;
`}),A7=AA({opSnippet:As+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`});class A9{constructor(e,t,r,n=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&r)throw Error("Cannot compute positions for average pool.");let i=e.filterWidth,s=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=e.padInfo.top,c=e.padInfo.left;this.outputShape=e.outShape;let f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`,y="0.0";if(f||(y="-1.0 / 1e-20"),r){this.userCode=`
        const ivec2 strides = ivec2(${s}, ${o});
        const ivec2 pads = ivec2(${d}, ${c});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value >= currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?a?m:g:`wR * ${p} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");let x=4*Math.floor(i/4),v=i%4,w=`
      if (${f}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${o});
      const ivec2 pads = ivec2(${d}, ${c});
      const float initializationValue = ${y};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${y});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${l}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${x}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${w}
          }

          int xC = xCCorner + ${x};
          if (${1===v}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${w}
          } else if (${2===v}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${w}
          } else if (${3===v}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${w}
          }
        }
        setOutput(${b});
      }
    `}}class Fe{constructor(e,t,r,n=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&r)throw Error("Cannot compute positions for average pool.");let i=e.filterWidth,s=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,h=e.dilationHeight,p=e.dilationWidth,d=e.effectiveFilterDepth,c=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;let b="avg"===t,x="0.0";if(b||(x="-1.0 / 1e-20"),r){this.userCode=`
        const ivec3 strides =
            ivec3(${s}, ${o}, ${l});
        const ivec3 pads = ivec3(${m}, ${g}, ${y});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${c};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${f};
                  wC += ${p}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value >= currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${c} * ${f} +
                      wR * ${f} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / max(count, 1.0)");let w=4*Math.floor(i/4),k=i%4,S=`
      if (${b}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${s}, ${o}, ${l});
      const ivec3 pads = ivec3(${m}, ${g}, ${y});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${c};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${w}; wC += 4) {
              int xC = xCCorner + wC * ${p};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                getValue(batch, xD, xR, xC + 2 * ${p}, ch),
                getValue(batch, xD, xR, xC + 3 * ${p}, ch)
              );

              ${S}
            }

            int xC = xCCorner + ${w};
            if (${1===k}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${S}
            } else if (${2===k}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                initializationValue,
                initializationValue
              );

              ${S}
            } else if (${3===k}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                getValue(batch, xD, xR, xC + 2 * ${p}, ch),
                initializationValue
              );

              ${S}
            }
          }
        }
        setOutput(${v});
      }
    `}}class Ft{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterHeight,r=e.filterWidth,n=e.strideHeight,a=e.strideWidth,i=e.dilationHeight,s=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,h=l-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${1/(t*r)});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${l};
            wC+= ${s}) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}}class Fr{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterDepth,r=e.filterHeight,n=e.filterWidth,a=e.strideDepth,i=e.strideHeight,s=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,h=e.effectiveFilterDepth,p=e.effectiveFilterHeight,d=e.effectiveFilterWidth,c=h-1-e.padInfo.front,f=p-1-e.padInfo.top,m=d-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${c}, ${f}, ${m});
      const float avgMultiplier = float(${1/(t*r*n)});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${a}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${p};
              wR += ${l}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${s}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Fn{constructor(e,t,r,n,a,i){this.outputShape=[],this.variableNames=["x","mean","variance"],or.assertAndGetBroadcastShape(e,t),or.assertAndGetBroadcastShape(e,r);let s="0.0";null!=n&&(or.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");let o="1.0";null!=a&&(or.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${s};
        float scale = ${o};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}}class Fa{constructor(e,t,r,n,a,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],or.assertAndGetBroadcastShape(e,t),or.assertAndGetBroadcastShape(e,r);let s="vec4(0.0)";null!=n&&(or.assertAndGetBroadcastShape(e,n),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=a&&(or.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${s};
        vec4 scale = ${o};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}}class Fi{constructor(e){let t;this.variableNames=["source"],this.outputShape=e,this.rank=e.length;let r=E1(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let n=function(e){if(1===e)return"sourceLoc";if(e<=6)return Fs.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank),a=e.map((e,t)=>`sourceLoc.${Fs[t]} = start[${t}] + coords.${Fs[t]};`);t=`
        ${r} sourceLoc;
        ${r} coords = getOutputCoords();
        ${a.join("\n")}
      `,this.userCode=`
      void main() {
        ${t}
        setOutput(getSource(${n}));
      }
    `}}const Fs=["x","y","z","w","u","v"];class Fo{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let t=E1(this.rank),r=R7("coords",this.rank),n=R7("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${n.slice(-2).join()})`,i=`getChannel(getSource(${n.join()}), ${a})`,s=`
      result.x = ${i};
      if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${i};
        --${n[this.rank-1]};
      }
    `,o=1===this.rank?"":`
      --${r[this.rank-1]};
      if (++${r[this.rank-2]} < ${e[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${i};
        if (++${r[this.rank-1]} < ${e[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${i};
        }
      }
    `,l=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${n[t]} = ${r[t]} + start[${t}];`).join("\n");this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${l}
        vec4 result = vec4(0.);
        ${s}
        ${o}
        setOutput(result);
      }
    `}}function Fl(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{begin:i,size:s}=n,[o,l]=oM.parseSliceParams(a,i,s);if(oM.assertParamsValid(a,o,l),0===ny.sizeFromShape(l))return r.makeTensorInfo(l,a.dtype,[]);if(r.shouldExecuteOnCPU([a])||"string"===a.dtype){let e=Rj(r.texData.get(a.dataId).values,o,l,a.shape,a.dtype);return r.makeTensorInfo(l,a.dtype,e)}let{isPacked:u}=r.texData.get(a.dataId),h=oM.isSliceContinous(a.shape,o,l);if(u||!h){let e=e_.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Fo(l):new Fi(l),t=[o];return r.runWebGLProgram(e,[a],a.dtype,t)}return r.uploadToGPU(a.dataId),function(e,t,r,n){let a=n.texData.get(e.dataId),i=n.makeTensorInfo(r,e.dtype),s=n.texData.get(i.dataId);Object.assign(s,a),s.refCount=1,s.shape=r,s.dtype=e.dtype;let o=oM.computeFlatOffset(t,ny.computeStrides(e.shape));a.slice&&(o+=a.slice.flatOffset),s.slice={flatOffset:o,origDataId:a.slice&&a.slice.origDataId||e.dataId};let l=n.dataRefCount.get(s.slice.origDataId)||1;return n.dataRefCount.set(s.slice.origDataId,l+1),i}(a,o,l,r)}const Fu=`
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`,Fh=`
  return float(int(a.r) & int(b.r));
`,Fp=AF({opSnippet:"return float(a != b);",cpuKernelImpl:RM,dtype:"bool"});function Fd(e){let{inputs:t,backend:r}=e,{input:n}=t;return AI({inputs:{x:r.texData.get(n.dataId).complexTensorInfos.real},backend:r})}const Fc="return ceil(x);",Ff=AA({opSnippet:Fc,packedOpSnippet:Fc,cpuKernelImpl:Ry});class Fm{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}}class Fg{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}}class Fy{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}}function Fb(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}class Fx{constructor(e){this.outputShape=[],this.outputShape=or.computeOutShape(e,1),this.variableNames=e.map((e,t)=>`T${t}`);let t=Array(e.length-1);t[0]=e[0][1];for(let r=1;r<t.length;r++)t[r]=t[r-1]+e[r][1];let r=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){let n=t[e-1];r.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${n}));`)}let n=t.length,a=t[t.length-1];r.push(`else setOutput(getT${n}(yR, yC-${a}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${r.join("\n        ")}
      }
    `}}class Fv{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=or.computeOutShape(e,t);let r=this.outputShape,n=r.length,a=E1(n),i=R7("coords",n),s=["x","y","z","w","u","v"].slice(0,n);this.variableNames=e.map((e,t)=>`T${t}`);let o=Array(e.length-1);o[0]=e[0][t];for(let r=1;r<o.length;r++)o[r]=o[r-1]+e[r][t];let l=s[t],u=s.slice(-2),h=s.join(),p=`if (${l} < ${o[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;for(let e=1;e<o.length;e++){let t=o[e-1];p+=`
        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {
          return getChannel(
            getT${e}(${Fw(s,l,t)}),
            vec2(${Fw(u,l,t)}));
        }`}let d=o.length,c=o[o.length-1];p+=`
        return getChannel(
          getT${d}(${Fw(s,l,c)}),
          vec2(${Fw(u,l,c)}));`,this.userCode=`
      float getValue(${s.map(e=>"int "+e)}) {
        ${p}
      }

      void main() {
        ${a} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[n-1]} = ${i[n-1]} + 1;
        if (${i[n-1]} < ${r[n-1]}) {
          result.g = getValue(${i});
        }

        ${i[n-2]} = ${i[n-2]} + 1;
        if (${i[n-2]} < ${r[n-2]}) {
          result.a = getValue(${i});
        }

        ${i[n-1]} = ${i[n-1]} - 1;
        if (${i[n-2]} < ${r[n-2]} &&
            ${i[n-1]} < ${r[n-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}}function Fw(e,t,r){let n=e.indexOf(t);return e.map((e,t)=>t===n?`${e} - ${r}`:e).join()}function Fk(e){let{inputs:t,backend:r}=e,{input:n}=t;return AI({inputs:{x:r.texData.get(n.dataId).complexTensorInfos.imag},backend:r})}function FS(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n,i=ny.parseAxisParam(a,t[0].shape)[0],s=t.map(e=>e.shape);or.assertParamsConsistent(s,i);let o=or.computeOutShape(t.map(e=>e.shape),i);if(0===ny.sizeFromShape(o))return r.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter(e=>ny.sizeFromShape(e.shape)>0);return 1===l.length?AI({inputs:{x:l[0]},backend:r}):function e(t,r,n){let a=t[0].dtype;if("complex64"===a){let a=t.map(e=>Fd({inputs:{input:e},backend:n})),i=t.map(e=>Fk({inputs:{input:e},backend:n})),s=e(a,r,n),o=e(i,r,n),l=AC({inputs:{real:s,imag:o},backend:n});return a.forEach(e=>n.disposeIntermediateTensorInfo(e)),i.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),l}let i=n.shouldExecuteOnCPU(t);if("string"===a&&(i=!0),i){let e=t.map(e=>{let t=ny.sizeFromShape(e.shape.slice(r));return AP({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),i=e.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),s=Rb(i,or.computeOutShape(e.map(e=>e.shape),1),a,1===e[0].shape[0]),o=or.computeOutShape(t.map(e=>e.shape),r),l=n.makeTensorInfo(o,a,s);return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}let s=t.filter(e=>ny.sizeFromShape(e.shape)>0),o=e_.getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&s[0].shape.length>1;if(1===s.length){let e=o?new Ai(t[0].shape,Ah):new Af(t[0].shape,Ah);return n.runWebGLProgram(e,t,a)}let l=e_.getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(s.length>l){let t=[];for(let a=0;a<s.length;a+=l){let i=s.slice(a,a+l);t.push(e(i,r,n))}let a=e(t,r,n);for(let e of t)n.disposeIntermediateTensorInfo(e);return a}if(o){let e=new Fv(s.map(e=>e.shape),r);return n.runWebGLProgram(e,s,a)}let{tensors2D:u,outShape:h}=function(e,t,r){let n=or.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>AP({inputs:{x:e},attrs:{shape:[-1,ny.sizeFromShape(e.shape.slice(t))]},backend:r})),outShape:n}}(s,r,n),p=new Fx(u.map(e=>e.shape)),d=n.runWebGLProgram(p,u,a);u.forEach(e=>n.disposeIntermediateTensorInfo(e));let c=AP({inputs:{x:d},attrs:{shape:h},backend:n});return n.disposeIntermediateTensorInfo(d),c}(l,i,r)}class FI{constructor(e,t=!1,r=null,n=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;let i=e.padInfo.top,s=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,h=e.dilationWidth,p=e.filterHeight,d=e.filterWidth,c=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g="",y="";r&&(g=n?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:`
          float activation(float x) {
            ${r}
          }
        `,y="result = activation(result);"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${g}

      const ivec2 strides = ivec2(${o}, ${l});
      const ivec2 pads = ivec2(${i}, ${s});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${m?3:1}];

        ivec2 xRCCorner =
            ivec2(coords[${m?1:2}], coords[${m?2:3}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${p}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${c}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${m}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${1===f}) {

              if (${m}) {
                dotProd +=
                    getX(batch, xR, xC, ${c}) *
                    getW(wR, wC, ${c}, d2);
              } else {
                dotProd +=
                    getX(batch, ${c}, xR, xC) *
                    getW(wR, wC, ${c}, d2);
              }

            } else if (${2===f}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${c}, d2),
                getW(wR, wC, ${c} + 1, d2)
              );

              if (${m}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${c}),
                  getX(batch, xR, xC, ${c} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${c}, xR, xC),
                  getX(batch, ${c} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${3===f}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${c}, d2),
                getW(wR, wC, ${c} + 1, d2),
                getW(wR, wC, ${c} + 2, d2)
              );

              if (${m}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${c}),
                  getX(batch, xR, xC, ${c} + 1),
                  getX(batch, xR, xC, ${c} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${c}, xR, xC),
                  getX(batch, ${c} + 1, xR, xC),
                  getX(batch, ${c} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${y}
        setOutput(result);
      }
    `}}class FC{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let t=e.padInfo.front,r=e.padInfo.top,n=e.padInfo.left,a=e.strideDepth,i=e.strideHeight,s=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,h=e.filterDepth,p=e.filterHeight,d=e.filterWidth,c=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${a}, ${i}, ${s});
      const ivec3 pads = ivec3(${t}, ${r}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${o};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${p}; wR++) {
            int xR = xRCorner + wR * ${l};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${c}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${1===f}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${c}) *
                  getW(wF, wR, wC, ${c}, d2);
              } else if (${2===f}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${c}),
                  getX(batch, xF, xR, xC, ${c} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${c}, d2),
                  getW(wF, wR, wC, ${c} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${3===f}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${c}),
                  getX(batch, xF, xR, xC, ${c} + 1),
                  getX(batch, xF, xR, xC, ${c} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${c}, d2),
                  getW(wF, wR, wC, ${c} + 1, d2),
                  getW(wF, wR, wC, ${c} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class FN{constructor(e,t=!1,r=null,n=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=E8(this.outputShape.length);let i=e.padInfo.left,s=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,h=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<u;e++)h+=`
           vec4 xTexelC${2*e};
           int xTexelC${2*e}Ready;
           vec4 xTexelC${2*e+1};
           int xTexelC${2*e+1}Ready;
           vec4 xC${e};`;h+=`
     for (int r = 0; r < ${l}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let e=0;e<u;e++)h+=`
           xTexelC${2*e} = vec4(0.0);
           xTexelC${2*e}Ready = 0;
           xTexelC${2*e+1} = vec4(0.0);
           xTexelC${2*e+1}Ready = 0;
           xC${e} = vec4(0.0);`;h+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let t=0;t<(u+1)/2;t++){let r=2*t;if(h+=`
           xC = xCCorner + ${r*o};
           `,1===s){if(r<u&&(i%2==1?(h+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }
               `,1===o&&r>0?h+=`
                 xC${r} = vec4(xTexelC${r-2}.zw, xTexelC${r}.xy);
                 `:h+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${r} = vec4(previous.zw, xTexelC${r}.xy);
                   } else {
                     xC${r} = vec4(0.0, 0.0, xTexelC${r}.xy);
                   }
                   `):h+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }

                 xC${r} = xTexelC${r};
                 `,r+1<u)){let e=i%2==0?ny.nearestLargerEven(o):o;o%2==0&&i%2==1||o%2!=0&&i%2!=1?(h+=`
                   xCOffset = xC + imod(pads[1], 2) + ${e};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r+1}Ready == 0) {
                     xTexelC${r+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${r+1}.zw = vec2(0.0);
                     }
                     xTexelC${r+1}Ready = 1;
                   }
                   `,o>1?h+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${r+1} = vec4(previous.zw, xTexelC${r+1}.xy);
                     } else {
                      xC${r+1} = vec4(0.0, 0.0, xTexelC${r+1}.xy);
                     }
                     `:h+=`
                     xC${r+1} = vec4(xTexelC${r}.zw, xTexelC${r+1}.xy);
                     `):1===e?h+=`
                     xC${r+1} = xTexelC${r};
                     `:h+=`
                     xCOffset = xC + ${e};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r+1}Ready == 0) {
                       xTexelC${r+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${r+1}.zw = vec2(0.0);
                       }
                       xTexelC${r+1}Ready = 1;
                     }

                     xC${r+1} = xTexelC${r+1};
                     `}}else r<u&&(i%2==1?(h+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${r+1}Ready == 0) {
                   xTexelC${r+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${r+1}.zw = vec2(0.0);
                   }
                   xTexelC${r+1}Ready = 1;
                 }

                 xC${r} = vec4(xTexelC${r}.zw, xTexelC${r+1}.zw);
               `,r+1<u&&(h+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${r+1} = vec4(xTexelC${r+1}.xy, final.xy);
                 `)):(h+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${r}Ready == 0) {
                   xTexelC${r} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${r}.zw = vec2(0.0);
                   }
                   xTexelC${r}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${r+1}Ready == 0) {
                   xTexelC${r+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${r+1}.zw = vec2(0.);
                   }
                   xTexelC${r+1}Ready = 1;
                 }

                 xC${r} = vec4(
                   xTexelC${r}.xy, xTexelC${r+1}.xy);
               `,r+1<u&&(h+=`
                   xC${r+1} = vec4(xTexelC${r}.zw, xTexelC${r+1}.zw);
                 `)));r<u&&(h+=`
             wTexel = getW(r, ${r}, d1, d2);
             dotProd += xC${r}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${r}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,r+1<u&&(h+=`
               wTexel = getW(r, ${r+1}, d1, d2);
               dotProd += xC${r+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${r+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}h+=`
     }
   
     }
   
     }
   `;let p="",d="";r&&(p=n?`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${r}
         }`:a?`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${r}
         }`:`vec4 activation(vec4 x) {
           ${r}
         }`,d="result = activation(result);"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${h}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${t?"result += getBiasAtOutCoords();":""}
         ${d}
         setOutput(result);
       }
     `}}class FT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=E8(this.outputShape.length);let{dataFormat:r}=t,n=EW(),a="channelsLast"===r,i=a?1:2,s=a?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`,l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`
          blockIndex = rc.z + ${t};
          pos = rc.y + ${e};

          ${o}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${s}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${a}) {
                  innerDims = vec2(d1, ch);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${l}

        ${n.output} = result;
      }
    `}}function F$(e,t){let r=e.length;return r>=3?t?[...e.slice(0,-3),e[r-3]*e[r-2],e[r-1]]:[...e.slice(0,-3),e[r-3],e[r-2]*e[r-1]]:!t&&1===r&&e[0]>1?[e[0],1]:null}function FE({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let l,u=e.shape,h=n.texData.get(e.dataId),p=r.inChannels,d=u[0]*u[1]*u[2],c=r.outChannels,f="channelsLast"===r.dataFormat,m=[];if(null!=i){let e=F$(i.shape,f);null!=e&&(i=AP({inputs:{x:i},backend:n,attrs:{shape:e}}),m.push(i))}if(null!=a){let e=F$(a.shape,f);null!=e&&(a=AP({inputs:{x:a},backend:n,attrs:{shape:e}}),m.push(a))}if(!((1===d||1===c)&&p>1e3)&&h.isPacked&&f&&null!=h.texture&&u[2]%2!=0&&ny.arraysEqual(h.shape.slice(-3),u.slice(-3))){let p=u[0]*u[1]*(u[2]+1),d={dataId:e.dataId,shape:[1,p,r.inChannels],dtype:e.dtype},c=h.shape;h.shape=h.shape.slice(),h.shape[h.shape.length-2]++,ny.assert(EO(h.shape,d.shape),()=>`packed reshape ${h.shape} to ${d.shape} isn't free`);let f=AP({inputs:{x:t},backend:n,attrs:{shape:[1,r.inChannels,r.outChannels]}});m.push(f);let g=AK({a:d,b:f,backend:n,transposeA:!1,transposeB:!1,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s}),y=n.texData.get(g.dataId);ny.assert(y.isPacked,()=>"batchMatMul result is expected to be packed"),h.shape=c,y.shape=r.outShape,(l=AI({inputs:{x:g},backend:n})).shape=r.outShape,m.push(g)}else{let u=r.outHeight*r.outWidth,h=AP({inputs:{x:e},backend:n,attrs:{shape:f?[r.batchSize,u,r.inChannels]:[r.batchSize,r.inChannels,u]}}),p=AP({inputs:{x:t},backend:n,attrs:{shape:[1,r.inChannels,r.outChannels]}}),d=AK({a:f?h:p,b:f?p:h,transposeA:!f,transposeB:!1,backend:n,bias:a,activation:o,preluActivationWeights:i,leakyreluAlpha:s});l=AP({inputs:{x:d},backend:n,attrs:{shape:r.outShape}}),m.push(h),m.push(p),m.push(d)}for(let e of m)n.disposeIntermediateTensorInfo(e);return l}function FR({x:e,filter:t,convInfo:r,backend:n,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:s=0,activation:o=null}){let{filterWidth:l,filterHeight:u,inChannels:h,outWidth:p,outHeight:d,dataFormat:c}=r,f="channelsLast"===c,m=l*u*h,g=d*p,y=[r.batchSize,m,g],b=[];if(null!=i){let e=F$(i.shape,f);null!=e&&(i=AP({inputs:{x:i},backend:n,attrs:{shape:e}}),b.push(i))}if(null!=a){let e=F$(a.shape,f);null!=e&&(a=AP({inputs:{x:a},backend:n,attrs:{shape:e}}),b.push(a))}let x=AP({inputs:{x:t},backend:n,attrs:{shape:[1,m,ny.sizeFromShape(t.shape)/m]}});b.push(x);let v=new FT(y,r),w=[e.shape,[r.padInfo.top,r.padInfo.left],[r.strideHeight,r.strideWidth],[r.dilationHeight,r.dilationWidth],[r.inChannels],[r.filterWidth*r.inChannels],[r.outWidth]],k=n.runWebGLProgram(v,[e],"float32",w),S=AP({inputs:{x:k},backend:n,attrs:{shape:y}});b.push(k),b.push(S);let I=null!=a,C=null!=i,N="leakyrelu"===o,T=o?A_(o,!0):null,$=new AD(f?S.shape:x.shape,f?x.shape:S.shape,f?[r.batchSize,g,r.outChannels]:[r.batchSize,r.outChannels,g],!0,!1,I,T,C,N),E=f?[S,x]:[x,S];if(a&&E.push(a),C&&E.push(i),N){let e=n.makeTensorInfo([],"float32",ny.createScalarValue(s,"float32"));E.push(e),b.push(e)}let R=n.runWebGLProgram($,E,"float32"),A=AP({inputs:{x:R},backend:n,attrs:{shape:r.outShape}});for(let e of(b.push(R),b))n.disposeIntermediateTensorInfo(e);return A}class FA{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,r=e.strideWidth,n=e.padInfo.top,a=e.padInfo.left,i="channelsLast"===e.dataFormat;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              ${i?`float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`:`float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class FF{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,r=e.filterWidth,n=e.strideHeight,a=e.strideWidth,i="channelsLast"===e.dataFormat,s=t-1-e.padInfo.top,o=r-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${s}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${i?3:1}];

        ivec2 dyCorner = ivec2(coords[${i?1:2}], coords[${i?2:3}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class F_{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideDepth,r=e.strideHeight,n=e.strideWidth,a=e.padInfo.front,i=e.padInfo.top,s=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${a};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${r} - ${i};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${s};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class FD{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterDepth,r=e.filterHeight,n=e.filterWidth,a=e.strideDepth,i=e.strideHeight,s=e.strideWidth,o=t-1-e.padInfo.front,l=r-1-e.padInfo.top,u=n-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${o}, ${l}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${a}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${r}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${r} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${s}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class FO{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=E8(this.outputShape.length);let t=e.filterHeight,r=e.filterWidth,n=t-1-e.padInfo.top,a=r-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${n}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            int wCPerm = ${r} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `}}const FM=AA({opSnippet:AR+`
  return cos(x);
`,packedOpSnippet:`
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${Ak}
  return result;
`}),Fz=AA({opSnippet:`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`});class FP{constructor(e,t,r,n,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,s,o,l]=e,[u]=t,[h,p]=r;this.outputShape=[u,h,p,l];let[d,c]=[`${s-1}.0`,`${o-1}.0`],[f,m,g]=h>1?[`${(s-1)/(h-1)}`,"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[y,b,x]=p>1?[`${(o-1)/(p-1)}`,"(x2-x1) * width_ratio",`x1*${c} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${c}`];this.userCode=`
      const float height_ratio = float(${f});
      const float width_ratio = float(${y});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${m};
        float width_scale = ${b};

        float in_y = ${g};
        if( in_y < 0.0 || in_y > ${d} ) {
          setOutput(float(${a}));
          return;
        }
        float in_x = ${x};
        if( in_x < 0.0 || in_x > ${c} ) {
          setOutput(float(${a}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${+("bilinear"===n)} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}}(b=I||(I={})).Prod="*",b.Sum="+";class FL{constructor(e,t,r,n){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let a=this.outputShape.length,i=this.op===I.Prod?"1.0":"0.0",s=r?i:`getX(${FB(a,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1],l="",u="";r?(l=n?`end != ${o-1}`:"end != 0",u=n?"end + 1":"end - 1"):(l=n?`end + pow2 < ${o}`:"end >= pow2",u=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${E1(a)} coords = getOutputCoords();
        int end = ${FW(a,"coords",this.op)};
        float val = ${s};
        int pow2 = int(pow(2.0, index));
        if (${l}) {
          int idx = ${u};
          ${FW(a,"coords",this.op)} = idx;
          val ${this.op}= getX(${FB(a,"coords",this.op)});
        }
        setOutput(val);
      }
    `}}function FB(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}function FW(e,t,r){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${r} for rank ${e} is not yet supported`)}function FU(e,t,r,n,a,i){let s=t.shape.length,o=or.getAxesPermutation([n],s),l=t;null!=o&&(l=Aj({inputs:{x:t},backend:r,attrs:{perm:o}}));let u=or.getInnerMostAxes(1,s)[0];if(u!==s-1)throw Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${n}`);let h=l.shape[u],p=AI({inputs:{x:l},backend:r});for(let t=0;t<=Math.ceil(Math.log2(h))-1;t++){let n=new FL(e,l.shape,!1,i),a=[[t]],s=p;p=r.runWebGLProgram(n,[p],p.dtype,a),r.disposeIntermediateTensorInfo(s)}if(a){let t=new FL(e,l.shape,a,i),n=p;p=r.runWebGLProgram(t,[p],p.dtype),r.disposeIntermediateTensorInfo(n)}if(null!=o){let e=Aj({inputs:{x:p},backend:r,attrs:{perm:or.getUndoAxesPermutation(o)}});return r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(l),e}return p}class FV{constructor(e,t,r){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=r,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class FG{constructor(e,t=!1,r=null,n=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=E8(this.outputShape.length);let i=e.filterHeight,s=e.filterWidth,o=e.outChannels/e.inChannels,l="",u="";r&&(l=n?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:`
          float activation(float x) {
            ${r}
          }
        `,u="result = activation(result);"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${l}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${s}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${u}
        setOutput(result);
      }
    `}}class FH{constructor(e,t=!1,r=null,n=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=E8(this.outputShape.length);let i=e.outChannels/e.inChannels,s=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,h=e.filterWidth,p=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<h;e++)p+=`
          vec4 xTexelC${2*e};
          int xTexelC${2*e}Ready;
          vec4 xTexelC${2*e+1};
          int xTexelC${2*e+1}Ready;
          vec4 xC${e};`;p+=`
    for (int r = 0; r < ${u}; r++) {
      `;for(let e=0;e<h;e++)p+=`
          xTexelC${2*e} = vec4(0.0);
          xTexelC${2*e}Ready = 0;
          xTexelC${2*e+1} = vec4(0.0);
          xTexelC${2*e+1}Ready = 0;
          xC${e} = vec4(0.0);`;p+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let e=0;e<(h+1)/2;e++){let t=2*e;if(p+=`
          xC = xCCorner + ${t*l};
          `,1===o){if(t<h&&(s%2==1?(p+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }
              `,1===l&&t>0?p+=`
                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);
                `:p+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);
                  } else {
                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);
                  }
                  `):p+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xC${t} = xTexelC${t};
                `,t+1<h)){let e=s%2==0?ny.nearestLargerEven(l):l;l%2==0&&s%2==1||l%2!=0&&s%2!=1?(p+=`
                  xCOffset = xC + imod(pads[1], 2) + ${e};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${t+1}.zw = vec2(0.0);
                    }
                    xTexelC${t+1}Ready = 1;
                  }
                  `,l>1?p+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);
                    } else {
                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);
                    }
                    `:p+=`
                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);
                    `):1===e?p+=`
                    xC${t+1} = xTexelC${t};
                    `:p+=`
                    xCOffset = xC + ${e};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${t+1}.zw = vec2(0.0);
                      }
                      xTexelC${t+1}Ready = 1;
                    }

                    xC${t+1} = xTexelC${t+1};
                    `}}else t<h&&(s%2==1?(p+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.0);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
              `,t+1<h&&(p+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);
                `)):(p+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(
                  xTexelC${t}.xy, xTexelC${t+1}.xy);
              `,t+1<h&&(p+=`
                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
                `)));t<h&&(p+=`
            wTexel = getW(r, ${t}, d1, q);
            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);
          `,t+1<h&&(p+=`
              wTexel = getW(r, ${t+1}, d1, q);
              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);
            `))}p+=`
    }
  
      }
    `;let d="",c="";r&&(d=n?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${r}
        }`:a?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${r}
        }`:`vec4 activation(vec4 x) {
          ${r}
        }`,c="result = activation(result);"),t&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${d}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${t?"result += getBiasAtOutCoords();":""}
        ${c}
        setOutput(result);
      }
    `}}class Fj{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,r=e.strideWidth,n=e.padInfo.top,a=e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${r} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class FK{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,r=e.filterWidth,n=e.strideHeight,a=e.strideWidth,i=t-1-e.padInfo.top,s=r-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${s});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${r}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${r} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${o}; dm++) {
              int d2 = d1 * ${o} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Fq{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}}class FX{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let{inHeight:t,inWidth:r,padInfo:n,strideHeight:a,strideWidth:i,filterHeight:s,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:h,left:p}=n;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${i});
      const ivec2 pads = ivec2(${h}, ${p});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${s}; h++) {
          int hIn = hBeg + h * ${l};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${o}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${r}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}}const FY=AA({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`}),FZ=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,FQ=AF({opSnippet:"return float(a == b);",packedOpSnippet:`
  return vec4(equal(a, b));
`,dtype:"bool",cpuKernelImpl:Rx}),FJ=AA({opSnippet:`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${or.ERF_P};
  float a1 = ${or.ERF_A1};
  float a2 = ${or.ERF_A2};
  float a3 = ${or.ERF_A3};
  float a4 = ${or.ERF_A4};
  float a5 = ${or.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`}),F0=AA({opSnippet:AR+`
  return exp(x);
`,packedOpSnippet:`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,cpuKernelImpl:Rv,dtype:"float32"});function F1(e){let{inputs:t,attrs:r,backend:n}=e,{dim:a}=r,{input:i}=t,s=i.shape.length,o=i.shape.slice(),l=a;return a<0&&(ny.assert(-(s+1)<=a,()=>`Axis must be in the interval [${-(s+1)}, ${s}]`),l=s+a+1),o.splice(l,0,1),AP({inputs:{x:i},backend:n,attrs:{shape:o}})}const F2="return exp(x) - 1.0;",F3=AA({opSnippet:F2,packedOpSnippet:F2,cpuKernelImpl:Rw});class F4{constructor(e,t,r){let n;this.variableNames=["real","imag"];let a=t[1];this.outputShape=t;let i=r?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,s=r?`${a}.0`:"1.0";if("real"===e)n="return real * expR - imag * expI;";else if("imag"===e)n="return real * expI + imag * expR;";else throw Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${i};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${n}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${a});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${a}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${s};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}}function F6(e,t,r){let n=r.texData.get(e.dataId),a=ny.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],s=AP({inputs:{x:e},backend:r,attrs:{shape:[a/i,i]}}),o=s.shape,l=new F4("real",o,t),u=new F4("imag",o,t),h=[{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:o},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:o}],p=r.runWebGLProgram(l,h,"float32"),d=r.runWebGLProgram(u,h,"float32"),c=AC({inputs:{real:p,imag:d},backend:r});r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d);let f=AP({inputs:{x:c},backend:r,attrs:{shape:e.shape}});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(c),f}class F5{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}}function F8(e){let{backend:t,attrs:r}=e,{shape:n,value:a}=r,{dtype:i}=r;if("string"===(i=i||ny.inferDtype(a))){let e=ny.getArrayFromDType(i,ny.sizeFromShape(n));return e.fill(a),t.makeTensorInfo(n,i,e)}{let e=new F5(n,a),r=[[a]];return t.runWebGLProgram(e,[],i,r)}}class F7{constructor(e){this.variableNames=["Image"],this.outputShape=[];let t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}}const F9="return floor(x);",_e=AA({opSnippet:F9,packedOpSnippet:F9,cpuKernelImpl:Rk}),_t=AF({opSnippet:`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,packedOpSnippet:`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,dtype:"int32"});class _r{constructor(e){this.variableNames=["A"];let t=EW(),[r,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${r}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}}class _n{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let t=EW(),[r,n]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${r}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}}let _a=e_.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class _i{constructor(e,t,r,n){this.sliceDim=e,this.strides=t,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=r;let a=E1(r.length),i=`
    int index;`;for(let e=0;e<this.sliceDim;e++)i+=`
          index = round(getIndices(coords[0], ${e}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};
          flattenIndex += index * ${this.strides[e]};`;this.userCode=`
         void main() {
          ${a} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}}class _s{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;let r=E1(this.rank),n=function(e,t){let r=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let t=0;t<e.length;t++)2===t?n.push("index"):n.push(`${r[t]}`);return n.join()}(e,0);this.userCode=`
      void main() {
        ${r} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}}function _o(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,indices:i}=t,{axis:s,batchDims:o}=n,l=ny.parseAxisParam(s,a.shape)[0];if(e_.get("DEBUG")){let e=r.readSync(i.dataId),t=a.shape[l];for(let r=0;r<e.length;++r){let n=e[r];ny.assert(n<=t-1&&n>=0,()=>`GatherV2: the index value ${n} is not in [0, ${t-1}]`)}}let u=or.segment_util.collectGatherOpShapeInfo(a,i,l,o),h=ny.sizeFromShape(i.shape),p=[],d=AP({inputs:{x:a},backend:r,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),c=AP({inputs:{x:i},backend:r,attrs:{shape:[u.batchSize,h/u.batchSize]}});p.push(d),p.push(c);let f=[u.batchSize,u.outerSize,h/u.batchSize,u.sliceSize];if(r.shouldExecuteOnCPU([a,i])||"string"===a.dtype){let e=r.bufferSync(c),t=RI(r.bufferSync(d),e,f);return p.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.makeTensorInfo(u.outputShape,t.dtype,t.values)}let m=new _s(d.shape,f),g=r.runWebGLProgram(m,[d,c],d.dtype);p.push(g);let y=AP({inputs:{x:g},backend:r,attrs:{shape:u.outputShape}});return p.forEach(e=>r.disposeIntermediateTensorInfo(e)),y}const _l=AF({opSnippet:"return float(a > b);",packedOpSnippet:`
  return vec4(greaterThan(a, b));
`,cpuKernelImpl:RC,dtype:"bool"}),_u=AF({opSnippet:"return float(a >= b);",packedOpSnippet:`
  return vec4(greaterThanEqual(a, b));
`,dtype:"bool",cpuKernelImpl:RN}),_h=AA({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),_p=AA({opSnippet:"return float(isinf(x));",dtype:"bool"}),_d=AA({opSnippet:"return float(isnan(x));",dtype:"bool"}),_c=AF({opSnippet:"return float(a < b);",packedOpSnippet:`
  return vec4(lessThan(a, b));
`,cpuKernelImpl:RT,dtype:"bool"}),_f=AF({opSnippet:"return float(a <= b);",packedOpSnippet:`
  return vec4(lessThanEqual(a, b));
`,cpuKernelImpl:R$,dtype:"bool"}),_m=AA({opSnippet:AR+`
  return x < 0.0 ? 0./0. : log(x);
`,packedOpSnippet:`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,cpuKernelImpl:RR}),_g=AA({opSnippet:AR+`
  return log(1.0 + x);
`}),_y=AF({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,dtype:"bool"}),_b=AA({opSnippet:"return float(!(x >= 1.0));"}),_x=AF({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,dtype:"bool"});class _v{constructor(e,t,r,n,a){let i;this.variableNames=["x"],this.outputShape=[];let s=e[3]-1;this.outputShape=e;let o=`float(${r}) + float(${n}) * sum`;i=.5===a?`inversesqrt(${o})`:1===a?`1.0/(${o})`:`exp(log(${o}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${t}; j <= ${t}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${s}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${i};
        setOutput(val);
      }
    `}}class _w{constructor(e,t,r,n,a){let i;this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let s=e[3]-1;this.outputShape=e;let o=`float(${r}) + float(${n}) * sum`;i=.5===a?`inversesqrt(${o})`:1===a?`1.0/(${o})`:`exp(log(${o}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${t};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${t}; j <= ${t}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${s}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${i};
        setOutput(result);
      }
    `}}class _k{constructor(e,t,r,n,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=r,this.alpha=n,this.beta=a,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${r});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${a})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${a});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}}function _S(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{reductionIndices:s,keepDims:o}=a,l=i.shape.length,u=ny.parseAxisParam(s,i.shape),h=u,p=or.getAxesPermutation(h,l),d=null!=p,c=n.shouldExecuteOnCPU([i]),f=i;if(d){if(c){let e=n.texData.get(f.dataId).values,t=Array(l);for(let e=0;e<t.length;e++)t[e]=i.shape[p[e]];let r=R6(e,i.shape,i.dtype,p,t);f=n.makeTensorInfo(t,i.dtype),n.texData.get(f.dataId).values=r}else f=AG(i,p,n);h=or.getInnerMostAxes(h.length,l)}or.assertAxesAreInnerMostDims("max",h,l);let[m,g]=or.computeOutAndReduceShapes(f.shape,h),y=m;if(o&&(y=or.expandShapeToKeepDim(m,u)),c){let e=RA(n.texData.get(f.dataId).values,ny.sizeFromShape(g),y,i.dtype);t=n.makeTensorInfo(y,i.dtype),n.texData.get(t.dataId).values=e}else t=function(e,t,r,n){let a=ny.sizeFromShape(t),i=ny.sizeFromShape(e.shape),s=AP({inputs:{x:e},attrs:{shape:[i/a,a]},backend:n}),o=AW(s,e.dtype,"max",n),l=AP({inputs:{x:o},attrs:{shape:r},backend:n});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),l}(f,g,y,n);return d&&n.disposeIntermediateTensorInfo(f),t}const _I=AF({opSnippet:Av+`
  return max(a, b);
`,packedOpSnippet:`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+Ak+`
  return result;
`,cpuKernelImpl:RF});class _C{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideHeight,r=e.strideWidth,n=e.dilationHeight,a=e.effectiveFilterHeight,i=e.effectiveFilterWidth,s=a-1-e.padInfo.top,o=i-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${s}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${a};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${a*i-1} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}}class _N{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideDepth,r=e.strideHeight,n=e.strideWidth,a=e.dilationDepth,i=e.dilationHeight,s=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,h=o-1-e.padInfo.front,p=l-1-e.padInfo.top,d=u-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${h}, ${p}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${o};
           wD += ${a}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${l};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${r}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${s}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${o*l*u-1} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${l} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}const _T=AF({opSnippet:Av+`
  return min(a, b);
`,packedOpSnippet:`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+Ak+`
  return result;
`,cpuKernelImpl:R_});class _${constructor(e,t,r){this.variableNames=["x"],this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let n=e.length,a=E1(n),i=t.map(e=>e[0]).join(","),s=t.map((t,r)=>t[0]+e[r]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),l=+("reflect"!==r);if(1===n){this.userCode=`
        int start = ${i};
        int end = ${s};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${l};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${l};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${i});
      ${a} end = ${a}(${s});

      void main() {
        ${a} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${l};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};
          }
        }
        ${a} coords = outC - start;
        setOutput(getX(${o}));
      }
    `}}class _E{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let n=e.length,a=E1(n),i=t.map(e=>e[0]).join(","),s=t.map((t,r)=>t[0]+e[r]).join(","),o=R7("rc",n),l=R7("source",n),u=`${o[n-1]} < ${this.outputShape[n-1]}`,h=1===n?"source":`vec2(${l.slice(-2).join()})`,p=+("reflect"!==r),d="";if(1===n){let e=`
        ${a} source = rc;
        if (source < start) {
          source = start * 2 - source - ${p};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${p};
        }
        source -= start;
      `;d=`
        ${a} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${l.join()}), ${h});
        ${o[n-1]} += 1;
        if(${u}) {
          ${e}
          result[1] = getChannel(getX(${l.join()}), ${h});
        }
      `}else{let e=`
        ${a} source = rc;
        ${a} lt = ${a}(lessThan(source, start));
        ${a} gte = ${a}(greaterThanEqual(source, end));
        ${a} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${p}) +
                gte * ((end - 1) * 2 - source + ${p});
        source -= start;
      `;d=`
        ${a} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${l.join()}), ${h});
        ${o[n-1]} += 1;
        if(${u}) {
          ${e}
          result[1] = getChannel(getX(${l.join()}), ${h});
        }
        rc = outputLoc;
        ${o[n-2]} += 1;
        if(${o[n-2]} < ${this.outputShape[n-2]}) {
          ${e}
          result[2] = getChannel(getX(${l.join()}), ${h});
          ${o[n-1]} += 1;
          if(${u}) {
            ${e}
            result[3] = getChannel(getX(${l.join()}), ${h});
          }
        }
      `}this.userCode=`
      const ${a} start = ${a}(${i});
      const ${a} end = ${a}(${s});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `}}const _R=AF({opSnippet:`if (b == 0.0) return NAN;
  return mod(a, b);`,packedOpSnippet:`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+Ak+`
  return result;
`});class _A{constructor(e,t,r){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,r],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}}const _F=AF({opSnippet:`
if (a == b) {
  return 1.0;
};
return a / b;`,packedOpSnippet:`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,checkOutOfBounds:!0}),__="return a - b;",_D=AF({opSnippet:__,packedOpSnippet:__,supportsComplex:!0,cpuKernelImpl:R2});function _O(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{dim:i}=n,s=ny.parseAxisParam([i],a.shape),o=_S({inputs:{x:a},backend:r,attrs:{reductionIndices:s,keepDims:!1}}),l=or.expandShapeToKeepDim(o.shape,s),u=AP({inputs:{x:o},backend:r,attrs:{shape:l}}),h=_D({inputs:{a:a,b:u},backend:r}),p=F0({inputs:{x:h},backend:r}),d=AH({inputs:{x:p},backend:r,attrs:{axis:s,keepDims:!1}}),c=AP({inputs:{x:d},backend:r,attrs:{shape:l}}),f=_F({inputs:{a:p,b:c},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(u),r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(c),f}const _M=As+`
  return -x;
`,_z=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,_P=cS.nonMaxSuppressionV3Impl,_L=cS.nonMaxSuppressionV4Impl,_B=cS.nonMaxSuppressionV5Impl;class _W{constructor(e,t,r,n){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${r}),
                      float(index == coords.y)));
      }
    `}}function _U(e){let{inputs:t,backend:r}=e,{x:n}=t;if("complex64"!==n.dtype)return F8({attrs:{shape:n.shape,dtype:n.dtype,value:"string"===n.dtype?"":0},backend:r});{let e=Fd({inputs:{input:n},backend:r}),t=_U({inputs:{x:e},backend:r}),a=Fk({inputs:{input:n},backend:r}),i=_U({inputs:{x:a},backend:r}),s=AC({inputs:{real:t,imag:i},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),s}}class _V{constructor(e,t,r){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let n=e.length,a=E1(n),i=t.map(e=>e[0]).join(","),s=t.map((t,r)=>t[0]+e[r]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(1===n){this.userCode=`
        int start = ${i};
        int end = ${s};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${i});
      ${a} end = ${a}(${s});

      void main() {
        ${a} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${a} coords = outC - start;
          setOutput(getX(${o}));
        }
      }
    `}}class _G{constructor(e,t,r){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,r)=>t[0]+e[r]+t[1]);let n=e.length,a=E1(n),i=t.map(e=>e[0]).join(","),s=t.map((t,r)=>t[0]+e[r]).join(","),o=R7("rc",n),l=R7("source",n),u=`${o[n-1]} < ${this.outputShape[n-1]}`,h=1===n?"source":`vec2(${l.slice(-2).join()})`,p=[`${a} rc = outputLoc;`,`${o[n-1]} += 1;
       if(${u}) {
      `,1===n?"":`}
       rc = outputLoc;
       ${o[n-2]} += 1;
       if(${o[n-2]} < ${this.outputShape[n-2]}) {`,1===n?"":`  ${o[n-1]} += 1;
         if(${u}) {`],d=1===n?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",c="";for(let e=0,t=1===n?2:4;e<t;e++)c+=`
        ${p[e]}
        if (${d}) {
          result[${e}] = float(value);
        } else {
          ${a} source = rc - start;
          result[${e}] = getChannel(getX(${l.join()}), ${h});
        }
      `;c+=1===n?"} ":"}}",this.userCode=`
      const ${a} start = ${a}(${i});
      const ${a} end = ${a}(${s});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${c}
        setOutput(result);
      }
    `}}const _H=e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{paddings:i,constantValue:s}=n;if(0===ny.sizeFromShape(a.shape))return F8({backend:r,attrs:{shape:i.map((e,t)=>e[0]+a.shape[t]+e[1]),value:s,dtype:a.dtype}});let o=e_.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _G(a.shape,i,s):new _V(a.shape,i,s),l=[[s]];return r.runWebGLProgram(o,[a],a.dtype,l)},_j=AF({opSnippet:`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,packedOpSnippet:`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+Ak+`
  return result;
`}),_K=e=>{let{backend:t,attrs:r}=e,{start:n,stop:a,step:i,dtype:s}=r,o=RW(n,a,i,s);return t.makeTensorInfo([o.length],s,o)},_q=AA({opSnippet:"return 1.0 / x;"}),_X=AA({opSnippet:As+`
  return (x < 0.0) ? 0.0 : x;
`,packedOpSnippet:`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`}),_Y=AA({opSnippet:As+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,packedOpSnippet:`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`});class _Z{constructor(e,t,r,n,a){this.variableNames=["A"],this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,r,l];let u=[n&&t>1?s-1:s,n&&r>1?o-1:o],h=[n&&t>1?t-1:t,n&&r>1?r-1:r];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/h[0]},
          ${u[1]/h[1]});
      const vec2 inputShapeRC = vec2(${s}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}}class _Q{constructor(e,t,r,n,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,r,l];let u=[n&&t>1?s-1:s,n&&r>1?o-1:o],h=[n&&t>1?t-1:t,n&&r>1?r-1:r];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/h[0]},
          ${u[1]/h[1]},
          ${u[1]/h[1]});
      const vec3 inputShapeRC = vec3(${s}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${r-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}}class _J{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,a]=t,[,i,s]=e,o=[r&&i>1?n-1:n,r&&s>1?a-1:a],l=[r&&i>1?i-1:i,r&&s>1?s-1:s],u=o[0]/l[0],h=o[1]/l[1],p=1/u,d=1/h,c=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${p});
        const float invWidthScale = float(${d});

        const int winHeight = int(${c});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${s}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}class _0{constructor(e,t,r,n,a){this.variableNames=["A"],this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,r,l];let u=[n&&t>1?s-1:s,n&&r>1?o-1:o],h=[n&&t>1?t-1:t,n&&r>1?r-1:r];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/h[0]},
          ${u[1]/h[1]});
      const vec2 inputShapeRC = vec2(${s}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${n?"0.5":"0.0"})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}}class _1{constructor(e,t,r,n,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,s,o,l]=e;this.outputShape=[i,t,r,l];let u=[n&&t>1?s-1:s,n&&r>1?o-1:o],h=[n&&t>1?t-1:t,n&&r>1?r-1:r];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/h[0]},
          ${u[1]/h[1]},
          ${u[1]/h[1]});
      const vec3 inputShapeRC = vec3(${s}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${n?"0.5":"0.0"})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${r-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}}class _2{constructor(e,t,r){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,n,a]=t,[,i,s]=e,o=[r&&i>1?n-1:n,r&&s>1?a-1:a],l=[r&&i>1?i-1:i,r&&s>1?s-1:s],u=o[0]/l[0],h=o[1]/l[1],p=1/u,d=1/h,c=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${p});
        const float invWidthScale = float(${d});

        const int winHeight = int(${c});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${s}) {
              continue;
            }

            float sourceFracRow =
              float(${o[0]}) *
                (float(dyR) / float(${l[0]}));

            float sourceFracCol =
                float(${o[1]}) *
                  (float(dyC) / float(${l[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${r} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${a}) - 1),
                ${r} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}class _3{constructor(e,t){this.variableNames=["x"];let r=e.length;if(r>4)throw Error(`WebGL backend: Reverse of rank-${r} tensor is not yet supported`);if(this.outputShape=e,1===r){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}let n=e.map((r,n)=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`).join(","),a=E1(r);this.userCode=`
      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${n}));
      }
    `}}class _4{constructor(e,t){var r,n,a;this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let i=e.length;if(i>4)throw Error(`WebGL backend: Reverse of rank-${i} tensor is not yet supported`);this.outputShape=e;let s=R7("rc",i),o=`${s[i-1]} + 1 < ${this.outputShape[i-1]}`,l=`${s[i-2]} + 1 < ${this.outputShape[i-2]}`,u=E1(i);function h(r){let n=e.map((n,a)=>{var i,s;return i=a,s=r,-1!==t.indexOf(i)&&1!==e[i]?`${e[i]} - ${s[i]} - 1`:`${s[i]}`}),a=n.join(","),i=n.slice(-2).join(",");return`getChannel(getX(${a}), vec2(${i}))`}1===i?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${o}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${u} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${h(s.slice())};
          if(${o}){
            result.g = ${(r=s.slice())[i-1]="("+r[i-1]+" + 1)",h(r)};
          }
          if(${l}) {
            result.b = ${(n=s.slice())[i-2]="("+n[i-2]+" + 1)",h(n)};
            if(${o}) {
              result.a = ${(a=s.slice())[i-1]="("+a[i-1]+" + 1)",a[i-2]="("+a[i-2]+" + 1)",h(a)};
            }
          }
          setOutput(result);
        }
    `}}class _6{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let r=e[1],n=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${a}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${r}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}}const _5=AA({opSnippet:`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`}),_8=AA({opSnippet:"return inversesqrt(x);",cpuKernelImpl:RU});class _7{constructor(e,t,r,n,a,i,s=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let l=E1(a.length),u=E1(i.length),h="";1===r?h="i":2===r&&(h="i, j");let p=`getIndices(${h})`,d="";1===n?d="i":2===n&&(d="i, coords[1]");let c=`getUpdates(${d})`,f="";o&&(f="coords[0], coords[1]");let m=`getDefaultValue(${f})`;this.userCode=`
        ${l} strides = ${l}(${a});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${p});
              flattenedIndex += index * ${t>1?"strides[j]":"strides"};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${c};
              found = true;
            }
          }
          setOutput(mix(${m}, sum, float(found)));
        }
      `}}class _9{constructor(e,t,r,n,a,i,s=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=i;let l=E1(a.length),u=E1(i.length),h="";1===r?h="i":2===r&&(h="i, j");let p=`getIndices(${h})`,d="";1===n?d="i":2===n&&(d="i, coords[1]");let c=`getUpdates(${d})`,f="";o&&(f="coords[0], coords[1]");let m=`getDefaultValue(${f})`;this.userCode=`
        ${l} strides = ${l}(${a});

        void main() {
          ${u} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${e}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${t}; j+=2) {
              ivec4 index = round(${p});
              flattenedIndex += index.xz * ${t>1?"strides[j]":"strides"};
              if (j + 1 < ${t}) {
                flattenedIndex += index.yw * ${t>1?"strides[j + 1]":"strides"};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${c};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${m}, sum, found));
        }
      `}}class De{constructor(e,t,r,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,r];let a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,i=2===e_.getNumber("WEBGL_VERSION")?"while (left < right) {":a;this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${"left"===n?"<":"<="} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}}class Dt{constructor(e,t,r){let n,a;if(this.variableNames=["c","a","b"],this.outputShape=t,r>4)throw Error(`Where for rank ${r} is not yet supported`);if(1===r)a="resRC",n="resRC";else{let r=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],s=[];for(let n=0;n<t.length;n++)s.push(`${r[n]}`),n<e&&i.push(`${r[n]}`);n=i.join(),a=s.join()}let i=E1(r);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${a}));
        } else {
          setOutput(getB(${a}));
        }
      }
    `}}const Dr=AA({opSnippet:`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${or.SELU_SCALEALPHA};
  float scale = ${or.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`}),Dn=AA({opSnippet:AR+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,packedOpSnippet:`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,cpuKernelImpl:RG}),Da=AA({opSnippet:`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`}),Di=AA({opSnippet:AR+`
  return sin(x);
`,packedOpSnippet:`
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${Ak}
  return result;
`}),Ds=AA({opSnippet:`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`}),Do=AA({opSnippet:`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`}),Dl="return sqrt(x);",Du=AA({opSnippet:Dl,packedOpSnippet:Dl,cpuKernelImpl:RY}),Dh=AA({opSnippet:"return x * x;"}),Dp="return (a - b) * (a - b);",Dd=AF({opSnippet:Dp,packedOpSnippet:Dp});class Dc{constructor(e,t,r){this.variableNames=["x"],this.outputShape=r;let n=r.length,a=E1(r.length),i=E1(r.length),s="";if(1===n)s="coords * strides + begin";else{let e=0;s=r.map((t,n)=>(e++,1===r.length?`coords * strides[${n}] + begin[${n}]`:`coords[${e-1}] * strides[${n}] + begin[${n}]`)).join(",")}this.userCode=`
      ${a} begin = ${a}(${e});
      ${a} strides = ${a}(${t});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}}const Df=AA({opSnippet:"return tan(x);"}),Dm=AA({opSnippet:`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`});class Dg{constructor(e,t){this.variableNames=["A"];let r=Array(e.length);for(let n=0;n<r.length;n++)r[n]=e[n]*t[n];this.outputShape=r,this.rank=r.length;let n=E1(this.rank),a=function(e){let t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;let r=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],n=[];for(let t=0;t<e.length;t++)n.push(`imod(${r[t]}, ${e[t]})`);return n.join()}(e);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${a}));
      }
    `}}function Dy(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{reps:i}=n;if("string"===a.dtype||a.shape.length>5){let e=r.readSync(a.dataId),t="string"===a.dtype?e.map(e=>ny.decodeString(e)):e,n=R3(so(a.shape,a.dtype,t),i);return r.makeTensorInfo(n.shape,n.dtype,n.values)}let s=new Dg(a.shape,i);return r.runWebGLProgram(s,[a],a.dtype)}class Db{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}}class Dx{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}}function Dv(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function Dw(e){let t=1;for(;t<e;)t*=2;return t}class Dk{constructor(e,t,r,n,a,i){let s;switch(this.variableNames=["Image","Transforms"],this.outputShape=i,n){case"constant":default:s=1;break;case"reflect":s=2;break;case"wrap":s=3;break;case"nearest":s=4}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${s} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${s} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${s} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${a});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${a});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${"nearest"===r?1:2} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}}class DS{constructor(e,t){this.variableNames=["x","segmentIds"];let r=e.windowSize,n=e.batchSize,a=e.inSize,i=e.numSegments,s=i*Math.ceil(a/r);this.outputShape=[n,s];let o=4*Math.floor(r/4),l=r%4,u=`
        sumValue += dot(values, segFilter);
    `,h="";a%r>0&&(h=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `);let p="";a%r>0&&(p=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = 0.0;

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${p}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${r}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${o}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${u}
        }

        int inIdx = inOffset + ${o};
        if (${1===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${u}
        } else if (${2===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${u}
        } else if (${3===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${u}
        }
        setOutput(sumValue);
      }
    `}}for(const e of[{kernelName:ns,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{a:a,b:i,bias:s,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:h,leakyreluAlpha:p}=n;return AK({a:a,b:i,transposeA:l,transposeB:u,backend:r,bias:s,preluActivationWeights:o,leakyreluAlpha:p,activation:h})}},{kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n}=e,{x:a}=r;if(n.shouldExecuteOnCPU([a])&&"complex64"!==a.dtype){let e=RH(n.texData.get(a.dataId).values);return n.makeTensorInfo(a.shape,a.dtype,e)}return t=e_.getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Af(a.shape,Aq):new Ai(a.shape,Aq),n.runWebGLProgram(t,[a],a.dtype)}},{kernelName:eq,backendName:"webgl",kernelFunc:AX},{kernelName:eX,backendName:"webgl",kernelFunc:AY},{kernelName:"Add",backendName:"webgl",kernelFunc:AQ},{kernelName:eY,backendName:"webgl",kernelFunc:function e(t){let{inputs:r,backend:n}=t;if(1===r.length)return AI({inputs:{x:r[0]},backend:n});if(r.length>e_.getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){let t=Math.floor(r.length/2),a=e({inputs:r.slice(0,t),backend:n}),i=e({inputs:r.slice(t),backend:n});return e({inputs:[a,i],backend:n})}let a=r.map(e=>e.dtype).reduce((e,t)=>af(e,t)),i=r.map(e=>e.shape),s=e_.getBool("WEBGL_PACK")?new A0(r[0].shape,i):new AJ(r[0].shape,i);return n.runWebGLProgram(s,r,a)}},{kernelName:"All",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{axis:s,keepDims:o}=a,l=i.shape.length,u=ny.parseAxisParam(s,i.shape),h=u,p=or.getAxesPermutation(h,l),d=i;null!=p&&(d=Aj({inputs:{x:i},backend:n,attrs:{perm:p}}),h=or.getInnerMostAxes(h.length,l)),or.assertAxesAreInnerMostDims("all",h,l);let[c,f]=or.computeOutAndReduceShapes(d.shape,h),m=AP({inputs:{x:d},backend:n,attrs:{shape:[-1,ny.sizeFromShape(f)]}}),g=AW(m,m.dtype,"all",n);return t=o?AP({inputs:{x:g},backend:n,attrs:{shape:or.expandShapeToKeepDim(c,u)}}):AP({inputs:{x:g},backend:n,attrs:{shape:c}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=p&&n.disposeIntermediateTensorInfo(d),t}},{kernelName:"Any",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{axis:s,keepDims:o}=a,l=i.shape.length,u=ny.parseAxisParam(s,i.shape),h=u,p=or.getAxesPermutation(h,l),d=i;null!=p&&(d=Aj({inputs:{x:i},backend:n,attrs:{perm:p}}),h=or.getInnerMostAxes(h.length,l)),or.assertAxesAreInnerMostDims("any",h,l);let[c,f]=or.computeOutAndReduceShapes(d.shape,h),m=AP({inputs:{x:d},backend:n,attrs:{shape:[-1,ny.sizeFromShape(f)]}}),g=AW(m,m.dtype,"any",n);return t=o?AP({inputs:{x:g},backend:n,attrs:{shape:or.expandShapeToKeepDim(c,u)}}):AP({inputs:{x:g},backend:n,attrs:{shape:c}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=p&&n.disposeIntermediateTensorInfo(d),t}},{kernelName:eZ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n,s=ny.parseAxisParam(i,a.shape),o=or.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=Aj({inputs:{x:a},backend:r,attrs:{perm:o}})),s=or.getInnerMostAxes(s.length,l.shape.length)),or.assertAxesAreInnerMostDims("argMax",[s[0]],l.shape.length);let h=A3(r,l,s[0],"max");return u.forEach(e=>r.disposeIntermediateTensorInfo(e)),h}},{kernelName:eQ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i}=n,s=ny.parseAxisParam(i,a.shape),o=or.getAxesPermutation(s,a.shape.length),l=a,u=[];null!=o&&(u.push(l=Aj({inputs:{x:a},backend:r,attrs:{perm:o}})),s=or.getInnerMostAxes(s.length,l.shape.length)),or.assertAxesAreInnerMostDims("argMin",[s[0]],l.shape.length);let h=A3(r,l,s[0],"min");return u.forEach(e=>r.disposeIntermediateTensorInfo(e)),h}},{kernelName:eJ,backendName:"webgl",kernelFunc:A4},{kernelName:e0,backendName:"webgl",kernelFunc:A6},{kernelName:e1,backendName:"webgl",kernelFunc:A5},{kernelName:e3,backendName:"webgl",kernelFunc:A8},{kernelName:e2,backendName:"webgl",kernelFunc:A7},{kernelName:e4,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t;EL(a,"avgPool");let{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=n;ny.assert(or.eitherStridesOrDilationsAreOne(s,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${s} and dilations '1'`);let u=or.computePool2DInfo(a.shape,i,s,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&ny.arraysEqual(u.inShape,u.outShape))return AI({inputs:{x:a},backend:r});let h=new A9(u,"avg",!1);return r.runWebGLProgram(h,[a],"float32")}},{kernelName:e5,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dimRoundingMode:l,dataFormat:u}=n,h=new Fe(or.computePool3DInfo(a.shape,i,s,[1,1,1],o,l,u),"avg",!1);return r.runWebGLProgram(h,[a],"float32")}},{kernelName:e8,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,h=new Fr(or.computePool3DInfo(i.shape,s,o,[1,1,1],l,u));return r.runWebGLProgram(h,[a],i.dtype)}},{kernelName:e6,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t;EL([a,i],"avgPoolGrad");let{filterSize:s,strides:o,pad:l}=n,u=new Ft(or.computePool2DInfo(i.shape,s,o,1,l));return r.runWebGLProgram(u,[a],i.dtype)}},{kernelName:e7,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{a:a,b:i}=t,{transposeA:s,transposeB:o}=n;return AK({a:a,b:i,transposeA:s,transposeB:o,backend:r})}},{kernelName:tL,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:n,mean:a,variance:i,offset:s,scale:o}=e;ny.assert(a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),ny.assert(null==s||a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),ny.assert(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=r;null==l&&(l=.001);let u=[n,a,i],h=null;null!=s&&(h=s.shape,u.push(s));let p=null;null!=o&&(p=o.shape,u.push(o));let d=e_.getBool("WEBGL_PACK_NORMALIZATION")?new Fa(n.shape,a.shape,i.shape,h,p,l):new Fn(n.shape,a.shape,i.shape,h,p,l);return t.runWebGLProgram(d,u,u[0].dtype)}},{kernelName:e9,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,crops:s}=n;ny.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let o=i.reduce((e,t)=>e*t),l=or.getReshaped(a.shape,i,o),u=or.getPermuted(l.length,i.length),h=or.getReshapedPermuted(a.shape,i,o),p=or.getSliceBeginCoords(s,i.length),d=or.getSliceSize(h,s,i.length),c=[],f=AP({inputs:{x:a},backend:r,attrs:{shape:l}}),m=Aj({inputs:{x:f},backend:r,attrs:{perm:u}}),g=AP({inputs:{x:m},backend:r,attrs:{shape:h}}),y=Fl({inputs:{x:g},backend:r,attrs:{begin:p,size:d}});return c.push(f),c.push(m),c.push(g),c.forEach(e=>r.disposeIntermediateTensorInfo(e)),y}},{kernelName:te,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s}=n,o=Rc(r.readSync(a.dataId),r.readSync(i.dataId),i.dtype,i.shape,s);return r.makeTensorInfo([s],i.dtype,o)}},{kernelName:tt,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n}=e,{a:a,b:i}=r,s=e_.getBool("WEBGL_PACK_BINARY_OPERATIONS"),o=e_.getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([a,i])||1===o){let e=n.texData.get(a.dataId).values,t=n.texData.get(i.dataId).values,[r,s]=Rm(a.shape,i.shape,e,t,a.dtype),o=n.makeTensorInfo(s,a.dtype);return n.texData.get(o.dataId).values=r,o}return t=s?new AS(Fu,a.shape,i.shape,!1):new Aw(Fh,a.shape,i.shape),n.runWebGLProgram(t,[a,i],a.dtype)}},{kernelName:tr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{s0:n,s1:a}=t,i=r.readSync(n.dataId),s=r.readSync(a.dataId),o=or.assertAndGetBroadcastShape(Array.from(i),Array.from(s));return r.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},{kernelName:tn,backendName:"webgl",kernelFunc:function e(t){let{inputs:r,backend:n,attrs:a}=t,{x:i}=r,{dtype:s}=a;if("complex64"===s){if("complex64"===i.dtype)return AI({inputs:{x:i},backend:n});let t=hK(i.shape),r=e({inputs:{x:i},backend:n,attrs:{dtype:"float32"}}),a=AC({inputs:{real:r,imag:t},backend:n});return t.dispose(),n.disposeIntermediateTensorInfo(r),a}if("complex64"===i.dtype){let t=Fd({inputs:{input:i},backend:n}),r=e({inputs:{x:t},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(t),r}if(!ny.hasEncodingLoss(i.dtype,s)){let e=AI({inputs:{x:i},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}if(n.shouldExecuteOnCPU([i])){let[e,t,r]=Rg(n.texData.get(i.dataId).values,i.shape,i.dtype,s);return n.makeTensorInfo(e,t,r)}if("int32"===s){let e=new Ai(i.shape,"return float(int(x));"),t=n.runWebGLProgram(e,[i],"int32");return{dataId:t.dataId,shape:t.shape,dtype:t.dtype}}if("bool"===s){let e=n.makeTensorInfo([],"bool",ny.getTypedArrayFromDType("bool",1)),t=Fp({inputs:{a:i,b:e},backend:n});return n.disposeIntermediateTensorInfo(e),t}throw Error(`Error in Cast: failed to cast ${i.dtype} to ${s}`)}},{kernelName:ta,backendName:"webgl",kernelFunc:Ff},{kernelName:ti,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{clipValueMin:s,clipValueMax:o}=a;return t=e_.getBool("WEBGL_PACK_CLIP")?new Fg(i.shape):new Fm(i.shape),n.runWebGLProgram(t,[i],i.dtype,[[s],[o]])}},{kernelName:ts,backendName:"webgl",kernelFunc:AC},{kernelName:to,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t,a=r.texData.get(n.dataId),i=new Fy(n.shape),s=[Fb(n,a.complexTensorInfos.real),Fb(n,a.complexTensorInfos.imag)];return r.runWebGLProgram(i,s,s[0].dtype)}},{kernelName:tl,backendName:"webgl",kernelFunc:FS},{kernelName:tu,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s}=r,{strides:o,pad:l,dataFormat:u,dilations:h,dimRoundingMode:p}=a,d=or.convertConv2DDataFormat(u),c=or.computeConv2DInfo(i.shape,s.shape,o,h,l,p,!1,d);if(1===c.filterHeight&&1===c.filterWidth&&1===c.dilationHeight&&1===c.dilationWidth&&1===c.strideHeight&&1===c.strideWidth&&("SAME"===c.padInfo.type||"VALID"===c.padInfo.type))t=FE({x:i,filter:s,convInfo:c,backend:n});else if(c.strideWidth<=2&&"channelsLast"===d&&e_.getBool("WEBGL_EXP_CONV")){let e=new FN(c),r=[[c.padInfo.top,c.padInfo.left],[c.strideHeight,c.strideWidth],[c.dilationHeight,c.dilationWidth],[c.inHeight,c.inWidth]];t=n.runWebGLProgram(e,[i,s],"float32",r)}else if(e_.getBool("WEBGL_CONV_IM2COL"))t=FR({x:i,filter:s,convInfo:c,backend:n});else{let e=new FI(c);t=n.runWebGLProgram(e,[i,s],"float32")}let f=AP({inputs:{x:t},backend:n,attrs:{shape:c.outShape}});return n.disposeIntermediateTensorInfo(t),f}},{kernelName:th,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:h}=n,p=or.convertConv2DDataFormat(l),d=new FA(or.computeConv2DInfo(a.shape,h,s,1,o,u,!1,p));return r.runWebGLProgram(d,[a,i],"float32")}},{kernelName:tp,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{inputShape:s,strides:o,pad:l,dataFormat:u,dimRoundingMode:h}=n,p=or.convertConv2DDataFormat(u),d=or.computeConv2DInfo(s,i.shape,o,1,l,h,!1,p);if(e_.getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===p){let e=[[d.strideHeight,d.strideWidth]],t=new FO(d);return r.runWebGLProgram(t,[a,i],"float32",e)}{let e=new FF(d);return r.runWebGLProgram(e,[a,i],"float32")}}},{kernelName:td,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,filter:i}=t,{strides:s,pad:o,dilations:l}=n,u=new FC(or.computeConv3DInfo(a.shape,i.shape,s,l,o));return r.runWebGLProgram(u,[a,i],"float32")}},{kernelName:tc,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,pad:o,filterShape:l}=n,u=new F_(or.computeConv3DInfo(a.shape,l,s,1,o));return r.runWebGLProgram(u,[a,i],"float32")}},{kernelName:tf,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{pad:s,strides:o,inputShape:l}=n,u=new FD(or.computeConv3DInfo(l,i.shape,o,1,s));return r.runWebGLProgram(u,[a,i],"float32")}},{kernelName:"Cos",backendName:"webgl",kernelFunc:FM},{kernelName:tm,backendName:"webgl",kernelFunc:Fz},{kernelName:tb,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{image:a,boxes:i,boxInd:s}=t,{cropSize:o,method:l,extrapolationValue:u}=n,h=new FP(a.shape,i.shape,o,l,u);return r.runWebGLProgram(h,[a,i,s],"float32")}},{kernelName:tg,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;return FU(I.Prod,a,r,i,s,o)}},{kernelName:ty,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{axis:i,exclusive:s,reverse:o}=n;return FU(I.Sum,a,r,i,s,o)}},{kernelName:tx,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,weights:i}=t,{size:s,binaryOutput:o}=n;if(1===a.shape.length){let e=Rc(r.readSync(a.dataId),r.readSync(i.dataId),i.dtype,i.shape,s);return r.makeTensorInfo([s],i.dtype,e)}if(2===a.shape.length){let e=Rf(r.bufferSync(a),r.bufferSync(i),s,o);return r.makeTensorInfo(e.shape,i.dtype,e.values)}throw Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},{kernelName:tv,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockSize:i,dataFormat:s}=n,o=a.shape[0],l="NHWC"===s?a.shape[1]:a.shape[2],u="NHWC"===s?a.shape[2]:a.shape[3],h="NHWC"===s?a.shape[3]:a.shape[1],p=l*i,d=u*i,c=h/(i*i),f=new FV("NHWC"===s?[o,p,d,c]:[o,c,p,d],i,s);return r.runWebGLProgram(f,[a],a.dtype)}},{kernelName:tw,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s}=r,{strides:o,pad:l,dilations:u,dimRoundingMode:h}=a,p=u;null==p&&(p=[1,1]),ny.assert(or.eitherStridesOrDilationsAreOne(o,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${p}'`);let d=or.computeConv2DInfo(i.shape,s.shape,o,p,l,h,!0);t=e_.getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new FH(d):new FG(d);let c=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];return n.runWebGLProgram(t,[i,s],"float32",c)}},{kernelName:tk,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,dy:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,filterShape:h}=n,p=new Fj(or.computeConv2DInfo(a.shape,h,s,o,l,u,!0));return r.runWebGLProgram(p,[a,i],"float32")}},{kernelName:tS,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,filter:i}=t,{strides:s,dilations:o,pad:l,dimRoundingMode:u,inputShape:h}=n,p=new FK(or.computeConv2DInfo(h,i.shape,s,o,l,u,!0));return r.runWebGLProgram(p,[a,i],"float32")}},{kernelName:tI,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n}=t,a=[...n.shape,...n.shape],i=ny.sizeFromShape(n.shape),s=AP({inputs:{x:n},backend:r,attrs:{shape:[i]}}),o=new Fq(i),l=r.runWebGLProgram(o,[s],s.dtype),u=AP({inputs:{x:l},backend:r,attrs:{shape:a}});return r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(l),u}},{kernelName:tC,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s}=r,{strides:o,pad:l,dilations:u}=a,h=or.computeDilation2DInfo(i.shape,s.shape,o,l,"NHWC",u),p=new FX(h),d=AP({inputs:{x:t=n.runWebGLProgram(p,[i,s],"float32")},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(t),d}},{kernelName:tR,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{equation:a}=n,{allDims:i,summedDims:s,idDims:o}=or.decodeEinsumEquation(a,t.length);or.checkEinsumDimSizes(i.length,o,t);let{path:l,steps:u}=or.getEinsumComputePath(s,o),h=u.length,p=null,d=i.length,c=[];for(let e=0;e<h;++e){for(let n of u[e]){let e,{permutationIndices:a,expandDims:i}=or.getEinsumPermutation(d,o[n]);or.isIdentityPermutation(a)?e=t[n]:(e=Aj({inputs:{x:t[n]},backend:r,attrs:{perm:a}}),c.push(e));let s=e.shape.slice();for(let e=0;e<i.length;++e)s.splice(i[e],0,1);ny.arraysEqual(e.shape,s)||(e=AP({inputs:{x:e},backend:r,attrs:{shape:s}}),c.push(e)),null===p?p=e:(p=Az({inputs:{a:e,b:p},backend:r}),c.push(p))}e<h-1&&(l[e]>=0&&(p=AH({inputs:{x:p},backend:r,attrs:{axis:l[e]-(i.length-d),keepDims:!1}}),c.push(p)),d--)}for(let e of c)e!==p&&r.disposeIntermediateTensorInfo(e);return p}},{kernelName:"Elu",backendName:"webgl",kernelFunc:FY},{kernelName:tA,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r}=e,{dy:n,y:a}=t,i=e_.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new AS(FZ,n.shape,a.shape):new Aw("return (b >= 0.0) ? a : a * (b + 1.0);",n.shape,a.shape);return r.runWebGLProgram(i,[n,a],n.dtype)}},{kernelName:tF,backendName:"webgl",kernelFunc:FQ},{kernelName:"Erf",backendName:"webgl",kernelFunc:FJ},{kernelName:"Exp",backendName:"webgl",kernelFunc:F0},{kernelName:t_,backendName:"webgl",kernelFunc:F1},{kernelName:tD,backendName:"webgl",kernelFunc:F3},{kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t;return F6(n,!1,r)}},{kernelName:tO,backendName:"webgl",kernelFunc:F8},{kernelName:tM,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{let{image:r}=e,n=new F7(r.shape);return t.runWebGLProgram(n,[r],r.dtype)}},{kernelName:tz,backendName:"webgl",kernelFunc:_e},{kernelName:tP,backendName:"webgl",kernelFunc:_t},{kernelName:na,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{pixels:a}=t,{numChannels:i}=n,s="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,h]=s?[a.videoWidth,a.videoHeight]:[a.width,a.height],p=[h,u],d=[h,u,i];if(o||s){let e=e_.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==l||e!==_a)&&(_a=e,l=document.createElement("canvas").getContext("2d",{willReadFrequently:_a})),l.canvas.width=u,l.canvas.height=h,l.drawImage(a,0,0,u,h),a=l.canvas}let c=r.makeTensorInfo(p,"int32");r.texData.get(c.dataId).usage=k.PIXELS,r.gpgpu.uploadPixelDataToTexture(r.getTexture(c.dataId),a);let f=e_.getBool("WEBGL_PACK")?new _n(d):new _r(d),m=r.runWebGLProgram(f,[c],"int32");return r.disposeData(c.dataId),m}},{kernelName:no,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s,bias:o,preluActivationWeights:l}=r,{strides:u,pad:h,dataFormat:p,dilations:d,dimRoundingMode:c,activation:f,leakyreluAlpha:m}=a,g=or.convertConv2DDataFormat(p),y=or.computeConv2DInfo(i.shape,s.shape,u,d,h,c,!1,g),b=[],x=null!=o,v=null!=l,w="leakyrelu"===f,k=()=>{let e=[i,s],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){let t=AP({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(o,p)),v&&e.push(t(l,p)),w){let t=n.makeTensorInfo([],"float32",ny.createScalarValue(m,"float32"));e.push(t),b.push(t)}return e};if(1===y.filterHeight&&1===y.filterWidth&&1===y.dilationHeight&&1===y.dilationWidth&&1===y.strideHeight&&1===y.strideWidth&&("SAME"===y.padInfo.type||"VALID"===y.padInfo.type))t=FE({x:i,filter:s,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else if(y.strideWidth<=2&&"channelsLast"===g&&e_.getBool("WEBGL_EXP_CONV")){let e=new FN(y,x,f?A_(f,!0):null,v,w),r=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],a=k();t=n.runWebGLProgram(e,a,"float32",r)}else if(e_.getBool("WEBGL_CONV_IM2COL"))t=FR({x:i,filter:s,convInfo:y,backend:n,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else{let e=new FI(y,x,f?A_(f,!1):null,v,w),r=k();t=n.runWebGLProgram(e,r,"float32")}let S=AP({inputs:{x:t},backend:n,attrs:{shape:y.outShape}});return b.push(t),b.forEach(e=>n.disposeIntermediateTensorInfo(e)),S}},{kernelName:nl,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i,filter:s,bias:o,preluActivationWeights:l}=r,{strides:u,pad:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=a,m=[],g=p;null==g&&(g=[1,1]),ny.assert(or.eitherStridesOrDilationsAreOne(u,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`);let y=or.computeConv2DInfo(i.shape,s.shape,u,g,h,d,!0),b=e_.getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=c?A_(c,b):null,v=[i,s],w=null!=o,k=null!=l,S="leakyrelu"===c;if(w&&v.push(o),k&&v.push(l),S){let e=n.makeTensorInfo([],"float32",ny.createScalarValue(f,"float32"));v.push(e),m.push(e)}t=b?new FH(y,w,x,k,S):new FG(y,w,x,k,S);let I=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],C=n.runWebGLProgram(t,v,"float32",I);return m.forEach(e=>n.disposeIntermediateTensorInfo(e)),C}},{kernelName:tW,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{params:n,indices:a}=t,i=a.shape,s=i[i.length-1],o=ny.sizeFromShape(n.shape),[l,u,h,p]=or.prepareAndValidate(n,a),d=AP({inputs:{x:a},backend:r,attrs:{shape:[u,s]}}),c=AP({inputs:{x:n},backend:r,attrs:{shape:[ny.sizeFromShape(n.shape)/h,h]}});if(r.shouldExecuteOnCPU([n,a])||"string"===n.dtype){let e=RS(r.readSync(a.dataId),r.bufferSync(n),n.dtype,u,s,h,p,n.shape,o);return r.makeTensorInfo(l,n.dtype,e.values)}let f=new _i(s,p,[u,h],n.shape),m=r.runWebGLProgram(f,[c,d],c.dtype),g=AP({inputs:{x:m},backend:r,attrs:{shape:l}});return r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(m),g}},{kernelName:tB,backendName:"webgl",kernelFunc:_o},{kernelName:tU,backendName:"webgl",kernelFunc:_l},{kernelName:tV,backendName:"webgl",kernelFunc:_u},{kernelName:tG,backendName:"webgl",kernelFunc:AI},{kernelName:tH,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{input:n}=t;return F6(n,!0,r)}},{kernelName:tj,backendName:"webgl",kernelFunc:Fk},{kernelName:tK,backendName:"webgl",kernelFunc:_h},{kernelName:tq,backendName:"webgl",kernelFunc:_p},{kernelName:tX,backendName:"webgl",kernelFunc:_d},{kernelName:tY,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{alpha:i}=n,s=r.makeTensorInfo([],"float32",ny.createScalarValue(i,"float32")),o=e_.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new AS(AT,a.shape,s.shape):new Aw(AN,a.shape,s.shape),l=r.runWebGLProgram(o,[a,s],"float32");return r.disposeIntermediateTensorInfo(s),l}},{kernelName:tZ,backendName:"webgl",kernelFunc:_c},{kernelName:tQ,backendName:"webgl",kernelFunc:_f},{kernelName:tJ,backendName:"webgl",kernelFunc:function(e){let{backend:t,attrs:r}=e,{start:n,stop:a,num:i}=r,s=RE(n,a,i);return t.makeTensorInfo([s.length],"float32",s)}},{kernelName:"Log",backendName:"webgl",kernelFunc:_m},{kernelName:t0,backendName:"webgl",kernelFunc:_g},{kernelName:t1,backendName:"webgl",kernelFunc:_y},{kernelName:t2,backendName:"webgl",kernelFunc:_b},{kernelName:t3,backendName:"webgl",kernelFunc:_x},{kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{depthRadius:i,bias:s,alpha:o,beta:l}=n,u=e_.getBool("WEBGL_PACK_NORMALIZATION")?new _w(a.shape,i,s,o,l):new _v(a.shape,i,s,o,l);return r.runWebGLProgram(u,[a],a.dtype)}},{kernelName:t4,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a,y:i,dy:s}=t,{depthRadius:o,bias:l,alpha:u,beta:h}=n,p=new _k(a.shape,o,l,u,h);return r.runWebGLProgram(p,[a,i,s],a.dtype)}},{kernelName:"Max",backendName:"webgl",kernelFunc:_S},{kernelName:t6,backendName:"webgl",kernelFunc:_I},{kernelName:t5,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t;EL(a,"maxPool");let{filterSize:i,strides:s,pad:o,dimRoundingMode:l}=n;ny.assert(or.eitherStridesOrDilationsAreOne(s,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '1'`);let u=or.computePool2DInfo(a.shape,i,s,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&ny.arraysEqual(u.inShape,u.outShape))return AI({inputs:{x:a},backend:r});let h=new A9(u,"max",!1);return r.runWebGLProgram(h,[a],a.dtype)}},{kernelName:t7,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{filterSize:i,strides:s,pad:o,dataFormat:l,dimRoundingMode:u}=n,h=new Fe(or.computePool3DInfo(a.shape,i,s,[1,1,1],o,u,l),"max",!1);return r.runWebGLProgram(h,[a],a.dtype)}},{kernelName:t9,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i}=t,{filterSize:s,strides:o,pad:l,dimRoundingMode:u}=n,h=or.computePool3DInfo(i.shape,s,o,[1,1,1],l,u),p=new Fe(h,"max",!0),d=r.runWebGLProgram(p,[i],i.dtype),c=new _N(h),f=r.runWebGLProgram(c,[a,d],i.dtype);return r.disposeIntermediateTensorInfo(d),f}},{kernelName:t8,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{dy:a,input:i,output:s}=t;EL([i,s],"maxPoolGrad");let{filterSize:o,strides:l,pad:u,dimRoundingMode:h}=n,p=or.computePool2DInfo(i.shape,o,l,1,u,h),d=new A9(p,"max",!0),c=r.runWebGLProgram(d,[i],i.dtype),f=new _C(p),m=r.runWebGLProgram(f,[a,c],i.dtype);return r.disposeIntermediateTensorInfo(c),m}},{kernelName:re,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:n}=e,{filterSize:a,strides:i,pad:s,includeBatchInIndex:o}=t;ny.assert(4===n.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${n.shape.length}.`);let l=[1,1];ny.assert(or.eitherStridesOrDilationsAreOne(i,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${l}'`);let u=or.computePool2DInfo(n.shape,a,i,l,s),[h,p]=function(e,t,r,n){let a=new A9(r,"max",!1),i=n.runWebGLProgram(a,[e],"float32");return a=new A9(r,"max",!0,!0,t),[i,n.runWebGLProgram(a,[e],"float32")]}(n,o,u,r);return[h,p]}},{kernelName:rt,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{x:n}=e,{keepDims:a,axis:i}=t,s=n.shape.length,o=ny.parseAxisParam(i,n.shape),l=o,u=or.getAxesPermutation(l,s),h=null!=u,p=r.shouldExecuteOnCPU([n]),d=[],c=n;if(h){if(p){let e=r.texData.get(c.dataId).values,t=Array(s);for(let e=0;e<t.length;e++)t[e]=n.shape[u[e]];let a=R6(e,n.shape,n.dtype,u,t);c=r.makeTensorInfo(t,n.dtype),r.texData.get(c.dataId).values=a}else c=AG(n,u,r);d.push(c),l=or.getInnerMostAxes(l.length,s)}or.assertAxesAreInnerMostDims("sum",l,s);let[f,m]=or.computeOutAndReduceShapes(c.shape,l),g=f;a&&(g=or.expandShapeToKeepDim(f,o));let y=function(e,t,r,n){let a=ny.sizeFromShape(t),i=ny.sizeFromShape(e.shape),s=AP({inputs:{x:e},attrs:{shape:[i/a,a]},backend:n}),o=AW(s,"float32","mean",n),l=AP({inputs:{x:o},attrs:{shape:r},backend:n});return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),l}(c,m,g,r);for(let e of d)r.disposeIntermediateTensorInfo(e);return y}},{kernelName:"Min",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{axis:s,keepDims:o}=a,l=i.shape.length,u=ny.parseAxisParam(s,i.shape),h=u,p=or.getAxesPermutation(h,l),d=i;null!=p&&(d=Aj({inputs:{x:i},backend:n,attrs:{perm:p}}),h=or.getInnerMostAxes(h.length,i.shape.length)),or.assertAxesAreInnerMostDims("min",h,l);let[c,f]=or.computeOutAndReduceShapes(d.shape,h),m=AP({inputs:{x:d},backend:n,attrs:{shape:[-1,ny.sizeFromShape(f)]}}),g=AW(m,m.dtype,"min",n);return t=o?AP({inputs:{x:g},backend:n,attrs:{shape:or.expandShapeToKeepDim(c,u)}}):AP({inputs:{x:g},backend:n,attrs:{shape:c}}),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=p&&n.disposeIntermediateTensorInfo(d),t}},{kernelName:rr,backendName:"webgl",kernelFunc:_T},{kernelName:rn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:r})=>{let{x:n}=e,{paddings:a,mode:i}=r,s=e_.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _E(n.shape,a,i):new _$(n.shape,a,i);return t.runWebGLProgram(s,[n],n.dtype)}},{kernelName:"Mod",backendName:"webgl",kernelFunc:_R},{kernelName:ra,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{logits:a}=t,{numSamples:i,seed:s,normalized:o}=n,l=o?a:_O({inputs:{logits:a},backend:r,attrs:{dim:a.shape.length-1}}),u=new _A(l.shape[0],l.shape[1],i),h=r.runWebGLProgram(u,[l],"int32",[[s]]);return o||r.disposeIntermediateTensorInfo(l),h}},{kernelName:ri,backendName:"webgl",kernelFunc:Az},{kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n}=e,{x:a}=r;if(n.shouldExecuteOnCPU([a])){let[e,t]=RO(n.texData.get(a.dataId).values,a.shape,a.dtype);return n.makeTensorInfo(t,a.dtype,e)}return t=e_.getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Af(a.shape,_z):new Ai(a.shape,_M),n.runWebGLProgram(t,[a],a.dtype)}},{kernelName:ro,backendName:"webgl",kernelFunc:function(e){or.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l}=n,{selectedIndices:u}=_P(r.readSync(a.dataId),r.readSync(i.dataId),s,o,l);return r.makeTensorInfo([u.length],"int32",new Int32Array(u))}},{kernelName:rl,backendName:"webgl",kernelFunc:function(e){or.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=n,{selectedIndices:h,validOutputs:p}=_L(r.readSync(a.dataId),r.readSync(i.dataId),s,o,l,u);return[r.makeTensorInfo([h.length],"int32",new Int32Array(h)),r.makeTensorInfo([],"int32",new Int32Array([p]))]}},{kernelName:ru,backendName:"webgl",kernelFunc:function(e){or.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:r,attrs:n}=e,{boxes:a,scores:i}=t,{maxOutputSize:s,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=n,h=r.readSync(a.dataId),{selectedIndices:p,selectedScores:d}=_B(h,r.readSync(i.dataId),s,o,l,u);return[r.makeTensorInfo([p.length],"int32",new Int32Array(p)),r.makeTensorInfo([d.length],"float32",new Float32Array(d))]}},{kernelName:rs,backendName:"webgl",kernelFunc:Fp},{kernelName:rp,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{indices:a}=t,{dtype:i,depth:s,onValue:o,offValue:l}=n,u=ny.sizeFromShape(a.shape),h=new _W(u,s,o,l),p=AP({inputs:{x:a},backend:r,attrs:{shape:[u]}}),d=r.runWebGLProgram(h,[p],i);r.disposeIntermediateTensorInfo(p);let c=AP({inputs:{x:d},backend:r,attrs:{shape:[...a.shape,s]}});return r.disposeIntermediateTensorInfo(d),c}},{kernelName:rh,backendName:"webgl",kernelFunc:function e(t){let{inputs:r,backend:n}=t,{x:a}=r;if("string"===a.dtype)throw Error("onesLike is not supported under string dtype");if("complex64"!==a.dtype)return F8({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:n});{let t=Fd({inputs:{input:a},backend:n}),r=e({inputs:{x:t},backend:n}),i=Fk({inputs:{input:a},backend:n}),s=_U({inputs:{x:i},backend:n}),o=AC({inputs:{real:r,imag:s},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(s),o}}},{kernelName:rd,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{axis:a}=n;if(1===t.length)return F1({inputs:{input:t[0]},backend:r,attrs:{dim:a}});let i=t[0].shape,s=t[0].dtype;t.forEach(e=>{ny.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),ny.assert(s===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let o=[],l=FS({inputs:t.map(e=>{let t=F1({inputs:{input:e},backend:r,attrs:{dim:a}});return o.push(t),t}),backend:r,attrs:{axis:a}});return o.forEach(e=>r.disposeIntermediateTensorInfo(e)),l}},{kernelName:rc,backendName:"webgl",kernelFunc:_H},{kernelName:"Pow",backendName:"webgl",kernelFunc:_j},{kernelName:rf,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{x:n,alpha:a}=t,i=e_.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new AS(AE,n.shape,a.shape):new Aw(A$,n.shape,a.shape);return r.runWebGLProgram(i,[n,a],"float32")}},{kernelName:rm,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{axis:s,keepDims:o}=a,l=i.shape.length,u=[],h=ny.parseAxisParam(s,i.shape),p=h,d=or.getAxesPermutation(p,l),c=i;if(null!=d&&(c=Aj({inputs:{x:i},backend:n,attrs:{perm:d}}),p=or.getInnerMostAxes(p.length,l),u.push(c)),or.assertAxesAreInnerMostDims("prod",p,l),n.shouldExecuteOnCPU([c])){let e=n.texData.get(c.dataId).values,{outVals:r,outShape:a,outDtype:i}=Rz(c.shape,c.dtype,e,p);t=n.makeTensorInfo(a,i,r)}else{let[e,r]=or.computeOutAndReduceShapes(c.shape,p),a=AP({inputs:{x:c},backend:n,attrs:{shape:[-1,ny.sizeFromShape(r)]}}),s=AW(a,am(i.dtype),"prod",n);t=AP({inputs:{x:s},backend:n,attrs:{shape:e}}),u.push(a),u.push(s)}if(o){u.push(t);let e=or.expandShapeToKeepDim(t.shape,h);t=AP({inputs:{x:t},backend:n,attrs:{shape:e}})}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),t}},{kernelName:rg,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{paramsNestedSplits:a,paramsDenseValues:i,indices:s}=t,{outputRaggedRank:o}=n,l=a.map(e=>r.readSync(e.dataId)),u=a.map(e=>e.shape),h=r.readSync(i.dataId),p=r.readSync(s.dataId),[d,c,f]=RP(l,u,h,i.shape,i.dtype,p,s.shape,o),m=d.map(e=>r.makeTensorInfo([e.length],"int32",e)),g=r.makeTensorInfo(f,i.dtype,c);return m.concat([g])}},{kernelName:ry,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{starts:n,limits:a,deltas:i}=t,s=r.readSync(n.dataId),o=r.readSync(a.dataId),l=r.readSync(i.dataId),[u,h]=RL(s,n.shape,n.dtype,o,a.shape,l,i.shape);return[r.makeTensorInfo([u.length],"int32",u),r.makeTensorInfo([h.length],n.dtype,h)]}},{kernelName:rb,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{shape:a,values:i,defaultValue:s,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=n,u=r.readSync(a.dataId),h=r.readSync(i.dataId),p=r.readSync(s.dataId),d=o.map(e=>r.readSync(e.dataId)),c=o.map(e=>e.shape),[f,m]=RB(u,a.shape,h,i.shape,i.dtype,p,s.shape,d,c,l);return r.makeTensorInfo(f,i.dtype,m)}},{kernelName:rx,backendName:"webgl",kernelFunc:_K},{kernelName:rv,backendName:"webgl",kernelFunc:Fd},{kernelName:tE,backendName:"webgl",kernelFunc:_F},{kernelName:rw,backendName:"webgl",kernelFunc:_q},{kernelName:rk,backendName:"webgl",kernelFunc:_X},{kernelName:r$,backendName:"webgl",kernelFunc:_Y},{kernelName:rS,backendName:"webgl",kernelFunc:AP},{kernelName:rN,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:s,size:o}=n,[l,u]=o,h=e_.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new _Q(a.shape,l,u,i,s):new _Z(a.shape,l,u,i,s);return r.runWebGLProgram(h,[a],"float32")}},{kernelName:rT,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n,o=new _J(i.shape,a.shape,s);return r.runWebGLProgram(o,[i],i.dtype)}},{kernelName:rI,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:s,size:o}=n,[l,u]=o,h=e_.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new _1(a.shape,l,u,i,s):new _0(a.shape,l,u,i,s);return r.runWebGLProgram(h,[a],a.dtype)}},{kernelName:rC,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{images:a,dy:i}=t,{alignCorners:s}=n,o=new _2(i.shape,a.shape,s);return r.runWebGLProgram(o,[i],i.dtype)}},{kernelName:rE,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{dims:i}=n,s=a.shape.length,o=ny.parseAxisParam(i,a.shape);if(0===s)return AI({inputs:{x:a},backend:r});let l=e_.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _4(a.shape,o):new _3(a.shape,o);return r.runWebGLProgram(l,[a],a.dtype)}},{kernelName:ni,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:r})=>{let{image:n}=e,{radians:a,fillValue:i,center:s}=t,o=new _6(n.shape,i),[l,u]=or.getImageCenter(s,n.shape[1],n.shape[2]),h=[[l,u,Math.sin(a),Math.cos(a)]];return r.runWebGLProgram(o,[n],n.dtype,h)}},{kernelName:rR,backendName:"webgl",kernelFunc:_5},{kernelName:rA,backendName:"webgl",kernelFunc:_8},{kernelName:rF,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{indices:i,updates:s}=r,{shape:o}=a,{sliceRank:l,numUpdates:u,sliceSize:h,strides:p,outputSize:d}=or.calculateShapes(s,i,o),c=[d/h,h];if(0===d)return n.makeTensorInfo(o,i.dtype);let f=AP({inputs:{x:i},backend:n,attrs:{shape:[u,l]}}),m=AP({inputs:{x:s},backend:n,attrs:{shape:[u,h]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0]));t=e_.getBool("WEBGL_PACK")?new _9(u,l,f.shape.length,m.shape.length,p,c):new _7(u,l,f.shape.length,m.shape.length,p,c);let y=n.runWebGLProgram(t,[m,f,g],m.dtype),b=AP({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(g),b}},{kernelName:rD,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{sortedSequence:a,values:i}=t,{side:s}=n,o=new De(a.shape[0],a.shape[1],i.shape[1],s),l=[[a.shape[1]]];return r.runWebGLProgram(o,[a,i],"int32",l)}},{kernelName:rO,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{condition:n,t:a,e:i}=t,s=new Dt(n.shape.length,a.shape,a.shape.length);return r.runWebGLProgram(s,[n,a,i],af(a.dtype,i.dtype))}},{kernelName:rM,backendName:"webgl",kernelFunc:Dr},{kernelName:rB,backendName:"webgl",kernelFunc:Dn},{kernelName:rL,backendName:"webgl",kernelFunc:Da},{kernelName:"Sin",backendName:"webgl",kernelFunc:Di},{kernelName:rP,backendName:"webgl",kernelFunc:Ds},{kernelName:rz,backendName:"webgl",kernelFunc:Fl},{kernelName:rH,backendName:"webgl",kernelFunc:_O},{kernelName:rW,backendName:"webgl",kernelFunc:Do},{kernelName:rV,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{blockShape:i,paddings:s}=n;ny.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let o=i.reduce((e,t)=>e*t),l=[[0,0]];l.push(...s);for(let e=1+i.length;e<a.shape.length;++e)l.push([0,0]);let u=[],h=_H({inputs:{x:a},backend:r,attrs:{paddings:l,constantValue:0}}),p=or.getReshaped(h.shape,i,o,!1),d=or.getPermuted(p.length,i.length,!1),c=or.getReshapedPermuted(h.shape,i,o,!1),f=AP({inputs:{x:h},backend:r,attrs:{shape:p}}),m=Aj({inputs:{x:f},backend:r,attrs:{perm:d}}),g=AP({inputs:{x:m},backend:r,attrs:{shape:c}});return u.push(h),u.push(f),u.push(m),u.forEach(e=>r.disposeIntermediateTensorInfo(e)),g}},{kernelName:rj,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{indices:n,values:a,denseShape:i,defaultValue:s}=t;if(1!==i.shape.length)throw Error(`Dense shape must be a vector, saw:
         ${i.shape}`);if(2!==n.shape.length)throw Error(`Indices must be a matrix, saw:
         ${n.shape}`);if(1!==a.shape.length)throw Error(`Values must be a vector, saw:
         ${a.shape}`);if(0!==s.shape.length)throw Error(`Default value must be a scalar, saw:
        ${s.shape}`);let o=r.readSync(n.dataId),l=r.readSync(a.dataId),u=r.readSync(i.dataId),h=r.readSync(s.dataId)[0],[p,d,c,f,m]=RK(o,n.shape,n.dtype,l,a.dtype,u,h);return[r.makeTensorInfo(d,n.dtype,p),r.makeTensorInfo([d[0]],a.dtype,c),r.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),r.makeTensorInfo([m.length],n.dtype,new Int32Array(m))]}},{kernelName:rK,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{inputIndices:n,inputShape:a,newShape:i}=t;if(2!==n.shape.length)throw Error(`Input indices should be a matrix but received shape ${n.shape}`);if(1!==a.shape.length)throw Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==i.shape.length)throw Error(`Target shape should be a vector but received shape ${i.shape}`);let s=Array.from(r.readSync(a.dataId)),o=r.readSync(n.dataId),l=Array.from(r.readSync(i.dataId)),[u,h,p]=Rq(o,n.shape,n.dtype,s,l);return[r.makeTensorInfo(h,n.dtype,u),r.makeTensorInfo([p.length],i.dtype,new Int32Array(p))]}},{kernelName:rq,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;if(n.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
              ${a.shape}`);if(1!==i.shape.length)throw Error(`Segment ids should be a vector but received shape
              ${i.shape}`);let s=r.readSync(n.dataId),o=r.readSync(a.dataId),l=r.readSync(i.dataId),[u,h]=RX(s,n.shape,n.dtype,o,l,!0);return r.makeTensorInfo(h,n.dtype,u)}},{kernelName:rX,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r}=e,{data:n,indices:a,segmentIds:i}=t;if(n.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
             ${a.shape}`);if(1!==i.shape.length)throw Error(`Segment ids should be a vector but received shape
             ${i.shape}`);let s=r.readSync(n.dataId),o=r.readSync(a.dataId),l=r.readSync(i.dataId),[u,h]=RX(s,n.shape,n.dtype,o,l);return r.makeTensorInfo(h,n.dtype,u)}},{kernelName:rY,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{sparseIndices:a,sparseValues:i,defaultValue:s}=t,{outputShape:o}=n,{sliceRank:l,numUpdates:u,sliceSize:h,strides:p,outputSize:d}=or.calculateShapes(i,a,o);if("string"===i.dtype){let e=r.bufferSync(a),t=RV(e,r.bufferSync(i),o,d,h,u,l,p,ny.decodeString(r.readSync(s.dataId)[0]),!1);return r.makeTensorInfo(o,t.dtype,t.values)}let c=new _7(u,l,a.shape.length,i.shape.length,p,[d,1],!1),f=r.runWebGLProgram(c,[i,a,s],i.dtype),m=AP({inputs:{x:f},backend:r,attrs:{shape:o}});return r.disposeIntermediateTensorInfo(f),m}},{kernelName:rG,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{numOrSizeSplits:i,axis:s}=n,o=ny.parseAxisParam(s,a.shape)[0],l=or.prepareSplitSize(a,i,o),u=Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{let t=[...h];t[o]=e;let n=Fl({inputs:{x:a},backend:r,attrs:{begin:u,size:t}});return u[o]+=e,n})}},{kernelName:rU,backendName:"webgl",kernelFunc:Du},{kernelName:rQ,backendName:"webgl",kernelFunc:Dh},{kernelName:rZ,backendName:"webgl",kernelFunc:Dd},{kernelName:rJ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t;if("string"!==a.dtype)throw Error("Input must be of datatype string");let i=r.readSync(a.dataId),s=RZ(or.fromUint8ToStringArray(i),"string",n);return r.makeTensorInfo(a.shape,"string",s)}},{kernelName:nn,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:r}){let{x:n}=e,a=As+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,i=new Ai(n.shape,a);return r.runWebGLProgram(i,[n],n.dtype)}},{kernelName:r0,backendName:"webgl",kernelFunc:function(e){let t,{inputs:r,backend:n,attrs:a}=e,{x:i}=r,{begin:s,end:o,strides:l,beginMask:u,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:c}=a,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:v,strides:w}=oM.sliceInfo(i.shape,s,o,l,u,h,p,d,c);if(g)t=AP({inputs:{x:i},backend:n,attrs:{shape:m}});else if(y||b){ny.assert(i.shape.length>=1,()=>`Input must have rank at least 1, got: ${i.shape.length}`);let e=oM.computeOutShape(x,v,w),r=Fl({inputs:{x:i},backend:n,attrs:{begin:x,size:e}});t=AP({inputs:{x:r},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(r)}else if(n.shouldExecuteOnCPU([i])){let e=n.readSync(i.dataId),r=RQ(f,so(i.shape,i.dtype,e),w,x);t=n.makeTensorInfo(m,i.dtype,r.values)}else{let e=new Dc(x,w,f);t=n.runWebGLProgram(e,[i],i.dtype)}let k=AP({inputs:{x:t},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(t),k}},{kernelName:r1,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{separator:a,nGramWidths:i,leftPad:s,rightPad:o,padWidth:l,preserveShortSequences:u}=n,{data:h,dataSplits:p}=t,[d,c]=RJ(r.readSync(h.dataId),r.readSync(p.dataId),a,i,s,o,l,u);return[r.makeTensorInfo([d.length],"string",d),r.makeTensorInfo(p.shape,"int32",c)]}},{kernelName:r2,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{skipEmpty:a}=n,{input:i,delimiter:s}=t;if("string"!==i.dtype)throw Error("Input must be of datatype string");if(1!==i.shape.length)throw Error(`Input must be a vector, got shape: ${i.shape}`);if(0!==s.shape.length)throw Error(`Delimiter must be a scalar, got shape: ${s.shape}`);let[o,l,u]=R0(r.readSync(i.dataId),r.readSync(s.dataId)[0],a),h=l.length;return[r.makeTensorInfo([h,2],"int32",o),r.makeTensorInfo([h],"string",l),r.makeTensorInfo([2],"int32",new Int32Array(u))]}},{kernelName:r3,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{numBuckets:a}=n,{input:i}=t;if("string"!==i.dtype)throw Error("Input must be of datatype string");if(a<=0)throw Error("Number of buckets must be at least 1");let s=R1(r.readSync(i.dataId),a);return r.makeTensorInfo(i.shape,"int32",s)}},{kernelName:"Sub",backendName:"webgl",kernelFunc:_D},{kernelName:"Sum",backendName:"webgl",kernelFunc:AH},{kernelName:"Tan",backendName:"webgl",kernelFunc:Df},{kernelName:r4,backendName:"webgl",kernelFunc:Dm},{kernelName:r_,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{tensor:a,indices:i,updates:s}=t,{}=n,{sliceRank:o,numUpdates:l,sliceSize:u,strides:h,outputSize:p}=or.calculateShapes(s,i,a.shape),d=[p/u,u];if(0===p)return r.makeTensorInfo(a.shape,i.dtype);let c=AP({inputs:{x:i},backend:r,attrs:{shape:[l,o]}}),f=AP({inputs:{x:s},backend:r,attrs:{shape:[l,u]}}),m=AP({inputs:{x:a},backend:r,attrs:{shape:d}}),g=new _7(l,o,c.shape.length,f.shape.length,h,d,!1,!0),y=r.runWebGLProgram(g,[f,c,m],m.dtype),b=AP({inputs:{x:y},backend:r,attrs:{shape:a.shape}});return r.disposeIntermediateTensorInfo(c),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(y),b}},{kernelName:r6,backendName:"webgl",kernelFunc:Dy},{kernelName:r5,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a}=t,{k:i,sorted:s}=n,o=e_.getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=e_.getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=a.shape,h=u[u.length-1];if(r.shouldExecuteOnCPU([a])||h<o||i>l){let[e,t]=R4(r.readSync(a.dataId),u,a.dtype,i,s);return[r.makeTensorInfo(e.shape,e.dtype,e.values),r.makeTensorInfo(t.shape,t.dtype,t.values)]}if(0===i)return u[u.length-1]=0,[r.makeTensorInfo(u,a.dtype,[]),r.makeTensorInfo(u,"int32",[])];if(1===h)return[a,F8({attrs:{shape:u,dtype:"int32",value:0},backend:r})];let p=r.texData.get(a.dataId),d=null!==p&&p.isPacked,c=d?r.unpackTensor(a):a,f=ny.sizeFromShape(u)/h,m=AP({inputs:{x:c},attrs:{shape:[f,h]},backend:r});d&&Dv(r,c);let g=Dw(i),y=Dw(h),b=null,x=()=>null===b?[m,m]:[m,b],v=(e,t,n)=>{let a=x(),i=new Db(n),s=[[h],[+(null===b)],[-1/0],[e],[t]],o=b;b=r.runWebGLProgram(i,a,"int32",s),Dv(r,o)};for(let e=1;e<g;e*=2){let t=2*e;for(let r=e;r>=1;r/=2)v(t,r,[f,y])}for(let e=y;e>g;e/=2){let t=x(),n=new Dx([f,e/2]),a=[[h],[+(null===b)],[g]],i=b;b=r.runWebGLProgram(n,t,"int32",a),Dv(r,i);let s=g/2,o=2*s;for(let e=s;e>=1;e/=2)v(o,e,b.shape)}let w=b;b=Fl({inputs:{x:b},backend:r,attrs:{begin:0,size:[f,i]}}),Dv(r,w);let k=_o({inputs:{x:m,indices:b},backend:r,attrs:{axis:1,batchDims:1}});Dv(r,m);let S=u.slice(0,-1);S.push(i),w=b,b=AP({inputs:{x:b},attrs:{shape:S},backend:r}),Dv(r,w);let I=k;return k=AP({inputs:{x:k},attrs:{shape:S},backend:r}),Dv(r,I),[k,b]}},{kernelName:r8,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{image:a,transforms:i}=t,{interpolation:s,fillMode:o,fillValue:l,outputShape:u}=n,[h,p,d,c]=a.shape,[f,m]=null!=u?u:[p,d],g=new Dk(p,d,s,o,l,[h,f,m,c]);return r.runWebGLProgram(g,[a,i],"float32")}},{kernelName:r7,backendName:"webgl",kernelFunc:Aj},{kernelName:r9,backendName:"webgl",kernelFunc:function(e){let{inputs:t,attrs:r,backend:n}=e,{axis:a}=r,{x:i}=t;EL(i,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let{outputValues:s,outputShape:o,indices:l}=R5(n.readSync(i.dataId),a,i.shape,i.dtype);return[n.makeTensorInfo(o,i.dtype,s),n.makeTensorInfo([l.length],"int32",l)]}},{kernelName:ne,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{value:a}=t,{axis:i}=n;i<0&&(i+=a.shape.length);let s=a.shape.length,o=a.shape[i],l=Array(s-1),u=0;for(let e=0;e<s;e++)e!==i&&(l[u++]=a.shape[e]);let h=[],p=Array(s).fill(0),d=a.shape.slice();d[i]=1;let c=Array(o);for(let e=0;e<c.length;e++){p[i]=e;let t=Fl({inputs:{x:a},backend:r,attrs:{begin:p,size:d}}),n=AP({inputs:{x:t},backend:r,attrs:{shape:l}});c[e]=n,h.push(t)}return h.forEach(e=>r.disposeIntermediateTensorInfo(e)),c}},{kernelName:nt,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:r,attrs:n}=e,{x:a,segmentIds:i}=t,{numSegments:s}=n,o=a.shape.length,l=[],u=0,h=or.getAxesPermutation([u],o),p=a;null!=h&&(p=Aj({inputs:{x:a},backend:r,attrs:{perm:h}}),l.push(p),u=or.getInnerMostAxes(1,o)[0]);let d=or.segment_util.computeOutShape(p.shape,u,s),c=ny.sizeFromShape([p.shape[u]]),f=AP({inputs:{x:p},backend:r,attrs:{shape:[-1,c]}});l.push(f);let m=am(a.dtype),g=(e,t,n,a,i)=>{let s=e.shape[0],o=e.shape[1],u=or.segment_util.segOpComputeOptimalWindowSize(o,i),h=new DS({windowSize:u,inSize:o,batchSize:s,numSegments:i},t),p=r.compileAndRun(h,[e,n],a);if(l.push(p),p.shape[1]===i)return p;let d=_K({backend:r,attrs:{start:0,stop:i,step:1,dtype:"float32"}}),c=Dy({inputs:{x:d},backend:r,attrs:{reps:[o/u]}});return l.push(d),l.push(c),g(p,t,c,a,i)},y=AP({inputs:{x:g(f,"unsortedSegmentSum",i,m,s)},backend:r,attrs:{shape:d}}),b=y;return null!=h&&(l.push(y),b=Aj({inputs:{x:b},backend:r,attrs:{perm:or.getUndoAxesPermutation(h)}})),l.forEach(e=>r.disposeIntermediateTensorInfo(e)),b}},{kernelName:nr,backendName:"webgl",kernelFunc:_U}])ng(e);let DI=0,DC="up";const DN=document.getElementById("video"),DT=document.getElementById("canvas"),D$=DT.getContext("2d"),DE=document.getElementById("counter");async function DR(){return DN.srcObject=await navigator.mediaDevices.getUserMedia({video:!0}),new Promise(e=>{DN.onloadedmetadata=()=>{e(DN)}})}async function DA(){let e=kv.MoveNet;u=await function(e,t){return vZ(this,void 0,void 0,function(){var r,n;return vQ(this,function(a){switch(e){case kv.PoseNet:return[2,function(e){return void 0===e&&(e=kM),vZ(this,void 0,void 0,function(){var t,r,n;return vQ(this,function(a){var i,s,o,l,u,h,p,d;switch(a.label){case 0:return"ResNet50"!==(t=function(e){var t=e||kM;if(null==t.architecture&&(t.architecture="MobileNetV1"),0>kz.indexOf(t.architecture))throw Error("Invalid architecture ".concat(t.architecture,". ")+"Should be one of ".concat(kz));if(null==t.inputResolution&&(t.inputResolution={height:257,width:257}),null==t.outputStride&&(t.outputStride=16),0>kP[t.architecture].indexOf(t.outputStride))throw Error("Invalid outputStride ".concat(t.outputStride,". ")+"Should be one of ".concat(kP[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.multiplier&&(t.multiplier=1),0>kB[t.architecture].indexOf(t.multiplier))throw Error("Invalid multiplier ".concat(t.multiplier,". ")+"Should be one of ".concat(kB[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.quantBytes&&(t.quantBytes=4),0>kW.indexOf(t.quantBytes))throw Error("Invalid quantBytes ".concat(t.quantBytes,". ")+"Should be one of ".concat(kW," ")+"for architecture ".concat(t.architecture,"."));if("MobileNetV1"===t.architecture&&32===t.outputStride&&1!==t.multiplier)throw Error("When using an output stride of 32, you must select 1 as the multiplier.");return t}(e)).architecture?[3,2]:(i=t.outputStride,s=t.quantBytes,o="model-stride".concat(i,".json"),r=4===s?k7+"float/"+o:k7+"quant".concat(s,"/")+o,[4,fY(t.modelUrl||r)]);case 1:case 3:return[2,new Se(a.sent(),t)];case 2:return l=t.outputStride,u=t.multiplier,h=t.quantBytes,p={1:"100",.75:"075",.5:"050"},d="model-stride".concat(l,".json"),n=4===h?k8+"float/".concat(p[u],"/")+d:k8+"quant".concat(h,"/").concat(p[u],"/")+d,[4,fY(t.modelUrl||n)]}})})}(void 0)];case kv.BlazePose:n=void 0,r=void 0,!1;throw Error("Expect modelConfig.runtime to be either 'tfjs' "+"or 'mediapipe', but got ".concat(n));case kv.MoveNet:return[2,function(e){return void 0===e&&(e=k$),vZ(this,void 0,void 0,function(){var t,r,n,a;return vQ(this,function(i){switch(i.label){case 0:return t=function(e){var t,r,n=null==e?k$:vY({},e);if(null==n.modelType)n.modelType="SinglePose.Lightning";else if(0>kT.indexOf(n.modelType))throw Error("Invalid architecture ".concat(n.modelType,". ")+"Should be one of ".concat(kT));if(null==n.enableSmoothing&&(n.enableSmoothing=!0),null!=n.minPoseScore&&(n.minPoseScore<0||n.minPoseScore>1))throw Error("minPoseScore should be between 0.0 and 1.0");if(null!=n.multiPoseMaxDimension&&(n.multiPoseMaxDimension%32!=0||n.multiPoseMaxDimension<32))throw Error("multiPoseMaxDimension must be a multiple of 32 and higher than 0");if("MultiPose.Lightning"===n.modelType&&null==n.enableTracking&&(n.enableTracking=!0),"MultiPose.Lightning"===n.modelType&&!0===n.enableTracking)if(null==n.trackerType&&(n.trackerType=kx.BoundingBox),n.trackerType===kx.Keypoint)null!=n.trackerConfig?((r=kD(kA,t=n.trackerConfig)).keypointTrackerParams=vY({},kA.keypointTrackerParams),null!=t.keypointTrackerParams&&(null!=t.keypointTrackerParams.keypointConfidenceThreshold&&(r.keypointTrackerParams.keypointConfidenceThreshold=t.keypointTrackerParams.keypointConfidenceThreshold),null!=t.keypointTrackerParams.keypointFalloff&&(r.keypointTrackerParams.keypointFalloff=t.keypointTrackerParams.keypointFalloff),null!=t.keypointTrackerParams.minNumberOfKeypoints&&(r.keypointTrackerParams.minNumberOfKeypoints=t.keypointTrackerParams.minNumberOfKeypoints)),n.trackerConfig=r):n.trackerConfig=kA;else{if(n.trackerType!==kx.BoundingBox)throw Error("Tracker type not supported by MoveNet");null!=n.trackerConfig?n.trackerConfig=kD(kF,n.trackerConfig):n.trackerConfig=kF}return n}(e),n=!0,t.modelUrl?(n="string"==typeof t.modelUrl&&t.modelUrl.indexOf("https://tfhub.dev")>-1,[4,fY(t.modelUrl,{fromTFHub:n})]):[3,2];case 1:return r=i.sent(),[3,4];case 2:return a=void 0,"SinglePose.Lightning"===t.modelType?a="https://tfhub.dev/google/tfjs-model/movenet/singlepose/lightning/4":"SinglePose.Thunder"===t.modelType?a="https://tfhub.dev/google/tfjs-model/movenet/singlepose/thunder/4":"MultiPose.Lightning"===t.modelType&&(a="https://tfhub.dev/google/tfjs-model/movenet/multipose/lightning/1"),[4,fY(a,{fromTFHub:n})];case 3:r=i.sent(),i.label=4;case 4:return"webgl"===aq()&&e_.set("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",0),[2,new kO(r,t)]}})})}(t)];default:throw Error("".concat(e," is not a supported model name."))}})})}(e)}async function DF(){if(h=await u.estimatePoses(DN),D$.clearRect(0,0,DT.width,DT.height),h&&h.length>0){let e=h[0].keypoints;for(let t of("up"===DC&&function(e){let t=e.find(e=>"left_shoulder"===e.name),r=e.find(e=>"left_elbow"===e.name),n=e.find(e=>"right_shoulder"===e.name),a=e.find(e=>"right_elbow"===e.name);if(t&&r&&n&&a){let e=180*Math.atan2(r.y-t.y,r.x-t.x)/Math.PI,i=180*Math.atan2(a.y-n.y,a.x-n.x)/Math.PI;return e<100&&i<100}return!1}(e)?DC="down":"down"===DC&&function(e){let t=e.find(e=>"left_shoulder"===e.name),r=e.find(e=>"left_elbow"===e.name),n=e.find(e=>"right_shoulder"===e.name),a=e.find(e=>"right_elbow"===e.name);if(t&&r&&n&&a){let e=180*Math.atan2(r.y-t.y,r.x-t.x)/Math.PI,i=180*Math.atan2(a.y-n.y,a.x-n.x)/Math.PI;return e>160&&i>160}return!1}(e)&&(DC="up",DI++,DE.innerText=`Push-ups: ${DI}`),e))t.score>.5&&(D$.beginPath(),D$.arc(t.x,t.y,5,0,2*Math.PI),D$.fillStyle="red",D$.fill());for(let t of kN.getAdjacentPairs(kv.MoveNet)){let r=e.find(e=>e.name===t[0]),n=e.find(e=>e.name===t[1]);r&&n&&r.score>.5&&n.score>.5&&(D$.beginPath(),D$.moveTo(r.x,r.y),D$.lineTo(n.x,n.y),D$.strokeStyle="green",D$.lineWidth=2,D$.stroke())}}requestAnimationFrame(DF)}!async function(){await aN.ready(),await DR(),DN.play(),await DA(),DF()}();
//# sourceMappingURL=public.6a67d6f5.js.map
